
stm32f411-littlefs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc0  0800be58  0800be58  0001be58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce18  0800ce18  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce18  0800ce18  0001ce18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce20  0800ce20  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce20  0800ce20  0001ce20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce24  0800ce24  0001ce24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800ce28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200000b4  0800cedc  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800cedc  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001245d  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ec  00000000  00000000  00032584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  00034770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df0  00000000  00000000  00035748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c2a  00000000  00000000  00036538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001296f  00000000  00000000  0004e162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc9a  00000000  00000000  00060ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f20  00000000  00000000  000ed76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f268c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be40 	.word	0x0800be40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	0800be40 	.word	0x0800be40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b984 	b.w	80005b0 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f81a 	bl	80002e8 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__popcountsi2>:
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	0883      	lsrs	r3, r0, #2
 80002ca:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002ce:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002d2:	4418      	add	r0, r3
 80002d4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002d8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002dc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002e0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002e4:	0e00      	lsrs	r0, r0, #24
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9e08      	ldr	r6, [sp, #32]
 80002ee:	460d      	mov	r5, r1
 80002f0:	4604      	mov	r4, r0
 80002f2:	460f      	mov	r7, r1
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d14a      	bne.n	800038e <__udivmoddi4+0xa6>
 80002f8:	428a      	cmp	r2, r1
 80002fa:	4694      	mov	ip, r2
 80002fc:	d965      	bls.n	80003ca <__udivmoddi4+0xe2>
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	b143      	cbz	r3, 8000316 <__udivmoddi4+0x2e>
 8000304:	fa02 fc03 	lsl.w	ip, r2, r3
 8000308:	f1c3 0220 	rsb	r2, r3, #32
 800030c:	409f      	lsls	r7, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	409c      	lsls	r4, r3
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fa1f f58c 	uxth.w	r5, ip
 800031e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000322:	0c22      	lsrs	r2, r4, #16
 8000324:	fb0e 7711 	mls	r7, lr, r1, r7
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	fb01 f005 	mul.w	r0, r1, r5
 8000330:	4290      	cmp	r0, r2
 8000332:	d90a      	bls.n	800034a <__udivmoddi4+0x62>
 8000334:	eb1c 0202 	adds.w	r2, ip, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800033c:	f080 811c 	bcs.w	8000578 <__udivmoddi4+0x290>
 8000340:	4290      	cmp	r0, r2
 8000342:	f240 8119 	bls.w	8000578 <__udivmoddi4+0x290>
 8000346:	3902      	subs	r1, #2
 8000348:	4462      	add	r2, ip
 800034a:	1a12      	subs	r2, r2, r0
 800034c:	b2a4      	uxth	r4, r4
 800034e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000352:	fb0e 2210 	mls	r2, lr, r0, r2
 8000356:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800035a:	fb00 f505 	mul.w	r5, r0, r5
 800035e:	42a5      	cmp	r5, r4
 8000360:	d90a      	bls.n	8000378 <__udivmoddi4+0x90>
 8000362:	eb1c 0404 	adds.w	r4, ip, r4
 8000366:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800036a:	f080 8107 	bcs.w	800057c <__udivmoddi4+0x294>
 800036e:	42a5      	cmp	r5, r4
 8000370:	f240 8104 	bls.w	800057c <__udivmoddi4+0x294>
 8000374:	4464      	add	r4, ip
 8000376:	3802      	subs	r0, #2
 8000378:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	2100      	movs	r1, #0
 8000380:	b11e      	cbz	r6, 800038a <__udivmoddi4+0xa2>
 8000382:	40dc      	lsrs	r4, r3
 8000384:	2300      	movs	r3, #0
 8000386:	e9c6 4300 	strd	r4, r3, [r6]
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	428b      	cmp	r3, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0xbc>
 8000392:	2e00      	cmp	r6, #0
 8000394:	f000 80ed 	beq.w	8000572 <__udivmoddi4+0x28a>
 8000398:	2100      	movs	r1, #0
 800039a:	e9c6 0500 	strd	r0, r5, [r6]
 800039e:	4608      	mov	r0, r1
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	fab3 f183 	clz	r1, r3
 80003a8:	2900      	cmp	r1, #0
 80003aa:	d149      	bne.n	8000440 <__udivmoddi4+0x158>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d302      	bcc.n	80003b6 <__udivmoddi4+0xce>
 80003b0:	4282      	cmp	r2, r0
 80003b2:	f200 80f8 	bhi.w	80005a6 <__udivmoddi4+0x2be>
 80003b6:	1a84      	subs	r4, r0, r2
 80003b8:	eb65 0203 	sbc.w	r2, r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	4617      	mov	r7, r2
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d0e2      	beq.n	800038a <__udivmoddi4+0xa2>
 80003c4:	e9c6 4700 	strd	r4, r7, [r6]
 80003c8:	e7df      	b.n	800038a <__udivmoddi4+0xa2>
 80003ca:	b902      	cbnz	r2, 80003ce <__udivmoddi4+0xe6>
 80003cc:	deff      	udf	#255	; 0xff
 80003ce:	fab2 f382 	clz	r3, r2
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	f040 8090 	bne.w	80004f8 <__udivmoddi4+0x210>
 80003d8:	1a8a      	subs	r2, r1, r2
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2101      	movs	r1, #1
 80003e4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e8:	fb07 2015 	mls	r0, r7, r5, r2
 80003ec:	0c22      	lsrs	r2, r4, #16
 80003ee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003f2:	fb0e f005 	mul.w	r0, lr, r5
 80003f6:	4290      	cmp	r0, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x124>
 80003fa:	eb1c 0202 	adds.w	r2, ip, r2
 80003fe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x122>
 8000404:	4290      	cmp	r0, r2
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2b8>
 800040a:	4645      	mov	r5, r8
 800040c:	1a12      	subs	r2, r2, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x14e>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x14c>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c2>
 8000434:	4610      	mov	r0, r2
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800043e:	e79f      	b.n	8000380 <__udivmoddi4+0x98>
 8000440:	f1c1 0720 	rsb	r7, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa05 f401 	lsl.w	r4, r5, r1
 8000452:	fa20 f307 	lsr.w	r3, r0, r7
 8000456:	40fd      	lsrs	r5, r7
 8000458:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045c:	4323      	orrs	r3, r4
 800045e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000462:	fa1f fe8c 	uxth.w	lr, ip
 8000466:	fb09 5518 	mls	r5, r9, r8, r5
 800046a:	0c1c      	lsrs	r4, r3, #16
 800046c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000470:	fb08 f50e 	mul.w	r5, r8, lr
 8000474:	42a5      	cmp	r5, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	fa00 f001 	lsl.w	r0, r0, r1
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b0>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2b4>
 800048c:	42a5      	cmp	r5, r4
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2b4>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4464      	add	r4, ip
 8000498:	1b64      	subs	r4, r4, r5
 800049a:	b29d      	uxth	r5, r3
 800049c:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a0:	fb09 4413 	mls	r4, r9, r3, r4
 80004a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004ac:	45a6      	cmp	lr, r4
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1da>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2ac>
 80004ba:	45a6      	cmp	lr, r4
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2ac>
 80004be:	3b02      	subs	r3, #2
 80004c0:	4464      	add	r4, ip
 80004c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ca:	eba4 040e 	sub.w	r4, r4, lr
 80004ce:	42ac      	cmp	r4, r5
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46ae      	mov	lr, r5
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x29c>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x298>
 80004d8:	b156      	cbz	r6, 80004f0 <__udivmoddi4+0x208>
 80004da:	ebb0 0208 	subs.w	r2, r0, r8
 80004de:	eb64 040e 	sbc.w	r4, r4, lr
 80004e2:	fa04 f707 	lsl.w	r7, r4, r7
 80004e6:	40ca      	lsrs	r2, r1
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	4317      	orrs	r7, r2
 80004ec:	e9c6 7400 	strd	r7, r4, [r6]
 80004f0:	4618      	mov	r0, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f8:	f1c3 0120 	rsb	r1, r3, #32
 80004fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000500:	fa20 f201 	lsr.w	r2, r0, r1
 8000504:	fa25 f101 	lsr.w	r1, r5, r1
 8000508:	409d      	lsls	r5, r3
 800050a:	432a      	orrs	r2, r5
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb1 f0f7 	udiv	r0, r1, r7
 8000518:	fb07 1510 	mls	r5, r7, r0, r1
 800051c:	0c11      	lsrs	r1, r2, #16
 800051e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000522:	fb00 f50e 	mul.w	r5, r0, lr
 8000526:	428d      	cmp	r5, r1
 8000528:	fa04 f403 	lsl.w	r4, r4, r3
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x258>
 800052e:	eb1c 0101 	adds.w	r1, ip, r1
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b0>
 8000538:	428d      	cmp	r5, r1
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b0>
 800053c:	3802      	subs	r0, #2
 800053e:	4461      	add	r1, ip
 8000540:	1b49      	subs	r1, r1, r5
 8000542:	b292      	uxth	r2, r2
 8000544:	fbb1 f5f7 	udiv	r5, r1, r7
 8000548:	fb07 1115 	mls	r1, r7, r5, r1
 800054c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000550:	fb05 f10e 	mul.w	r1, r5, lr
 8000554:	4291      	cmp	r1, r2
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x282>
 8000558:	eb1c 0202 	adds.w	r2, ip, r2
 800055c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2a8>
 8000562:	4291      	cmp	r1, r2
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2a8>
 8000566:	3d02      	subs	r5, #2
 8000568:	4462      	add	r2, ip
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0xfc>
 8000572:	4631      	mov	r1, r6
 8000574:	4630      	mov	r0, r6
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xa2>
 8000578:	4639      	mov	r1, r7
 800057a:	e6e6      	b.n	800034a <__udivmoddi4+0x62>
 800057c:	4610      	mov	r0, r2
 800057e:	e6fb      	b.n	8000378 <__udivmoddi4+0x90>
 8000580:	4548      	cmp	r0, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f0>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb65 0e0c 	sbc.w	lr, r5, ip
 800058c:	3b01      	subs	r3, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f0>
 8000590:	4645      	mov	r5, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x282>
 8000594:	462b      	mov	r3, r5
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1da>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x258>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b0>
 80005a0:	3d02      	subs	r5, #2
 80005a2:	4462      	add	r2, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x124>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e70a      	b.n	80003c0 <__udivmoddi4+0xd8>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x14e>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <m24cxx_littlefs_init>:
};

lfs_t littlefs;
M24CXX_HandleTypeDef *m24cxx_handle;

int m24cxx_littlefs_init(M24CXX_HandleTypeDef *m24cxx_init) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
        LFS_DBG("LittleFS Init");
        m24cxx_handle = m24cxx_init;
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <m24cxx_littlefs_init+0x38>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6013      	str	r3, [r2, #0]

        //littlefs_config.block_size = w25qxx_handle->sector_size;
        //littlefs_config.block_count = w25qxx_handle->sectors_in_block * w25qxx_handle->block_count;

        int err = lfs_mount(&littlefs, &littlefs_config);
 80005c2:	490b      	ldr	r1, [pc, #44]	; (80005f0 <m24cxx_littlefs_init+0x3c>)
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <m24cxx_littlefs_init+0x40>)
 80005c6:	f00a f889 	bl	800a6dc <lfs_mount>
 80005ca:	60f8      	str	r0, [r7, #12]

    // reformat if we can't mount the filesystem
    // this should only happen on the first boot
    if (err) {
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d007      	beq.n	80005e2 <m24cxx_littlefs_init+0x2e>
        lfs_format(&littlefs, &littlefs_config);
 80005d2:	4907      	ldr	r1, [pc, #28]	; (80005f0 <m24cxx_littlefs_init+0x3c>)
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <m24cxx_littlefs_init+0x40>)
 80005d6:	f00a f86b 	bl	800a6b0 <lfs_format>
        lfs_mount(&littlefs, &littlefs_config);
 80005da:	4905      	ldr	r1, [pc, #20]	; (80005f0 <m24cxx_littlefs_init+0x3c>)
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <m24cxx_littlefs_init+0x40>)
 80005de:	f00a f87d 	bl	800a6dc <lfs_mount>
    }

    return 0;
 80005e2:	2300      	movs	r3, #0

}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000148 	.word	0x20000148
 80005f0:	20000000 	.word	0x20000000
 80005f4:	200000d0 	.word	0x200000d0

080005f8 <littlefs_read>:

int littlefs_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	603b      	str	r3, [r7, #0]
        LFS_DBG("LittleFS Read b = 0x%04lx o = 0x%04lx s = 0x%04lx", block, off, size);
        if (m24cxx_read(m24cxx_handle, block * littlefs_config.block_size + off, buffer, size) != M24CXX_Ok) return -1;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <littlefs_read+0x40>)
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <littlefs_read+0x44>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	fb03 f202 	mul.w	r2, r3, r2
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	18d1      	adds	r1, r2, r3
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	f00a f9fc 	bl	800aa18 <m24cxx_read>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <littlefs_read+0x34>
 8000626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800062a:	e000      	b.n	800062e <littlefs_read+0x36>
        return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000148 	.word	0x20000148
 800063c:	20000000 	.word	0x20000000

08000640 <littlefs_prog>:

int littlefs_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	603b      	str	r3, [r7, #0]
        LFS_DBG("LittleFS Prog b = 0x%04lx o = 0x%04lx s = 0x%04lx", block, off, size);
        if (m24cxx_write(m24cxx_handle, block * littlefs_config.block_size + off, (void *)buffer, size) != M24CXX_Ok) return -1;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <littlefs_prog+0x40>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <littlefs_prog+0x44>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	fb03 f202 	mul.w	r2, r3, r2
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	18d1      	adds	r1, r2, r3
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	f00a fa72 	bl	800ab4c <m24cxx_write>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d002      	beq.n	8000674 <littlefs_prog+0x34>
 800066e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000672:	e000      	b.n	8000676 <littlefs_prog+0x36>
        return 0;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000148 	.word	0x20000148
 8000684:	20000000 	.word	0x20000000

08000688 <littlefs_erase>:

int littlefs_erase(const struct lfs_config *c, lfs_block_t block) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
        LFS_DBG("LittleFS Erase b = 0x%04lx", block);
        if (m24cxx_erase(m24cxx_handle, block * littlefs_config.block_size, littlefs_config.block_size) != M24CXX_Ok) return -1;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <littlefs_erase+0x38>)
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <littlefs_erase+0x3c>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	fb02 f303 	mul.w	r3, r2, r3
 80006a0:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <littlefs_erase+0x3c>)
 80006a2:	69d2      	ldr	r2, [r2, #28]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f00a fb05 	bl	800acb4 <m24cxx_erase>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <littlefs_erase+0x2e>
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b4:	e000      	b.n	80006b8 <littlefs_erase+0x30>
        return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000148 	.word	0x20000148
 80006c4:	20000000 	.word	0x20000000

080006c8 <littlefs_sync>:

int littlefs_sync(const struct lfs_config *c) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
        LFS_DBG("LittleFS Sync");
        return 0;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d002      	beq.n	80006f8 <_write+0x18>
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d111      	bne.n	800071c <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <_write+0x48>)
 8000704:	f002 fdff 	bl	8003306 <HAL_UART_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 800070c:	7dfb      	ldrb	r3, [r7, #23]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <_write+0x36>
            return len;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	e004      	b.n	8000720 <_write+0x40>
        else
            return -1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800071a:	e001      	b.n	8000720 <_write+0x40>
    }
    return -1;
 800071c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200001a0 	.word	0x200001a0

0800072c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BTN_Pin) // If the button
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d102      	bne.n	8000742 <HAL_GPIO_EXTI_Callback+0x16>
    {
        do_action = 1;
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <HAL_GPIO_EXTI_Callback+0x24>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
    }
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200001ec 	.word	0x200001ec

08000754 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800075a:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800075c:	f000 fcc8 	bl	80010f0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000760:	f000 f9a4 	bl	8000aac <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000764:	f000 fa62 	bl	8000c2c <MX_GPIO_Init>
    MX_I2C1_Init();
 8000768:	f000 fa08 	bl	8000b7c <MX_I2C1_Init>
    MX_USART1_UART_Init();
 800076c:	f000 fa34 	bl	8000bd8 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */

    DBG("\n\n\n\n--------\nStarting");
 8000770:	48bb      	ldr	r0, [pc, #748]	; (8000a60 <main+0x30c>)
 8000772:	f00a fcc9 	bl	800b108 <iprintf>
 8000776:	200a      	movs	r0, #10
 8000778:	f00a fcd8 	bl	800b12c <putchar>

    DBG("Powering up memory");
 800077c:	48b9      	ldr	r0, [pc, #740]	; (8000a64 <main+0x310>)
 800077e:	f00a fcc3 	bl	800b108 <iprintf>
 8000782:	200a      	movs	r0, #10
 8000784:	f00a fcd2 	bl	800b12c <putchar>
    HAL_GPIO_WritePin(POW_GPIO_Port, POW_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078e:	48b6      	ldr	r0, [pc, #728]	; (8000a68 <main+0x314>)
 8000790:	f000 ffda 	bl	8001748 <HAL_GPIO_WritePin>

    // Wait a few ms to get ready
    HAL_Delay(10);
 8000794:	200a      	movs	r0, #10
 8000796:	f000 fd1d 	bl	80011d4 <HAL_Delay>

    DBG("Scanning I2C bus:");
 800079a:	48b4      	ldr	r0, [pc, #720]	; (8000a6c <main+0x318>)
 800079c:	f00a fcb4 	bl	800b108 <iprintf>
 80007a0:	200a      	movs	r0, #10
 80007a2:	f00a fcc3 	bl	800b12c <putchar>
    // Go through all possible i2c addresses
    for (uint8_t i = 0; i < 128; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80007ac:	f102 021f 	add.w	r2, r2, #31
 80007b0:	7013      	strb	r3, [r2, #0]
 80007b2:	e03b      	b.n	800082c <main+0xd8>

        if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 3, 100) == HAL_OK) {
 80007b4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80007b8:	f103 031f 	add.w	r3, r3, #31
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	b299      	uxth	r1, r3
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	2203      	movs	r2, #3
 80007c8:	48a9      	ldr	r0, [pc, #676]	; (8000a70 <main+0x31c>)
 80007ca:	f001 fc6d 	bl	80020a8 <HAL_I2C_IsDeviceReady>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d109      	bne.n	80007e8 <main+0x94>
            // We got an ack
            printf("%2x ", i);
 80007d4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80007d8:	f103 031f 	add.w	r3, r3, #31
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4619      	mov	r1, r3
 80007e0:	48a4      	ldr	r0, [pc, #656]	; (8000a74 <main+0x320>)
 80007e2:	f00a fc91 	bl	800b108 <iprintf>
 80007e6:	e002      	b.n	80007ee <main+0x9a>
        } else {
            printf("-- ");
 80007e8:	48a3      	ldr	r0, [pc, #652]	; (8000a78 <main+0x324>)
 80007ea:	f00a fc8d 	bl	800b108 <iprintf>
        }

        if (i > 0 && (i + 1) % 16 == 0)
 80007ee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80007f2:	f103 031f 	add.w	r3, r3, #31
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00c      	beq.n	8000816 <main+0xc2>
 80007fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000800:	f103 031f 	add.w	r3, r3, #31
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	f003 030f 	and.w	r3, r3, #15
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <main+0xc2>
            printf("\n");
 8000810:	200a      	movs	r0, #10
 8000812:	f00a fc8b 	bl	800b12c <putchar>
    for (uint8_t i = 0; i < 128; i++) {
 8000816:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800081a:	f103 031f 	add.w	r3, r3, #31
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000826:	f102 021f 	add.w	r2, r2, #31
 800082a:	7013      	strb	r3, [r2, #0]
 800082c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000830:	f103 031f 	add.w	r3, r3, #31
 8000834:	f993 3000 	ldrsb.w	r3, [r3]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dabb      	bge.n	80007b4 <main+0x60>

    }

    printf("\n");
 800083c:	200a      	movs	r0, #10
 800083e:	f00a fc75 	bl	800b12c <putchar>

    if (m24cxx_init(&m24cxx, &hi2c1, 0x50) != M24CXX_Ok) {
 8000842:	2250      	movs	r2, #80	; 0x50
 8000844:	498a      	ldr	r1, [pc, #552]	; (8000a70 <main+0x31c>)
 8000846:	488d      	ldr	r0, [pc, #564]	; (8000a7c <main+0x328>)
 8000848:	f00a f888 	bl	800a95c <m24cxx_init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d007      	beq.n	8000862 <main+0x10e>
        DBG("M24CXX Failed to initialize");
 8000852:	488b      	ldr	r0, [pc, #556]	; (8000a80 <main+0x32c>)
 8000854:	f00a fc58 	bl	800b108 <iprintf>
 8000858:	200a      	movs	r0, #10
 800085a:	f00a fc67 	bl	800b12c <putchar>
        Error_Handler();
 800085e:	f000 fa73 	bl	8000d48 <Error_Handler>
    }

    //m24cxx_erase_all(&m24cxx);

    m24cxx_littlefs_init(&m24cxx);
 8000862:	4886      	ldr	r0, [pc, #536]	; (8000a7c <main+0x328>)
 8000864:	f7ff fea6 	bl	80005b4 <m24cxx_littlefs_init>

    // read current count
    uint32_t boot_count = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800086e:	f102 0208 	add.w	r2, r2, #8
 8000872:	6013      	str	r3, [r2, #0]

    lfs_file_open(&littlefs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 8000874:	f240 1303 	movw	r3, #259	; 0x103
 8000878:	4a82      	ldr	r2, [pc, #520]	; (8000a84 <main+0x330>)
 800087a:	4983      	ldr	r1, [pc, #524]	; (8000a88 <main+0x334>)
 800087c:	4883      	ldr	r0, [pc, #524]	; (8000a8c <main+0x338>)
 800087e:	f009 ff59 	bl	800a734 <lfs_file_open>
    lfs_file_read(&littlefs, &file, &boot_count, sizeof(boot_count));
 8000882:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000886:	f102 0208 	add.w	r2, r2, #8
 800088a:	2304      	movs	r3, #4
 800088c:	497e      	ldr	r1, [pc, #504]	; (8000a88 <main+0x334>)
 800088e:	487f      	ldr	r0, [pc, #508]	; (8000a8c <main+0x338>)
 8000890:	f009 ffb0 	bl	800a7f4 <lfs_file_read>

    // update boot count
    boot_count += 1;
 8000894:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000898:	f103 0308 	add.w	r3, r3, #8
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80008a4:	f102 0208 	add.w	r2, r2, #8
 80008a8:	6013      	str	r3, [r2, #0]
    lfs_file_rewind(&littlefs, &file);
 80008aa:	4977      	ldr	r1, [pc, #476]	; (8000a88 <main+0x334>)
 80008ac:	4877      	ldr	r0, [pc, #476]	; (8000a8c <main+0x338>)
 80008ae:	f00a f801 	bl	800a8b4 <lfs_file_rewind>
    lfs_file_write(&littlefs, &file, &boot_count, sizeof(boot_count));
 80008b2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80008b6:	f102 0208 	add.w	r2, r2, #8
 80008ba:	2304      	movs	r3, #4
 80008bc:	4972      	ldr	r1, [pc, #456]	; (8000a88 <main+0x334>)
 80008be:	4873      	ldr	r0, [pc, #460]	; (8000a8c <main+0x338>)
 80008c0:	f009 ffc8 	bl	800a854 <lfs_file_write>

    // remember the storage is not updated until the file is closed successfully
    lfs_file_close(&littlefs, &file);
 80008c4:	4970      	ldr	r1, [pc, #448]	; (8000a88 <main+0x334>)
 80008c6:	4871      	ldr	r0, [pc, #452]	; (8000a8c <main+0x338>)
 80008c8:	f009 ff68 	bl	800a79c <lfs_file_close>

    uint32_t start_uptime = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80008d2:	f102 0204 	add.w	r2, r2, #4
 80008d6:	6013      	str	r3, [r2, #0]

    lfs_file_open(&littlefs, &file, "uptime", LFS_O_RDWR | LFS_O_CREAT);
 80008d8:	f240 1303 	movw	r3, #259	; 0x103
 80008dc:	4a6c      	ldr	r2, [pc, #432]	; (8000a90 <main+0x33c>)
 80008de:	496a      	ldr	r1, [pc, #424]	; (8000a88 <main+0x334>)
 80008e0:	486a      	ldr	r0, [pc, #424]	; (8000a8c <main+0x338>)
 80008e2:	f009 ff27 	bl	800a734 <lfs_file_open>
    lfs_file_read(&littlefs, &file, &start_uptime, sizeof(start_uptime));
 80008e6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80008ea:	f102 0204 	add.w	r2, r2, #4
 80008ee:	2304      	movs	r3, #4
 80008f0:	4965      	ldr	r1, [pc, #404]	; (8000a88 <main+0x334>)
 80008f2:	4866      	ldr	r0, [pc, #408]	; (8000a8c <main+0x338>)
 80008f4:	f009 ff7e 	bl	800a7f4 <lfs_file_read>
    lfs_file_close(&littlefs, &file);
 80008f8:	4963      	ldr	r1, [pc, #396]	; (8000a88 <main+0x334>)
 80008fa:	4864      	ldr	r0, [pc, #400]	; (8000a8c <main+0x338>)
 80008fc:	f009 ff4e 	bl	800a79c <lfs_file_close>

    DBG("Boot count = %lu start uptime = %lu", boot_count, start_uptime);
 8000900:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000904:	f103 0308 	add.w	r3, r3, #8
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800090e:	f102 0204 	add.w	r2, r2, #4
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	485f      	ldr	r0, [pc, #380]	; (8000a94 <main+0x340>)
 8000918:	f00a fbf6 	bl	800b108 <iprintf>
 800091c:	200a      	movs	r0, #10
 800091e:	f00a fc05 	bl	800b12c <putchar>

    DBG("Creating one large file");
 8000922:	485d      	ldr	r0, [pc, #372]	; (8000a98 <main+0x344>)
 8000924:	f00a fbf0 	bl	800b108 <iprintf>
 8000928:	200a      	movs	r0, #10
 800092a:	f00a fbff 	bl	800b12c <putchar>

    uint8_t buf[0x1000];
    for (int i = 0; i < sizeof(buf); ++i) buf[i] = (uint8_t)random();
 800092e:	2300      	movs	r3, #0
 8000930:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000934:	f102 0218 	add.w	r2, r2, #24
 8000938:	6013      	str	r3, [r2, #0]
 800093a:	e019      	b.n	8000970 <main+0x21c>
 800093c:	f00a fae4 	bl	800af08 <random>
 8000940:	4603      	mov	r3, r0
 8000942:	b2da      	uxtb	r2, r3
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	4619      	mov	r1, r3
 800094a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800094e:	f103 0318 	add.w	r3, r3, #24
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	440b      	add	r3, r1
 8000956:	3b1c      	subs	r3, #28
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800095e:	f103 0318 	add.w	r3, r3, #24
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800096a:	f102 0218 	add.w	r2, r2, #24
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000974:	f103 0318 	add.w	r3, r3, #24
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800097e:	d3dd      	bcc.n	800093c <main+0x1e8>

    lfs_remove(&littlefs, "random.dat");
 8000980:	4946      	ldr	r1, [pc, #280]	; (8000a9c <main+0x348>)
 8000982:	4842      	ldr	r0, [pc, #264]	; (8000a8c <main+0x338>)
 8000984:	f009 fec0 	bl	800a708 <lfs_remove>
    lfs_file_open(&littlefs, &file, "random.dat", LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC);
 8000988:	f240 5303 	movw	r3, #1283	; 0x503
 800098c:	4a43      	ldr	r2, [pc, #268]	; (8000a9c <main+0x348>)
 800098e:	493e      	ldr	r1, [pc, #248]	; (8000a88 <main+0x334>)
 8000990:	483e      	ldr	r0, [pc, #248]	; (8000a8c <main+0x338>)
 8000992:	f009 fecf 	bl	800a734 <lfs_file_open>
    for (int b = 0; b < 0x800; ++b) {
 8000996:	2300      	movs	r3, #0
 8000998:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800099c:	f102 0214 	add.w	r2, r2, #20
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	e013      	b.n	80009cc <main+0x278>
            lfs_file_write(&littlefs, &file, &buf, sizeof(buf));
 80009a4:	f107 0220 	add.w	r2, r7, #32
 80009a8:	3a1c      	subs	r2, #28
 80009aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ae:	4936      	ldr	r1, [pc, #216]	; (8000a88 <main+0x334>)
 80009b0:	4836      	ldr	r0, [pc, #216]	; (8000a8c <main+0x338>)
 80009b2:	f009 ff4f 	bl	800a854 <lfs_file_write>
    for (int b = 0; b < 0x800; ++b) {
 80009b6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80009ba:	f103 0314 	add.w	r3, r3, #20
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80009c6:	f102 0214 	add.w	r2, r2, #20
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80009d0:	f103 0314 	add.w	r3, r3, #20
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009da:	dbe3      	blt.n	80009a4 <main+0x250>
            //DBG("Written %d bytes", sizeof(buf));
    }
    lfs_file_close(&littlefs, &file);
 80009dc:	492a      	ldr	r1, [pc, #168]	; (8000a88 <main+0x334>)
 80009de:	482b      	ldr	r0, [pc, #172]	; (8000a8c <main+0x338>)
 80009e0:	f009 fedc 	bl	800a79c <lfs_file_close>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    uint32_t now = 0, last_blink = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80009ea:	f102 020c 	add.w	r2, r2, #12
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	2300      	movs	r3, #0
 80009f2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80009f6:	f102 0210 	add.w	r2, r2, #16
 80009fa:	6013      	str	r3, [r2, #0]

    while (1) {

        now = HAL_GetTick();
 80009fc:	f000 fbde 	bl	80011bc <HAL_GetTick>
 8000a00:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000a04:	f103 030c 	add.w	r3, r3, #12
 8000a08:	6018      	str	r0, [r3, #0]

        if (now - last_blink >= 500) {
 8000a0a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000a0e:	f103 030c 	add.w	r3, r3, #12
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000a18:	f103 0310 	add.w	r3, r3, #16
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a24:	d30e      	bcc.n	8000a44 <main+0x2f0>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <main+0x34c>)
 8000a2c:	f000 fea5 	bl	800177a <HAL_GPIO_TogglePin>
            last_blink = now;
 8000a30:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000a34:	f103 030c 	add.w	r3, r3, #12
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000a3e:	f102 0210 	add.w	r2, r2, #16
 8000a42:	6013      	str	r3, [r2, #0]
        }

        if (do_action) {
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <main+0x350>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0d7      	beq.n	80009fc <main+0x2a8>
            do_action = 0;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <main+0x350>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
            DBG("Do action!");
 8000a52:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <main+0x354>)
 8000a54:	f00a fb58 	bl	800b108 <iprintf>
 8000a58:	200a      	movs	r0, #10
 8000a5a:	f00a fb67 	bl	800b12c <putchar>
        now = HAL_GetTick();
 8000a5e:	e7cd      	b.n	80009fc <main+0x2a8>
 8000a60:	0800be58 	.word	0x0800be58
 8000a64:	0800be70 	.word	0x0800be70
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	0800be84 	.word	0x0800be84
 8000a70:	2000014c 	.word	0x2000014c
 8000a74:	0800be98 	.word	0x0800be98
 8000a78:	0800bea0 	.word	0x0800bea0
 8000a7c:	200001e4 	.word	0x200001e4
 8000a80:	0800bea4 	.word	0x0800bea4
 8000a84:	0800bec0 	.word	0x0800bec0
 8000a88:	200001f0 	.word	0x200001f0
 8000a8c:	200000d0 	.word	0x200000d0
 8000a90:	0800becc 	.word	0x0800becc
 8000a94:	0800bed4 	.word	0x0800bed4
 8000a98:	0800bef8 	.word	0x0800bef8
 8000a9c:	0800bf10 	.word	0x0800bf10
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	200001ec 	.word	0x200001ec
 8000aa8:	0800bf1c 	.word	0x0800bf1c

08000aac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b094      	sub	sp, #80	; 0x50
 8000ab0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	2230      	movs	r2, #48	; 0x30
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fb91 	bl	800b1e2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <SystemClock_Config+0xc8>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <SystemClock_Config+0xc8>)
 8000ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <SystemClock_Config+0xc8>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <SystemClock_Config+0xcc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <SystemClock_Config+0xcc>)
 8000af6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <SystemClock_Config+0xcc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 12;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 96;
 8000b20:	2360      	movs	r3, #96	; 0x60
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b2c:	f107 0320 	add.w	r3, r7, #32
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 ff43 	bl	80029bc <HAL_RCC_OscConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x94>
        Error_Handler();
 8000b3c:	f000 f904 	bl	8000d48 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b40:	230f      	movs	r3, #15
 8000b42:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2302      	movs	r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 f9a5 	bl	8002eac <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xc0>
        Error_Handler();
 8000b68:	f000 f8ee 	bl	8000d48 <Error_Handler>
    }
}
 8000b6c:	bf00      	nop
 8000b6e:	3750      	adds	r7, #80	; 0x50
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40007000 	.word	0x40007000

08000b7c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b82:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <MX_I2C1_Init+0x54>)
 8000b84:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_I2C1_Init+0x58>)
 8000b8a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b9e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_I2C1_Init+0x50>)
 8000bba:	f000 fe11 	bl	80017e0 <HAL_I2C_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000bc4:	f000 f8c0 	bl	8000d48 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000014c 	.word	0x2000014c
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	00061a80 	.word	0x00061a80

08000bd8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_USART1_UART_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 921600;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000be8:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c10:	f002 fb2c 	bl	800326c <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8000c1a:	f000 f895 	bl	8000d48 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200001a0 	.word	0x200001a0
 8000c28:	40011000 	.word	0x40011000

08000c2c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b3c      	ldr	r3, [pc, #240]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a3b      	ldr	r2, [pc, #236]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a34      	ldr	r2, [pc, #208]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a2d      	ldr	r2, [pc, #180]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a26      	ldr	r2, [pc, #152]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb8:	4820      	ldr	r0, [pc, #128]	; (8000d3c <MX_GPIO_Init+0x110>)
 8000cba:	f000 fd45 	bl	8001748 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(POW_GPIO_Port, POW_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc4:	481e      	ldr	r0, [pc, #120]	; (8000d40 <MX_GPIO_Init+0x114>)
 8000cc6:	f000 fd3f 	bl	8001748 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cd0:	2311      	movs	r3, #17
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4816      	ldr	r0, [pc, #88]	; (8000d3c <MX_GPIO_Init+0x110>)
 8000ce4:	f000 fbac 	bl	8001440 <HAL_GPIO_Init>

    /*Configure GPIO pin : BTN_Pin */
    GPIO_InitStruct.Pin = BTN_Pin;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4811      	ldr	r0, [pc, #68]	; (8000d44 <MX_GPIO_Init+0x118>)
 8000cfe:	f000 fb9f 	bl	8001440 <HAL_GPIO_Init>

    /*Configure GPIO pin : POW_Pin */
    GPIO_InitStruct.Pin = POW_Pin;
 8000d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(POW_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4809      	ldr	r0, [pc, #36]	; (8000d40 <MX_GPIO_Init+0x114>)
 8000d1c:	f000 fb90 	bl	8001440 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2006      	movs	r0, #6
 8000d26:	f000 fb54 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d2a:	2006      	movs	r0, #6
 8000d2c:	f000 fb6d 	bl	800140a <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40020400 	.word	0x40020400
 8000d44:	40020000 	.word	0x40020000

08000d48 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <HAL_I2C_MspInit+0x84>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d12b      	bne.n	8000e1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000de2:	23c0      	movs	r3, #192	; 0xc0
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de6:	2312      	movs	r3, #18
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df2:	2304      	movs	r3, #4
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <HAL_I2C_MspInit+0x8c>)
 8000dfe:	f000 fb1f 	bl	8001440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_I2C_MspInit+0x88>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400

08000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <HAL_UART_MspInit+0x84>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12c      	bne.n	8000eb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_UART_MspInit+0x8c>)
 8000eac:	f000 fac8 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	; 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f940 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f000 fc47 	bl	80017b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  return 1;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_kill>:

int _kill(int pid, int sig)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f40:	f00a f9dc 	bl	800b2fc <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2216      	movs	r2, #22
 8000f48:	601a      	str	r2, [r3, #0]
  return -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_exit>:

void _exit (int status)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffe7 	bl	8000f36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f68:	e7fe      	b.n	8000f68 <_exit+0x12>

08000f6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e00a      	b.n	8000f92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f7c:	f3af 8000 	nop.w
 8000f80:	4601      	mov	r1, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	60ba      	str	r2, [r7, #8]
 8000f88:	b2ca      	uxtb	r2, r1
 8000f8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	dbf0      	blt.n	8000f7c <_read+0x12>
  }

  return len;
 8000f9a:	687b      	ldr	r3, [r7, #4]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fcc:	605a      	str	r2, [r3, #4]
  return 0;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_isatty>:

int _isatty(int file)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fe4:	2301      	movs	r3, #1
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f00a f95e 	bl	800b2fc <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20020000 	.word	0x20020000
 800106c:	00000400 	.word	0x00000400
 8001070:	20000244 	.word	0x20000244
 8001074:	20000398 	.word	0x20000398

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a2:	490e      	ldr	r1, [pc, #56]	; (80010dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a4:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b8:	4c0b      	ldr	r4, [pc, #44]	; (80010e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010c6:	f7ff ffd7 	bl	8001078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ca:	f00a f91d 	bl	800b308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ce:	f7ff fb41 	bl	8000754 <main>
  bx  lr    
 80010d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80010e0:	0800ce28 	.word	0x0800ce28
  ldr r2, =_sbss
 80010e4:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80010e8:	20000398 	.word	0x20000398

080010ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <HAL_Init+0x40>)
 80010fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <HAL_Init+0x40>)
 8001106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800110a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_Init+0x40>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f000 f94f 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111e:	200f      	movs	r0, #15
 8001120:	f000 f808 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001124:	f7ff fe16 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023c00 	.word	0x40023c00

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x54>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x58>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f967 	bl	8001426 <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00e      	b.n	8001180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d80a      	bhi.n	800117e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001170:	f000 f92f 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001174:	4a06      	ldr	r2, [pc, #24]	; (8001190 <HAL_InitTick+0x5c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000004c 	.word	0x2000004c
 800118c:	20000054 	.word	0x20000054
 8001190:	20000050 	.word	0x20000050

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000054 	.word	0x20000054
 80011b8:	20000248 	.word	0x20000248

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000248 	.word	0x20000248

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000054 	.word	0x20000054

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff3e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff31 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e159      	b.n	8001710 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	429a      	cmp	r2, r3
 8001476:	f040 8148 	bne.w	800170a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d005      	beq.n	8001492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	2b02      	cmp	r3, #2
 8001490:	d130      	bne.n	80014f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c8:	2201      	movs	r2, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 0201 	and.w	r2, r3, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d017      	beq.n	8001530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d123      	bne.n	8001584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	08da      	lsrs	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3208      	adds	r2, #8
 8001544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	69b9      	ldr	r1, [r7, #24]
 8001580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 0203 	and.w	r2, r3, #3
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a2 	beq.w	800170a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b57      	ldr	r3, [pc, #348]	; (8001728 <HAL_GPIO_Init+0x2e8>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a56      	ldr	r2, [pc, #344]	; (8001728 <HAL_GPIO_Init+0x2e8>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b54      	ldr	r3, [pc, #336]	; (8001728 <HAL_GPIO_Init+0x2e8>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e2:	4a52      	ldr	r2, [pc, #328]	; (800172c <HAL_GPIO_Init+0x2ec>)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	220f      	movs	r2, #15
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a49      	ldr	r2, [pc, #292]	; (8001730 <HAL_GPIO_Init+0x2f0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d019      	beq.n	8001642 <HAL_GPIO_Init+0x202>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_GPIO_Init+0x2f4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x1fe>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a47      	ldr	r2, [pc, #284]	; (8001738 <HAL_GPIO_Init+0x2f8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x1fa>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a46      	ldr	r2, [pc, #280]	; (800173c <HAL_GPIO_Init+0x2fc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x1f6>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a45      	ldr	r2, [pc, #276]	; (8001740 <HAL_GPIO_Init+0x300>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x1f2>
 800162e:	2304      	movs	r3, #4
 8001630:	e008      	b.n	8001644 <HAL_GPIO_Init+0x204>
 8001632:	2307      	movs	r3, #7
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x204>
 8001636:	2303      	movs	r3, #3
 8001638:	e004      	b.n	8001644 <HAL_GPIO_Init+0x204>
 800163a:	2302      	movs	r3, #2
 800163c:	e002      	b.n	8001644 <HAL_GPIO_Init+0x204>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x204>
 8001642:	2300      	movs	r3, #0
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	f002 0203 	and.w	r2, r2, #3
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	4093      	lsls	r3, r2
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001654:	4935      	ldr	r1, [pc, #212]	; (800172c <HAL_GPIO_Init+0x2ec>)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_GPIO_Init+0x304>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001686:	4a2f      	ldr	r2, [pc, #188]	; (8001744 <HAL_GPIO_Init+0x304>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_GPIO_Init+0x304>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b0:	4a24      	ldr	r2, [pc, #144]	; (8001744 <HAL_GPIO_Init+0x304>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <HAL_GPIO_Init+0x304>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016da:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <HAL_GPIO_Init+0x304>)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_GPIO_Init+0x304>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001704:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_GPIO_Init+0x304>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3301      	adds	r3, #1
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	2b0f      	cmp	r3, #15
 8001714:	f67f aea2 	bls.w	800145c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40013800 	.word	0x40013800
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	40020800 	.word	0x40020800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40021000 	.word	0x40021000
 8001744:	40013c00 	.word	0x40013c00

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001764:	e003      	b.n	800176e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	041a      	lsls	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	619a      	str	r2, [r3, #24]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800177a:	b480      	push	{r7}
 800177c:	b085      	sub	sp, #20
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800178c:	887a      	ldrh	r2, [r7, #2]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4013      	ands	r3, r2
 8001792:	041a      	lsls	r2, r3, #16
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43d9      	mvns	r1, r3
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	400b      	ands	r3, r1
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d006      	beq.n	80017d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe ffac 	bl	800072c <HAL_GPIO_EXTI_Callback>
  }
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40013c00 	.word	0x40013c00

080017e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e12b      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff facc 	bl	8000da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	; 0x24
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001844:	f001 fcea 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8001848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a81      	ldr	r2, [pc, #516]	; (8001a54 <HAL_I2C_Init+0x274>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d807      	bhi.n	8001864 <HAL_I2C_Init+0x84>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4a80      	ldr	r2, [pc, #512]	; (8001a58 <HAL_I2C_Init+0x278>)
 8001858:	4293      	cmp	r3, r2
 800185a:	bf94      	ite	ls
 800185c:	2301      	movls	r3, #1
 800185e:	2300      	movhi	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	e006      	b.n	8001872 <HAL_I2C_Init+0x92>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4a7d      	ldr	r2, [pc, #500]	; (8001a5c <HAL_I2C_Init+0x27c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	bf94      	ite	ls
 800186c:	2301      	movls	r3, #1
 800186e:	2300      	movhi	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0e7      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4a78      	ldr	r2, [pc, #480]	; (8001a60 <HAL_I2C_Init+0x280>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9b      	lsrs	r3, r3, #18
 8001884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a6a      	ldr	r2, [pc, #424]	; (8001a54 <HAL_I2C_Init+0x274>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d802      	bhi.n	80018b4 <HAL_I2C_Init+0xd4>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	e009      	b.n	80018c8 <HAL_I2C_Init+0xe8>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	4a69      	ldr	r2, [pc, #420]	; (8001a64 <HAL_I2C_Init+0x284>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	099b      	lsrs	r3, r3, #6
 80018c6:	3301      	adds	r3, #1
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	495c      	ldr	r1, [pc, #368]	; (8001a54 <HAL_I2C_Init+0x274>)
 80018e4:	428b      	cmp	r3, r1
 80018e6:	d819      	bhi.n	800191c <HAL_I2C_Init+0x13c>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e59      	subs	r1, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f6:	1c59      	adds	r1, r3, #1
 80018f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018fc:	400b      	ands	r3, r1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <HAL_I2C_Init+0x138>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1e59      	subs	r1, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001910:	3301      	adds	r3, #1
 8001912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001916:	e051      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001918:	2304      	movs	r3, #4
 800191a:	e04f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <HAL_I2C_Init+0x168>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	440b      	add	r3, r1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e012      	b.n	800196e <HAL_I2C_Init+0x18e>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	0099      	lsls	r1, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	fbb0 f3f3 	udiv	r3, r0, r3
 800195e:	3301      	adds	r3, #1
 8001960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Init+0x196>
 8001972:	2301      	movs	r3, #1
 8001974:	e022      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10e      	bne.n	800199c <HAL_I2C_Init+0x1bc>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e58      	subs	r0, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	440b      	add	r3, r1
 800198c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001990:	3301      	adds	r3, #1
 8001992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199a:	e00f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	0099      	lsls	r1, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	6809      	ldr	r1, [r1, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6911      	ldr	r1, [r2, #16]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68d2      	ldr	r2, [r2, #12]
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	000186a0 	.word	0x000186a0
 8001a58:	001e847f 	.word	0x001e847f
 8001a5c:	003d08ff 	.word	0x003d08ff
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	813b      	strh	r3, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a82:	f7ff fb9b 	bl	80011bc <HAL_GetTick>
 8001a86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	f040 80d9 	bne.w	8001c48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2319      	movs	r3, #25
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	496d      	ldr	r1, [pc, #436]	; (8001c54 <HAL_I2C_Mem_Write+0x1ec>)
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fdad 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0cc      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_I2C_Mem_Write+0x56>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e0c5      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d007      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2221      	movs	r2, #33	; 0x21
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2240      	movs	r2, #64	; 0x40
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_I2C_Mem_Write+0x1f0>)
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b26:	88f8      	ldrh	r0, [r7, #6]
 8001b28:	893a      	ldrh	r2, [r7, #8]
 8001b2a:	8979      	ldrh	r1, [r7, #10]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4603      	mov	r3, r0
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fbe4 	bl	8002304 <I2C_RequestMemoryWrite>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d052      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e081      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fe2e 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d107      	bne.n	8001b6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06b      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11b      	bne.n	8001be8 <HAL_I2C_Mem_Write+0x180>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d017      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1aa      	bne.n	8001b46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fe1a 	bl	800282e <I2C_WaitOnBTFFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00d      	beq.n	8001c1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d107      	bne.n	8001c18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e016      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	00100002 	.word	0x00100002
 8001c58:	ffff0000 	.word	0xffff0000

08001c5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	817b      	strh	r3, [r7, #10]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	813b      	strh	r3, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c76:	f7ff faa1 	bl	80011bc <HAL_GetTick>
 8001c7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	f040 8208 	bne.w	800209a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2319      	movs	r3, #25
 8001c90:	2201      	movs	r2, #1
 8001c92:	497b      	ldr	r1, [pc, #492]	; (8001e80 <HAL_I2C_Mem_Read+0x224>)
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fcb3 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e1fb      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_I2C_Mem_Read+0x56>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e1f4      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d007      	beq.n	8001cd8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2222      	movs	r2, #34	; 0x22
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4a5b      	ldr	r2, [pc, #364]	; (8001e84 <HAL_I2C_Mem_Read+0x228>)
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d1a:	88f8      	ldrh	r0, [r7, #6]
 8001d1c:	893a      	ldrh	r2, [r7, #8]
 8001d1e:	8979      	ldrh	r1, [r7, #10]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	4603      	mov	r3, r0
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fb80 	bl	8002430 <I2C_RequestMemoryRead>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e1b0      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d113      	bne.n	8001d6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	623b      	str	r3, [r7, #32]
 8001d56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e184      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d11b      	bne.n	8001daa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e164      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d11b      	bne.n	8001dea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	e144      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e00:	e138      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	f200 80f1 	bhi.w	8001fee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d123      	bne.n	8001e5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fd49 	bl	80028b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e139      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e5a:	e10b      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d14e      	bne.n	8001f02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4906      	ldr	r1, [pc, #24]	; (8001e88 <HAL_I2C_Mem_Read+0x22c>)
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fbc6 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e10e      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
 8001e7e:	bf00      	nop
 8001e80:	00100002 	.word	0x00100002
 8001e84:	ffff0000 	.word	0xffff0000
 8001e88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f00:	e0b8      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4966      	ldr	r1, [pc, #408]	; (80020a4 <HAL_I2C_Mem_Read+0x448>)
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 fb77 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0bf      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f64:	2200      	movs	r2, #0
 8001f66:	494f      	ldr	r1, [pc, #316]	; (80020a4 <HAL_I2C_Mem_Read+0x448>)
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fb49 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e091      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fec:	e042      	b.n	8002074 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fc5c 	bl	80028b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e04c      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b04      	cmp	r3, #4
 8002040:	d118      	bne.n	8002074 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f aec2 	bne.w	8001e02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800209a:	2302      	movs	r3, #2
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3728      	adds	r7, #40	; 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	00010004 	.word	0x00010004

080020a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	460b      	mov	r3, r1
 80020b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff f880 	bl	80011bc <HAL_GetTick>
 80020bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	f040 8111 	bne.w	80022f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2319      	movs	r3, #25
 80020d6:	2201      	movs	r2, #1
 80020d8:	4988      	ldr	r1, [pc, #544]	; (80022fc <HAL_I2C_IsDeviceReady+0x254>)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fa90 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
 80020e8:	e104      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_I2C_IsDeviceReady+0x50>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e0fd      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d007      	beq.n	800211e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800212c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2224      	movs	r2, #36	; 0x24
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a70      	ldr	r2, [pc, #448]	; (8002300 <HAL_I2C_IsDeviceReady+0x258>)
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002150:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fa4e 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00d      	beq.n	8002186 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002178:	d103      	bne.n	8002182 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0b6      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002186:	897b      	ldrh	r3, [r7, #10]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002194:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff f811 	bl	80011bc <HAL_GetTick>
 800219a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c0:	bf0c      	ite	eq
 80021c2:	2301      	moveq	r3, #1
 80021c4:	2300      	movne	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021ca:	e025      	b.n	8002218 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021cc:	f7fe fff6 	bl	80011bc <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d302      	bcc.n	80021e2 <HAL_I2C_IsDeviceReady+0x13a>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	22a0      	movs	r2, #160	; 0xa0
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2ba0      	cmp	r3, #160	; 0xa0
 8002222:	d005      	beq.n	8002230 <HAL_I2C_IsDeviceReady+0x188>
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_I2C_IsDeviceReady+0x188>
 800222a:	7dbb      	ldrb	r3, [r7, #22]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0cd      	beq.n	80021cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d129      	bne.n	800229a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002254:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2319      	movs	r3, #25
 8002272:	2201      	movs	r2, #1
 8002274:	4921      	ldr	r1, [pc, #132]	; (80022fc <HAL_I2C_IsDeviceReady+0x254>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f9c2 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e036      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e02c      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2319      	movs	r3, #25
 80022ba:	2201      	movs	r2, #1
 80022bc:	490f      	ldr	r1, [pc, #60]	; (80022fc <HAL_I2C_IsDeviceReady+0x254>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f99e 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e012      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f4ff af32 	bcc.w	8002142 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	00100002 	.word	0x00100002
 8002300:	ffff0000 	.word	0xffff0000

08002304 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	4608      	mov	r0, r1
 800230e:	4611      	mov	r1, r2
 8002310:	461a      	mov	r2, r3
 8002312:	4603      	mov	r3, r0
 8002314:	817b      	strh	r3, [r7, #10]
 8002316:	460b      	mov	r3, r1
 8002318:	813b      	strh	r3, [r7, #8]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	2200      	movs	r2, #0
 8002336:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f960 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002354:	d103      	bne.n	800235e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e05f      	b.n	8002422 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002362:	897b      	ldrh	r3, [r7, #10]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002370:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	6a3a      	ldr	r2, [r7, #32]
 8002376:	492d      	ldr	r1, [pc, #180]	; (800242c <I2C_RequestMemoryWrite+0x128>)
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f998 	bl	80026ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e04c      	b.n	8002422 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800239e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a0:	6a39      	ldr	r1, [r7, #32]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fa02 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00d      	beq.n	80023ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d107      	bne.n	80023c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e02b      	b.n	8002422 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023d0:	893b      	ldrh	r3, [r7, #8]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	611a      	str	r2, [r3, #16]
 80023da:	e021      	b.n	8002420 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023dc:	893b      	ldrh	r3, [r7, #8]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ec:	6a39      	ldr	r1, [r7, #32]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f9dc 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00d      	beq.n	8002416 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d107      	bne.n	8002412 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002410:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e005      	b.n	8002422 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002416:	893b      	ldrh	r3, [r7, #8]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	00010002 	.word	0x00010002

08002430 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	4608      	mov	r0, r1
 800243a:	4611      	mov	r1, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4603      	mov	r3, r0
 8002440:	817b      	strh	r3, [r7, #10]
 8002442:	460b      	mov	r3, r1
 8002444:	813b      	strh	r3, [r7, #8]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002458:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002468:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	2200      	movs	r2, #0
 8002472:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8c2 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002490:	d103      	bne.n	800249a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0aa      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800249e:	897b      	ldrh	r3, [r7, #10]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	4952      	ldr	r1, [pc, #328]	; (80025fc <I2C_RequestMemoryRead+0x1cc>)
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f8fa 	bl	80026ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e097      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024dc:	6a39      	ldr	r1, [r7, #32]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f964 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00d      	beq.n	8002506 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d107      	bne.n	8002502 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002500:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e076      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800250c:	893b      	ldrh	r3, [r7, #8]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	e021      	b.n	800255c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002518:	893b      	ldrh	r3, [r7, #8]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	b29b      	uxth	r3, r3
 800251e:	b2da      	uxtb	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002528:	6a39      	ldr	r1, [r7, #32]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f93e 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00d      	beq.n	8002552 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	2b04      	cmp	r3, #4
 800253c:	d107      	bne.n	800254e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e050      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002552:	893b      	ldrh	r3, [r7, #8]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	6a39      	ldr	r1, [r7, #32]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f923 	bl	80027ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b04      	cmp	r3, #4
 8002572:	d107      	bne.n	8002584 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002582:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e035      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002596:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	2200      	movs	r2, #0
 80025a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f82b 	bl	8002600 <I2C_WaitOnFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00d      	beq.n	80025cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025be:	d103      	bne.n	80025c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e013      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025cc:	897b      	ldrh	r3, [r7, #10]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	6a3a      	ldr	r2, [r7, #32]
 80025e0:	4906      	ldr	r1, [pc, #24]	; (80025fc <I2C_RequestMemoryRead+0x1cc>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f863 	bl	80026ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	00010002 	.word	0x00010002

08002600 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002610:	e025      	b.n	800265e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002618:	d021      	beq.n	800265e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261a:	f7fe fdcf 	bl	80011bc <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d302      	bcc.n	8002630 <I2C_WaitOnFlagUntilTimeout+0x30>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d116      	bne.n	800265e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2220      	movs	r2, #32
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f043 0220 	orr.w	r2, r3, #32
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e023      	b.n	80026a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d10d      	bne.n	8002684 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4013      	ands	r3, r2
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	e00c      	b.n	800269e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	43da      	mvns	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4013      	ands	r3, r2
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d0b6      	beq.n	8002612 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026bc:	e051      	b.n	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026cc:	d123      	bne.n	8002716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f043 0204 	orr.w	r2, r3, #4
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e046      	b.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271c:	d021      	beq.n	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271e:	f7fe fd4d 	bl	80011bc <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	d302      	bcc.n	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d116      	bne.n	8002762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e020      	b.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10c      	bne.n	8002786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4013      	ands	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	e00b      	b.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	43da      	mvns	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4013      	ands	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf14      	ite	ne
 8002798:	2301      	movne	r3, #1
 800279a:	2300      	moveq	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d18d      	bne.n	80026be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027b8:	e02d      	b.n	8002816 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f8ce 	bl	800295c <I2C_IsAcknowledgeFailed>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e02d      	b.n	8002826 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d0:	d021      	beq.n	8002816 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7fe fcf3 	bl	80011bc <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d116      	bne.n	8002816 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f043 0220 	orr.w	r2, r3, #32
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e007      	b.n	8002826 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d1ca      	bne.n	80027ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800283a:	e02d      	b.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f88d 	bl	800295c <I2C_IsAcknowledgeFailed>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e02d      	b.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002852:	d021      	beq.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002854:	f7fe fcb2 	bl	80011bc <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	429a      	cmp	r2, r3
 8002862:	d302      	bcc.n	800286a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e007      	b.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d1ca      	bne.n	800283c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028bc:	e042      	b.n	8002944 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b10      	cmp	r3, #16
 80028ca:	d119      	bne.n	8002900 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0210 	mvn.w	r2, #16
 80028d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e029      	b.n	8002954 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002900:	f7fe fc5c 	bl	80011bc <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	429a      	cmp	r2, r3
 800290e:	d302      	bcc.n	8002916 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d116      	bne.n	8002944 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e007      	b.n	8002954 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d1b5      	bne.n	80028be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002972:	d11b      	bne.n	80029ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800297c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f043 0204 	orr.w	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e267      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d075      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029da:	4b88      	ldr	r3, [pc, #544]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d00c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e6:	4b85      	ldr	r3, [pc, #532]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d112      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f2:	4b82      	ldr	r3, [pc, #520]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fe:	d10b      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	4b7e      	ldr	r3, [pc, #504]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d05b      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x108>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d157      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e242      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a20:	d106      	bne.n	8002a30 <HAL_RCC_OscConfig+0x74>
 8002a22:	4b76      	ldr	r3, [pc, #472]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a75      	ldr	r2, [pc, #468]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0xb0>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x98>
 8002a3a:	4b70      	ldr	r3, [pc, #448]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6f      	ldr	r2, [pc, #444]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6c      	ldr	r2, [pc, #432]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xb0>
 8002a54:	4b69      	ldr	r3, [pc, #420]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a68      	ldr	r2, [pc, #416]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b66      	ldr	r3, [pc, #408]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a65      	ldr	r2, [pc, #404]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7fe fba2 	bl	80011bc <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fb9e 	bl	80011bc <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e207      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xc0>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fb8e 	bl	80011bc <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fb8a 	bl	80011bc <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1f3      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0xe8>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d063      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ad2:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ade:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d11c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aea:	4b44      	ldr	r3, [pc, #272]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	4b41      	ldr	r3, [pc, #260]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x152>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e1c7      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4937      	ldr	r1, [pc, #220]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	e03a      	b.n	8002b9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <HAL_RCC_OscConfig+0x244>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7fe fb43 	bl	80011bc <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7fe fb3f 	bl	80011bc <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e1a8      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b58:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4925      	ldr	r1, [pc, #148]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	e015      	b.n	8002b9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <HAL_RCC_OscConfig+0x244>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe fb22 	bl	80011bc <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7fe fb1e 	bl	80011bc <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e187      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d036      	beq.n	8002c14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d016      	beq.n	8002bdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_RCC_OscConfig+0x248>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe fb02 	bl	80011bc <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fafe 	bl	80011bc <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e167      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x200>
 8002bda:	e01b      	b.n	8002c14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCC_OscConfig+0x248>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be2:	f7fe faeb 	bl	80011bc <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be8:	e00e      	b.n	8002c08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bea:	f7fe fae7 	bl	80011bc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d907      	bls.n	8002c08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e150      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	42470000 	.word	0x42470000
 8002c04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	4b88      	ldr	r3, [pc, #544]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ea      	bne.n	8002bea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8097 	beq.w	8002d50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c26:	4b81      	ldr	r3, [pc, #516]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	4b7d      	ldr	r3, [pc, #500]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a7c      	ldr	r2, [pc, #496]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b7a      	ldr	r3, [pc, #488]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b77      	ldr	r3, [pc, #476]	; (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b74      	ldr	r3, [pc, #464]	; (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a73      	ldr	r2, [pc, #460]	; (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe faa7 	bl	80011bc <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7fe faa3 	bl	80011bc <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e10c      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b6a      	ldr	r3, [pc, #424]	; (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x2ea>
 8002c98:	4b64      	ldr	r3, [pc, #400]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	4a63      	ldr	r2, [pc, #396]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca4:	e01c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x324>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x30c>
 8002cae:	4b5f      	ldr	r3, [pc, #380]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a5e      	ldr	r2, [pc, #376]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cba:	4b5c      	ldr	r3, [pc, #368]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a5b      	ldr	r2, [pc, #364]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x324>
 8002cc8:	4b58      	ldr	r3, [pc, #352]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	4a57      	ldr	r2, [pc, #348]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd4:	4b55      	ldr	r3, [pc, #340]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a54      	ldr	r2, [pc, #336]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cda:	f023 0304 	bic.w	r3, r3, #4
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fa68 	bl	80011bc <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fa64 	bl	80011bc <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0cb      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	4b49      	ldr	r3, [pc, #292]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0ee      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x334>
 8002d12:	e014      	b.n	8002d3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d14:	f7fe fa52 	bl	80011bc <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7fe fa4e 	bl	80011bc <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e0b5      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d32:	4b3e      	ldr	r3, [pc, #248]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1ee      	bne.n	8002d1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d105      	bne.n	8002d50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d44:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a38      	ldr	r2, [pc, #224]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a1 	beq.w	8002e9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d05c      	beq.n	8002e20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d141      	bne.n	8002df2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fa22 	bl	80011bc <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fa1e 	bl	80011bc <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e087      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	3b01      	subs	r3, #1
 8002db4:	041b      	lsls	r3, r3, #16
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	061b      	lsls	r3, r3, #24
 8002dbe:	491b      	ldr	r1, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7fe f9f7 	bl	80011bc <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7fe f9f3 	bl	80011bc <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e05c      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x416>
 8002df0:	e054      	b.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe f9e0 	bl	80011bc <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe f9dc 	bl	80011bc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e045      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x444>
 8002e1e:	e03d      	b.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e038      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40007000 	.word	0x40007000
 8002e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_RCC_OscConfig+0x4ec>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d028      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d121      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d11a      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d111      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	3b01      	subs	r3, #1
 8002e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800

08002eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0cc      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b68      	ldr	r3, [pc, #416]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d90c      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b65      	ldr	r3, [pc, #404]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b63      	ldr	r3, [pc, #396]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0b8      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f00:	4b59      	ldr	r3, [pc, #356]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a58      	ldr	r2, [pc, #352]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f18:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f24:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	494d      	ldr	r1, [pc, #308]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d044      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	4b47      	ldr	r3, [pc, #284]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d119      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e07f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e067      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4b37      	ldr	r3, [pc, #220]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4934      	ldr	r1, [pc, #208]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7fe f90e 	bl	80011bc <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7fe f90a 	bl	80011bc <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e04f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 020c 	and.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1eb      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d20c      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b22      	ldr	r3, [pc, #136]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e032      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4916      	ldr	r1, [pc, #88]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	490e      	ldr	r1, [pc, #56]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003032:	f000 f821 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003036:	4602      	mov	r2, r0
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	490a      	ldr	r1, [pc, #40]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	5ccb      	ldrb	r3, [r1, r3]
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	4a09      	ldr	r2, [pc, #36]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe f86e 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023c00 	.word	0x40023c00
 8003068:	40023800 	.word	0x40023800
 800306c:	0800cba0 	.word	0x0800cba0
 8003070:	2000004c 	.word	0x2000004c
 8003074:	20000050 	.word	0x20000050

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800307c:	b090      	sub	sp, #64	; 0x40
 800307e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
 8003084:	2300      	movs	r3, #0
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003088:	2300      	movs	r3, #0
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003090:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d00d      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x40>
 800309c:	2b08      	cmp	r3, #8
 800309e:	f200 80a1 	bhi.w	80031e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x34>
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030aa:	e09b      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <HAL_RCC_GetSysClockFreq+0x184>)
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80030b0:	e09b      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b2:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_GetSysClockFreq+0x188>)
 80030b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030b6:	e098      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b8:	4b4f      	ldr	r3, [pc, #316]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c2:	4b4d      	ldr	r3, [pc, #308]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d028      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	4b4a      	ldr	r3, [pc, #296]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	2200      	movs	r2, #0
 80030d6:	623b      	str	r3, [r7, #32]
 80030d8:	627a      	str	r2, [r7, #36]	; 0x24
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030e0:	2100      	movs	r1, #0
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCC_GetSysClockFreq+0x188>)
 80030e4:	fb03 f201 	mul.w	r2, r3, r1
 80030e8:	2300      	movs	r3, #0
 80030ea:	fb00 f303 	mul.w	r3, r0, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	4a43      	ldr	r2, [pc, #268]	; (8003200 <HAL_RCC_GetSysClockFreq+0x188>)
 80030f2:	fba0 1202 	umull	r1, r2, r0, r2
 80030f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030f8:	460a      	mov	r2, r1
 80030fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80030fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030fe:	4413      	add	r3, r2
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003104:	2200      	movs	r2, #0
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	61fa      	str	r2, [r7, #28]
 800310a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800310e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003112:	f7fd f8bd 	bl	8000290 <__aeabi_uldivmod>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4613      	mov	r3, r2
 800311c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800311e:	e053      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003120:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	2200      	movs	r2, #0
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	617a      	str	r2, [r7, #20]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003132:	f04f 0b00 	mov.w	fp, #0
 8003136:	4652      	mov	r2, sl
 8003138:	465b      	mov	r3, fp
 800313a:	f04f 0000 	mov.w	r0, #0
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	0159      	lsls	r1, r3, #5
 8003144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003148:	0150      	lsls	r0, r2, #5
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	ebb2 080a 	subs.w	r8, r2, sl
 8003152:	eb63 090b 	sbc.w	r9, r3, fp
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003162:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003166:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800316a:	ebb2 0408 	subs.w	r4, r2, r8
 800316e:	eb63 0509 	sbc.w	r5, r3, r9
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	00eb      	lsls	r3, r5, #3
 800317c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003180:	00e2      	lsls	r2, r4, #3
 8003182:	4614      	mov	r4, r2
 8003184:	461d      	mov	r5, r3
 8003186:	eb14 030a 	adds.w	r3, r4, sl
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	eb45 030b 	adc.w	r3, r5, fp
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800319e:	4629      	mov	r1, r5
 80031a0:	028b      	lsls	r3, r1, #10
 80031a2:	4621      	mov	r1, r4
 80031a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031a8:	4621      	mov	r1, r4
 80031aa:	028a      	lsls	r2, r1, #10
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b2:	2200      	movs	r2, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	60fa      	str	r2, [r7, #12]
 80031b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031bc:	f7fd f868 	bl	8000290 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	3301      	adds	r3, #1
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80031d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031e2:	e002      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCC_GetSysClockFreq+0x184>)
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3740      	adds	r7, #64	; 0x40
 80031f0:	46bd      	mov	sp, r7
 80031f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	017d7840 	.word	0x017d7840

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <HAL_RCC_GetHCLKFreq+0x14>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	2000004c 	.word	0x2000004c

0800321c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003220:	f7ff fff0 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003224:	4602      	mov	r2, r0
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	0a9b      	lsrs	r3, r3, #10
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4903      	ldr	r1, [pc, #12]	; (8003240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003232:	5ccb      	ldrb	r3, [r1, r3]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40023800 	.word	0x40023800
 8003240:	0800cbb0 	.word	0x0800cbb0

08003244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003248:	f7ff ffdc 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	0b5b      	lsrs	r3, r3, #13
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4903      	ldr	r1, [pc, #12]	; (8003268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40023800 	.word	0x40023800
 8003268:	0800cbb0 	.word	0x0800cbb0

0800326c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e03f      	b.n	80032fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd fdce 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2224      	movs	r2, #36	; 0x24
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f929 	bl	8003508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b08a      	sub	sp, #40	; 0x28
 800330a:	af02      	add	r7, sp, #8
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b20      	cmp	r3, #32
 8003324:	d17c      	bne.n	8003420 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_UART_Transmit+0x2c>
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e075      	b.n	8003422 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_UART_Transmit+0x3e>
 8003340:	2302      	movs	r3, #2
 8003342:	e06e      	b.n	8003422 <HAL_UART_Transmit+0x11c>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2221      	movs	r2, #33	; 0x21
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800335a:	f7fd ff2f 	bl	80011bc <HAL_GetTick>
 800335e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	88fa      	ldrh	r2, [r7, #6]
 8003364:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003374:	d108      	bne.n	8003388 <HAL_UART_Transmit+0x82>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d104      	bne.n	8003388 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	e003      	b.n	8003390 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800338c:	2300      	movs	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003398:	e02a      	b.n	80033f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2200      	movs	r2, #0
 80033a2:	2180      	movs	r1, #128	; 0x80
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f840 	bl	800342a <UART_WaitOnFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e036      	b.n	8003422 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	3302      	adds	r3, #2
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	e007      	b.n	80033e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3301      	adds	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1cf      	bne.n	800339a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2200      	movs	r2, #0
 8003402:	2140      	movs	r1, #64	; 0x40
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f810 	bl	800342a <UART_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e006      	b.n	8003422 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b090      	sub	sp, #64	; 0x40
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	4613      	mov	r3, r2
 8003438:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343a:	e050      	b.n	80034de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003442:	d04c      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003446:	2b00      	cmp	r3, #0
 8003448:	d007      	beq.n	800345a <UART_WaitOnFlagUntilTimeout+0x30>
 800344a:	f7fd feb7 	bl	80011bc <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003456:	429a      	cmp	r2, r3
 8003458:	d241      	bcs.n	80034de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800347a:	637a      	str	r2, [r7, #52]	; 0x34
 800347c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e5      	bne.n	800345a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3314      	adds	r3, #20
 8003494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	613b      	str	r3, [r7, #16]
   return(result);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3314      	adds	r3, #20
 80034ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ae:	623a      	str	r2, [r7, #32]
 80034b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	69f9      	ldr	r1, [r7, #28]
 80034b4:	6a3a      	ldr	r2, [r7, #32]
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e5      	bne.n	800348e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e00f      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4013      	ands	r3, r2
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d09f      	beq.n	800343c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3740      	adds	r7, #64	; 0x40
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800350c:	b0c0      	sub	sp, #256	; 0x100
 800350e:	af00      	add	r7, sp, #0
 8003510:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	68d9      	ldr	r1, [r3, #12]
 8003526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	ea40 0301 	orr.w	r3, r0, r1
 8003530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	431a      	orrs	r2, r3
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	431a      	orrs	r2, r3
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003560:	f021 010c 	bic.w	r1, r1, #12
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800356e:	430b      	orrs	r3, r1
 8003570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003582:	6999      	ldr	r1, [r3, #24]
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	ea40 0301 	orr.w	r3, r0, r1
 800358e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4b8f      	ldr	r3, [pc, #572]	; (80037d4 <UART_SetConfig+0x2cc>)
 8003598:	429a      	cmp	r2, r3
 800359a:	d005      	beq.n	80035a8 <UART_SetConfig+0xa0>
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b8d      	ldr	r3, [pc, #564]	; (80037d8 <UART_SetConfig+0x2d0>)
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d104      	bne.n	80035b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035a8:	f7ff fe4c 	bl	8003244 <HAL_RCC_GetPCLK2Freq>
 80035ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035b0:	e003      	b.n	80035ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035b2:	f7ff fe33 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80035b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c4:	f040 810c 	bne.w	80037e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035da:	4622      	mov	r2, r4
 80035dc:	462b      	mov	r3, r5
 80035de:	1891      	adds	r1, r2, r2
 80035e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80035e2:	415b      	adcs	r3, r3
 80035e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035ea:	4621      	mov	r1, r4
 80035ec:	eb12 0801 	adds.w	r8, r2, r1
 80035f0:	4629      	mov	r1, r5
 80035f2:	eb43 0901 	adc.w	r9, r3, r1
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360a:	4690      	mov	r8, r2
 800360c:	4699      	mov	r9, r3
 800360e:	4623      	mov	r3, r4
 8003610:	eb18 0303 	adds.w	r3, r8, r3
 8003614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003618:	462b      	mov	r3, r5
 800361a:	eb49 0303 	adc.w	r3, r9, r3
 800361e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800362e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003632:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003636:	460b      	mov	r3, r1
 8003638:	18db      	adds	r3, r3, r3
 800363a:	653b      	str	r3, [r7, #80]	; 0x50
 800363c:	4613      	mov	r3, r2
 800363e:	eb42 0303 	adc.w	r3, r2, r3
 8003642:	657b      	str	r3, [r7, #84]	; 0x54
 8003644:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003648:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800364c:	f7fc fe20 	bl	8000290 <__aeabi_uldivmod>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4b61      	ldr	r3, [pc, #388]	; (80037dc <UART_SetConfig+0x2d4>)
 8003656:	fba3 2302 	umull	r2, r3, r3, r2
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	011c      	lsls	r4, r3, #4
 800365e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003662:	2200      	movs	r2, #0
 8003664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003668:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800366c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003670:	4642      	mov	r2, r8
 8003672:	464b      	mov	r3, r9
 8003674:	1891      	adds	r1, r2, r2
 8003676:	64b9      	str	r1, [r7, #72]	; 0x48
 8003678:	415b      	adcs	r3, r3
 800367a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800367c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003680:	4641      	mov	r1, r8
 8003682:	eb12 0a01 	adds.w	sl, r2, r1
 8003686:	4649      	mov	r1, r9
 8003688:	eb43 0b01 	adc.w	fp, r3, r1
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003698:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800369c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036a0:	4692      	mov	sl, r2
 80036a2:	469b      	mov	fp, r3
 80036a4:	4643      	mov	r3, r8
 80036a6:	eb1a 0303 	adds.w	r3, sl, r3
 80036aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036ae:	464b      	mov	r3, r9
 80036b0:	eb4b 0303 	adc.w	r3, fp, r3
 80036b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036cc:	460b      	mov	r3, r1
 80036ce:	18db      	adds	r3, r3, r3
 80036d0:	643b      	str	r3, [r7, #64]	; 0x40
 80036d2:	4613      	mov	r3, r2
 80036d4:	eb42 0303 	adc.w	r3, r2, r3
 80036d8:	647b      	str	r3, [r7, #68]	; 0x44
 80036da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036e2:	f7fc fdd5 	bl	8000290 <__aeabi_uldivmod>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4611      	mov	r1, r2
 80036ec:	4b3b      	ldr	r3, [pc, #236]	; (80037dc <UART_SetConfig+0x2d4>)
 80036ee:	fba3 2301 	umull	r2, r3, r3, r1
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2264      	movs	r2, #100	; 0x64
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	1acb      	subs	r3, r1, r3
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003702:	4b36      	ldr	r3, [pc, #216]	; (80037dc <UART_SetConfig+0x2d4>)
 8003704:	fba3 2302 	umull	r2, r3, r3, r2
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003710:	441c      	add	r4, r3
 8003712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003716:	2200      	movs	r2, #0
 8003718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800371c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003720:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003724:	4642      	mov	r2, r8
 8003726:	464b      	mov	r3, r9
 8003728:	1891      	adds	r1, r2, r2
 800372a:	63b9      	str	r1, [r7, #56]	; 0x38
 800372c:	415b      	adcs	r3, r3
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003734:	4641      	mov	r1, r8
 8003736:	1851      	adds	r1, r2, r1
 8003738:	6339      	str	r1, [r7, #48]	; 0x30
 800373a:	4649      	mov	r1, r9
 800373c:	414b      	adcs	r3, r1
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800374c:	4659      	mov	r1, fp
 800374e:	00cb      	lsls	r3, r1, #3
 8003750:	4651      	mov	r1, sl
 8003752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003756:	4651      	mov	r1, sl
 8003758:	00ca      	lsls	r2, r1, #3
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	4603      	mov	r3, r0
 8003760:	4642      	mov	r2, r8
 8003762:	189b      	adds	r3, r3, r2
 8003764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003768:	464b      	mov	r3, r9
 800376a:	460a      	mov	r2, r1
 800376c:	eb42 0303 	adc.w	r3, r2, r3
 8003770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003780:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003788:	460b      	mov	r3, r1
 800378a:	18db      	adds	r3, r3, r3
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
 800378e:	4613      	mov	r3, r2
 8003790:	eb42 0303 	adc.w	r3, r2, r3
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003796:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800379a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800379e:	f7fc fd77 	bl	8000290 <__aeabi_uldivmod>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <UART_SetConfig+0x2d4>)
 80037a8:	fba3 1302 	umull	r1, r3, r3, r2
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	2164      	movs	r1, #100	; 0x64
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	3332      	adds	r3, #50	; 0x32
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <UART_SetConfig+0x2d4>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	f003 0207 	and.w	r2, r3, #7
 80037c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4422      	add	r2, r4
 80037ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037d0:	e106      	b.n	80039e0 <UART_SetConfig+0x4d8>
 80037d2:	bf00      	nop
 80037d4:	40011000 	.word	0x40011000
 80037d8:	40011400 	.word	0x40011400
 80037dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037f2:	4642      	mov	r2, r8
 80037f4:	464b      	mov	r3, r9
 80037f6:	1891      	adds	r1, r2, r2
 80037f8:	6239      	str	r1, [r7, #32]
 80037fa:	415b      	adcs	r3, r3
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
 80037fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003802:	4641      	mov	r1, r8
 8003804:	1854      	adds	r4, r2, r1
 8003806:	4649      	mov	r1, r9
 8003808:	eb43 0501 	adc.w	r5, r3, r1
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	00eb      	lsls	r3, r5, #3
 8003816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800381a:	00e2      	lsls	r2, r4, #3
 800381c:	4614      	mov	r4, r2
 800381e:	461d      	mov	r5, r3
 8003820:	4643      	mov	r3, r8
 8003822:	18e3      	adds	r3, r4, r3
 8003824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003828:	464b      	mov	r3, r9
 800382a:	eb45 0303 	adc.w	r3, r5, r3
 800382e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800383e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800384e:	4629      	mov	r1, r5
 8003850:	008b      	lsls	r3, r1, #2
 8003852:	4621      	mov	r1, r4
 8003854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003858:	4621      	mov	r1, r4
 800385a:	008a      	lsls	r2, r1, #2
 800385c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003860:	f7fc fd16 	bl	8000290 <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4b60      	ldr	r3, [pc, #384]	; (80039ec <UART_SetConfig+0x4e4>)
 800386a:	fba3 2302 	umull	r2, r3, r3, r2
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	011c      	lsls	r4, r3, #4
 8003872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800387c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003880:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003884:	4642      	mov	r2, r8
 8003886:	464b      	mov	r3, r9
 8003888:	1891      	adds	r1, r2, r2
 800388a:	61b9      	str	r1, [r7, #24]
 800388c:	415b      	adcs	r3, r3
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003894:	4641      	mov	r1, r8
 8003896:	1851      	adds	r1, r2, r1
 8003898:	6139      	str	r1, [r7, #16]
 800389a:	4649      	mov	r1, r9
 800389c:	414b      	adcs	r3, r1
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038ac:	4659      	mov	r1, fp
 80038ae:	00cb      	lsls	r3, r1, #3
 80038b0:	4651      	mov	r1, sl
 80038b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038b6:	4651      	mov	r1, sl
 80038b8:	00ca      	lsls	r2, r1, #3
 80038ba:	4610      	mov	r0, r2
 80038bc:	4619      	mov	r1, r3
 80038be:	4603      	mov	r3, r0
 80038c0:	4642      	mov	r2, r8
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038c8:	464b      	mov	r3, r9
 80038ca:	460a      	mov	r2, r1
 80038cc:	eb42 0303 	adc.w	r3, r2, r3
 80038d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80038de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038ec:	4649      	mov	r1, r9
 80038ee:	008b      	lsls	r3, r1, #2
 80038f0:	4641      	mov	r1, r8
 80038f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038f6:	4641      	mov	r1, r8
 80038f8:	008a      	lsls	r2, r1, #2
 80038fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038fe:	f7fc fcc7 	bl	8000290 <__aeabi_uldivmod>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4611      	mov	r1, r2
 8003908:	4b38      	ldr	r3, [pc, #224]	; (80039ec <UART_SetConfig+0x4e4>)
 800390a:	fba3 2301 	umull	r2, r3, r3, r1
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2264      	movs	r2, #100	; 0x64
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	1acb      	subs	r3, r1, r3
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	3332      	adds	r3, #50	; 0x32
 800391c:	4a33      	ldr	r2, [pc, #204]	; (80039ec <UART_SetConfig+0x4e4>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003928:	441c      	add	r4, r3
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392e:	2200      	movs	r2, #0
 8003930:	673b      	str	r3, [r7, #112]	; 0x70
 8003932:	677a      	str	r2, [r7, #116]	; 0x74
 8003934:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003938:	4642      	mov	r2, r8
 800393a:	464b      	mov	r3, r9
 800393c:	1891      	adds	r1, r2, r2
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	415b      	adcs	r3, r3
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003948:	4641      	mov	r1, r8
 800394a:	1851      	adds	r1, r2, r1
 800394c:	6039      	str	r1, [r7, #0]
 800394e:	4649      	mov	r1, r9
 8003950:	414b      	adcs	r3, r1
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003960:	4659      	mov	r1, fp
 8003962:	00cb      	lsls	r3, r1, #3
 8003964:	4651      	mov	r1, sl
 8003966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396a:	4651      	mov	r1, sl
 800396c:	00ca      	lsls	r2, r1, #3
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	4603      	mov	r3, r0
 8003974:	4642      	mov	r2, r8
 8003976:	189b      	adds	r3, r3, r2
 8003978:	66bb      	str	r3, [r7, #104]	; 0x68
 800397a:	464b      	mov	r3, r9
 800397c:	460a      	mov	r2, r1
 800397e:	eb42 0303 	adc.w	r3, r2, r3
 8003982:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	663b      	str	r3, [r7, #96]	; 0x60
 800398e:	667a      	str	r2, [r7, #100]	; 0x64
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800399c:	4649      	mov	r1, r9
 800399e:	008b      	lsls	r3, r1, #2
 80039a0:	4641      	mov	r1, r8
 80039a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039a6:	4641      	mov	r1, r8
 80039a8:	008a      	lsls	r2, r1, #2
 80039aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039ae:	f7fc fc6f 	bl	8000290 <__aeabi_uldivmod>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <UART_SetConfig+0x4e4>)
 80039b8:	fba3 1302 	umull	r1, r3, r3, r2
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	2164      	movs	r1, #100	; 0x64
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	3332      	adds	r3, #50	; 0x32
 80039ca:	4a08      	ldr	r2, [pc, #32]	; (80039ec <UART_SetConfig+0x4e4>)
 80039cc:	fba2 2303 	umull	r2, r3, r2, r3
 80039d0:	095b      	lsrs	r3, r3, #5
 80039d2:	f003 020f 	and.w	r2, r3, #15
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4422      	add	r2, r4
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039e6:	46bd      	mov	sp, r7
 80039e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ec:	51eb851f 	.word	0x51eb851f

080039f0 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4293      	cmp	r3, r2
 8003a00:	bf38      	it	cc
 8003a02:	4613      	movcc	r3, r2
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	bf28      	it	cs
 8003a22:	4613      	movcs	r3, r2
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a42:	6839      	ldr	r1, [r7, #0]
 8003a44:	fb01 f202 	mul.w	r2, r1, r2
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	1ad3      	subs	r3, r2, r3
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	4413      	add	r3, r2
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	6839      	ldr	r1, [r7, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff ffde 	bl	8003a30 <lfs_aligndown>
 8003a74:	4603      	mov	r3, r0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7fc fbfb 	bl	80002c0 <__popcountsi2>
 8003aca:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	1ad3      	subs	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8003af8:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ffee 	bl	8003af0 <lfs_fromle32>
 8003b14:	4603      	mov	r3, r0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ffed 	bl	8003b1e <lfs_frombe32>
 8003b44:	4603      	mov	r3, r0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f007 f91a 	bl	800ad90 <malloc>
 8003b5c:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f007 f916 	bl	800ada0 <free>
#else
    (void)p;
#endif
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b8c:	601a      	str	r2, [r3, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68d8      	ldr	r0, [r3, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	461a      	mov	r2, r3
 8003bb0:	21ff      	movs	r1, #255	; 0xff
 8003bb2:	f007 fb16 	bl	800b1e2 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bbc:	601a      	str	r2, [r3, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d208      	bcs.n	8003bf8 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8003be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bea:	441a      	add	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf0:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	f240 811b 	bls.w	8003e2e <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8003bf8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003bfc:	e11c      	b.n	8003e38 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c00:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d03f      	beq.n	8003c88 <lfs_bd_read+0xc0>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d13a      	bne.n	8003c88 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8003c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d232      	bcs.n	8003c88 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d324      	bcc.n	8003c76 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	1acb      	subs	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	69b8      	ldr	r0, [r7, #24]
 8003c3e:	f7ff fee7 	bl	8003a10 <lfs_min>
 8003c42:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c4e:	1acb      	subs	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4619      	mov	r1, r3
 8003c56:	69f8      	ldr	r0, [r7, #28]
 8003c58:	f007 fb7c 	bl	800b354 <memcpy>

                data += diff;
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	4413      	add	r3, r2
 8003c62:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	4413      	add	r3, r2
 8003c6a:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003c74:	e0db      	b.n	8003e2e <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	4619      	mov	r1, r3
 8003c80:	69b8      	ldr	r0, [r7, #24]
 8003c82:	f7ff fec5 	bl	8003a10 <lfs_min>
 8003c86:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d13a      	bne.n	8003d08 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	4413      	add	r3, r2
        if (block == rcache->block &&
 8003c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d232      	bcs.n	8003d08 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d324      	bcc.n	8003cf6 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb6:	1acb      	subs	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	4619      	mov	r1, r3
 8003cbc:	69b8      	ldr	r0, [r7, #24]
 8003cbe:	f7ff fea7 	bl	8003a10 <lfs_min>
 8003cc2:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cce:	1acb      	subs	r3, r1, r3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	69f8      	ldr	r0, [r7, #28]
 8003cd8:	f007 fb3c 	bl	800b354 <memcpy>

                data += diff;
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	4413      	add	r3, r2
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003cec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003cf4:	e09b      	b.n	8003e2e <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	4619      	mov	r1, r3
 8003d00:	69b8      	ldr	r0, [r7, #24]
 8003d02:	f7ff fe85 	bl	8003a10 <lfs_min>
 8003d06:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8003d08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d336      	bcc.n	8003d7e <lfs_bd_read+0x1b6>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d14:	695a      	ldr	r2, [r3, #20]
 8003d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d18:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d1c:	fb01 f202 	mul.w	r2, r1, r2
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d12b      	bne.n	8003d7e <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d2a:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8003d2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d325      	bcc.n	8003d7e <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	69b8      	ldr	r0, [r7, #24]
 8003d3c:	f7ff fe78 	bl	8003a30 <lfs_aligndown>
 8003d40:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d46:	685c      	ldr	r4, [r3, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d56:	47a0      	blx	r4
 8003d58:	6178      	str	r0, [r7, #20]
            if (err) {
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <lfs_bd_read+0x19c>
                return err;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	e069      	b.n	8003e38 <lfs_bd_read+0x270>
            }

            data += diff;
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	4413      	add	r3, r2
 8003d6a:	61fb      	str	r3, [r7, #28]
            off += diff;
 8003d6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	4413      	add	r3, r2
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8003d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8003d7c:	e057      	b.n	8003e2e <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d305      	bcc.n	8003d96 <lfs_bd_read+0x1ce>
 8003d8a:	4b2d      	ldr	r3, [pc, #180]	; (8003e40 <lfs_bd_read+0x278>)
 8003d8c:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <lfs_bd_read+0x27c>)
 8003d8e:	216b      	movs	r1, #107	; 0x6b
 8003d90:	482d      	ldr	r0, [pc, #180]	; (8003e48 <lfs_bd_read+0x280>)
 8003d92:	f006 ffdf 	bl	800ad54 <__assert_func>
        rcache->block = block;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d9a:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4619      	mov	r1, r3
 8003da4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003da6:	f7ff fe43 	bl	8003a30 <lfs_aligndown>
 8003daa:	4602      	mov	r2, r0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8003db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dba:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f7ff fe4b 	bl	8003a5a <lfs_alignup>
 8003dc4:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dca:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f7ff fe1e 	bl	8003a10 <lfs_min>
 8003dd4:	4602      	mov	r2, r0
                - rcache->off,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8003dda:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8003de2:	4619      	mov	r1, r3
 8003de4:	4610      	mov	r0, r2
 8003de6:	f7ff fe13 	bl	8003a10 <lfs_min>
 8003dea:	4602      	mov	r2, r0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df4:	685c      	ldr	r4, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	47a0      	blx	r4
 8003e10:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	dd05      	ble.n	8003e24 <lfs_bd_read+0x25c>
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <lfs_bd_read+0x284>)
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <lfs_bd_read+0x27c>)
 8003e1c:	2176      	movs	r1, #118	; 0x76
 8003e1e:	480a      	ldr	r0, [pc, #40]	; (8003e48 <lfs_bd_read+0x280>)
 8003e20:	f006 ff98 	bl	800ad54 <__assert_func>
        if (err) {
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <lfs_bd_read+0x266>
            return err;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	e004      	b.n	8003e38 <lfs_bd_read+0x270>
    while (size > 0) {
 8003e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f47f aee4 	bne.w	8003bfe <lfs_bd_read+0x36>
        }
    }

    return 0;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e40:	0800bf28 	.word	0x0800bf28
 8003e44:	0800cbb8 	.word	0x0800cbb8
 8003e48:	0800bf48 	.word	0x0800bf48
 8003e4c:	0800bf5c 	.word	0x0800bf5c

08003e50 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b090      	sub	sp, #64	; 0x40
 8003e54:	af04      	add	r7, sp, #16
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8003e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8003e66:	2300      	movs	r3, #0
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6a:	e039      	b.n	8003ee0 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8003e6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2108      	movs	r1, #8
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fdcb 	bl	8003a10 <lfs_min>
 8003e7a:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	1ad1      	subs	r1, r2, r3
 8003e82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	4413      	add	r3, r2
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	9203      	str	r2, [sp, #12]
 8003e8c:	f107 0214 	add.w	r2, r7, #20
 8003e90:	9202      	str	r2, [sp, #8]
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff fe92 	bl	8003bc8 <lfs_bd_read>
 8003ea4:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <lfs_bd_cmp+0x60>
            return err;
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	e01c      	b.n	8003eea <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8003eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	18d1      	adds	r1, r2, r3
 8003eb6:	f107 0314 	add.w	r3, r7, #20
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f007 f980 	bl	800b1c2 <memcmp>
 8003ec2:	61f8      	str	r0, [r7, #28]
        if (res) {
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	da01      	bge.n	8003ed4 <lfs_bd_cmp+0x84>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e00a      	b.n	8003eea <lfs_bd_cmp+0x9a>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e008      	b.n	8003eea <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8003ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	4413      	add	r3, r2
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d3c1      	bcc.n	8003e6c <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3730      	adds	r7, #48	; 0x30
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b08e      	sub	sp, #56	; 0x38
 8003ef6:	af04      	add	r7, sp, #16
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8003f04:	2300      	movs	r3, #0
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
 8003f08:	e030      	b.n	8003f6c <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8003f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2108      	movs	r1, #8
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fd7c 	bl	8003a10 <lfs_min>
 8003f18:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	1ad1      	subs	r1, r2, r3
 8003f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	4413      	add	r3, r2
 8003f26:	6a3a      	ldr	r2, [r7, #32]
 8003f28:	9203      	str	r2, [sp, #12]
 8003f2a:	f107 0214 	add.w	r2, r7, #20
 8003f2e:	9202      	str	r2, [sp, #8]
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	460b      	mov	r3, r1
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7ff fe43 	bl	8003bc8 <lfs_bd_read>
 8003f42:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <lfs_bd_crc+0x5c>
            return err;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	e013      	b.n	8003f76 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f107 0114 	add.w	r1, r7, #20
 8003f56:	6a3a      	ldr	r2, [r7, #32]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f006 fcc1 	bl	800a8e0 <lfs_crc>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f62:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8003f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	4413      	add	r3, r2
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d3ca      	bcc.n	8003f0a <lfs_bd_crc+0x18>
    }

    return 0;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3728      	adds	r7, #40	; 0x28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8003f80:	b5b0      	push	{r4, r5, r7, lr}
 8003f82:	b08c      	sub	sp, #48	; 0x30
 8003f84:	af04      	add	r7, sp, #16
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f96:	d061      	beq.n	800405c <lfs_bd_flush+0xdc>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f113 0f02 	cmn.w	r3, #2
 8003fa0:	d05c      	beq.n	800405c <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d305      	bcc.n	8003fbc <lfs_bd_flush+0x3c>
 8003fb0:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <lfs_bd_flush+0xe8>)
 8003fb2:	4a2e      	ldr	r2, [pc, #184]	; (800406c <lfs_bd_flush+0xec>)
 8003fb4:	21b3      	movs	r1, #179	; 0xb3
 8003fb6:	482e      	ldr	r0, [pc, #184]	; (8004070 <lfs_bd_flush+0xf0>)
 8003fb8:	f006 fecc 	bl	800ad54 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f7ff fd46 	bl	8003a5a <lfs_alignup>
 8003fce:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd4:	689c      	ldr	r4, [r3, #8]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6819      	ldr	r1, [r3, #0]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	462b      	mov	r3, r5
 8003fec:	47a0      	blx	r4
 8003fee:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	dd05      	ble.n	8004002 <lfs_bd_flush+0x82>
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <lfs_bd_flush+0xf4>)
 8003ff8:	4a1c      	ldr	r2, [pc, #112]	; (800406c <lfs_bd_flush+0xec>)
 8003ffa:	21b7      	movs	r1, #183	; 0xb7
 8003ffc:	481c      	ldr	r0, [pc, #112]	; (8004070 <lfs_bd_flush+0xf0>)
 8003ffe:	f006 fea9 	bl	800ad54 <__assert_func>
        if (err) {
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <lfs_bd_flush+0x8c>
            return err;
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	e028      	b.n	800405e <lfs_bd_flush+0xde>
        }

        if (validate) {
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d020      	beq.n	8004054 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff fdb1 	bl	8003b7c <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8004026:	69f8      	ldr	r0, [r7, #28]
 8004028:	9003      	str	r0, [sp, #12]
 800402a:	9102      	str	r1, [sp, #8]
 800402c:	9201      	str	r2, [sp, #4]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	2100      	movs	r1, #0
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff ff0a 	bl	8003e50 <lfs_bd_cmp>
 800403c:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	da01      	bge.n	8004048 <lfs_bd_flush+0xc8>
                return res;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	e00a      	b.n	800405e <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 800404e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004052:	e004      	b.n	800405e <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff fd9f 	bl	8003b9a <lfs_cache_zero>
    }

    return 0;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bdb0      	pop	{r4, r5, r7, pc}
 8004066:	bf00      	nop
 8004068:	0800bf68 	.word	0x0800bf68
 800406c:	0800cbc4 	.word	0x0800cbc4
 8004070:	0800bf48 	.word	0x0800bf48
 8004074:	0800bf5c 	.word	0x0800bf5c

08004078 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff fd77 	bl	8003b7c <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff ff73 	bl	8003f80 <lfs_bd_flush>
 800409a:	6178      	str	r0, [r7, #20]
    if (err) {
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <lfs_bd_sync+0x2e>
        return err;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	e011      	b.n	80040ca <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040b0:	4610      	mov	r0, r2
 80040b2:	4798      	blx	r3
 80040b4:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	dd05      	ble.n	80040c8 <lfs_bd_sync+0x50>
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <lfs_bd_sync+0x5c>)
 80040be:	4a06      	ldr	r2, [pc, #24]	; (80040d8 <lfs_bd_sync+0x60>)
 80040c0:	21dd      	movs	r1, #221	; 0xdd
 80040c2:	4806      	ldr	r0, [pc, #24]	; (80040dc <lfs_bd_sync+0x64>)
 80040c4:	f006 fe46 	bl	800ad54 <__assert_func>
    return err;
 80040c8:	697b      	ldr	r3, [r7, #20]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	0800bf5c 	.word	0x0800bf5c
 80040d8:	0800cbd4 	.word	0x0800cbd4
 80040dc:	0800bf48 	.word	0x0800bf48

080040e0 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	f113 0f02 	cmn.w	r3, #2
 80040f8:	d00b      	beq.n	8004112 <lfs_bd_prog+0x32>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004102:	429a      	cmp	r2, r3
 8004104:	d305      	bcc.n	8004112 <lfs_bd_prog+0x32>
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <lfs_bd_prog+0x144>)
 8004108:	4a47      	ldr	r2, [pc, #284]	; (8004228 <lfs_bd_prog+0x148>)
 800410a:	21e8      	movs	r1, #232	; 0xe8
 800410c:	4847      	ldr	r0, [pc, #284]	; (800422c <lfs_bd_prog+0x14c>)
 800410e:	f006 fe21 	bl	800ad54 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8004112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004116:	441a      	add	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	429a      	cmp	r2, r3
 8004120:	d978      	bls.n	8004214 <lfs_bd_prog+0x134>
 8004122:	4b43      	ldr	r3, [pc, #268]	; (8004230 <lfs_bd_prog+0x150>)
 8004124:	4a40      	ldr	r2, [pc, #256]	; (8004228 <lfs_bd_prog+0x148>)
 8004126:	21e9      	movs	r1, #233	; 0xe9
 8004128:	4840      	ldr	r0, [pc, #256]	; (800422c <lfs_bd_prog+0x14c>)
 800412a:	f006 fe13 	bl	800ad54 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004134:	429a      	cmp	r2, r3
 8004136:	d151      	bne.n	80041dc <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800413c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800413e:	429a      	cmp	r2, r3
 8004140:	d34c      	bcc.n	80041dc <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	4413      	add	r3, r2
                off >= pcache->off &&
 800414e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004150:	429a      	cmp	r2, r3
 8004152:	d243      	bcs.n	80041dc <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004160:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8004162:	4413      	add	r3, r2
 8004164:	4619      	mov	r1, r3
 8004166:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004168:	f7ff fc52 	bl	8003a10 <lfs_min>
 800416c:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004178:	1acb      	subs	r3, r1, r3
 800417a:	4413      	add	r3, r2
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	69f9      	ldr	r1, [r7, #28]
 8004180:	4618      	mov	r0, r3
 8004182:	f007 f8e7 	bl	800b354 <memcpy>

            data += diff;
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	4413      	add	r3, r2
 800418c:	61fb      	str	r3, [r7, #28]
            off += diff;
 800418e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4413      	add	r3, r2
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8004196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6898      	ldr	r0, [r3, #8]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	4619      	mov	r1, r3
 80041ac:	f7ff fc20 	bl	80039f0 <lfs_max>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d127      	bne.n	8004214 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff fed8 	bl	8003f80 <lfs_bd_flush>
 80041d0:	6178      	str	r0, [r7, #20]
                if (err) {
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01d      	beq.n	8004214 <lfs_bd_prog+0x134>
                    return err;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	e01f      	b.n	800421c <lfs_bd_prog+0x13c>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e4:	d006      	beq.n	80041f4 <lfs_bd_prog+0x114>
 80041e6:	4b13      	ldr	r3, [pc, #76]	; (8004234 <lfs_bd_prog+0x154>)
 80041e8:	4a0f      	ldr	r2, [pc, #60]	; (8004228 <lfs_bd_prog+0x148>)
 80041ea:	f44f 7183 	mov.w	r1, #262	; 0x106
 80041ee:	480f      	ldr	r0, [pc, #60]	; (800422c <lfs_bd_prog+0x14c>)
 80041f0:	f006 fdb0 	bl	800ad54 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f8:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	4619      	mov	r1, r3
 8004202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004204:	f7ff fc14 	bl	8003a30 <lfs_aligndown>
 8004208:	4602      	mov	r2, r0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2200      	movs	r2, #0
 8004212:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8004214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004216:	2b00      	cmp	r3, #0
 8004218:	d189      	bne.n	800412e <lfs_bd_prog+0x4e>
    }

    return 0;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	0800bf90 	.word	0x0800bf90
 8004228:	0800cbe0 	.word	0x0800cbe0
 800422c:	0800bf48 	.word	0x0800bf48
 8004230:	0800bfcc 	.word	0x0800bfcc
 8004234:	0800bff0 	.word	0x0800bff0

08004238 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d306      	bcc.n	800425c <lfs_bd_erase+0x24>
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <lfs_bd_erase+0x54>)
 8004250:	4a0f      	ldr	r2, [pc, #60]	; (8004290 <lfs_bd_erase+0x58>)
 8004252:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004256:	480f      	ldr	r0, [pc, #60]	; (8004294 <lfs_bd_erase+0x5c>)
 8004258:	f006 fd7c 	bl	800ad54 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004266:	6839      	ldr	r1, [r7, #0]
 8004268:	4610      	mov	r0, r2
 800426a:	4798      	blx	r3
 800426c:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	dd06      	ble.n	8004282 <lfs_bd_erase+0x4a>
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <lfs_bd_erase+0x60>)
 8004276:	4a06      	ldr	r2, [pc, #24]	; (8004290 <lfs_bd_erase+0x58>)
 8004278:	f44f 718b 	mov.w	r1, #278	; 0x116
 800427c:	4805      	ldr	r0, [pc, #20]	; (8004294 <lfs_bd_erase+0x5c>)
 800427e:	f006 fd69 	bl	800ad54 <__assert_func>
    return err;
 8004282:	68fb      	ldr	r3, [r7, #12]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	0800bf28 	.word	0x0800bf28
 8004290:	0800cbec 	.word	0x0800cbec
 8004294:	0800bf48 	.word	0x0800bf48
 8004298:	0800bf5c 	.word	0x0800bf5c

0800429c <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	601a      	str	r2, [r3, #0]
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d6:	d005      	beq.n	80042e4 <lfs_pair_isnull+0x1e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e2:	d101      	bne.n	80042e8 <lfs_pair_isnull+0x22>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <lfs_pair_isnull+0x24>
 80042e8:	2300      	movs	r3, #0
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	b2db      	uxtb	r3, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d017      	beq.n	8004342 <lfs_pair_cmp+0x46>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	3304      	adds	r3, #4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d00f      	beq.n	8004342 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	3304      	adds	r3, #4
 800432a:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d008      	beq.n	8004342 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d001      	beq.n	8004342 <lfs_pair_cmp+0x46>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <lfs_pair_cmp+0x48>
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d107      	bne.n	8004376 <lfs_pair_issync+0x26>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	3304      	adds	r3, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d00d      	beq.n	8004392 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	3304      	adds	r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004380:	429a      	cmp	r2, r3
 8004382:	d108      	bne.n	8004396 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d101      	bne.n	8004396 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <lfs_pair_issync+0x48>
 8004396:	2300      	movs	r3, #0
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80043aa:	b590      	push	{r4, r7, lr}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fb9a 	bl	8003af0 <lfs_fromle32>
 80043bc:	4602      	mov	r2, r0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	1d1c      	adds	r4, r3, #4
 80043cc:	4610      	mov	r0, r2
 80043ce:	f7ff fb8f 	bl	8003af0 <lfs_fromle32>
 80043d2:	4603      	mov	r3, r0
 80043d4:	6023      	str	r3, [r4, #0]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd90      	pop	{r4, r7, pc}

080043de <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80043de:	b590      	push	{r4, r7, lr}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fb8b 	bl	8003b06 <lfs_tole32>
 80043f0:	4602      	mov	r2, r0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1d1c      	adds	r4, r3, #4
 8004400:	4610      	mov	r0, r2
 8004402:	f7ff fb80 	bl	8003b06 <lfs_tole32>
 8004406:	4603      	mov	r3, r0
 8004408:	6023      	str	r3, [r4, #0]
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bd90      	pop	{r4, r7, pc}

08004412 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	43db      	mvns	r3, r3
 800441e:	0fdb      	lsrs	r3, r3, #31
 8004420:	b2db      	uxtb	r3, r3
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	059b      	lsls	r3, r3, #22
 800443a:	159b      	asrs	r3, r3, #22
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	0d1b      	lsrs	r3, r3, #20
 8004460:	b29b      	uxth	r3, r3
 8004462:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004466:	b29b      	uxth	r3, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	0d1b      	lsrs	r3, r3, #20
 8004480:	b29b      	uxth	r3, r3
 8004482:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8004486:	b29b      	uxth	r3, r3
}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	0d1b      	lsrs	r3, r3, #20
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a6:	b29b      	uxth	r3, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	0d1b      	lsrs	r3, r3, #20
 80044c0:	b2db      	uxtb	r3, r3
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff ffec 	bl	80044b4 <lfs_tag_chunk>
 80044dc:	4603      	mov	r3, r0
 80044de:	b25b      	sxtb	r3, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	0a9b      	lsrs	r3, r3, #10
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044fa:	b29b      	uxth	r3, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ff7f 	bl	800442e <lfs_tag_isdelete>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff ffe5 	bl	8004508 <lfs_tag_size>
 800453e:	4603      	mov	r3, r0
 8004540:	3304      	adds	r3, #4
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e012      	b.n	8004580 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	4413      	add	r3, r2
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4403      	add	r3, r0
 8004576:	404a      	eors	r2, r1
 8004578:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3301      	adds	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b02      	cmp	r3, #2
 8004584:	dde9      	ble.n	800455a <lfs_gstate_xor+0x10>
    }
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	e00b      	b.n	80045ba <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4413      	add	r3, r2
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <lfs_gstate_iszero+0x20>
            return false;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e006      	b.n	80045c2 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	ddf0      	ble.n	80045a2 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80045c0:	2301      	movs	r3, #1
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff ff94 	bl	8004508 <lfs_tag_size>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	bf14      	ite	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	2300      	moveq	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ff81 	bl	8004508 <lfs_tag_size>
 8004606:	4603      	mov	r3, r0
 8004608:	b2db      	uxtb	r3, r3
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ff18 	bl	8004454 <lfs_tag_type1>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	bf14      	ite	ne
 800462a:	2301      	movne	r3, #1
 800462c:	2300      	moveq	r3, #0
 800462e:	b2db      	uxtb	r3, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff5f 	bl	8004508 <lfs_tag_size>
 800464a:	4603      	mov	r3, r0
 800464c:	0a5b      	lsrs	r3, r3, #9
 800464e:	2b00      	cmp	r3, #0
 8004650:	bf14      	ite	ne
 8004652:	2301      	movne	r3, #1
 8004654:	2300      	moveq	r3, #0
 8004656:	b2db      	uxtb	r3, r3
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fef0 	bl	8004454 <lfs_tag_type1>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <lfs_gstate_hasmovehere+0x30>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	6839      	ldr	r1, [r7, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fe3b 	bl	80042fc <lfs_pair_cmp>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <lfs_gstate_hasmovehere+0x30>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <lfs_gstate_hasmovehere+0x32>
 8004690:	2300      	movs	r3, #0
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	b2db      	uxtb	r3, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fa1f 	bl	8003af0 <lfs_fromle32>
 80046b2:	4602      	mov	r2, r0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fa17 	bl	8003af0 <lfs_fromle32>
 80046c2:	4602      	mov	r2, r0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fa0f 	bl	8003af0 <lfs_fromle32>
 80046d2:	4602      	mov	r2, r0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	609a      	str	r2, [r3, #8]
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fa0a 	bl	8003b06 <lfs_tole32>
 80046f2:	4602      	mov	r2, r0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fa02 	bl	8003b06 <lfs_tole32>
 8004702:	4602      	mov	r2, r0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff f9fa 	bl	8003b06 <lfs_tole32>
 8004712:	4602      	mov	r2, r0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff f9df 	bl	8003af0 <lfs_fromle32>
 8004732:	4602      	mov	r2, r0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff f9d7 	bl	8003af0 <lfs_fromle32>
 8004742:	4602      	mov	r2, r0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	605a      	str	r2, [r3, #4]
}
 8004748:	bf00      	nop
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff f9d2 	bl	8003b06 <lfs_tole32>
 8004762:	4602      	mov	r2, r0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff f9ca 	bl	8003b06 <lfs_tole32>
 8004772:	4602      	mov	r2, r0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	605a      	str	r2, [r3, #4]
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff f9af 	bl	8003af0 <lfs_fromle32>
 8004792:	4602      	mov	r2, r0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff f9a7 	bl	8003af0 <lfs_fromle32>
 80047a2:	4602      	mov	r2, r0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	605a      	str	r2, [r3, #4]
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff f9a2 	bl	8003b06 <lfs_tole32>
 80047c2:	4602      	mov	r2, r0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff f99a 	bl	8003b06 <lfs_tole32>
 80047d2:	4602      	mov	r2, r0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	605a      	str	r2, [r3, #4]
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff f97f 	bl	8003af0 <lfs_fromle32>
 80047f2:	4602      	mov	r2, r0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff f977 	bl	8003af0 <lfs_fromle32>
 8004802:	4602      	mov	r2, r0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff f96f 	bl	8003af0 <lfs_fromle32>
 8004812:	4602      	mov	r2, r0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff f967 	bl	8003af0 <lfs_fromle32>
 8004822:	4602      	mov	r2, r0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff f95f 	bl	8003af0 <lfs_fromle32>
 8004832:	4602      	mov	r2, r0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff f957 	bl	8003af0 <lfs_fromle32>
 8004842:	4602      	mov	r2, r0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	615a      	str	r2, [r3, #20]
}
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff f952 	bl	8003b06 <lfs_tole32>
 8004862:	4602      	mov	r2, r0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff f94a 	bl	8003b06 <lfs_tole32>
 8004872:	4602      	mov	r2, r0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff f942 	bl	8003b06 <lfs_tole32>
 8004882:	4602      	mov	r2, r0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff f93a 	bl	8003b06 <lfs_tole32>
 8004892:	4602      	mov	r2, r0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff f932 	bl	8003b06 <lfs_tole32>
 80048a2:	4602      	mov	r2, r0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff f92a 	bl	8003b06 <lfs_tole32>
 80048b2:	4602      	mov	r2, r0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	615a      	str	r2, [r3, #20]
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80048ca:	1d3b      	adds	r3, r7, #4
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e009      	b.n	80048e4 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d101      	bne.n	80048de <lfs_mlist_isopen+0x1e>
            return true;
 80048da:	2301      	movs	r3, #1
 80048dc:	e007      	b.n	80048ee <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f1      	bne.n	80048d0 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80048fa:	b480      	push	{r7}
 80048fc:	b085      	sub	sp, #20
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3328      	adds	r3, #40	; 0x28
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e00d      	b.n	8004928 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d105      	bne.n	8004922 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	601a      	str	r2, [r3, #0]
            break;
 8004920:	e007      	b.n	8004932 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ed      	bne.n	800490c <lfs_mlist_remove+0x12>
        }
    }
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
	...

08004964 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <lfs_fs_disk_version+0x18>)
    }
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	00020001 	.word	0x00020001

08004980 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ffeb 	bl	8004964 <lfs_fs_disk_version>
 800498e:	4603      	mov	r3, r0
 8004990:	0c1b      	lsrs	r3, r3, #16
 8004992:	b29b      	uxth	r3, r3

}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff ffdd 	bl	8004964 <lfs_fs_disk_version>
 80049aa:	4603      	mov	r3, r0
 80049ac:	b29b      	uxth	r3, r3
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	4413      	add	r3, r2
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049d8:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 80049da:	fbb3 f1f2 	udiv	r1, r3, r2
 80049de:	fb01 f202 	mul.w	r2, r1, r2
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d212      	bcs.n	8004a16 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	009a      	lsls	r2, r3, #2
 80049fa:	440a      	add	r2, r1
 80049fc:	6811      	ldr	r1, [r2, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	f002 021f 	and.w	r2, r2, #31
 8004a04:	2001      	movs	r0, #1
 8004a06:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4403      	add	r3, r0
 8004a12:	430a      	orrs	r2, r1
 8004a14:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a30:	6a1a      	ldr	r2, [r3, #32]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ffe4 	bl	8004a24 <lfs_alloc_ack>
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8004a6e:	e04f      	b.n	8004b10 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a74:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	095b      	lsrs	r3, r3, #5
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d132      	bne.n	8004b10 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ab6:	6a12      	ldr	r2, [r2, #32]
 8004ab8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004abc:	fb01 f202 	mul.w	r2, r1, r2
 8004ac0:	1a9a      	subs	r2, r3, r2
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8004ac6:	e009      	b.n	8004adc <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad6:	1e5a      	subs	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d011      	beq.n	8004b0c <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	2101      	movs	r1, #1
 8004b02:	fa01 f303 	lsl.w	r3, r1, r3
 8004b06:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1dd      	bne.n	8004ac8 <lfs_alloc+0x64>
                }

                return 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e050      	b.n	8004bb2 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d1a9      	bne.n	8004a70 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10f      	bne.n	8004b44 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	4413      	add	r3, r2
 8004b2e:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <lfs_alloc+0x158>)
 8004b30:	9200      	str	r2, [sp, #0]
 8004b32:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004b36:	4922      	ldr	r1, [pc, #136]	; (8004bc0 <lfs_alloc+0x15c>)
 8004b38:	4822      	ldr	r0, [pc, #136]	; (8004bc4 <lfs_alloc+0x160>)
 8004b3a:	f006 fae5 	bl	800b108 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8004b3e:	f06f 031b 	mvn.w	r3, #27
 8004b42:	e036      	b.n	8004bb2 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4c:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b52:	6a12      	ldr	r2, [r2, #32]
 8004b54:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b58:	fb01 f202 	mul.w	r2, r1, r2
 8004b5c:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	00da      	lsls	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f7fe ff4d 	bl	8003a10 <lfs_min>
 8004b76:	4602      	mov	r2, r0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2100      	movs	r1, #0
 8004b90:	f006 fb27 	bl	800b1e2 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8004b94:	2301      	movs	r3, #1
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	490b      	ldr	r1, [pc, #44]	; (8004bc8 <lfs_alloc+0x164>)
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f004 ff78 	bl	8009a90 <lfs_fs_rawtraverse>
 8004ba0:	60f8      	str	r0, [r7, #12]
        if (err) {
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f43f af62 	beq.w	8004a6e <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff ff49 	bl	8004a42 <lfs_alloc_drop>
            return err;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	0800c03c 	.word	0x0800c03c
 8004bc0:	0800bf48 	.word	0x0800bf48
 8004bc4:	0800c014 	.word	0x0800c014
 8004bc8:	080049b7 	.word	0x080049b7

08004bcc <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b08f      	sub	sp, #60	; 0x3c
 8004bd0:	af04      	add	r7, sp, #16
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	333c      	adds	r3, #60	; 0x3c
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fd34 	bl	8004660 <lfs_gstate_hasmovehere>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 80ba 	beq.w	8004d74 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff fc71 	bl	80044e8 <lfs_tag_id>
 8004c06:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80b3 	beq.w	8004d74 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fc68 	bl	80044e8 <lfs_tag_id>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	461c      	mov	r4, r3
 8004c1c:	6838      	ldr	r0, [r7, #0]
 8004c1e:	f7ff fc63 	bl	80044e8 <lfs_tag_id>
 8004c22:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8004c24:	429c      	cmp	r4, r3
 8004c26:	f200 80a5 	bhi.w	8004d74 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004c30:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8004c32:	e09f      	b.n	8004d74 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fc73 	bl	8004522 <lfs_tag_dsize>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8004c48:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8004c4e:	2204      	movs	r2, #4
 8004c50:	9203      	str	r2, [sp, #12]
 8004c52:	f107 0210 	add.w	r2, r7, #16
 8004c56:	9202      	str	r2, [sp, #8]
 8004c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5a:	9201      	str	r2, [sp, #4]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2304      	movs	r3, #4
 8004c60:	460a      	mov	r2, r1
 8004c62:	2100      	movs	r1, #0
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f7fe ffaf 	bl	8003bc8 <lfs_bd_read>
 8004c6a:	61b8      	str	r0, [r7, #24]
        if (err) {
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <lfs_dir_getslice+0xaa>
            return err;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	e08a      	b.n	8004d8c <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fe ff50 	bl	8003b1e <lfs_frombe32>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4053      	eors	r3, r2
 8004c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c88:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff fc2c 	bl	80044e8 <lfs_tag_id>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d02b      	beq.n	8004cee <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004c96:	69f8      	ldr	r0, [r7, #28]
 8004c98:	f7ff fbdc 	bl	8004454 <lfs_tag_type1>
 8004c9c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca2:	d124      	bne.n	8004cee <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8004ca4:	69f8      	ldr	r0, [r7, #28]
 8004ca6:	f7ff fc1f 	bl	80044e8 <lfs_tag_id>
 8004caa:	4603      	mov	r3, r0
 8004cac:	461c      	mov	r4, r3
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fc17 	bl	80044e8 <lfs_tag_id>
 8004cba:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004cbc:	429c      	cmp	r4, r3
 8004cbe:	d816      	bhi.n	8004cee <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	1ad2      	subs	r2, r2, r3
 8004cc6:	4b33      	ldr	r3, [pc, #204]	; (8004d94 <lfs_dir_getslice+0x1c8>)
 8004cc8:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8004cca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d102      	bne.n	8004cde <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8004cd8:	f06f 0301 	mvn.w	r3, #1
 8004cdc:	e056      	b.n	8004d8c <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004cde:	69f8      	ldr	r0, [r7, #28]
 8004ce0:	f7ff fbf5 	bl	80044ce <lfs_tag_splice>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	029a      	lsls	r2, r3, #10
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	4413      	add	r3, r2
 8004cec:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	401a      	ands	r2, r3
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	6839      	ldr	r1, [r7, #0]
 8004cf8:	1ac9      	subs	r1, r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	400b      	ands	r3, r1
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d138      	bne.n	8004d74 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8004d02:	69f8      	ldr	r0, [r7, #28]
 8004d04:	f7ff fb93 	bl	800442e <lfs_tag_isdelete>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8004d0e:	f06f 0301 	mvn.w	r3, #1
 8004d12:	e03b      	b.n	8004d8c <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8004d14:	69f8      	ldr	r0, [r7, #28]
 8004d16:	f7ff fbf7 	bl	8004508 <lfs_tag_size>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fe76 	bl	8003a10 <lfs_min>
 8004d24:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8004d26:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d30:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8004d32:	3204      	adds	r2, #4
 8004d34:	6979      	ldr	r1, [r7, #20]
 8004d36:	9103      	str	r1, [sp, #12]
 8004d38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d3a:	9102      	str	r1, [sp, #8]
 8004d3c:	9201      	str	r2, [sp, #4]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4602      	mov	r2, r0
 8004d44:	2100      	movs	r1, #0
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7fe ff3e 	bl	8003bc8 <lfs_bd_read>
 8004d4c:	61b8      	str	r0, [r7, #24]
            if (err) {
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <lfs_dir_getslice+0x18c>
                return err;
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	e019      	b.n	8004d8c <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8004d58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	18d0      	adds	r0, r2, r3
 8004d5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	2100      	movs	r1, #0
 8004d68:	f006 fa3b 	bl	800b1e2 <memset>

            return tag + gdiff;
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	e00b      	b.n	8004d8c <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fbd3 	bl	8004522 <lfs_tag_dsize>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	3304      	adds	r3, #4
 8004d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d82:	429a      	cmp	r2, r3
 8004d84:	f4bf af56 	bcs.w	8004c34 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8004d88:	f06f 0301 	mvn.w	r3, #1
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	372c      	adds	r7, #44	; 0x2c
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd90      	pop	{r4, r7, pc}
 8004d94:	000ffc00 	.word	0x000ffc00

08004d98 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af04      	add	r7, sp, #16
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8004da6:	6838      	ldr	r0, [r7, #0]
 8004da8:	f7ff fbae 	bl	8004508 <lfs_tag_size>
 8004dac:	4603      	mov	r3, r0
 8004dae:	9302      	str	r3, [sp, #8]
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	2300      	movs	r3, #0
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7ff ff04 	bl	8004bcc <lfs_dir_getslice>
 8004dc4:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b08c      	sub	sp, #48	; 0x30
 8004dd2:	af04      	add	r7, sp, #16
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8004de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de4:	441a      	add	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	f240 80c0 	bls.w	8004f72 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8004df2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004df6:	e0c1      	b.n	8004f7c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8004df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfa:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d03f      	beq.n	8004e82 <lfs_dir_getread+0xb4>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f113 0f02 	cmn.w	r3, #2
 8004e0a:	d13a      	bne.n	8004e82 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8004e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d232      	bcs.n	8004e82 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d324      	bcc.n	8004e70 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6859      	ldr	r1, [r3, #4]
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e30:	1acb      	subs	r3, r1, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	4619      	mov	r1, r3
 8004e36:	69b8      	ldr	r0, [r7, #24]
 8004e38:	f7fe fdea 	bl	8003a10 <lfs_min>
 8004e3c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e48:	1acb      	subs	r3, r1, r3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	69f8      	ldr	r0, [r7, #28]
 8004e52:	f006 fa7f 	bl	800b354 <memcpy>

                data += diff;
 8004e56:	69fa      	ldr	r2, [r7, #28]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	4413      	add	r3, r2
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8004e66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8004e6e:	e080      	b.n	8004f72 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	4619      	mov	r1, r3
 8004e7a:	69b8      	ldr	r0, [r7, #24]
 8004e7c:	f7fe fdc8 	bl	8003a10 <lfs_min>
 8004e80:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f113 0f02 	cmn.w	r3, #2
 8004e8a:	d13a      	bne.n	8004f02 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8004e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d232      	bcs.n	8004f02 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d324      	bcc.n	8004ef0 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	1acb      	subs	r3, r1, r3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	69b8      	ldr	r0, [r7, #24]
 8004eb8:	f7fe fdaa 	bl	8003a10 <lfs_min>
 8004ebc:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ec8:	1acb      	subs	r3, r1, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	69f8      	ldr	r0, [r7, #28]
 8004ed2:	f006 fa3f 	bl	800b354 <memcpy>

                data += diff;
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	4413      	add	r3, r2
 8004edc:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8004ee6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8004eee:	e040      	b.n	8004f72 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	4619      	mov	r1, r3
 8004efa:	69b8      	ldr	r0, [r7, #24]
 8004efc:	f7fe fd88 	bl	8003a10 <lfs_min>
 8004f00:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	f06f 0201 	mvn.w	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	4619      	mov	r1, r3
 8004f12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f14:	f7fe fd8c 	bl	8003a30 <lfs_aligndown>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8004f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	441a      	add	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f7fe fd94 	bl	8003a5a <lfs_alignup>
 8004f32:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f7fe fd67 	bl	8003a10 <lfs_min>
 8004f42:	4602      	mov	r2, r0
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6889      	ldr	r1, [r1, #8]
 8004f54:	9102      	str	r1, [sp, #8]
 8004f56:	9201      	str	r2, [sp, #4]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f7ff fe33 	bl	8004bcc <lfs_dir_getslice>
 8004f66:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da01      	bge.n	8004f72 <lfs_dir_getread+0x1a4>
            return err;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	e004      	b.n	8004f7c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8004f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f47f af3f 	bne.w	8004df8 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <lfs_dir_traverse_filter+0x1e>
 8004f9e:	4b24      	ldr	r3, [pc, #144]	; (8005030 <lfs_dir_traverse_filter+0xac>)
 8004fa0:	e000      	b.n	8004fa4 <lfs_dir_traverse_filter+0x20>
 8004fa2:	4b24      	ldr	r3, [pc, #144]	; (8005034 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8004fa4:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	405a      	eors	r2, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d014      	beq.n	8004fe0 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff fa37 	bl	800442e <lfs_tag_isdelete>
 8004fc0:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10c      	bne.n	8004fe0 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4a19      	ldr	r2, [pc, #100]	; (8005030 <lfs_dir_traverse_filter+0xac>)
 8004fca:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	4b19      	ldr	r3, [pc, #100]	; (8005038 <lfs_dir_traverse_filter+0xb4>)
 8004fd2:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8004fd4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004fd8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d104      	bne.n	8004fea <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
        return true;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e01e      	b.n	8005028 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004fea:	68b8      	ldr	r0, [r7, #8]
 8004fec:	f7ff fa32 	bl	8004454 <lfs_tag_type1>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff6:	d116      	bne.n	8005026 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8004ff8:	68b8      	ldr	r0, [r7, #8]
 8004ffa:	f7ff fa75 	bl	80044e8 <lfs_tag_id>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461c      	mov	r4, r3
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fa6e 	bl	80044e8 <lfs_tag_id>
 800500c:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800500e:	429c      	cmp	r4, r3
 8005010:	d809      	bhi.n	8005026 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005012:	68b8      	ldr	r0, [r7, #8]
 8005014:	f7ff fa5b 	bl	80044ce <lfs_tag_splice>
 8005018:	4603      	mov	r3, r0
 800501a:	029a      	lsls	r2, r3, #10
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	441a      	add	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	601a      	str	r2, [r3, #0]
    }

    return false;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	bd90      	pop	{r4, r7, pc}
 8005030:	7ffffc00 	.word	0x7ffffc00
 8005034:	700ffc00 	.word	0x700ffc00
 8005038:	000ffc00 	.word	0x000ffc00

0800503c <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800503c:	b590      	push	{r4, r7, lr}
 800503e:	b0c1      	sub	sp, #260	; 0x104
 8005040:	af04      	add	r7, sp, #16
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8005050:	6838      	ldr	r0, [r7, #0]
 8005052:	f7ff fa66 	bl	8004522 <lfs_tag_dsize>
 8005056:	4602      	mov	r2, r0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	441a      	add	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	429a      	cmp	r2, r3
 8005062:	d237      	bcs.n	80050d4 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8005064:	6838      	ldr	r0, [r7, #0]
 8005066:	f7ff fa5c 	bl	8004522 <lfs_tag_dsize>
 800506a:	4602      	mov	r2, r0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8005072:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8005078:	2204      	movs	r2, #4
 800507a:	9203      	str	r2, [sp, #12]
 800507c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005080:	9202      	str	r2, [sp, #8]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	9201      	str	r2, [sp, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2304      	movs	r3, #4
 800508a:	460a      	mov	r2, r1
 800508c:	2100      	movs	r1, #0
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7fe fd9a 	bl	8003bc8 <lfs_bd_read>
 8005094:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8005098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <lfs_dir_traverse+0x6a>
                    return err;
 80050a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a4:	e3a6      	b.n	80057f4 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 80050a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe fd38 	bl	8003b1e <lfs_frombe32>
 80050ae:	4602      	mov	r2, r0
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4053      	eors	r3, r2
 80050b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050b8:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 80050c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80050ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 80050ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	e01b      	b.n	800510c <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 80050d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d8:	2b00      	cmp	r3, #0
 80050da:	dd13      	ble.n	8005104 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 80050dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 80050e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 80050ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050f2:	3308      	adds	r3, #8
 80050f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 80050f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fc:	3b01      	subs	r3, #1
 80050fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005102:	e003      	b.n	800510c <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 800510a:	e2a2      	b.n	8005652 <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800510c:	4b7e      	ldr	r3, [pc, #504]	; (8005308 <lfs_dir_traverse+0x2cc>)
 800510e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8005112:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005118:	405a      	eors	r2, r3
 800511a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800511e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005122:	400b      	ands	r3, r1
 8005124:	4013      	ands	r3, r2
 8005126:	2b00      	cmp	r3, #0
 8005128:	f040 8285 	bne.w	8005636 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800512c:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8005130:	f7ff f9da 	bl	80044e8 <lfs_tag_id>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 80f0 	beq.w	800531c <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800513c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005140:	2b02      	cmp	r3, #2
 8005142:	d906      	bls.n	8005152 <lfs_dir_traverse+0x116>
 8005144:	4b71      	ldr	r3, [pc, #452]	; (800530c <lfs_dir_traverse+0x2d0>)
 8005146:	4a72      	ldr	r2, [pc, #456]	; (8005310 <lfs_dir_traverse+0x2d4>)
 8005148:	f240 3193 	movw	r1, #915	; 0x393
 800514c:	4871      	ldr	r0, [pc, #452]	; (8005314 <lfs_dir_traverse+0x2d8>)
 800514e:	f005 fe01 	bl	800ad54 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8005152:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005154:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005158:	4613      	mov	r3, r2
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	33f0      	adds	r3, #240	; 0xf0
 8005162:	443b      	add	r3, r7
 8005164:	3b98      	subs	r3, #152	; 0x98
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	33f0      	adds	r3, #240	; 0xf0
 8005178:	443b      	add	r3, r7
 800517a:	3b94      	subs	r3, #148	; 0x94
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	33f0      	adds	r3, #240	; 0xf0
 800518e:	443b      	add	r3, r7
 8005190:	3b90      	subs	r3, #144	; 0x90
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	33f0      	adds	r3, #240	; 0xf0
 80051a4:	443b      	add	r3, r7
 80051a6:	3b8c      	subs	r3, #140	; 0x8c
 80051a8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80051b2:	4613      	mov	r3, r2
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	33f0      	adds	r3, #240	; 0xf0
 80051bc:	443b      	add	r3, r7
 80051be:	3b88      	subs	r3, #136	; 0x88
 80051c0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80051ca:	4613      	mov	r3, r2
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	33f0      	adds	r3, #240	; 0xf0
 80051d4:	443b      	add	r3, r7
 80051d6:	3b84      	subs	r3, #132	; 0x84
 80051d8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80051e2:	4613      	mov	r3, r2
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	33f0      	adds	r3, #240	; 0xf0
 80051ec:	443b      	add	r3, r7
 80051ee:	3b80      	subs	r3, #128	; 0x80
 80051f0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80051fa:	4613      	mov	r3, r2
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	33f0      	adds	r3, #240	; 0xf0
 8005204:	443b      	add	r3, r7
 8005206:	3b7c      	subs	r3, #124	; 0x7c
 8005208:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005212:	4613      	mov	r3, r2
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	33f0      	adds	r3, #240	; 0xf0
 800521c:	443b      	add	r3, r7
 800521e:	3b7a      	subs	r3, #122	; 0x7a
 8005220:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800522a:	4613      	mov	r3, r2
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	33f0      	adds	r3, #240	; 0xf0
 8005234:	443b      	add	r3, r7
 8005236:	3b78      	subs	r3, #120	; 0x78
 8005238:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800523c:	801a      	strh	r2, [r3, #0]
 800523e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005242:	4613      	mov	r3, r2
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	33f0      	adds	r3, #240	; 0xf0
 800524c:	443b      	add	r3, r7
 800524e:	3b74      	subs	r3, #116	; 0x74
 8005250:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800525a:	4613      	mov	r3, r2
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	33f0      	adds	r3, #240	; 0xf0
 8005264:	443b      	add	r3, r7
 8005266:	3b70      	subs	r3, #112	; 0x70
 8005268:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005272:	4613      	mov	r3, r2
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	33f0      	adds	r3, #240	; 0xf0
 800527c:	443b      	add	r3, r7
 800527e:	3b6c      	subs	r3, #108	; 0x6c
 8005280:	6019      	str	r1, [r3, #0]
 8005282:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005286:	4613      	mov	r3, r2
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	1a9b      	subs	r3, r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	33f0      	adds	r3, #240	; 0xf0
 8005290:	443b      	add	r3, r7
 8005292:	3b68      	subs	r3, #104	; 0x68
 8005294:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800529e:	4613      	mov	r3, r2
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	33f0      	adds	r3, #240	; 0xf0
 80052a8:	443b      	add	r3, r7
 80052aa:	3b68      	subs	r3, #104	; 0x68
 80052ac:	3304      	adds	r3, #4
 80052ae:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80052b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052b6:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80052ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052be:	3301      	adds	r3, #1
 80052c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 80052e2:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <lfs_dir_traverse+0x2dc>)
 80052e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 80052e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052ec:	1e5a      	subs	r2, r3, #1
 80052ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80052f2:	4613      	mov	r3, r2
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	1a9b      	subs	r3, r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	3328      	adds	r3, #40	; 0x28
 80052fc:	440b      	add	r3, r1
 80052fe:	3304      	adds	r3, #4
 8005300:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8005304:	e19e      	b.n	8005644 <lfs_dir_traverse+0x608>
 8005306:	bf00      	nop
 8005308:	7ff00000 	.word	0x7ff00000
 800530c:	0800c040 	.word	0x0800c040
 8005310:	0800cbfc 	.word	0x0800cbfc
 8005314:	0800bf48 	.word	0x0800bf48
 8005318:	08004f85 	.word	0x08004f85
            }
        }

popped:
 800531c:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800531e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8005322:	f7ff f8e1 	bl	80044e8 <lfs_tag_id>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d015      	beq.n	8005358 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800532c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff f8da 	bl	80044e8 <lfs_tag_id>
 8005334:	4603      	mov	r3, r0
 8005336:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8005338:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 800533c:	4293      	cmp	r3, r2
 800533e:	f200 817c 	bhi.w	800563a <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8005342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff f8cf 	bl	80044e8 <lfs_tag_id>
 800534a:	4603      	mov	r3, r0
 800534c:	461a      	mov	r2, r3
 800534e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8005352:	4293      	cmp	r3, r2
 8005354:	f240 8171 	bls.w	800563a <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8005358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff f89a 	bl	8004494 <lfs_tag_type3>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	f43f ae74 	beq.w	8005050 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8005368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff f892 	bl	8004494 <lfs_tag_type3>
 8005370:	4603      	mov	r3, r0
 8005372:	461a      	mov	r2, r3
 8005374:	f240 1301 	movw	r3, #257	; 0x101
 8005378:	429a      	cmp	r2, r3
 800537a:	f040 80e0 	bne.w	800553e <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800537e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005382:	4ab1      	ldr	r2, [pc, #708]	; (8005648 <lfs_dir_traverse+0x60c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	f000 815a 	beq.w	800563e <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800538a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800538e:	4613      	mov	r3, r2
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	33f0      	adds	r3, #240	; 0xf0
 8005398:	443b      	add	r3, r7
 800539a:	3b98      	subs	r3, #152	; 0x98
 800539c:	4618      	mov	r0, r3
 800539e:	233c      	movs	r3, #60	; 0x3c
 80053a0:	461a      	mov	r2, r3
 80053a2:	2100      	movs	r1, #0
 80053a4:	f005 ff1d 	bl	800b1e2 <memset>
 80053a8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053ac:	4613      	mov	r3, r2
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	33f0      	adds	r3, #240	; 0xf0
 80053b6:	443b      	add	r3, r7
 80053b8:	3b98      	subs	r3, #152	; 0x98
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053c2:	4613      	mov	r3, r2
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	33f0      	adds	r3, #240	; 0xf0
 80053cc:	443b      	add	r3, r7
 80053ce:	3b94      	subs	r3, #148	; 0x94
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053d8:	4613      	mov	r3, r2
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	33f0      	adds	r3, #240	; 0xf0
 80053e2:	443b      	add	r3, r7
 80053e4:	3b90      	subs	r3, #144	; 0x90
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053ee:	4613      	mov	r3, r2
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	33f0      	adds	r3, #240	; 0xf0
 80053f8:	443b      	add	r3, r7
 80053fa:	3b8c      	subs	r3, #140	; 0x8c
 80053fc:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005406:	4613      	mov	r3, r2
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	33f0      	adds	r3, #240	; 0xf0
 8005410:	443b      	add	r3, r7
 8005412:	3b88      	subs	r3, #136	; 0x88
 8005414:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800541e:	4613      	mov	r3, r2
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	33f0      	adds	r3, #240	; 0xf0
 8005428:	443b      	add	r3, r7
 800542a:	3b84      	subs	r3, #132	; 0x84
 800542c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005436:	4613      	mov	r3, r2
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	33f0      	adds	r3, #240	; 0xf0
 8005440:	443b      	add	r3, r7
 8005442:	3b80      	subs	r3, #128	; 0x80
 8005444:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800544e:	4613      	mov	r3, r2
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	33f0      	adds	r3, #240	; 0xf0
 8005458:	443b      	add	r3, r7
 800545a:	3b7c      	subs	r3, #124	; 0x7c
 800545c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005466:	4613      	mov	r3, r2
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	33f0      	adds	r3, #240	; 0xf0
 8005470:	443b      	add	r3, r7
 8005472:	3b7a      	subs	r3, #122	; 0x7a
 8005474:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8005478:	801a      	strh	r2, [r3, #0]
 800547a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800547e:	4613      	mov	r3, r2
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	1a9b      	subs	r3, r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	33f0      	adds	r3, #240	; 0xf0
 8005488:	443b      	add	r3, r7
 800548a:	3b78      	subs	r3, #120	; 0x78
 800548c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8005490:	801a      	strh	r2, [r3, #0]
 8005492:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005496:	4613      	mov	r3, r2
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	33f0      	adds	r3, #240	; 0xf0
 80054a0:	443b      	add	r3, r7
 80054a2:	3b74      	subs	r3, #116	; 0x74
 80054a4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80054ae:	4613      	mov	r3, r2
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	33f0      	adds	r3, #240	; 0xf0
 80054b8:	443b      	add	r3, r7
 80054ba:	3b70      	subs	r3, #112	; 0x70
 80054bc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80054c0:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80054c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80054c6:	3301      	adds	r3, #1
 80054c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80054cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff f81a 	bl	8004508 <lfs_tag_size>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80054da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff f803 	bl	80044e8 <lfs_tag_id>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 80054e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ec:	60bb      	str	r3, [r7, #8]
            off = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054f6:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8005504:	4b51      	ldr	r3, [pc, #324]	; (800564c <lfs_dir_traverse+0x610>)
 8005506:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800550a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800550e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8005512:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8005516:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 800551a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800551e:	3301      	adds	r3, #1
 8005520:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8005524:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8005528:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	b29a      	uxth	r2, r3
 8005530:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005534:	4413      	add	r3, r2
 8005536:	b29b      	uxth	r3, r3
 8005538:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 800553c:	e588      	b.n	8005050 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800553e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005540:	4618      	mov	r0, r3
 8005542:	f7fe ffa7 	bl	8004494 <lfs_tag_type3>
 8005546:	4603      	mov	r3, r0
 8005548:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800554c:	d159      	bne.n	8005602 <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800554e:	2300      	movs	r3, #0
 8005550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005554:	e04b      	b.n	80055ee <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800555e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005562:	4613      	mov	r3, r2
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	461a      	mov	r2, r3
 800556c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005570:	4413      	add	r3, r2
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005578:	051c      	lsls	r4, r3, #20
 800557a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe ffb3 	bl	80044e8 <lfs_tag_id>
 8005582:	4603      	mov	r3, r0
 8005584:	461a      	mov	r2, r3
 8005586:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800558a:	4413      	add	r3, r2
 800558c:	029b      	lsls	r3, r3, #10
 800558e:	ea44 0103 	orr.w	r1, r4, r3
 8005592:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005596:	4613      	mov	r3, r2
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	461a      	mov	r2, r3
 80055a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055a4:	4413      	add	r3, r2
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80055aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	461a      	mov	r2, r3
 80055b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055bc:	4413      	add	r3, r2
 80055be:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80055c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055c4:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80055c8:	4798      	blx	r3
 80055ca:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80055ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	da02      	bge.n	80055dc <lfs_dir_traverse+0x5a0>
                    return res;
 80055d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055da:	e10b      	b.n	80057f4 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 80055dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d12e      	bne.n	8005642 <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80055e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e8:	3301      	adds	r3, #1
 80055ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fe ff89 	bl	8004508 <lfs_tag_size>
 80055f6:	4602      	mov	r2, r0
 80055f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d3aa      	bcc.n	8005556 <lfs_dir_traverse+0x51a>
 8005600:	e526      	b.n	8005050 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8005602:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8005606:	029a      	lsls	r2, r3, #10
 8005608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800560a:	18d1      	adds	r1, r2, r3
 800560c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005610:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005614:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005618:	4798      	blx	r3
 800561a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 800561e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005622:	2b00      	cmp	r3, #0
 8005624:	da02      	bge.n	800562c <lfs_dir_traverse+0x5f0>
                return res;
 8005626:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800562a:	e0e3      	b.n	80057f4 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 800562c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10d      	bne.n	8005650 <lfs_dir_traverse+0x614>
 8005634:	e50c      	b.n	8005050 <lfs_dir_traverse+0x14>
                continue;
 8005636:	bf00      	nop
 8005638:	e50a      	b.n	8005050 <lfs_dir_traverse+0x14>
            continue;
 800563a:	bf00      	nop
 800563c:	e508      	b.n	8005050 <lfs_dir_traverse+0x14>
                continue;
 800563e:	bf00      	nop
 8005640:	e506      	b.n	8005050 <lfs_dir_traverse+0x14>
                    break;
 8005642:	bf00      	nop
        {
 8005644:	e504      	b.n	8005050 <lfs_dir_traverse+0x14>
 8005646:	bf00      	nop
 8005648:	08004f85 	.word	0x08004f85
 800564c:	600ffc00 	.word	0x600ffc00
                break;
 8005650:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8005652:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 80ca 	beq.w	80057f0 <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800565c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005660:	1e5a      	subs	r2, r3, #1
 8005662:	4613      	mov	r3, r2
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	33f0      	adds	r3, #240	; 0xf0
 800566c:	443b      	add	r3, r7
 800566e:	3b98      	subs	r3, #152	; 0x98
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8005674:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	4613      	mov	r3, r2
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	33f0      	adds	r3, #240	; 0xf0
 8005684:	443b      	add	r3, r7
 8005686:	3b94      	subs	r3, #148	; 0x94
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800568c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005690:	1e5a      	subs	r2, r3, #1
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	33f0      	adds	r3, #240	; 0xf0
 800569c:	443b      	add	r3, r7
 800569e:	3b90      	subs	r3, #144	; 0x90
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80056a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056a8:	1e5a      	subs	r2, r3, #1
 80056aa:	4613      	mov	r3, r2
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	33f0      	adds	r3, #240	; 0xf0
 80056b4:	443b      	add	r3, r7
 80056b6:	3b8c      	subs	r3, #140	; 0x8c
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80056be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056c2:	1e5a      	subs	r2, r3, #1
 80056c4:	4613      	mov	r3, r2
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	33f0      	adds	r3, #240	; 0xf0
 80056ce:	443b      	add	r3, r7
 80056d0:	3b88      	subs	r3, #136	; 0x88
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80056d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056dc:	1e5a      	subs	r2, r3, #1
 80056de:	4613      	mov	r3, r2
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	33f0      	adds	r3, #240	; 0xf0
 80056e8:	443b      	add	r3, r7
 80056ea:	3b84      	subs	r3, #132	; 0x84
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 80056f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056f6:	1e5a      	subs	r2, r3, #1
 80056f8:	4613      	mov	r3, r2
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	33f0      	adds	r3, #240	; 0xf0
 8005702:	443b      	add	r3, r7
 8005704:	3b80      	subs	r3, #128	; 0x80
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 800570c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005710:	1e5a      	subs	r2, r3, #1
 8005712:	4613      	mov	r3, r2
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	33f0      	adds	r3, #240	; 0xf0
 800571c:	443b      	add	r3, r7
 800571e:	3b7c      	subs	r3, #124	; 0x7c
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8005726:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800572a:	1e5a      	subs	r2, r3, #1
 800572c:	4613      	mov	r3, r2
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	33f0      	adds	r3, #240	; 0xf0
 8005736:	443b      	add	r3, r7
 8005738:	3b7a      	subs	r3, #122	; 0x7a
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8005740:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005744:	1e5a      	subs	r2, r3, #1
 8005746:	4613      	mov	r3, r2
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	1a9b      	subs	r3, r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	33f0      	adds	r3, #240	; 0xf0
 8005750:	443b      	add	r3, r7
 8005752:	3b78      	subs	r3, #120	; 0x78
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 800575a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800575e:	1e5a      	subs	r2, r3, #1
 8005760:	4613      	mov	r3, r2
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	33f0      	adds	r3, #240	; 0xf0
 800576a:	443b      	add	r3, r7
 800576c:	3b74      	subs	r3, #116	; 0x74
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8005774:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005778:	1e5a      	subs	r2, r3, #1
 800577a:	4613      	mov	r3, r2
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	33f0      	adds	r3, #240	; 0xf0
 8005784:	443b      	add	r3, r7
 8005786:	3b70      	subs	r3, #112	; 0x70
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 800578e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005792:	1e5a      	subs	r2, r3, #1
 8005794:	4613      	mov	r3, r2
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	33f0      	adds	r3, #240	; 0xf0
 800579e:	443b      	add	r3, r7
 80057a0:	3b6c      	subs	r3, #108	; 0x6c
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80057a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057aa:	1e5a      	subs	r2, r3, #1
 80057ac:	4613      	mov	r3, r2
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	1a9b      	subs	r3, r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	33f0      	adds	r3, #240	; 0xf0
 80057b6:	443b      	add	r3, r7
 80057b8:	3b68      	subs	r3, #104	; 0x68
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80057c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057c4:	1e5a      	subs	r2, r3, #1
 80057c6:	4613      	mov	r3, r2
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	33f0      	adds	r3, #240	; 0xf0
 80057d0:	443b      	add	r3, r7
 80057d2:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80057d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80057da:	3204      	adds	r2, #4
 80057dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057e0:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80057e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057e8:	3b01      	subs	r3, #1
 80057ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80057ee:	e596      	b.n	800531e <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 80057f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	37f4      	adds	r7, #244	; 0xf4
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd90      	pop	{r4, r7, pc}

080057fc <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80057fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057fe:	b0a5      	sub	sp, #148	; 0x94
 8005800:	af04      	add	r7, sp, #16
 8005802:	6178      	str	r0, [r7, #20]
 8005804:	6139      	str	r1, [r7, #16]
 8005806:	60fa      	str	r2, [r7, #12]
 8005808:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800580a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800580e:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	429a      	cmp	r2, r3
 800581c:	d207      	bcs.n	800582e <lfs_dir_fetchmatch+0x32>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3304      	adds	r3, #4
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	429a      	cmp	r2, r3
 800582c:	d302      	bcc.n	8005834 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800582e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005832:	e3a4      	b.n	8005f7e <lfs_dir_fetchmatch+0x782>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8005834:	2300      	movs	r3, #0
 8005836:	647b      	str	r3, [r7, #68]	; 0x44
 8005838:	2300      	movs	r3, #0
 800583a:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8005840:	2300      	movs	r3, #0
 8005842:	677b      	str	r3, [r7, #116]	; 0x74
 8005844:	e05a      	b.n	80058fc <lfs_dir_fetchmatch+0x100>
        int err = lfs_bd_read(lfs,
 8005846:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8005848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8005850:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8005852:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8005856:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005858:	0092      	lsls	r2, r2, #2
 800585a:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800585c:	2104      	movs	r1, #4
 800585e:	9103      	str	r1, [sp, #12]
 8005860:	9202      	str	r2, [sp, #8]
 8005862:	2200      	movs	r2, #0
 8005864:	9201      	str	r2, [sp, #4]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	2304      	movs	r3, #4
 800586a:	4602      	mov	r2, r0
 800586c:	2100      	movs	r1, #0
 800586e:	6978      	ldr	r0, [r7, #20]
 8005870:	f7fe f9aa 	bl	8003bc8 <lfs_bd_read>
 8005874:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8005876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	3378      	adds	r3, #120	; 0x78
 800587c:	f107 0208 	add.w	r2, r7, #8
 8005880:	4413      	add	r3, r2
 8005882:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005886:	4618      	mov	r0, r3
 8005888:	f7fe f932 	bl	8003af0 <lfs_fromle32>
 800588c:	4602      	mov	r2, r0
 800588e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	3378      	adds	r3, #120	; 0x78
 8005894:	f107 0108 	add.w	r1, r7, #8
 8005898:	440b      	add	r3, r1
 800589a:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800589e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <lfs_dir_fetchmatch+0xb4>
 80058a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80058aa:	d001      	beq.n	80058b0 <lfs_dir_fetchmatch+0xb4>
            return err;
 80058ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ae:	e366      	b.n	8005f7e <lfs_dir_fetchmatch+0x782>
        }

        if (err != LFS_ERR_CORRUPT &&
 80058b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80058b6:	d01e      	beq.n	80058f6 <lfs_dir_fetchmatch+0xfa>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80058b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	3378      	adds	r3, #120	; 0x78
 80058be:	f107 0208 	add.w	r2, r7, #8
 80058c2:	4413      	add	r3, r2
 80058c4:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80058c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ca:	3301      	adds	r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	bfb8      	it	lt
 80058d4:	425b      	neglt	r3, r3
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	3378      	adds	r3, #120	; 0x78
 80058da:	f107 0108 	add.w	r1, r7, #8
 80058de:	440b      	add	r3, r1
 80058e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f7fe f8f4 	bl	8003ad4 <lfs_scmp>
 80058ec:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dd01      	ble.n	80058f6 <lfs_dir_fetchmatch+0xfa>
            r = i;
 80058f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f4:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 80058f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f8:	3301      	adds	r3, #1
 80058fa:	677b      	str	r3, [r7, #116]	; 0x74
 80058fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058fe:	2b01      	cmp	r3, #1
 8005900:	dda1      	ble.n	8005846 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8005902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005904:	2b00      	cmp	r3, #0
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	bfb8      	it	lt
 800590c:	425b      	neglt	r3, r3
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800591a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591c:	3301      	adds	r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	bfb8      	it	lt
 8005926:	425b      	neglt	r3, r3
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8005934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005936:	2b00      	cmp	r3, #0
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	bfb8      	it	lt
 800593e:	425b      	neglt	r3, r3
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	3378      	adds	r3, #120	; 0x78
 8005944:	f107 0208 	add.w	r2, r7, #8
 8005948:	4413      	add	r3, r2
 800594a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2200      	movs	r2, #0
 8005956:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8005958:	2300      	movs	r3, #0
 800595a:	673b      	str	r3, [r7, #112]	; 0x70
 800595c:	e2fb      	b.n	8005f56 <lfs_dir_fetchmatch+0x75a>
        lfs_off_t off = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8005962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005966:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800596e:	4aa9      	ldr	r2, [pc, #676]	; (8005c14 <lfs_dir_fetchmatch+0x418>)
 8005970:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005978:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 8005982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005984:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 800598c:	2300      	movs	r3, #0
 800598e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe f8b5 	bl	8003b06 <lfs_tole32>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	3308      	adds	r3, #8
 80059a6:	2204      	movs	r2, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ae:	f004 ff97 	bl	800a8e0 <lfs_crc>
 80059b2:	4603      	mov	r3, r0
 80059b4:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe f898 	bl	8003af0 <lfs_fromle32>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80059c6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80059c8:	f7fe fdab 	bl	8004522 <lfs_tag_dsize>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d0:	4413      	add	r3, r2
 80059d2:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 80059d4:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059da:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2204      	movs	r2, #4
 80059e2:	9203      	str	r2, [sp, #12]
 80059e4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80059e8:	9202      	str	r2, [sp, #8]
 80059ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059ec:	9201      	str	r2, [sp, #4]
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	4603      	mov	r3, r0
 80059f2:	460a      	mov	r2, r1
 80059f4:	2100      	movs	r1, #0
 80059f6:	6978      	ldr	r0, [r7, #20]
 80059f8:	f7fe f8e6 	bl	8003bc8 <lfs_bd_read>
 80059fc:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80059fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d006      	beq.n	8005a12 <lfs_dir_fetchmatch+0x216>
                if (err == LFS_ERR_CORRUPT) {
 8005a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a06:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005a0a:	f000 81d6 	beq.w	8005dba <lfs_dir_fetchmatch+0x5be>
                    // can't continue?
                    break;
                }
                return err;
 8005a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a10:	e2b5      	b.n	8005f7e <lfs_dir_fetchmatch+0x782>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8005a18:	2204      	movs	r2, #4
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f004 ff60 	bl	800a8e0 <lfs_crc>
 8005a20:	4603      	mov	r3, r0
 8005a22:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe f879 	bl	8003b1e <lfs_frombe32>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a30:	4053      	eors	r3, r2
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe fceb 	bl	8004412 <lfs_tag_isvalid>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f083 0301 	eor.w	r3, r3, #1
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00b      	beq.n	8005a60 <lfs_dir_fetchmatch+0x264>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8005a48:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005a4a:	f7fe fd13 	bl	8004474 <lfs_tag_type2>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005a54:	bf0c      	ite	eq
 8005a56:	2301      	moveq	r3, #1
 8005a58:	2300      	movne	r3, #0
 8005a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 8005a5e:	e1bb      	b.n	8005dd8 <lfs_dir_fetchmatch+0x5dc>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fd5d 	bl	8004522 <lfs_tag_dsize>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6c:	441a      	add	r2, r3
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	f200 81a2 	bhi.w	8005dbe <lfs_dir_fetchmatch+0x5c2>
                break;
            }

            ptag = tag;
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe fcf7 	bl	8004474 <lfs_tag_type2>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005a8c:	d15e      	bne.n	8005b4c <lfs_dir_fetchmatch+0x350>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8005a8e:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a94:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a9c:	3204      	adds	r2, #4
 8005a9e:	2104      	movs	r1, #4
 8005aa0:	9103      	str	r1, [sp, #12]
 8005aa2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005aa6:	9102      	str	r1, [sp, #8]
 8005aa8:	9201      	str	r2, [sp, #4]
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	4623      	mov	r3, r4
 8005aae:	4602      	mov	r2, r0
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	6978      	ldr	r0, [r7, #20]
 8005ab4:	f7fe f888 	bl	8003bc8 <lfs_bd_read>
 8005ab8:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8005aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d006      	beq.n	8005ace <lfs_dir_fetchmatch+0x2d2>
                    if (err == LFS_ERR_CORRUPT) {
 8005ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ac2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005ac6:	f000 817c 	beq.w	8005dc2 <lfs_dir_fetchmatch+0x5c6>
                        break;
                    }
                    return err;
 8005aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 8005acc:	e257      	b.n	8005f7e <lfs_dir_fetchmatch+0x782>
                }
                dcrc = lfs_fromle32(dcrc);
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fe f80d 	bl	8003af0 <lfs_fromle32>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 8005ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	f040 8171 	bne.w	8005dc6 <lfs_dir_fetchmatch+0x5ca>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fce4 	bl	80044b4 <lfs_tag_chunk>
 8005aec:	4603      	mov	r3, r0
 8005aee:	07db      	lsls	r3, r3, #31
 8005af0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005af2:	4053      	eors	r3, r2
 8005af4:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005afe:	2204      	movs	r2, #4
 8005b00:	4618      	mov	r0, r3
 8005b02:	f004 feed 	bl	800a8e0 <lfs_crc>
 8005b06:	4602      	mov	r2, r0
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8005b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fd05 	bl	8004522 <lfs_tag_dsize>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1c:	441a      	add	r2, r3
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b26:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005b2e:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8005b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8005b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8005b42:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8005b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30
 8005b4a:	e73c      	b.n	80059c6 <lfs_dir_fetchmatch+0x1ca>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8005b4c:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	681c      	ldr	r4, [r3, #0]
 8005b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5c:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe fcde 	bl	8004522 <lfs_tag_dsize>
 8005b66:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8005b68:	3b04      	subs	r3, #4
 8005b6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005b6e:	9203      	str	r2, [sp, #12]
 8005b70:	9302      	str	r3, [sp, #8]
 8005b72:	9501      	str	r5, [sp, #4]
 8005b74:	9400      	str	r4, [sp, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4632      	mov	r2, r6
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	6978      	ldr	r0, [r7, #20]
 8005b7e:	f7fe f9b8 	bl	8003ef2 <lfs_bd_crc>
 8005b82:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8005b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d006      	beq.n	8005b98 <lfs_dir_fetchmatch+0x39c>
                if (err == LFS_ERR_CORRUPT) {
 8005b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b8c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005b90:	f000 811b 	beq.w	8005dca <lfs_dir_fetchmatch+0x5ce>
                    break;
                }
                return err;
 8005b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b96:	e1f2      	b.n	8005f7e <lfs_dir_fetchmatch+0x782>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe fc5a 	bl	8004454 <lfs_tag_type1>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d113      	bne.n	8005bce <lfs_dir_fetchmatch+0x3d2>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fc9d 	bl	80044e8 <lfs_tag_id>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	f200 80b6 	bhi.w	8005d28 <lfs_dir_fetchmatch+0x52c>
                    tempcount = lfs_tag_id(tag) + 1;
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fc92 	bl	80044e8 <lfs_tag_id>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005bcc:	e0ac      	b.n	8005d28 <lfs_dir_fetchmatch+0x52c>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fe fc3f 	bl	8004454 <lfs_tag_type1>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bdc:	d13a      	bne.n	8005c54 <lfs_dir_fetchmatch+0x458>
                tempcount += lfs_tag_splice(tag);
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fe fc74 	bl	80044ce <lfs_tag_splice>
 8005be6:	4603      	mov	r3, r0
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005bee:	4413      	add	r3, r2
 8005bf0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8005bf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bf6:	4b08      	ldr	r3, [pc, #32]	; (8005c18 <lfs_dir_fetchmatch+0x41c>)
 8005bf8:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8005bfa:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8005bfe:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8005c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d109      	bne.n	8005c1c <lfs_dir_fetchmatch+0x420>
                    tempbesttag |= 0x80000000;
 8005c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005c10:	e08a      	b.n	8005d28 <lfs_dir_fetchmatch+0x52c>
 8005c12:	bf00      	nop
 8005c14:	0800c080 	.word	0x0800c080
 8005c18:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8005c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c22:	f000 8081 	beq.w	8005d28 <lfs_dir_fetchmatch+0x52c>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fe fc5d 	bl	80044e8 <lfs_tag_id>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	461c      	mov	r4, r3
 8005c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fe fc57 	bl	80044e8 <lfs_tag_id>
 8005c3a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8005c3c:	429c      	cmp	r4, r3
 8005c3e:	d873      	bhi.n	8005d28 <lfs_dir_fetchmatch+0x52c>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe fc43 	bl	80044ce <lfs_tag_splice>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	029a      	lsls	r2, r3, #10
 8005c4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c4e:	4413      	add	r3, r2
 8005c50:	663b      	str	r3, [r7, #96]	; 0x60
 8005c52:	e069      	b.n	8005d28 <lfs_dir_fetchmatch+0x52c>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fbfc 	bl	8004454 <lfs_tag_type1>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c62:	d132      	bne.n	8005cca <lfs_dir_fetchmatch+0x4ce>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe fc24 	bl	80044b4 <lfs_tag_chunk>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bf14      	ite	ne
 8005c76:	2301      	movne	r3, #1
 8005c78:	2300      	moveq	r3, #0
 8005c7a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 8005c7e:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c84:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c8c:	3204      	adds	r2, #4
 8005c8e:	2108      	movs	r1, #8
 8005c90:	9103      	str	r1, [sp, #12]
 8005c92:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005c96:	9102      	str	r1, [sp, #8]
 8005c98:	9201      	str	r2, [sp, #4]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	4623      	mov	r3, r4
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	6978      	ldr	r0, [r7, #20]
 8005ca4:	f7fd ff90 	bl	8003bc8 <lfs_bd_read>
 8005ca8:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8005caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d006      	beq.n	8005cbe <lfs_dir_fetchmatch+0x4c2>
                    if (err == LFS_ERR_CORRUPT) {
 8005cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cb2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005cb6:	f000 808a 	beq.w	8005dce <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return err;
 8005cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cbc:	e15f      	b.n	8005f7e <lfs_dir_fetchmatch+0x782>
                }
                lfs_pair_fromle32(temptail);
 8005cbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe fb71 	bl	80043aa <lfs_pair_fromle32>
 8005cc8:	e02e      	b.n	8005d28 <lfs_dir_fetchmatch+0x52c>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe fbe1 	bl	8004494 <lfs_tag_type3>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d124      	bne.n	8005d28 <lfs_dir_fetchmatch+0x52c>
                err = lfs_bd_read(lfs,
 8005cde:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cec:	3204      	adds	r2, #4
 8005cee:	2108      	movs	r1, #8
 8005cf0:	9103      	str	r1, [sp, #12]
 8005cf2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005cf6:	9102      	str	r1, [sp, #8]
 8005cf8:	9201      	str	r2, [sp, #4]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	4623      	mov	r3, r4
 8005cfe:	4602      	mov	r2, r0
 8005d00:	2100      	movs	r1, #0
 8005d02:	6978      	ldr	r0, [r7, #20]
 8005d04:	f7fd ff60 	bl	8003bc8 <lfs_bd_read>
 8005d08:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8005d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <lfs_dir_fetchmatch+0x51c>
                    if (err == LFS_ERR_CORRUPT) {
 8005d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d12:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005d16:	d05c      	beq.n	8005dd2 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8005d18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe fcff 	bl	8004720 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8005d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d2e:	405a      	eors	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4013      	ands	r3, r2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f47f ae46 	bne.w	80059c6 <lfs_dir_fetchmatch+0x1ca>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005d40:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8005d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d44:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
 8005d48:	f107 0220 	add.w	r2, r7, #32
 8005d4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d50:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8005d54:	4798      	blx	r3
 8005d56:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8005d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	da05      	bge.n	8005d6a <lfs_dir_fetchmatch+0x56e>
                    if (res == LFS_ERR_CORRUPT) {
 8005d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d60:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005d64:	d037      	beq.n	8005dd6 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                    return res;
 8005d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8005d68:	e109      	b.n	8005f7e <lfs_dir_fetchmatch+0x782>
                }

                if (res == LFS_CMP_EQ) {
 8005d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <lfs_dir_fetchmatch+0x57a>
                    // found a match
                    tempbesttag = tag;
 8005d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d72:	663b      	str	r3, [r7, #96]	; 0x60
 8005d74:	e627      	b.n	80059c6 <lfs_dir_fetchmatch+0x1ca>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8005d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d7a:	405a      	eors	r2, r3
 8005d7c:	4b82      	ldr	r3, [pc, #520]	; (8005f88 <lfs_dir_fetchmatch+0x78c>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d103      	bne.n	8005d8c <lfs_dir_fetchmatch+0x590>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8005d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d88:	663b      	str	r3, [r7, #96]	; 0x60
 8005d8a:	e61c      	b.n	80059c6 <lfs_dir_fetchmatch+0x1ca>
                } else if (res == LFS_CMP_GT &&
 8005d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	f47f ae19 	bne.w	80059c6 <lfs_dir_fetchmatch+0x1ca>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe fba6 	bl	80044e8 <lfs_tag_id>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	461c      	mov	r4, r3
 8005da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe fba0 	bl	80044e8 <lfs_tag_id>
 8005da8:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8005daa:	429c      	cmp	r4, r3
 8005dac:	f63f ae0b 	bhi.w	80059c6 <lfs_dir_fetchmatch+0x1ca>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8005db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005db6:	663b      	str	r3, [r7, #96]	; 0x60
 8005db8:	e605      	b.n	80059c6 <lfs_dir_fetchmatch+0x1ca>
                    break;
 8005dba:	bf00      	nop
 8005dbc:	e00c      	b.n	8005dd8 <lfs_dir_fetchmatch+0x5dc>
                break;
 8005dbe:	bf00      	nop
 8005dc0:	e00a      	b.n	8005dd8 <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005dc2:	bf00      	nop
 8005dc4:	e008      	b.n	8005dd8 <lfs_dir_fetchmatch+0x5dc>
                    break;
 8005dc6:	bf00      	nop
 8005dc8:	e006      	b.n	8005dd8 <lfs_dir_fetchmatch+0x5dc>
                    break;
 8005dca:	bf00      	nop
 8005dcc:	e004      	b.n	8005dd8 <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005dce:	bf00      	nop
 8005dd0:	e002      	b.n	8005dd8 <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005dd2:	bf00      	nop
 8005dd4:	e000      	b.n	8005dd8 <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005dd6:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d000      	beq.n	8005de2 <lfs_dir_fetchmatch+0x5e6>
 8005de0:	e017      	b.n	8005e12 <lfs_dir_fetchmatch+0x616>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe fa59 	bl	800429c <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8005dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dec:	3301      	adds	r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	bfb8      	it	lt
 8005df6:	425b      	neglt	r3, r3
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	3378      	adds	r3, #120	; 0x78
 8005dfc:	f107 0208 	add.w	r2, r7, #8
 8005e00:	4413      	add	r3, r2
 8005e02:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8005e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	673b      	str	r3, [r7, #112]	; 0x70
 8005e10:	e0a1      	b.n	8005f56 <lfs_dir_fetchmatch+0x75a>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2200      	movs	r2, #0
 8005e16:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8005e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d03a      	beq.n	8005e96 <lfs_dir_fetchmatch+0x69a>
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e28:	6992      	ldr	r2, [r2, #24]
 8005e2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e2e:	fb01 f202 	mul.w	r2, r1, r2
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d12e      	bne.n	8005e96 <lfs_dir_fetchmatch+0x69a>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8005e38:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d02a      	beq.n	8005e96 <lfs_dir_fetchmatch+0x69a>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8005e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e44:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8005e46:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e4c:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	68d2      	ldr	r2, [r2, #12]
 8005e56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e58:	f107 001c 	add.w	r0, r7, #28
 8005e5c:	9003      	str	r0, [sp, #12]
 8005e5e:	9102      	str	r1, [sp, #8]
 8005e60:	9201      	str	r2, [sp, #4]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	462b      	mov	r3, r5
 8005e66:	4622      	mov	r2, r4
 8005e68:	2100      	movs	r1, #0
 8005e6a:	6978      	ldr	r0, [r7, #20]
 8005e6c:	f7fe f841 	bl	8003ef2 <lfs_bd_crc>
 8005e70:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8005e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <lfs_dir_fetchmatch+0x688>
 8005e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005e7e:	d001      	beq.n	8005e84 <lfs_dir_fetchmatch+0x688>
                    return err;
 8005e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e82:	e07c      	b.n	8005f7e <lfs_dir_fetchmatch+0x782>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8005e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2301      	moveq	r3, #1
 8005e8e:	2300      	movne	r3, #0
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	333c      	adds	r3, #60	; 0x3c
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fbde 	bl	8004660 <lfs_gstate_hasmovehere>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d028      	beq.n	8005efc <lfs_dir_fetchmatch+0x700>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe fb1a 	bl	80044e8 <lfs_tag_id>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	461c      	mov	r4, r3
 8005eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fb14 	bl	80044e8 <lfs_tag_id>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	429c      	cmp	r4, r3
 8005ec4:	d104      	bne.n	8005ed0 <lfs_dir_fetchmatch+0x6d4>
                besttag |= 0x80000000;
 8005ec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ece:	e015      	b.n	8005efc <lfs_dir_fetchmatch+0x700>
            } else if (besttag != -1 &&
 8005ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ed6:	d011      	beq.n	8005efc <lfs_dir_fetchmatch+0x700>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fb03 	bl	80044e8 <lfs_tag_id>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	461c      	mov	r4, r3
 8005ee6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fafd 	bl	80044e8 <lfs_tag_id>
 8005eee:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8005ef0:	429c      	cmp	r4, r3
 8005ef2:	d203      	bcs.n	8005efc <lfs_dir_fetchmatch+0x700>
                besttag -= LFS_MKTAG(0, 1, 0);
 8005ef4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ef6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005efa:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8005efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d010      	beq.n	8005f26 <lfs_dir_fetchmatch+0x72a>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8005f04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fe faee 	bl	80044e8 <lfs_tag_id>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	461a      	mov	r2, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	8a9b      	ldrh	r3, [r3, #20]
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7fd fd7a 	bl	8003a10 <lfs_min>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f24:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8005f26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe fa72 	bl	8004412 <lfs_tag_isvalid>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <lfs_dir_fetchmatch+0x73c>
            return besttag;
 8005f34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f36:	e022      	b.n	8005f7e <lfs_dir_fetchmatch+0x782>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8005f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fad4 	bl	80044e8 <lfs_tag_id>
 8005f40:	4603      	mov	r3, r0
 8005f42:	461a      	mov	r2, r3
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	8a9b      	ldrh	r3, [r3, #20]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d202      	bcs.n	8005f52 <lfs_dir_fetchmatch+0x756>
            return LFS_ERR_NOENT;
 8005f4c:	f06f 0301 	mvn.w	r3, #1
 8005f50:	e015      	b.n	8005f7e <lfs_dir_fetchmatch+0x782>
        } else {
            return 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	e013      	b.n	8005f7e <lfs_dir_fetchmatch+0x782>
    for (int i = 0; i < 2; i++) {
 8005f56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	f77f ad00 	ble.w	800595e <lfs_dir_fetchmatch+0x162>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4909      	ldr	r1, [pc, #36]	; (8005f8c <lfs_dir_fetchmatch+0x790>)
 8005f68:	9101      	str	r1, [sp, #4]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	f240 5235 	movw	r2, #1333	; 0x535
 8005f72:	4907      	ldr	r1, [pc, #28]	; (8005f90 <lfs_dir_fetchmatch+0x794>)
 8005f74:	4807      	ldr	r0, [pc, #28]	; (8005f94 <lfs_dir_fetchmatch+0x798>)
 8005f76:	f005 f8c7 	bl	800b108 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8005f7a:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3784      	adds	r7, #132	; 0x84
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f86:	bf00      	nop
 8005f88:	7ffffc00 	.word	0x7ffffc00
 8005f8c:	0800c03c 	.word	0x0800c03c
 8005f90:	0800bf48 	.word	0x0800bf48
 8005f94:	0800c048 	.word	0x0800c048

08005f98 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af04      	add	r7, sp, #16
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	9303      	str	r3, [sp, #12]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9302      	str	r3, [sp, #8]
 8005fac:	2300      	movs	r3, #0
 8005fae:	9301      	str	r3, [sp, #4]
 8005fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff fc1c 	bl	80057fc <lfs_dir_fetchmatch>
 8005fc4:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08a      	sub	sp, #40	; 0x28
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8005fdc:	f107 0310 	add.w	r3, r7, #16
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	4b12      	ldr	r3, [pc, #72]	; (800602c <lfs_dir_getgstate+0x5c>)
 8005fe4:	4a12      	ldr	r2, [pc, #72]	; (8006030 <lfs_dir_getgstate+0x60>)
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f7fe fed5 	bl	8004d98 <lfs_dir_get>
 8005fee:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da05      	bge.n	8006002 <lfs_dir_getgstate+0x32>
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f113 0f02 	cmn.w	r3, #2
 8005ffc:	d001      	beq.n	8006002 <lfs_dir_getgstate+0x32>
        return res;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	e00f      	b.n	8006022 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f113 0f02 	cmn.w	r3, #2
 8006008:	d00a      	beq.n	8006020 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800600a:	f107 0310 	add.w	r3, r7, #16
 800600e:	4618      	mov	r0, r3
 8006010:	f7fe fb46 	bl	80046a0 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8006014:	f107 0310 	add.w	r3, r7, #16
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fe fa95 	bl	800454a <lfs_gstate_xor>
    }

    return 0;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	7ff0000c 	.word	0x7ff0000c
 8006030:	7ff00000 	.word	0x7ff00000

08006034 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006034:	b590      	push	{r4, r7, lr}
 8006036:	b08f      	sub	sp, #60	; 0x3c
 8006038:	af04      	add	r7, sp, #16
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	689c      	ldr	r4, [r3, #8]
 8006052:	68b8      	ldr	r0, [r7, #8]
 8006054:	f7fe fa58 	bl	8004508 <lfs_tag_size>
 8006058:	4603      	mov	r3, r0
 800605a:	4619      	mov	r1, r3
 800605c:	4620      	mov	r0, r4
 800605e:	f7fd fcd7 	bl	8003a10 <lfs_min>
 8006062:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8006064:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800606e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006070:	6849      	ldr	r1, [r1, #4]
 8006072:	69b8      	ldr	r0, [r7, #24]
 8006074:	9003      	str	r0, [sp, #12]
 8006076:	9102      	str	r1, [sp, #8]
 8006078:	9201      	str	r2, [sp, #4]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	4622      	mov	r2, r4
 8006080:	2100      	movs	r1, #0
 8006082:	6a38      	ldr	r0, [r7, #32]
 8006084:	f7fd fee4 	bl	8003e50 <lfs_bd_cmp>
 8006088:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <lfs_dir_find_match+0x60>
        return res;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	e014      	b.n	80060be <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	689c      	ldr	r4, [r3, #8]
 8006098:	68b8      	ldr	r0, [r7, #8]
 800609a:	f7fe fa35 	bl	8004508 <lfs_tag_size>
 800609e:	4603      	mov	r3, r0
 80060a0:	429c      	cmp	r4, r3
 80060a2:	d00b      	beq.n	80060bc <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	689c      	ldr	r4, [r3, #8]
 80060a8:	68b8      	ldr	r0, [r7, #8]
 80060aa:	f7fe fa2d 	bl	8004508 <lfs_tag_size>
 80060ae:	4603      	mov	r3, r0
 80060b0:	429c      	cmp	r4, r3
 80060b2:	d201      	bcs.n	80060b8 <lfs_dir_find_match+0x84>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e002      	b.n	80060be <lfs_dir_find_match+0x8a>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e000      	b.n	80060be <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	372c      	adds	r7, #44	; 0x2c
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd90      	pop	{r4, r7, pc}
	...

080060c8 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 80060c8:	b590      	push	{r4, r7, lr}
 80060ca:	b093      	sub	sp, #76	; 0x4c
 80060cc:	af04      	add	r7, sp, #16
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <lfs_dir_find+0x22>
        *id = 0x3ff;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80060e8:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 80060ea:	4b6e      	ldr	r3, [pc, #440]	; (80062a4 <lfs_dir_find+0x1dc>)
 80060ec:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1a      	ldr	r2, [r3, #32]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 80060fe:	496a      	ldr	r1, [pc, #424]	; (80062a8 <lfs_dir_find+0x1e0>)
 8006100:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006102:	f005 f894 	bl	800b22e <strspn>
 8006106:	4602      	mov	r2, r0
 8006108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610a:	4413      	add	r3, r2
 800610c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800610e:	4966      	ldr	r1, [pc, #408]	; (80062a8 <lfs_dir_find+0x1e0>)
 8006110:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006112:	f005 f87b 	bl	800b20c <strcspn>
 8006116:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	2b01      	cmp	r3, #1
 800611c:	d105      	bne.n	800612a <lfs_dir_find+0x62>
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	781a      	ldrb	r2, [r3, #0]
 8006122:	4b62      	ldr	r3, [pc, #392]	; (80062ac <lfs_dir_find+0x1e4>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d00a      	beq.n	8006140 <lfs_dir_find+0x78>
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	2b02      	cmp	r3, #2
 800612e:	d10c      	bne.n	800614a <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8006130:	2202      	movs	r2, #2
 8006132:	495f      	ldr	r1, [pc, #380]	; (80062b0 <lfs_dir_find+0x1e8>)
 8006134:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006136:	f005 f844 	bl	800b1c2 <memcmp>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <lfs_dir_find+0x82>
            name += namelen;
 8006140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	4413      	add	r3, r2
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8006148:	e7d9      	b.n	80060fe <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800614a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	4413      	add	r3, r2
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8006152:	2301      	movs	r3, #1
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8006156:	4954      	ldr	r1, [pc, #336]	; (80062a8 <lfs_dir_find+0x1e0>)
 8006158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800615a:	f005 f868 	bl	800b22e <strspn>
 800615e:	4602      	mov	r2, r0
 8006160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006162:	4413      	add	r3, r2
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8006166:	4950      	ldr	r1, [pc, #320]	; (80062a8 <lfs_dir_find+0x1e0>)
 8006168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800616a:	f005 f84f 	bl	800b20c <strcspn>
 800616e:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d01d      	beq.n	80061b2 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d112      	bne.n	80061a2 <lfs_dir_find+0xda>
 800617c:	2202      	movs	r2, #2
 800617e:	494c      	ldr	r1, [pc, #304]	; (80062b0 <lfs_dir_find+0x1e8>)
 8006180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006182:	f005 f81e 	bl	800b1c2 <memcmp>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <lfs_dir_find+0xda>
                depth -= 1;
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	3b01      	subs	r3, #1
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	2b00      	cmp	r3, #0
 8006196:	d107      	bne.n	80061a8 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8006198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	4413      	add	r3, r2
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 80061a0:	e7ad      	b.n	80060fe <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	3301      	adds	r3, #1
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 80061a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	4413      	add	r3, r2
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 80061b0:	e7d1      	b.n	8006156 <lfs_dir_find+0x8e>
                break;
 80061b2:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <lfs_dir_find+0xf8>
            return tag;
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	e06c      	b.n	800629a <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c4:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe f963 	bl	8004494 <lfs_tag_type3>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d002      	beq.n	80061da <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 80061d4:	f06f 0313 	mvn.w	r3, #19
 80061d8:	e05f      	b.n	800629a <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe f983 	bl	80044e8 <lfs_tag_id>
 80061e2:	4603      	mov	r3, r0
 80061e4:	461a      	mov	r2, r3
 80061e6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d01c      	beq.n	8006228 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe f979 	bl	80044e8 <lfs_tag_id>
 80061f6:	4603      	mov	r3, r0
 80061f8:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80061fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061fe:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006206:	9200      	str	r2, [sp, #0]
 8006208:	4a2a      	ldr	r2, [pc, #168]	; (80062b4 <lfs_dir_find+0x1ec>)
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f7fe fdc3 	bl	8004d98 <lfs_dir_get>
 8006212:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	da01      	bge.n	800621e <lfs_dir_find+0x156>
                return res;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	e03d      	b.n	800629a <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	3318      	adds	r3, #24
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe f8c1 	bl	80043aa <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800622e:	212f      	movs	r1, #47	; 0x2f
 8006230:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006232:	f004 ffde 	bl	800b1f2 <strchr>
 8006236:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <lfs_dir_find+0x178>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	e000      	b.n	8006242 <lfs_dir_find+0x17a>
 8006240:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	613a      	str	r2, [r7, #16]
 8006246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006248:	617a      	str	r2, [r7, #20]
 800624a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624c:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800624e:	f107 0210 	add.w	r2, r7, #16
 8006252:	9203      	str	r2, [sp, #12]
 8006254:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <lfs_dir_find+0x1f0>)
 8006256:	9202      	str	r2, [sp, #8]
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8006262:	4622      	mov	r2, r4
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f7ff fac8 	bl	80057fc <lfs_dir_fetchmatch>
 800626c:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	2b00      	cmp	r3, #0
 8006272:	da01      	bge.n	8006278 <lfs_dir_find+0x1b0>
                return tag;
 8006274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006276:	e010      	b.n	800629a <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800627e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	4413      	add	r3, r2
 8006284:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8006286:	e73a      	b.n	80060fe <lfs_dir_find+0x36>
            if (!dir->split) {
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	7ddb      	ldrb	r3, [r3, #23]
 800628c:	f083 0301 	eor.w	r3, r3, #1
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0c8      	beq.n	8006228 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8006296:	f06f 0301 	mvn.w	r3, #1
    }
}
 800629a:	4618      	mov	r0, r3
 800629c:	373c      	adds	r7, #60	; 0x3c
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd90      	pop	{r4, r7, pc}
 80062a2:	bf00      	nop
 80062a4:	002ffc00 	.word	0x002ffc00
 80062a8:	0800c088 	.word	0x0800c088
 80062ac:	0800c08c 	.word	0x0800c08c
 80062b0:	0800c090 	.word	0x0800c090
 80062b4:	700ffc00 	.word	0x700ffc00
 80062b8:	08006035 	.word	0x08006035

080062bc <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80062bc:	b590      	push	{r4, r7, lr}
 80062be:	b08b      	sub	sp, #44	; 0x2c
 80062c0:	af04      	add	r7, sp, #16
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f103 0010 	add.w	r0, r3, #16
 80062d0:	68fc      	ldr	r4, [r7, #12]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	6852      	ldr	r2, [r2, #4]
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	9103      	str	r1, [sp, #12]
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	9102      	str	r1, [sp, #8]
 80062e2:	9201      	str	r2, [sp, #4]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	2300      	movs	r3, #0
 80062e8:	4622      	mov	r2, r4
 80062ea:	4601      	mov	r1, r0
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7fd fef7 	bl	80040e0 <lfs_bd_prog>
 80062f2:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <lfs_dir_commitprog+0x42>
        return err;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	e010      	b.n	8006320 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	4618      	mov	r0, r3
 8006308:	f004 faea 	bl	800a8e0 <lfs_crc>
 800630c:	4602      	mov	r2, r0
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	441a      	add	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	605a      	str	r2, [r3, #4]
    return 0;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	bd90      	pop	{r4, r7, pc}

08006328 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b08f      	sub	sp, #60	; 0x3c
 800632c:	af04      	add	r7, sp, #16
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fe f8f3 	bl	8004522 <lfs_tag_dsize>
 800633c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	441a      	add	r2, r3
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	429a      	cmp	r2, r3
 800634c:	d902      	bls.n	8006354 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800634e:	f06f 031b 	mvn.w	r3, #27
 8006352:	e065      	b.n	8006420 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	4053      	eors	r3, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f7fd fbe8 	bl	8003b36 <lfs_tobe32>
 8006366:	4603      	mov	r3, r0
 8006368:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800636a:	f107 0214 	add.w	r2, r7, #20
 800636e:	2304      	movs	r3, #4
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff ffa2 	bl	80062bc <lfs_dir_commitprog>
 8006378:	61f8      	str	r0, [r7, #28]
    if (err) {
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <lfs_dir_commitattr+0x5c>
        return err;
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	e04d      	b.n	8006420 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	db0c      	blt.n	80063a4 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	3b04      	subs	r3, #4
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff ff92 	bl	80062bc <lfs_dir_commitprog>
 8006398:	61f8      	str	r0, [r7, #28]
        if (err) {
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d039      	beq.n	8006414 <lfs_dir_commitattr+0xec>
            return err;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	e03d      	b.n	8006420 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80063a8:	2300      	movs	r3, #0
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
 80063ac:	e02d      	b.n	800640a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80063ae:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80063b0:	6a3a      	ldr	r2, [r7, #32]
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80063b6:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80063c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c2:	440a      	add	r2, r1
 80063c4:	2101      	movs	r1, #1
 80063c6:	9103      	str	r1, [sp, #12]
 80063c8:	f107 0113 	add.w	r1, r7, #19
 80063cc:	9102      	str	r1, [sp, #8]
 80063ce:	9201      	str	r2, [sp, #4]
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	4623      	mov	r3, r4
 80063d4:	4602      	mov	r2, r0
 80063d6:	2100      	movs	r1, #0
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f7fd fbf5 	bl	8003bc8 <lfs_bd_read>
 80063de:	61f8      	str	r0, [r7, #28]
            if (err) {
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <lfs_dir_commitattr+0xc2>
                return err;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	e01a      	b.n	8006420 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 80063ea:	f107 0213 	add.w	r2, r7, #19
 80063ee:	2301      	movs	r3, #1
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff ff62 	bl	80062bc <lfs_dir_commitprog>
 80063f8:	61f8      	str	r0, [r7, #28]
            if (err) {
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <lfs_dir_commitattr+0xdc>
                return err;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	e00d      	b.n	8006420 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	3301      	adds	r3, #1
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	3b04      	subs	r3, #4
 800640e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006410:	429a      	cmp	r2, r3
 8006412:	d3cc      	bcc.n	80063ae <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	609a      	str	r2, [r3, #8]
    return 0;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	372c      	adds	r7, #44	; 0x2c
 8006424:	46bd      	mov	sp, r7
 8006426:	bd90      	pop	{r4, r7, pc}

08006428 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8006428:	b590      	push	{r4, r7, lr}
 800642a:	b097      	sub	sp, #92	; 0x5c
 800642c:	af04      	add	r7, sp, #16
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8006436:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800643e:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8006440:	4619      	mov	r1, r3
 8006442:	4610      	mov	r0, r2
 8006444:	f7fd fae4 	bl	8003a10 <lfs_min>
 8006448:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800644e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f7fd fb01 	bl	8003a5a <lfs_alignup>
 8006458:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8006462:	e0fe      	b.n	8006662 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	3b04      	subs	r3, #4
 800646e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006472:	4618      	mov	r0, r3
 8006474:	f7fd facc 	bl	8003a10 <lfs_min>
 8006478:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4413      	add	r3, r2
        lfs_off_t noff = (
 8006480:	3304      	adds	r3, #4
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8006484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	429a      	cmp	r2, r3
 800648a:	d206      	bcs.n	800649a <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	3b14      	subs	r3, #20
 8006490:	4619      	mov	r1, r3
 8006492:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006494:	f7fd fabc 	bl	8003a10 <lfs_min>
 8006498:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = -1;
 800649a:	23ff      	movs	r3, #255	; 0xff
 800649c:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800649e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d35f      	bcc.n	8006566 <lfs_dir_commitcrc+0x13e>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064aa:	69da      	ldr	r2, [r3, #28]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d855      	bhi.n	8006566 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 80064ba:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c0:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2201      	movs	r2, #1
 80064c8:	9203      	str	r2, [sp, #12]
 80064ca:	f107 021b 	add.w	r2, r7, #27
 80064ce:	9202      	str	r2, [sp, #8]
 80064d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064d2:	9201      	str	r2, [sp, #4]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	4603      	mov	r3, r0
 80064d8:	460a      	mov	r2, r1
 80064da:	2100      	movs	r1, #0
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7fd fb73 	bl	8003bc8 <lfs_bd_read>
 80064e2:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <lfs_dir_commitcrc+0xce>
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80064f0:	d001      	beq.n	80064f6 <lfs_dir_commitcrc+0xce>
                return err;
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	e101      	b.n	80066fa <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064fa:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 80064fc:	60bb      	str	r3, [r7, #8]
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006502:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8006504:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800650a:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	f107 0108 	add.w	r1, r7, #8
 8006516:	3104      	adds	r1, #4
 8006518:	9103      	str	r1, [sp, #12]
 800651a:	9202      	str	r2, [sp, #8]
 800651c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800651e:	9201      	str	r2, [sp, #4]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	4623      	mov	r3, r4
 8006524:	4602      	mov	r2, r0
 8006526:	2100      	movs	r1, #0
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7fd fce2 	bl	8003ef2 <lfs_bd_crc>
 800652e:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <lfs_dir_commitcrc+0x11a>
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800653c:	d001      	beq.n	8006542 <lfs_dir_commitcrc+0x11a>
                    return err;
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	e0db      	b.n	80066fa <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 8006542:	f107 0308 	add.w	r3, r7, #8
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe f902 	bl	8004750 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 800654c:	f107 0308 	add.w	r3, r7, #8
 8006550:	4a6c      	ldr	r2, [pc, #432]	; (8006704 <lfs_dir_commitcrc+0x2dc>)
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff fee7 	bl	8006328 <lfs_dir_commitattr>
 800655a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <lfs_dir_commitcrc+0x13e>
                    return err;
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	e0c9      	b.n	80066fa <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8006566:	7efb      	ldrb	r3, [r7, #27]
 8006568:	43db      	mvns	r3, r3
 800656a:	b2db      	uxtb	r3, r3
 800656c:	09db      	lsrs	r3, r3, #7
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006574:	051a      	lsls	r2, r3, #20
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800657c:	1acb      	subs	r3, r1, r3
 800657e:	3b04      	subs	r3, #4
 8006580:	4313      	orrs	r3, r2
 8006582:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8006586:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	4053      	eors	r3, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f7fd face 	bl	8003b36 <lfs_tobe32>
 800659a:	4603      	mov	r3, r0
 800659c:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f107 0110 	add.w	r1, r7, #16
 80065a6:	2204      	movs	r2, #4
 80065a8:	4618      	mov	r0, r3
 80065aa:	f004 f999 	bl	800a8e0 <lfs_crc>
 80065ae:	4602      	mov	r2, r0
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fd faa4 	bl	8003b06 <lfs_tole32>
 80065be:	4603      	mov	r3, r0
 80065c0:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f103 0010 	add.w	r0, r3, #16
 80065c8:	687c      	ldr	r4, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	6852      	ldr	r2, [r2, #4]
 80065d2:	2108      	movs	r1, #8
 80065d4:	9103      	str	r1, [sp, #12]
 80065d6:	f107 0110 	add.w	r1, r7, #16
 80065da:	9102      	str	r1, [sp, #8]
 80065dc:	9201      	str	r2, [sp, #4]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	2300      	movs	r3, #0
 80065e2:	4622      	mov	r2, r4
 80065e4:	4601      	mov	r1, r0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fd fd7a 	bl	80040e0 <lfs_bd_prog>
 80065ec:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <lfs_dir_commitcrc+0x1d0>
            return err;
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	e080      	b.n	80066fa <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80065f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	3304      	adds	r3, #4
 8006604:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006610:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8006612:	7efb      	ldrb	r3, [r7, #27]
 8006614:	43db      	mvns	r3, r3
 8006616:	061b      	lsls	r3, r3, #24
 8006618:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	405a      	eors	r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800662a:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800662c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800662e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006630:	429a      	cmp	r2, r3
 8006632:	d208      	bcs.n	8006646 <lfs_dir_commitcrc+0x21e>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	695a      	ldr	r2, [r3, #20]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	4413      	add	r3, r2
 8006640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006642:	429a      	cmp	r2, r3
 8006644:	d30d      	bcc.n	8006662 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f103 0110 	add.w	r1, r3, #16
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	2300      	movs	r3, #0
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7fd fd11 	bl	8004078 <lfs_bd_sync>
 8006656:	6238      	str	r0, [r7, #32]
            if (err) {
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <lfs_dir_commitcrc+0x23a>
                return err;
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	e04b      	b.n	80066fa <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006668:	429a      	cmp	r2, r3
 800666a:	f63f aefb 	bhi.w	8006464 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 8006674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006678:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800667e:	1d1c      	adds	r4, r3, #4
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006688:	1a8a      	subs	r2, r1, r2
 800668a:	f107 011c 	add.w	r1, r7, #28
 800668e:	9103      	str	r1, [sp, #12]
 8006690:	9202      	str	r2, [sp, #8]
 8006692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006694:	9201      	str	r2, [sp, #4]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	4623      	mov	r3, r4
 800669a:	4602      	mov	r2, r0
 800669c:	2100      	movs	r1, #0
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fd fc27 	bl	8003ef2 <lfs_bd_crc>
 80066a4:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <lfs_dir_commitcrc+0x288>
        return err;
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	e024      	b.n	80066fa <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d002      	beq.n	80066be <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 80066b8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80066bc:	e01d      	b.n	80066fa <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f107 021c 	add.w	r2, r7, #28
 80066c8:	9203      	str	r2, [sp, #12]
 80066ca:	2204      	movs	r2, #4
 80066cc:	9202      	str	r2, [sp, #8]
 80066ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d0:	9201      	str	r2, [sp, #4]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	2304      	movs	r3, #4
 80066d6:	460a      	mov	r2, r1
 80066d8:	2100      	movs	r1, #0
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fd fc09 	bl	8003ef2 <lfs_bd_crc>
 80066e0:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <lfs_dir_commitcrc+0x2c4>
        return err;
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	e006      	b.n	80066fa <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 80066f2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80066f6:	e000      	b.n	80066fa <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	374c      	adds	r7, #76	; 0x4c
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd90      	pop	{r4, r7, pc}
 8006702:	bf00      	nop
 8006704:	5ffffc08 	.word	0x5ffffc08

08006708 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b08a      	sub	sp, #40	; 0x28
 800670c:	af04      	add	r7, sp, #16
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	e016      	b.n	8006746 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	3301      	adds	r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	bfb8      	it	lt
 8006724:	425b      	neglt	r3, r3
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	4413      	add	r3, r2
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fe f998 	bl	8004a64 <lfs_alloc>
 8006734:	60f8      	str	r0, [r7, #12]
        if (err) {
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <lfs_dir_alloc+0x38>
            return err;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	e058      	b.n	80067f2 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	3301      	adds	r3, #1
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b01      	cmp	r3, #1
 800674a:	dde5      	ble.n	8006718 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2200      	movs	r2, #0
 8006750:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800675c:	2004      	movs	r0, #4
 800675e:	9003      	str	r0, [sp, #12]
 8006760:	9202      	str	r2, [sp, #8]
 8006762:	2200      	movs	r2, #0
 8006764:	9201      	str	r2, [sp, #4]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	2304      	movs	r3, #4
 800676a:	460a      	mov	r2, r1
 800676c:	2100      	movs	r1, #0
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fd fa2a 	bl	8003bc8 <lfs_bd_read>
 8006774:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	4618      	mov	r0, r3
 800677c:	f7fd f9b8 	bl	8003af0 <lfs_fromle32>
 8006780:	4602      	mov	r2, r0
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <lfs_dir_alloc+0x90>
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006792:	d001      	beq.n	8006798 <lfs_dir_alloc+0x90>
        return err;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	e02c      	b.n	80067f2 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	dd0e      	ble.n	80067c0 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	3301      	adds	r3, #1
 80067ae:	f043 0301 	orr.w	r3, r3, #1
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7fd f950 	bl	8003a5a <lfs_alignup>
 80067ba:	4602      	mov	r2, r0
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2204      	movs	r2, #4
 80067c4:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067cc:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2200      	movs	r2, #0
 80067d2:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067da:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067e2:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2200      	movs	r2, #0
 80067e8:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2200      	movs	r2, #0
 80067ee:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
	...

080067fc <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	; 0x28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3348      	adds	r3, #72	; 0x48
 800680c:	461a      	mov	r2, r3
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff fbdd 	bl	8005fd0 <lfs_dir_getgstate>
 8006816:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <lfs_dir_drop+0x26>
        return err;
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	e022      	b.n	8006868 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3318      	adds	r3, #24
 8006826:	4618      	mov	r0, r3
 8006828:	f7fd fdd9 	bl	80043de <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	7ddb      	ldrb	r3, [r3, #23]
 8006830:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006834:	051a      	lsls	r2, r3, #20
 8006836:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <lfs_dir_drop+0x74>)
 8006838:	4313      	orrs	r3, r2
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3318      	adds	r3, #24
 8006840:	623b      	str	r3, [r7, #32]
 8006842:	f107 021c 	add.w	r2, r7, #28
 8006846:	2301      	movs	r3, #1
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f001 f978 	bl	8007b40 <lfs_dir_commit>
 8006850:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3318      	adds	r3, #24
 8006856:	4618      	mov	r0, r3
 8006858:	f7fd fda7 	bl	80043aa <lfs_pair_fromle32>
    if (err) {
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <lfs_dir_drop+0x6a>
        return err;
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	e000      	b.n	8006868 <lfs_dir_drop+0x6c>
    }

    return 0;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3728      	adds	r7, #40	; 0x28
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	000ffc08 	.word	0x000ffc08

08006874 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b092      	sub	sp, #72	; 0x48
 8006878:	af04      	add	r7, sp, #16
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8006882:	f107 0310 	add.w	r3, r7, #16
 8006886:	4619      	mov	r1, r3
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7ff ff3d 	bl	8006708 <lfs_dir_alloc>
 800688e:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8006890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <lfs_dir_split+0x26>
        return err;
 8006896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006898:	e03c      	b.n	8006914 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	7ddb      	ldrb	r3, [r3, #23]
 800689e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80068ae:	f107 0110 	add.w	r1, r7, #16
 80068b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80068b6:	9302      	str	r3, [sp, #8]
 80068b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 f87a 	bl	80069c0 <lfs_dir_compact>
 80068cc:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	da01      	bge.n	80068d8 <lfs_dir_split+0x64>
        return res;
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	e01d      	b.n	8006914 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2201      	movs	r2, #1
 80068e8:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3320      	adds	r3, #32
 80068f0:	4619      	mov	r1, r3
 80068f2:	4610      	mov	r0, r2
 80068f4:	f7fd fd02 	bl	80042fc <lfs_pair_cmp>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <lfs_dir_split+0x9e>
 80068fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006902:	2b00      	cmp	r3, #0
 8006904:	d105      	bne.n	8006912 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3738      	adds	r7, #56	; 0x38
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800692c:	68b8      	ldr	r0, [r7, #8]
 800692e:	f7fd fdf8 	bl	8004522 <lfs_tag_dsize>
 8006932:	4602      	mov	r2, r0
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	441a      	add	r2, r3
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	601a      	str	r2, [r3, #0]
    return 0;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	6859      	ldr	r1, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	f7ff fce0 	bl	8006328 <lfs_dir_commitattr>
 8006968:	4603      	mov	r3, r0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8006982:	2b00      	cmp	r3, #0
 8006984:	dd11      	ble.n	80069aa <lfs_dir_needsrelocation+0x38>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	3301      	adds	r3, #1
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006992:	3201      	adds	r2, #1
 8006994:	f042 0201 	orr.w	r2, r2, #1
 8006998:	fbb3 f1f2 	udiv	r1, r3, r2
 800699c:	fb01 f202 	mul.w	r2, r1, r2
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <lfs_dir_needsrelocation+0x38>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <lfs_dir_needsrelocation+0x3a>
 80069aa:	2300      	movs	r3, #0
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	b2db      	uxtb	r3, r3
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
	...

080069c0 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b0a4      	sub	sp, #144	; 0x90
 80069c4:	af0a      	add	r7, sp, #40	; 0x28
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff ffcb 	bl	8006972 <lfs_dir_needsrelocation>
 80069dc:	4603      	mov	r3, r0
 80069de:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80069ec:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00e      	beq.n	8006a12 <lfs_dir_compact+0x52>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2200      	movs	r2, #0
 80069f8:	657a      	str	r2, [r7, #84]	; 0x54
 80069fa:	2201      	movs	r2, #1
 80069fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80069fe:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006a02:	4611      	mov	r1, r2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fd fc79 	bl	80042fc <lfs_pair_cmp>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f040 8155 	bne.w	8006cbc <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8006a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a18:	2300      	movs	r3, #0
 8006a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a20:	647b      	str	r3, [r7, #68]	; 0x44
 8006a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a28:	2300      	movs	r3, #0
 8006a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d004      	beq.n	8006a40 <lfs_dir_compact+0x80>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3c:	3b08      	subs	r3, #8
 8006a3e:	e003      	b.n	8006a48 <lfs_dir_compact+0x88>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8006a48:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7fd fbf1 	bl	8004238 <lfs_bd_erase>
 8006a56:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8006a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d006      	beq.n	8006a6c <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8006a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a60:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006a64:	f000 812c 	beq.w	8006cc0 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8006a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a6a:	e188      	b.n	8006d7e <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fd f848 	bl	8003b06 <lfs_tole32>
 8006a76:	4602      	mov	r2, r0
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8006a82:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006a86:	2304      	movs	r3, #4
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7ff fc17 	bl	80062bc <lfs_dir_commitprog>
 8006a8e:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fd f82b 	bl	8003af0 <lfs_fromle32>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	609a      	str	r2, [r3, #8]
            if (err) {
 8006aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d006      	beq.n	8006ab4 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8006aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aa8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006aac:	f000 810a 	beq.w	8006cc4 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8006ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab2:	e164      	b.n	8006d7e <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8006ab4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006ab8:	425b      	negs	r3, r3
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	637a      	str	r2, [r7, #52]	; 0x34
 8006ac2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006ac6:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8006ac8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006acc:	9208      	str	r2, [sp, #32]
 8006ace:	4aae      	ldr	r2, [pc, #696]	; (8006d88 <lfs_dir_compact+0x3c8>)
 8006ad0:	9207      	str	r2, [sp, #28]
 8006ad2:	9306      	str	r3, [sp, #24]
 8006ad4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8006ad8:	9305      	str	r3, [sp, #20]
 8006ada:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006ade:	9304      	str	r3, [sp, #16]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9303      	str	r3, [sp, #12]
 8006ae4:	4ba9      	ldr	r3, [pc, #676]	; (8006d8c <lfs_dir_compact+0x3cc>)
 8006ae6:	9302      	str	r3, [sp, #8]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006af4:	2200      	movs	r2, #0
 8006af6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f7fe fa9f 	bl	800503c <lfs_dir_traverse>
 8006afe:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8006b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d006      	beq.n	8006b14 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8006b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b08:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006b0c:	f000 80dc 	beq.w	8006cc8 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8006b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b12:	e134      	b.n	8006d7e <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	3318      	adds	r3, #24
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fd fbd4 	bl	80042c6 <lfs_pair_isnull>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f083 0301 	eor.w	r3, r3, #1
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d022      	beq.n	8006b70 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	3318      	adds	r3, #24
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fd fc55 	bl	80043de <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	7ddb      	ldrb	r3, [r3, #23]
 8006b38:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006b3c:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8006b3e:	4a94      	ldr	r2, [pc, #592]	; (8006d90 <lfs_dir_compact+0x3d0>)
 8006b40:	431a      	orrs	r2, r3
                        dir->tail);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8006b46:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7ff fbec 	bl	8006328 <lfs_dir_commitattr>
 8006b50:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	3318      	adds	r3, #24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fd fc27 	bl	80043aa <lfs_pair_fromle32>
                if (err) {
 8006b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d006      	beq.n	8006b70 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8006b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b64:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006b68:	f000 80b0 	beq.w	8006ccc <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8006b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b6e:	e106      	b.n	8006d7e <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8006b70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	605a      	str	r2, [r3, #4]
 8006b7a:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8006b7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b80:	f083 0301 	eor.w	r3, r3, #1
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d011      	beq.n	8006bae <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006b90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b94:	4611      	mov	r1, r2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fd fcd7 	bl	800454a <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fd fcce 	bl	800454a <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bb8:	4611      	mov	r1, r2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fd fcc5 	bl	800454a <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8006bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	68b9      	ldr	r1, [r7, #8]
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f7ff f9fb 	bl	8005fd0 <lfs_dir_getgstate>
 8006bda:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8006bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <lfs_dir_compact+0x226>
                return err;
 8006be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006be4:	e0cb      	b.n	8006d7e <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8006be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fd fcd2 	bl	8004594 <lfs_gstate_iszero>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f083 0301 	eor.w	r3, r3, #1
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d016      	beq.n	8006c2a <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8006bfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fd fd6d 	bl	80046e0 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8006c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c0a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006c0e:	4a61      	ldr	r2, [pc, #388]	; (8006d94 <lfs_dir_compact+0x3d4>)
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7ff fb89 	bl	8006328 <lfs_dir_commitattr>
 8006c16:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8006c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8006c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c20:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006c24:	d054      	beq.n	8006cd0 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8006c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c28:	e0a9      	b.n	8006d7e <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8006c2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c2e:	4619      	mov	r1, r3
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff fbf9 	bl	8006428 <lfs_dir_commitcrc>
 8006c36:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8006c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d005      	beq.n	8006c4a <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8006c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c40:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006c44:	d046      	beq.n	8006cd4 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8006c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c48:	e099      	b.n	8006d7e <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8006c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c50:	6992      	ldr	r2, [r2, #24]
 8006c52:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c56:	fb01 f202 	mul.w	r2, r1, r2
 8006c5a:	1a9b      	subs	r3, r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d006      	beq.n	8006c6e <lfs_dir_compact+0x2ae>
 8006c60:	4b4d      	ldr	r3, [pc, #308]	; (8006d98 <lfs_dir_compact+0x3d8>)
 8006c62:	4a4e      	ldr	r2, [pc, #312]	; (8006d9c <lfs_dir_compact+0x3dc>)
 8006c64:	f240 71e2 	movw	r1, #2018	; 0x7e2
 8006c68:	484d      	ldr	r0, [pc, #308]	; (8006da0 <lfs_dir_compact+0x3e0>)
 8006c6a:	f004 f873 	bl	800ad54 <__assert_func>
            lfs_pair_swap(dir->pair);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fd fb13 	bl	800429c <lfs_pair_swap>
            dir->count = end - begin;
 8006c76:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8006c7a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8006c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8006c8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3348      	adds	r3, #72	; 0x48
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	605a      	str	r2, [r3, #4]
 8006c9c:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8006c9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ca2:	f083 0301 	eor.w	r3, r3, #1
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d065      	beq.n	8006d78 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	333c      	adds	r3, #60	; 0x3c
 8006cb2:	3230      	adds	r2, #48	; 0x30
 8006cb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8006cba:	e05d      	b.n	8006d78 <lfs_dir_compact+0x3b8>
        goto relocate;
 8006cbc:	bf00      	nop
 8006cbe:	e00a      	b.n	8006cd6 <lfs_dir_compact+0x316>
                    goto relocate;
 8006cc0:	bf00      	nop
 8006cc2:	e008      	b.n	8006cd6 <lfs_dir_compact+0x316>
                    goto relocate;
 8006cc4:	bf00      	nop
 8006cc6:	e006      	b.n	8006cd6 <lfs_dir_compact+0x316>
                    goto relocate;
 8006cc8:	bf00      	nop
 8006cca:	e004      	b.n	8006cd6 <lfs_dir_compact+0x316>
                        goto relocate;
 8006ccc:	bf00      	nop
 8006cce:	e002      	b.n	8006cd6 <lfs_dir_compact+0x316>
                        goto relocate;
 8006cd0:	bf00      	nop
 8006cd2:	e000      	b.n	8006cd6 <lfs_dir_compact+0x316>
                    goto relocate;
 8006cd4:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3310      	adds	r3, #16
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7fc ff4a 	bl	8003b7c <lfs_cache_drop>
        if (!tired) {
 8006ce8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006cec:	f083 0301 	eor.w	r3, r3, #1
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	4a2a      	ldr	r2, [pc, #168]	; (8006da4 <lfs_dir_compact+0x3e4>)
 8006cfc:	9200      	str	r2, [sp, #0]
 8006cfe:	f240 72f4 	movw	r2, #2036	; 0x7f4
 8006d02:	4927      	ldr	r1, [pc, #156]	; (8006da0 <lfs_dir_compact+0x3e0>)
 8006d04:	4828      	ldr	r0, [pc, #160]	; (8006da8 <lfs_dir_compact+0x3e8>)
 8006d06:	f004 f9ff 	bl	800b108 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	617a      	str	r2, [r7, #20]
 8006d10:	2201      	movs	r2, #1
 8006d12:	61ba      	str	r2, [r7, #24]
 8006d14:	f107 0214 	add.w	r2, r7, #20
 8006d18:	4611      	mov	r1, r2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fd faee 	bl	80042fc <lfs_pair_cmp>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10c      	bne.n	8006d40 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	4a1e      	ldr	r2, [pc, #120]	; (8006da4 <lfs_dir_compact+0x3e4>)
 8006d2c:	9200      	str	r2, [sp, #0]
 8006d2e:	f240 72f9 	movw	r2, #2041	; 0x7f9
 8006d32:	491b      	ldr	r1, [pc, #108]	; (8006da0 <lfs_dir_compact+0x3e0>)
 8006d34:	481d      	ldr	r0, [pc, #116]	; (8006dac <lfs_dir_compact+0x3ec>)
 8006d36:	f004 f9e7 	bl	800b108 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8006d3a:	f06f 031b 	mvn.w	r3, #27
 8006d3e:	e01e      	b.n	8006d7e <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	3304      	adds	r3, #4
 8006d44:	4619      	mov	r1, r3
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f7fd fe8c 	bl	8004a64 <lfs_alloc>
 8006d4c:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8006d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00c      	beq.n	8006d6e <lfs_dir_compact+0x3ae>
 8006d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d56:	f113 0f1c 	cmn.w	r3, #28
 8006d5a:	d106      	bne.n	8006d6a <lfs_dir_compact+0x3aa>
 8006d5c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006d60:	f083 0301 	eor.w	r3, r3, #1
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <lfs_dir_compact+0x3ae>
            return err;
 8006d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d6c:	e007      	b.n	8006d7e <lfs_dir_compact+0x3be>
        }

        tired = false;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 8006d74:	bf00      	nop
    while (true) {
 8006d76:	e64c      	b.n	8006a12 <lfs_dir_compact+0x52>
        break;
 8006d78:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8006d7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3768      	adds	r7, #104	; 0x68
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	08006949 	.word	0x08006949
 8006d8c:	400ffc00 	.word	0x400ffc00
 8006d90:	000ffc08 	.word	0x000ffc08
 8006d94:	7ffffc0c 	.word	0x7ffffc0c
 8006d98:	0800c094 	.word	0x0800c094
 8006d9c:	0800cc10 	.word	0x0800cc10
 8006da0:	0800bf48 	.word	0x0800bf48
 8006da4:	0800c03c 	.word	0x0800c03c
 8006da8:	0800c0bc 	.word	0x0800c0bc
 8006dac:	0800c0e0 	.word	0x0800c0e0

08006db0 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b097      	sub	sp, #92	; 0x5c
 8006db4:	af0a      	add	r7, sp, #40	; 0x28
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8006dbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8006dc4:	e058      	b.n	8006e78 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dd0:	b292      	uxth	r2, r2
 8006dd2:	4252      	negs	r2, r2
 8006dd4:	b292      	uxth	r2, r2
 8006dd6:	b212      	sxth	r2, r2
 8006dd8:	f107 0118 	add.w	r1, r7, #24
 8006ddc:	9108      	str	r1, [sp, #32]
 8006dde:	4979      	ldr	r1, [pc, #484]	; (8006fc4 <lfs_dir_splittingcompact+0x214>)
 8006de0:	9107      	str	r1, [sp, #28]
 8006de2:	9206      	str	r2, [sp, #24]
 8006de4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006de8:	9205      	str	r2, [sp, #20]
 8006dea:	9304      	str	r3, [sp, #16]
 8006dec:	2300      	movs	r3, #0
 8006dee:	9303      	str	r3, [sp, #12]
 8006df0:	4b75      	ldr	r3, [pc, #468]	; (8006fc8 <lfs_dir_splittingcompact+0x218>)
 8006df2:	9302      	str	r3, [sp, #8]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	9301      	str	r3, [sp, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e00:	2200      	movs	r2, #0
 8006e02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7fe f919 	bl	800503c <lfs_dir_traverse>
 8006e0a:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <lfs_dir_splittingcompact+0x66>
                return err;
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	e0d1      	b.n	8006fba <lfs_dir_splittingcompact+0x20a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8006e16:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2bfe      	cmp	r3, #254	; 0xfe
 8006e20:	d822      	bhi.n	8006e68 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e26:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8006e28:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	e003      	b.n	8006e48 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e44:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8006e46:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e4c:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(
 8006e4e:	4611      	mov	r1, r2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fc fe02 	bl	8003a5a <lfs_alignup>
 8006e56:	4603      	mov	r3, r0
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7fc fdd8 	bl	8003a10 <lfs_min>
 8006e60:	4602      	mov	r2, r0
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d20e      	bcs.n	8006e86 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8006e68:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	085b      	lsrs	r3, r3, #1
 8006e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e74:	4413      	add	r3, r2
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8006e78:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d8a0      	bhi.n	8006dc6 <lfs_dir_splittingcompact+0x16>
 8006e84:	e000      	b.n	8006e88 <lfs_dir_splittingcompact+0xd8>
                break;
 8006e86:	bf00      	nop
        }

        if (split == begin) {
 8006e88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d02d      	beq.n	8006eee <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006e9a:	9202      	str	r2, [sp, #8]
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	68b9      	ldr	r1, [r7, #8]
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f7ff fce3 	bl	8006874 <lfs_dir_split>
 8006eae:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <lfs_dir_splittingcompact+0x112>
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	f113 0f1c 	cmn.w	r3, #28
 8006ebc:	d001      	beq.n	8006ec2 <lfs_dir_splittingcompact+0x112>
            return err;
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	e07b      	b.n	8006fba <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00e      	beq.n	8006ee6 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	493e      	ldr	r1, [pc, #248]	; (8006fcc <lfs_dir_splittingcompact+0x21c>)
 8006ed2:	9101      	str	r1, [sp, #4]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	f640 024c 	movw	r2, #2124	; 0x84c
 8006edc:	493c      	ldr	r1, [pc, #240]	; (8006fd0 <lfs_dir_splittingcompact+0x220>)
 8006ede:	483d      	ldr	r0, [pc, #244]	; (8006fd4 <lfs_dir_splittingcompact+0x224>)
 8006ee0:	f004 f912 	bl	800b108 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8006ee4:	e004      	b.n	8006ef0 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8006ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8006eec:	e767      	b.n	8006dbe <lfs_dir_splittingcompact+0xe>
            break;
 8006eee:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff fd3d 	bl	8006972 <lfs_dir_needsrelocation>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d04e      	beq.n	8006f9c <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2200      	movs	r2, #0
 8006f02:	613a      	str	r2, [r7, #16]
 8006f04:	2201      	movs	r2, #1
 8006f06:	617a      	str	r2, [r7, #20]
 8006f08:	f107 0210 	add.w	r2, r7, #16
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fd f9f4 	bl	80042fc <lfs_pair_cmp>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d140      	bne.n	8006f9c <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f003 fbae 	bl	800a67c <lfs_fs_rawsize>
 8006f20:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	da01      	bge.n	8006f2c <lfs_dir_splittingcompact+0x17c>
            return size;
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	e046      	b.n	8006fba <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	085a      	lsrs	r2, r3, #1
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d930      	bls.n	8006f9c <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	4a23      	ldr	r2, [pc, #140]	; (8006fcc <lfs_dir_splittingcompact+0x21c>)
 8006f40:	9200      	str	r2, [sp, #0]
 8006f42:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006f46:	4922      	ldr	r1, [pc, #136]	; (8006fd0 <lfs_dir_splittingcompact+0x220>)
 8006f48:	4823      	ldr	r0, [pc, #140]	; (8006fd8 <lfs_dir_splittingcompact+0x228>)
 8006f4a:	f004 f8dd 	bl	800b108 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8006f4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006f52:	9302      	str	r3, [sp, #8]
 8006f54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f58:	9301      	str	r3, [sp, #4]
 8006f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	68b9      	ldr	r1, [r7, #8]
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff fc85 	bl	8006874 <lfs_dir_split>
 8006f6a:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <lfs_dir_splittingcompact+0x1ce>
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	f113 0f1c 	cmn.w	r3, #28
 8006f78:	d001      	beq.n	8006f7e <lfs_dir_splittingcompact+0x1ce>
                return err;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	e01d      	b.n	8006fba <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d007      	beq.n	8006f94 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8006f84:	4b11      	ldr	r3, [pc, #68]	; (8006fcc <lfs_dir_splittingcompact+0x21c>)
 8006f86:	f640 026a 	movw	r2, #2154	; 0x86a
 8006f8a:	4911      	ldr	r1, [pc, #68]	; (8006fd0 <lfs_dir_splittingcompact+0x220>)
 8006f8c:	4813      	ldr	r0, [pc, #76]	; (8006fdc <lfs_dir_splittingcompact+0x22c>)
 8006f8e:	f004 f8bb 	bl	800b108 <iprintf>
 8006f92:	e003      	b.n	8006f9c <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8006f94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f98:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8006f9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006fa0:	9302      	str	r3, [sp, #8]
 8006fa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff fd04 	bl	80069c0 <lfs_dir_compact>
 8006fb8:	4603      	mov	r3, r0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3734      	adds	r7, #52	; 0x34
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd90      	pop	{r4, r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	0800691d 	.word	0x0800691d
 8006fc8:	400ffc00 	.word	0x400ffc00
 8006fcc:	0800c03c 	.word	0x0800c03c
 8006fd0:	0800bf48 	.word	0x0800bf48
 8006fd4:	0800c118 	.word	0x0800c118
 8006fd8:	0800c148 	.word	0x0800c148
 8006fdc:	0800c178 	.word	0x0800c178

08006fe0 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8006fe0:	b5b0      	push	{r4, r5, r7, lr}
 8006fe2:	b0a6      	sub	sp, #152	; 0x98
 8006fe4:	af0a      	add	r7, sp, #40	; 0x28
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
    int state = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	667b      	str	r3, [r7, #100]	; 0x64
 8006ffc:	e06d      	b.n	80070da <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8006ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	4413      	add	r3, r2
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f7fd fa43 	bl	8004494 <lfs_tag_type3>
 800700e:	4603      	mov	r3, r0
 8007010:	461a      	mov	r2, r3
 8007012:	f240 4301 	movw	r3, #1025	; 0x401
 8007016:	429a      	cmp	r2, r3
 8007018:	d106      	bne.n	8007028 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	8a9b      	ldrh	r3, [r3, #20]
 800701e:	3301      	adds	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	829a      	strh	r2, [r3, #20]
 8007026:	e055      	b.n	80070d4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8007028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	4413      	add	r3, r2
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f7fd fa2e 	bl	8004494 <lfs_tag_type3>
 8007038:	4603      	mov	r3, r0
 800703a:	461a      	mov	r2, r3
 800703c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8007040:	429a      	cmp	r2, r3
 8007042:	d114      	bne.n	800706e <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	8a9b      	ldrh	r3, [r3, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <lfs_dir_relocatingcommit+0x7a>
 800704c:	4ba4      	ldr	r3, [pc, #656]	; (80072e0 <lfs_dir_relocatingcommit+0x300>)
 800704e:	4aa5      	ldr	r2, [pc, #660]	; (80072e4 <lfs_dir_relocatingcommit+0x304>)
 8007050:	f640 0182 	movw	r1, #2178	; 0x882
 8007054:	48a4      	ldr	r0, [pc, #656]	; (80072e8 <lfs_dir_relocatingcommit+0x308>)
 8007056:	f003 fe7d 	bl	800ad54 <__assert_func>
            dir->count -= 1;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	8a9b      	ldrh	r3, [r3, #20]
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8007066:	2301      	movs	r3, #1
 8007068:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800706c:	e032      	b.n	80070d4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800706e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	4413      	add	r3, r2
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4618      	mov	r0, r3
 800707a:	f7fd f9eb 	bl	8004454 <lfs_tag_type1>
 800707e:	4603      	mov	r3, r0
 8007080:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007084:	d126      	bne.n	80070d4 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8007086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	4413      	add	r3, r2
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8007096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	4413      	add	r3, r2
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80070a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	4413      	add	r3, r2
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fd f9ff 	bl	80044b4 <lfs_tag_chunk>
 80070b6:	4603      	mov	r3, r0
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf14      	ite	ne
 80070c0:	2301      	movne	r3, #1
 80070c2:	2300      	moveq	r3, #0
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	3318      	adds	r3, #24
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fd f96b 	bl	80043aa <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 80070d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070d6:	3301      	adds	r3, #1
 80070d8:	667b      	str	r3, [r7, #100]	; 0x64
 80070da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070e0:	429a      	cmp	r2, r3
 80070e2:	db8c      	blt.n	8006ffe <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 80070e4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d02b      	beq.n	8007144 <lfs_dir_relocatingcommit+0x164>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	8a9b      	ldrh	r3, [r3, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d127      	bne.n	8007144 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80070f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d106      	bne.n	800710a <lfs_dir_relocatingcommit+0x12a>
 80070fc:	4b7b      	ldr	r3, [pc, #492]	; (80072ec <lfs_dir_relocatingcommit+0x30c>)
 80070fe:	4a79      	ldr	r2, [pc, #484]	; (80072e4 <lfs_dir_relocatingcommit+0x304>)
 8007100:	f640 018f 	movw	r1, #2191	; 0x88f
 8007104:	4878      	ldr	r0, [pc, #480]	; (80072e8 <lfs_dir_relocatingcommit+0x308>)
 8007106:	f003 fe25 	bl	800ad54 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007110:	4619      	mov	r1, r3
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f002 fe0c 	bl	8009d30 <lfs_fs_pred>
 8007118:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 800711a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <lfs_dir_relocatingcommit+0x14c>
 8007120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007122:	f113 0f02 	cmn.w	r3, #2
 8007126:	d001      	beq.n	800712c <lfs_dir_relocatingcommit+0x14c>
            return err;
 8007128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800712a:	e204      	b.n	8007536 <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800712c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800712e:	f113 0f02 	cmn.w	r3, #2
 8007132:	d007      	beq.n	8007144 <lfs_dir_relocatingcommit+0x164>
 8007134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007138:	7ddb      	ldrb	r3, [r3, #23]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800713e:	2302      	movs	r3, #2
 8007140:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8007142:	e121      	b.n	8007388 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	7d9b      	ldrb	r3, [r3, #22]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80fb 	beq.w	8007344 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8007152:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8007158:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800715e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007164:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800716a:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8007172:	2b00      	cmp	r3, #0
 8007174:	d004      	beq.n	8007180 <lfs_dir_relocatingcommit+0x1a0>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800717a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717c:	3b08      	subs	r3, #8
 800717e:	e003      	b.n	8007188 <lfs_dir_relocatingcommit+0x1a8>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8007188:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	3318      	adds	r3, #24
 800718e:	4618      	mov	r0, r3
 8007190:	f7fd f925 	bl	80043de <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
 80071a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 80071a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071aa:	9308      	str	r3, [sp, #32]
 80071ac:	4b50      	ldr	r3, [pc, #320]	; (80072f0 <lfs_dir_relocatingcommit+0x310>)
 80071ae:	9307      	str	r3, [sp, #28]
 80071b0:	2300      	movs	r3, #0
 80071b2:	9306      	str	r3, [sp, #24]
 80071b4:	2300      	movs	r3, #0
 80071b6:	9305      	str	r3, [sp, #20]
 80071b8:	2300      	movs	r3, #0
 80071ba:	9304      	str	r3, [sp, #16]
 80071bc:	2300      	movs	r3, #0
 80071be:	9303      	str	r3, [sp, #12]
 80071c0:	2300      	movs	r3, #0
 80071c2:	9302      	str	r3, [sp, #8]
 80071c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	460b      	mov	r3, r1
 80071d0:	68b9      	ldr	r1, [r7, #8]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7fd ff32 	bl	800503c <lfs_dir_traverse>
 80071d8:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	3318      	adds	r3, #24
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fd f8e3 	bl	80043aa <lfs_pair_fromle32>
        if (err) {
 80071e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00b      	beq.n	8007202 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80071ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ec:	f113 0f1c 	cmn.w	r3, #28
 80071f0:	f000 80aa 	beq.w	8007348 <lfs_dir_relocatingcommit+0x368>
 80071f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071f6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80071fa:	f000 80a5 	beq.w	8007348 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 80071fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007200:	e199      	b.n	8007536 <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8007202:	f107 031c 	add.w	r3, r7, #28
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	605a      	str	r2, [r3, #4]
 800720c:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007214:	f107 031c 	add.w	r3, r7, #28
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f7fd f995 	bl	800454a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007226:	f107 031c 	add.w	r3, r7, #28
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7fd f98c 	bl	800454a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007238:	f107 031c 	add.w	r3, r7, #28
 800723c:	4611      	mov	r1, r2
 800723e:	4618      	mov	r0, r3
 8007240:	f7fd f983 	bl	800454a <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800724a:	f023 0303 	bic.w	r3, r3, #3
 800724e:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8007250:	f107 031c 	add.w	r3, r7, #28
 8007254:	4618      	mov	r0, r3
 8007256:	f7fd f99d 	bl	8004594 <lfs_gstate_iszero>
 800725a:	4603      	mov	r3, r0
 800725c:	f083 0301 	eor.w	r3, r3, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d027      	beq.n	80072b6 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8007266:	f107 031c 	add.w	r3, r7, #28
 800726a:	461a      	mov	r2, r3
 800726c:	68b9      	ldr	r1, [r7, #8]
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7fe feae 	bl	8005fd0 <lfs_dir_getgstate>
 8007274:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8007276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 800727c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800727e:	e15a      	b.n	8007536 <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8007280:	f107 031c 	add.w	r3, r7, #28
 8007284:	4618      	mov	r0, r3
 8007286:	f7fd fa2b 	bl	80046e0 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800728a:	f107 031c 	add.w	r3, r7, #28
 800728e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007292:	4a18      	ldr	r2, [pc, #96]	; (80072f4 <lfs_dir_relocatingcommit+0x314>)
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff f847 	bl	8006328 <lfs_dir_commitattr>
 800729a:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800729c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80072a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072a4:	f113 0f1c 	cmn.w	r3, #28
 80072a8:	d050      	beq.n	800734c <lfs_dir_relocatingcommit+0x36c>
 80072aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80072b0:	d04c      	beq.n	800734c <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80072b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b4:	e13f      	b.n	8007536 <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80072b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072ba:	4619      	mov	r1, r3
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f7ff f8b3 	bl	8006428 <lfs_dir_commitcrc>
 80072c2:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 80072c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d016      	beq.n	80072f8 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80072ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072cc:	f113 0f1c 	cmn.w	r3, #28
 80072d0:	d03e      	beq.n	8007350 <lfs_dir_relocatingcommit+0x370>
 80072d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80072d8:	d03a      	beq.n	8007350 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80072da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072dc:	e12b      	b.n	8007536 <lfs_dir_relocatingcommit+0x556>
 80072de:	bf00      	nop
 80072e0:	0800c1a4 	.word	0x0800c1a4
 80072e4:	0800cc20 	.word	0x0800cc20
 80072e8:	0800bf48 	.word	0x0800bf48
 80072ec:	0800c1b4 	.word	0x0800c1b4
 80072f0:	08006949 	.word	0x08006949
 80072f4:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80072f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072fe:	6992      	ldr	r2, [r2, #24]
 8007300:	fbb3 f1f2 	udiv	r1, r3, r2
 8007304:	fb01 f202 	mul.w	r2, r1, r2
 8007308:	1a9b      	subs	r3, r3, r2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d006      	beq.n	800731c <lfs_dir_relocatingcommit+0x33c>
 800730e:	4b8c      	ldr	r3, [pc, #560]	; (8007540 <lfs_dir_relocatingcommit+0x560>)
 8007310:	4a8c      	ldr	r2, [pc, #560]	; (8007544 <lfs_dir_relocatingcommit+0x564>)
 8007312:	f640 01d9 	movw	r1, #2265	; 0x8d9
 8007316:	488c      	ldr	r0, [pc, #560]	; (8007548 <lfs_dir_relocatingcommit+0x568>)
 8007318:	f003 fd1c 	bl	800ad54 <__assert_func>
        dir->off = commit.off;
 800731c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8007322:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	333c      	adds	r3, #60	; 0x3c
 800732e:	3230      	adds	r2, #48	; 0x30
 8007330:	ca07      	ldmia	r2, {r0, r1, r2}
 8007332:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3348      	adds	r3, #72	; 0x48
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	605a      	str	r2, [r3, #4]
 8007340:	609a      	str	r2, [r3, #8]
 8007342:	e021      	b.n	8007388 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8007344:	bf00      	nop
 8007346:	e004      	b.n	8007352 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8007348:	bf00      	nop
 800734a:	e002      	b.n	8007352 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 800734c:	bf00      	nop
 800734e:	e000      	b.n	8007352 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8007350:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3310      	adds	r3, #16
 8007356:	4619      	mov	r1, r3
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7fc fc0f 	bl	8003b7c <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	8a9b      	ldrh	r3, [r3, #20]
 8007362:	9302      	str	r3, [sp, #8]
 8007364:	2300      	movs	r3, #0
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	68b9      	ldr	r1, [r7, #8]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff fd1b 	bl	8006db0 <lfs_dir_splittingcompact>
 800737a:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 800737c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737e:	2b00      	cmp	r3, #0
 8007380:	da01      	bge.n	8007386 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8007382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007384:	e0d7      	b.n	8007536 <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 8007386:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	64bb      	str	r3, [r7, #72]	; 0x48
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3304      	adds	r3, #4
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	663b      	str	r3, [r7, #96]	; 0x60
 800739c:	e0c6      	b.n	800752c <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 800739e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073a0:	3308      	adds	r3, #8
 80073a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80073a6:	4611      	mov	r1, r2
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fc ffa7 	bl	80042fc <lfs_pair_cmp>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f040 80b8 	bne.w	8007526 <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 80073b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	f103 0408 	add.w	r4, r3, #8
 80073be:	4615      	mov	r5, r2
 80073c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80073c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80073cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ce:	3308      	adds	r3, #8
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	f000 809d 	beq.w	8007512 <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 80073d8:	2300      	movs	r3, #0
 80073da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073dc:	e07b      	b.n	80074d6 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80073de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	4413      	add	r3, r2
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fd f853 	bl	8004494 <lfs_tag_type3>
 80073ee:	4603      	mov	r3, r0
 80073f0:	461a      	mov	r2, r3
 80073f2:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d115      	bne.n	8007426 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80073fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073fc:	889c      	ldrh	r4, [r3, #4]
 80073fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	4413      	add	r3, r2
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f7fd f86d 	bl	80044e8 <lfs_tag_id>
 800740e:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8007410:	429c      	cmp	r4, r3
 8007412:	d108      	bne.n	8007426 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8007414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800741a:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 800741c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800741e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007422:	60da      	str	r2, [r3, #12]
 8007424:	e054      	b.n	80074d0 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8007426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007428:	00db      	lsls	r3, r3, #3
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	4413      	add	r3, r2
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f7fd f82f 	bl	8004494 <lfs_tag_type3>
 8007436:	4603      	mov	r3, r0
 8007438:	461a      	mov	r2, r3
 800743a:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800743e:	429a      	cmp	r2, r3
 8007440:	d11c      	bne.n	800747c <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8007442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007444:	889c      	ldrh	r4, [r3, #4]
 8007446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	4413      	add	r3, r2
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4618      	mov	r0, r3
 8007452:	f7fd f849 	bl	80044e8 <lfs_tag_id>
 8007456:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8007458:	429c      	cmp	r4, r3
 800745a:	d90f      	bls.n	800747c <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 800745c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800745e:	889b      	ldrh	r3, [r3, #4]
 8007460:	3b01      	subs	r3, #1
 8007462:	b29a      	uxth	r2, r3
 8007464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007466:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8007468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800746a:	799b      	ldrb	r3, [r3, #6]
 800746c:	2b02      	cmp	r3, #2
 800746e:	d12f      	bne.n	80074d0 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8007470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007474:	1e5a      	subs	r2, r3, #1
 8007476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007478:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800747a:	e029      	b.n	80074d0 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800747c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	4413      	add	r3, r2
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f7fd f804 	bl	8004494 <lfs_tag_type3>
 800748c:	4603      	mov	r3, r0
 800748e:	461a      	mov	r2, r3
 8007490:	f240 4301 	movw	r3, #1025	; 0x401
 8007494:	429a      	cmp	r2, r3
 8007496:	d11b      	bne.n	80074d0 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8007498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800749a:	889c      	ldrh	r4, [r3, #4]
 800749c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	4413      	add	r3, r2
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fd f81e 	bl	80044e8 <lfs_tag_id>
 80074ac:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80074ae:	429c      	cmp	r4, r3
 80074b0:	d30e      	bcc.n	80074d0 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 80074b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074b4:	889b      	ldrh	r3, [r3, #4]
 80074b6:	3301      	adds	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074bc:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80074be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074c0:	799b      	ldrb	r3, [r3, #6]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d104      	bne.n	80074d0 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 80074c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074ce:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 80074d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074d2:	3301      	adds	r3, #1
 80074d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074dc:	429a      	cmp	r2, r3
 80074de:	f6ff af7e 	blt.w	80073de <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80074e2:	e016      	b.n	8007512 <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 80074e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074e6:	889a      	ldrh	r2, [r3, #4]
 80074e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074ea:	8b9b      	ldrh	r3, [r3, #28]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074f2:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80074f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074f6:	f103 0108 	add.w	r1, r3, #8
 80074fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074fc:	3320      	adds	r3, #32
 80074fe:	461a      	mov	r2, r3
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7fe fd49 	bl	8005f98 <lfs_dir_fetch>
 8007506:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8007508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <lfs_dir_relocatingcommit+0x532>
                    return err;
 800750e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007510:	e011      	b.n	8007536 <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 8007512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007514:	889a      	ldrh	r2, [r3, #4]
 8007516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007518:	8b9b      	ldrh	r3, [r3, #28]
 800751a:	429a      	cmp	r2, r3
 800751c:	d303      	bcc.n	8007526 <lfs_dir_relocatingcommit+0x546>
 800751e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007520:	7fdb      	ldrb	r3, [r3, #31]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1de      	bne.n	80074e4 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	663b      	str	r3, [r7, #96]	; 0x60
 800752c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800752e:	2b00      	cmp	r3, #0
 8007530:	f47f af35 	bne.w	800739e <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8007534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8007536:	4618      	mov	r0, r3
 8007538:	3770      	adds	r7, #112	; 0x70
 800753a:	46bd      	mov	sp, r7
 800753c:	bdb0      	pop	{r4, r5, r7, pc}
 800753e:	bf00      	nop
 8007540:	0800c094 	.word	0x0800c094
 8007544:	0800cc20 	.word	0x0800cc20
 8007548:	0800bf48 	.word	0x0800bf48

0800754c <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800754c:	b5b0      	push	{r4, r5, r7, lr}
 800754e:	b0bc      	sub	sp, #240	; 0xf0
 8007550:	af04      	add	r7, sp, #16
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007562:	e045      	b.n	80075f0 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8007564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007568:	3308      	adds	r3, #8
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	429a      	cmp	r2, r3
 800756e:	d03a      	beq.n	80075e6 <lfs_dir_orphaningcommit+0x9a>
 8007570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007574:	3308      	adds	r3, #8
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	4611      	mov	r1, r2
 800757a:	4618      	mov	r0, r3
 800757c:	f7fc febe 	bl	80042fc <lfs_pair_cmp>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d12f      	bne.n	80075e6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800758a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800758c:	2b01      	cmp	r3, #1
 800758e:	d12a      	bne.n	80075e6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d023      	beq.n	80075e6 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800759e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d91b      	bls.n	80075e6 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80075ae:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 fff0 	bl	8008598 <lfs_file_outline>
 80075b8:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80075bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <lfs_dir_orphaningcommit+0x7e>
                return err;
 80075c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075c8:	e2ad      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80075ca:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f001 f804 	bl	80085dc <lfs_file_flush>
 80075d4:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80075d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <lfs_dir_orphaningcommit+0x9a>
                return err;
 80075e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075e4:	e29f      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80075e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1b5      	bne.n	8007564 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800760e:	461d      	mov	r5, r3
 8007610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007614:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007618:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8007622:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7ff fcd6 	bl	8006fe0 <lfs_dir_relocatingcommit>
 8007634:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8007638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800763c:	2b00      	cmp	r3, #0
 800763e:	da02      	bge.n	8007646 <lfs_dir_orphaningcommit+0xfa>
        return state;
 8007640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007644:	e26f      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800764c:	4611      	mov	r1, r2
 800764e:	4618      	mov	r0, r3
 8007650:	f7fc fe54 	bl	80042fc <lfs_pair_cmp>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d109      	bne.n	800766e <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	461d      	mov	r5, r3
 800765e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8007662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007666:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800766a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800766e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007672:	2b02      	cmp	r3, #2
 8007674:	d14a      	bne.n	800770c <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3348      	adds	r3, #72	; 0x48
 800767a:	461a      	mov	r2, r3
 800767c:	68b9      	ldr	r1, [r7, #8]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7fe fca6 	bl	8005fd0 <lfs_dir_getgstate>
 8007684:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8007688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <lfs_dir_orphaningcommit+0x14a>
            return err;
 8007690:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007694:	e247      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8007696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 800769c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800769e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	3318      	adds	r3, #24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fc fe99 	bl	80043de <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	7ddb      	ldrb	r3, [r3, #23]
 80076b0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80076b4:	051a      	lsls	r2, r3, #20
 80076b6:	4bc2      	ldr	r3, [pc, #776]	; (80079c0 <lfs_dir_orphaningcommit+0x474>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	667b      	str	r3, [r7, #100]	; 0x64
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	3318      	adds	r3, #24
 80076c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80076c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80076c6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80076ca:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80076ce:	2000      	movs	r0, #0
 80076d0:	9001      	str	r0, [sp, #4]
 80076d2:	2001      	movs	r0, #1
 80076d4:	9000      	str	r0, [sp, #0]
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff fc82 	bl	8006fe0 <lfs_dir_relocatingcommit>
 80076dc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	3318      	adds	r3, #24
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fc fe60 	bl	80043aa <lfs_pair_fromle32>
        if (state < 0) {
 80076ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	da02      	bge.n	80076f8 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80076f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076f6:	e216      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80076f8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80076fc:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8007700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007704:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 800770c:	2300      	movs	r3, #0
 800770e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8007712:	e1fc      	b.n	8007b0e <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8007714:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800771c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007720:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007724:	4ca7      	ldr	r4, [pc, #668]	; (80079c4 <lfs_dir_orphaningcommit+0x478>)
 8007726:	9403      	str	r4, [sp, #12]
 8007728:	9102      	str	r1, [sp, #8]
 800772a:	9201      	str	r2, [sp, #4]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	4603      	mov	r3, r0
 8007730:	f640 1263 	movw	r2, #2403	; 0x963
 8007734:	49a4      	ldr	r1, [pc, #656]	; (80079c8 <lfs_dir_orphaningcommit+0x47c>)
 8007736:	48a5      	ldr	r0, [pc, #660]	; (80079cc <lfs_dir_orphaningcommit+0x480>)
 8007738:	f003 fce6 	bl	800b108 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f103 0220 	add.w	r2, r3, #32
 8007748:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800774c:	4611      	mov	r1, r2
 800774e:	4618      	mov	r0, r3
 8007750:	f7fc fdd4 	bl	80042fc <lfs_pair_cmp>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d107      	bne.n	800776a <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800775a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8007762:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007772:	e037      	b.n	80077e4 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8007774:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007778:	f103 0208 	add.w	r2, r3, #8
 800777c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f7fc fdba 	bl	80042fc <lfs_pair_cmp>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 800778e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007792:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007796:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8007798:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800779c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077a0:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80077a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077a6:	799b      	ldrb	r3, [r3, #6]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d116      	bne.n	80077da <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80077ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077b0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80077b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fc fd9e 	bl	80042fc <lfs_pair_cmp>
 80077c0:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d109      	bne.n	80077da <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80077c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80077ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077ce:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80077d0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80077d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80077da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1c3      	bne.n	8007774 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80077ec:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80077f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80077f4:	4619      	mov	r1, r3
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f002 fb4c 	bl	8009e94 <lfs_fs_parent>
 80077fc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8007800:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007804:	2b00      	cmp	r3, #0
 8007806:	da07      	bge.n	8007818 <lfs_dir_orphaningcommit+0x2cc>
 8007808:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800780c:	f113 0f02 	cmn.w	r3, #2
 8007810:	d002      	beq.n	8007818 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8007812:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007816:	e186      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8007818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800781c:	f113 0f02 	cmn.w	r3, #2
 8007820:	bf14      	ite	ne
 8007822:	2301      	movne	r3, #1
 8007824:	2300      	moveq	r3, #0
 8007826:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 800782a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800782e:	f113 0f02 	cmn.w	r3, #2
 8007832:	f000 809e 	beq.w	8007972 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8007836:	2101      	movs	r1, #1
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f002 fbc3 	bl	8009fc4 <lfs_fs_preporphans>
 800783e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8007842:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <lfs_dir_orphaningcommit+0x304>
                return err;
 800784a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800784e:	e16a      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8007850:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007854:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3330      	adds	r3, #48	; 0x30
 800785c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7fc fefc 	bl	8004660 <lfs_gstate_hasmovehere>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d02d      	beq.n	80078ca <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	4618      	mov	r0, r3
 8007874:	f7fc fe38 	bl	80044e8 <lfs_tag_id>
 8007878:	4603      	mov	r3, r0
 800787a:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 800787e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007882:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8007886:	484f      	ldr	r0, [pc, #316]	; (80079c4 <lfs_dir_orphaningcommit+0x478>)
 8007888:	9002      	str	r0, [sp, #8]
 800788a:	9201      	str	r2, [sp, #4]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	460b      	mov	r3, r1
 8007890:	f44f 6219 	mov.w	r2, #2448	; 0x990
 8007894:	494c      	ldr	r1, [pc, #304]	; (80079c8 <lfs_dir_orphaningcommit+0x47c>)
 8007896:	484e      	ldr	r0, [pc, #312]	; (80079d0 <lfs_dir_orphaningcommit+0x484>)
 8007898:	f003 fc36 	bl	800b108 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800789c:	2200      	movs	r2, #0
 800789e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f002 fbde 	bl	800a064 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80078a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fc fe1b 	bl	80044e8 <lfs_tag_id>
 80078b2:	4603      	mov	r3, r0
 80078b4:	461a      	mov	r2, r3
 80078b6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d205      	bcs.n	80078ca <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80078be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078c2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80078c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80078ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078cc:	657b      	str	r3, [r7, #84]	; 0x54
 80078ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078d0:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80078d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fc fd81 	bl	80043de <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80078dc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80078e0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d007      	beq.n	80078f8 <lfs_dir_orphaningcommit+0x3ac>
 80078e8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80078ec:	029b      	lsls	r3, r3, #10
 80078ee:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80078f2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80078f6:	e000      	b.n	80078fa <lfs_dir_orphaningcommit+0x3ae>
 80078f8:	2300      	movs	r3, #0
 80078fa:	647b      	str	r3, [r7, #68]	; 0x44
 80078fc:	2300      	movs	r3, #0
 80078fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007900:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007904:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007906:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800790a:	653b      	str	r3, [r7, #80]	; 0x50
 800790c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007910:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8007914:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007918:	2000      	movs	r0, #0
 800791a:	9001      	str	r0, [sp, #4]
 800791c:	2002      	movs	r0, #2
 800791e:	9000      	str	r0, [sp, #0]
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7ff fb5d 	bl	8006fe0 <lfs_dir_relocatingcommit>
 8007926:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800792a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800792e:	4618      	mov	r0, r3
 8007930:	f7fc fd3b 	bl	80043aa <lfs_pair_fromle32>
            if (state < 0) {
 8007934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007938:	2b00      	cmp	r3, #0
 800793a:	da02      	bge.n	8007942 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 800793c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007940:	e0f1      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8007942:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007946:	2b01      	cmp	r3, #1
 8007948:	d113      	bne.n	8007972 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800794a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800794c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8007950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8007956:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800795a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800795e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007962:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007966:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800796a:	2301      	movs	r3, #1
 800796c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007970:	e0cd      	b.n	8007b0e <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8007972:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007976:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800797a:	4619      	mov	r1, r3
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f002 f9d7 	bl	8009d30 <lfs_fs_pred>
 8007982:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8007986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d007      	beq.n	800799e <lfs_dir_orphaningcommit+0x452>
 800798e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007992:	f113 0f02 	cmn.w	r3, #2
 8007996:	d002      	beq.n	800799e <lfs_dir_orphaningcommit+0x452>
            return err;
 8007998:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800799c:	e0c3      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800799e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d01a      	beq.n	80079dc <lfs_dir_orphaningcommit+0x490>
 80079a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079aa:	f113 0f02 	cmn.w	r3, #2
 80079ae:	d115      	bne.n	80079dc <lfs_dir_orphaningcommit+0x490>
 80079b0:	4b08      	ldr	r3, [pc, #32]	; (80079d4 <lfs_dir_orphaningcommit+0x488>)
 80079b2:	4a09      	ldr	r2, [pc, #36]	; (80079d8 <lfs_dir_orphaningcommit+0x48c>)
 80079b4:	f640 11b3 	movw	r1, #2483	; 0x9b3
 80079b8:	4803      	ldr	r0, [pc, #12]	; (80079c8 <lfs_dir_orphaningcommit+0x47c>)
 80079ba:	f003 f9cb 	bl	800ad54 <__assert_func>
 80079be:	bf00      	nop
 80079c0:	000ffc08 	.word	0x000ffc08
 80079c4:	0800c03c 	.word	0x0800c03c
 80079c8:	0800bf48 	.word	0x0800bf48
 80079cc:	0800c1bc 	.word	0x0800c1bc
 80079d0:	0800c1f8 	.word	0x0800c1f8
 80079d4:	0800c23c 	.word	0x0800c23c
 80079d8:	0800cc3c 	.word	0x0800cc3c

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80079dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079e0:	f113 0f02 	cmn.w	r3, #2
 80079e4:	f000 8093 	beq.w	8007b0e <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3330      	adds	r3, #48	; 0x30
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fc fdee 	bl	80045ce <lfs_gstate_hasorphans>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d011      	beq.n	8007a1c <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80079f8:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80079fc:	425b      	negs	r3, r3
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	b25b      	sxtb	r3, r3
 8007a02:	4619      	mov	r1, r3
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f002 fadd 	bl	8009fc4 <lfs_fs_preporphans>
 8007a0a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8007a0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8007a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a1a:	e084      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8007a1c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007a20:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3330      	adds	r3, #48	; 0x30
 8007a28:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fc fe16 	bl	8004660 <lfs_gstate_hasmovehere>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01c      	beq.n	8007a74 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fc fd52 	bl	80044e8 <lfs_tag_id>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8007a4a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a4e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8007a52:	4837      	ldr	r0, [pc, #220]	; (8007b30 <lfs_dir_orphaningcommit+0x5e4>)
 8007a54:	9002      	str	r0, [sp, #8]
 8007a56:	9201      	str	r2, [sp, #4]
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007a60:	4934      	ldr	r1, [pc, #208]	; (8007b34 <lfs_dir_orphaningcommit+0x5e8>)
 8007a62:	4835      	ldr	r0, [pc, #212]	; (8007b38 <lfs_dir_orphaningcommit+0x5ec>)
 8007a64:	f003 fb50 	bl	800b108 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f002 faf8 	bl	800a064 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8007a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8007a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8007a80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fc fcaa 	bl	80043de <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8007a8a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8007a8e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d007      	beq.n	8007aa6 <lfs_dir_orphaningcommit+0x55a>
 8007a96:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8007a9a:	029b      	lsls	r3, r3, #10
 8007a9c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8007aa0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007aa4:	e000      	b.n	8007aa8 <lfs_dir_orphaningcommit+0x55c>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8007aaa:	2300      	movs	r3, #0
 8007aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007ab2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007ab6:	051a      	lsls	r2, r3, #20
 8007ab8:	4b20      	ldr	r3, [pc, #128]	; (8007b3c <lfs_dir_orphaningcommit+0x5f0>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007abe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8007ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ac8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8007acc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	9001      	str	r0, [sp, #4]
 8007ad4:	2002      	movs	r0, #2
 8007ad6:	9000      	str	r0, [sp, #0]
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f7ff fa81 	bl	8006fe0 <lfs_dir_relocatingcommit>
 8007ade:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8007ae2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fc fc5f 	bl	80043aa <lfs_pair_fromle32>
            if (state < 0) {
 8007aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da02      	bge.n	8007afa <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8007af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007af8:	e015      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8007afa:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8007afe:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8007b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8007b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	f43f adfe 	beq.w	8007714 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8007b18:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <lfs_dir_orphaningcommit+0x5d8>
 8007b20:	2303      	movs	r3, #3
 8007b22:	e000      	b.n	8007b26 <lfs_dir_orphaningcommit+0x5da>
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	37e0      	adds	r7, #224	; 0xe0
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	0800c03c 	.word	0x0800c03c
 8007b34:	0800bf48 	.word	0x0800bf48
 8007b38:	0800c1f8 	.word	0x0800c1f8
 8007b3c:	000ffc08 	.word	0x000ffc08

08007b40 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f7ff fcf9 	bl	800754c <lfs_dir_orphaningcommit>
 8007b5a:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	da01      	bge.n	8007b66 <lfs_dir_commit+0x26>
        return orphans;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	e00d      	b.n	8007b82 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d009      	beq.n	8007b80 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f002 fb9c 	bl	800a2ac <lfs_fs_deorphan>
 8007b74:	6138      	str	r0, [r7, #16]
        if (err) {
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <lfs_dir_commit+0x40>
            return err;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	e000      	b.n	8007b82 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8007b8a:	b590      	push	{r4, r7, lr}
 8007b8c:	b087      	sub	sp, #28
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	3b08      	subs	r3, #8
 8007ba2:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bac:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <lfs_ctz_index+0x2e>
        return 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e01c      	b.n	8007bf2 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fb ff7d 	bl	8003abc <lfs_popc>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	1ad2      	subs	r2, r2, r3
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd2:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	fb02 f303 	mul.w	r3, r2, r3
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	1ad4      	subs	r4, r2, r3
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7fb ff6b 	bl	8003abc <lfs_popc>
 8007be6:	4603      	mov	r3, r0
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	1ae2      	subs	r2, r4, r3
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	601a      	str	r2, [r3, #0]
    return i;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd90      	pop	{r4, r7, pc}

08007bfa <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8007bfa:	b590      	push	{r4, r7, lr}
 8007bfc:	b08f      	sub	sp, #60	; 0x3c
 8007bfe:	af04      	add	r7, sp, #16
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	607a      	str	r2, [r7, #4]
 8007c06:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d108      	bne.n	8007c20 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8007c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c14:	601a      	str	r2, [r3, #0]
        *off = 0;
 8007c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]
        return 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e053      	b.n	8007cc8 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	3b01      	subs	r3, #1
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	f107 0314 	add.w	r3, r7, #20
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff ffac 	bl	8007b8a <lfs_ctz_index>
 8007c32:	4603      	mov	r3, r0
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8007c36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff ffa4 	bl	8007b8a <lfs_ctz_index>
 8007c42:	4603      	mov	r3, r0
 8007c44:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8007c46:	e034      	b.n	8007cb2 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8007c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	3301      	adds	r3, #1
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fb ff14 	bl	8003a7e <lfs_npw2>
 8007c56:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8007c58:	1e5c      	subs	r4, r3, #1
 8007c5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c5c:	f7fb ff1f 	bl	8003a9e <lfs_ctz>
 8007c60:	4603      	mov	r3, r0
 8007c62:	4619      	mov	r1, r3
 8007c64:	4620      	mov	r0, r4
 8007c66:	f7fb fed3 	bl	8003a10 <lfs_min>
 8007c6a:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	0092      	lsls	r2, r2, #2
 8007c72:	2104      	movs	r1, #4
 8007c74:	9103      	str	r1, [sp, #12]
 8007c76:	4639      	mov	r1, r7
 8007c78:	9102      	str	r1, [sp, #8]
 8007c7a:	9201      	str	r2, [sp, #4]
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	2304      	movs	r3, #4
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f7fb ff9f 	bl	8003bc8 <lfs_bd_read>
 8007c8a:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fb ff2e 	bl	8003af0 <lfs_fromle32>
 8007c94:	4603      	mov	r3, r0
 8007c96:	603b      	str	r3, [r7, #0]
        if (err) {
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <lfs_ctz_find+0xa8>
            return err;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	e012      	b.n	8007cc8 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	461a      	mov	r2, r3
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	1a9b      	subs	r3, r3, r2
 8007cb0:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8007cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d8c6      	bhi.n	8007c48 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cbe:	601a      	str	r2, [r3, #0]
    *off = pos;
 8007cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc4:	601a      	str	r2, [r3, #0]
    return 0;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	372c      	adds	r7, #44	; 0x2c
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd90      	pop	{r4, r7, pc}

08007cd0 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b092      	sub	sp, #72	; 0x48
 8007cd4:	af04      	add	r7, sp, #16
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8007cde:	f107 0320 	add.w	r3, r7, #32
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7fc febd 	bl	8004a64 <lfs_alloc>
 8007cea:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <lfs_ctz_extend+0x26>
            return err;
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	e0e9      	b.n	8007eca <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f7fc fa9c 	bl	8004238 <lfs_bd_erase>
 8007d00:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d006      	beq.n	8007d16 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007d0e:	f000 80cb 	beq.w	8007ea8 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	e0d9      	b.n	8007eca <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8007d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d107      	bne.n	8007d2c <lfs_ctz_extend+0x5c>
                *block = nblock;
 8007d1c:	6a3a      	ldr	r2, [r7, #32]
 8007d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d20:	601a      	str	r2, [r3, #0]
                *off = 0;
 8007d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d24:	2200      	movs	r2, #0
 8007d26:	601a      	str	r2, [r3, #0]
                return 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e0ce      	b.n	8007eca <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8007d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8007d32:	f107 031c 	add.w	r3, r7, #28
 8007d36:	4619      	mov	r1, r3
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7ff ff26 	bl	8007b8a <lfs_ctz_index>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	3301      	adds	r3, #1
 8007d46:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d4c:	69da      	ldr	r2, [r3, #28]
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d044      	beq.n	8007dde <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8007d54:	2300      	movs	r3, #0
 8007d56:	637b      	str	r3, [r7, #52]	; 0x34
 8007d58:	e035      	b.n	8007dc6 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	2301      	movs	r3, #1
 8007d62:	9303      	str	r3, [sp, #12]
 8007d64:	f107 0317 	add.w	r3, r7, #23
 8007d68:	9302      	str	r3, [sp, #8]
 8007d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	4613      	mov	r3, r2
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	2100      	movs	r1, #0
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7fb ff25 	bl	8003bc8 <lfs_bd_read>
 8007d7e:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <lfs_ctz_extend+0xba>
                        return err;
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	e09f      	b.n	8007eca <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	9203      	str	r2, [sp, #12]
 8007d90:	f107 0217 	add.w	r2, r7, #23
 8007d94:	9202      	str	r2, [sp, #8]
 8007d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d98:	9201      	str	r2, [sp, #4]
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	68b9      	ldr	r1, [r7, #8]
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7fc f99c 	bl	80040e0 <lfs_bd_prog>
 8007da8:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8007daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d007      	beq.n	8007dc0 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007db6:	d101      	bne.n	8007dbc <lfs_ctz_extend+0xec>
                            goto relocate;
 8007db8:	bf00      	nop
                    goto relocate;
 8007dba:	e075      	b.n	8007ea8 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8007dbe:	e084      	b.n	8007eca <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d3c5      	bcc.n	8007d5a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8007dce:	6a3a      	ldr	r2, [r7, #32]
 8007dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dd2:	601a      	str	r2, [r3, #0]
                *off = noff;
 8007dd4:	69fa      	ldr	r2, [r7, #28]
 8007dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd8:	601a      	str	r2, [r3, #0]
                return 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e075      	b.n	8007eca <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	3301      	adds	r3, #1
 8007de2:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8007de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de6:	f7fb fe5a 	bl	8003a9e <lfs_ctz>
 8007dea:	4603      	mov	r3, r0
 8007dec:	3301      	adds	r3, #1
 8007dee:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8007df4:	2300      	movs	r3, #0
 8007df6:	633b      	str	r3, [r7, #48]	; 0x30
 8007df8:	e049      	b.n	8007e8e <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fb fe82 	bl	8003b06 <lfs_tole32>
 8007e02:	4603      	mov	r3, r0
 8007e04:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8007e06:	6a3b      	ldr	r3, [r7, #32]
 8007e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e0a:	0092      	lsls	r2, r2, #2
 8007e0c:	2104      	movs	r1, #4
 8007e0e:	9103      	str	r1, [sp, #12]
 8007e10:	f107 0118 	add.w	r1, r7, #24
 8007e14:	9102      	str	r1, [sp, #8]
 8007e16:	9201      	str	r2, [sp, #4]
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	68b9      	ldr	r1, [r7, #8]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7fc f95d 	bl	80040e0 <lfs_bd_prog>
 8007e26:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fb fe60 	bl	8003af0 <lfs_fromle32>
 8007e30:	4603      	mov	r3, r0
 8007e32:	61bb      	str	r3, [r7, #24]
                if (err) {
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8007e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007e40:	d034      	beq.n	8007eac <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	e041      	b.n	8007eca <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d01b      	beq.n	8007e88 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e54:	0092      	lsls	r2, r2, #2
 8007e56:	2104      	movs	r1, #4
 8007e58:	9103      	str	r1, [sp, #12]
 8007e5a:	f107 0118 	add.w	r1, r7, #24
 8007e5e:	9102      	str	r1, [sp, #8]
 8007e60:	9201      	str	r2, [sp, #4]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	2304      	movs	r3, #4
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	2100      	movs	r1, #0
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f7fb feac 	bl	8003bc8 <lfs_bd_read>
 8007e70:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fb fe3b 	bl	8003af0 <lfs_fromle32>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <lfs_ctz_extend+0x1b8>
                        return err;
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	e020      	b.n	8007eca <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d3b1      	bcc.n	8007dfa <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8007e96:	6a3a      	ldr	r2, [r7, #32]
 8007e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e9a:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	009a      	lsls	r2, r3, #2
 8007ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea2:	601a      	str	r2, [r3, #0]
            return 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e010      	b.n	8007eca <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8007ea8:	bf00      	nop
 8007eaa:	e000      	b.n	8007eae <lfs_ctz_extend+0x1de>
                        goto relocate;
 8007eac:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	4a08      	ldr	r2, [pc, #32]	; (8007ed4 <lfs_ctz_extend+0x204>)
 8007eb2:	9200      	str	r2, [sp, #0]
 8007eb4:	f640 327d 	movw	r2, #2941	; 0xb7d
 8007eb8:	4907      	ldr	r1, [pc, #28]	; (8007ed8 <lfs_ctz_extend+0x208>)
 8007eba:	4808      	ldr	r0, [pc, #32]	; (8007edc <lfs_ctz_extend+0x20c>)
 8007ebc:	f003 f924 	bl	800b108 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7fb fe5a 	bl	8003b7c <lfs_cache_drop>
    while (true) {
 8007ec8:	e709      	b.n	8007cde <lfs_ctz_extend+0xe>
    }
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3738      	adds	r7, #56	; 0x38
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	0800c03c 	.word	0x0800c03c
 8007ed8:	0800bf48 	.word	0x0800bf48
 8007edc:	0800c0bc 	.word	0x0800c0bc

08007ee0 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b090      	sub	sp, #64	; 0x40
 8007ee4:	af04      	add	r7, sp, #16
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <lfs_ctz_traverse+0x18>
        return 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e06b      	b.n	8007fd0 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efa:	3b01      	subs	r3, #1
 8007efc:	61fb      	str	r3, [r7, #28]
 8007efe:	f107 031c 	add.w	r3, r7, #28
 8007f02:	4619      	mov	r1, r3
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7ff fe40 	bl	8007b8a <lfs_ctz_index>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8007f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007f14:	4798      	blx	r3
 8007f16:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <lfs_ctz_traverse+0x42>
            return err;
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	e056      	b.n	8007fd0 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <lfs_ctz_traverse+0x4c>
            return 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	e051      	b.n	8007fd0 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8007f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	f1c3 0302 	rsb	r3, r3, #2
 8007f36:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8007f38:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8007f3a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8007f3e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8007f40:	9303      	str	r3, [sp, #12]
 8007f42:	f107 0314 	add.w	r3, r7, #20
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	4613      	mov	r3, r2
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7fb fe36 	bl	8003bc8 <lfs_bd_read>
 8007f5c:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fb fdc5 	bl	8003af0 <lfs_fromle32>
 8007f66:	4603      	mov	r3, r0
 8007f68:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fb fdbf 	bl	8003af0 <lfs_fromle32>
 8007f72:	4603      	mov	r3, r0
 8007f74:	61bb      	str	r3, [r7, #24]
        if (err) {
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <lfs_ctz_traverse+0xa0>
            return err;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	e027      	b.n	8007fd0 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8007f80:	2300      	movs	r3, #0
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f84:	e012      	b.n	8007fac <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	3330      	adds	r3, #48	; 0x30
 8007f8c:	443b      	add	r3, r7
 8007f8e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8007f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f94:	4611      	mov	r1, r2
 8007f96:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007f98:	4798      	blx	r3
 8007f9a:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <lfs_ctz_traverse+0xc6>
                return err;
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	e014      	b.n	8007fd0 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	3301      	adds	r3, #1
 8007faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	dbe7      	blt.n	8007f86 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	3330      	adds	r3, #48	; 0x30
 8007fbe:	443b      	add	r3, r7
 8007fc0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007fc4:	603b      	str	r3, [r7, #0]
        index -= count;
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8007fce:	e79e      	b.n	8007f0e <lfs_ctz_traverse+0x2e>
    }
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3730      	adds	r7, #48	; 0x30
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8007fd8:	b5b0      	push	{r4, r5, r7, lr}
 8007fda:	b09a      	sub	sp, #104	; 0x68
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d008      	beq.n	8008002 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f002 fb0b 	bl	800a60c <lfs_fs_forceconsistency>
 8007ff6:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8007ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <lfs_file_rawopencfg+0x2a>
            return err;
 8007ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008000:	e1b0      	b.n	8008364 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008006:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2200      	movs	r2, #0
 8008012:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2200      	movs	r2, #0
 8008018:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2200      	movs	r2, #0
 800801e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f103 0108 	add.w	r1, r3, #8
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	3304      	adds	r3, #4
 800802a:	1d3a      	adds	r2, r7, #4
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7fe f84b 	bl	80060c8 <lfs_dir_find>
 8008032:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8008034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008036:	2b00      	cmp	r3, #0
 8008038:	da0c      	bge.n	8008054 <lfs_file_rawopencfg+0x7c>
 800803a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800803c:	f113 0f02 	cmn.w	r3, #2
 8008040:	d105      	bne.n	800804e <lfs_file_rawopencfg+0x76>
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	889b      	ldrh	r3, [r3, #4]
 8008046:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800804a:	4293      	cmp	r3, r2
 800804c:	d102      	bne.n	8008054 <lfs_file_rawopencfg+0x7c>
        err = tag;
 800804e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008050:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8008052:	e17c      	b.n	800834e <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2201      	movs	r2, #1
 8008058:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f7fc fc6e 	bl	800493e <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8008062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008064:	f113 0f02 	cmn.w	r3, #2
 8008068:	d14e      	bne.n	8008108 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008070:	2b00      	cmp	r3, #0
 8008072:	d103      	bne.n	800807c <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8008074:	f06f 0301 	mvn.w	r3, #1
 8008078:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800807a:	e168      	b.n	800834e <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4618      	mov	r0, r3
 8008080:	f7f8 f8ae 	bl	80001e0 <strlen>
 8008084:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800808a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800808c:	429a      	cmp	r2, r3
 800808e:	d903      	bls.n	8008098 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8008090:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8008094:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8008096:	e15a      	b.n	800834e <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f103 0108 	add.w	r1, r3, #8
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	889b      	ldrh	r3, [r3, #4]
 80080a2:	029b      	lsls	r3, r3, #10
 80080a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080ae:	2300      	movs	r3, #0
 80080b0:	633b      	str	r3, [r7, #48]	; 0x30
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	889b      	ldrh	r3, [r3, #4]
 80080b6:	029a      	lsls	r2, r3, #10
 80080b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ba:	4313      	orrs	r3, r2
 80080bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	889b      	ldrh	r3, [r3, #4]
 80080ca:	029b      	lsls	r3, r3, #10
 80080cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d6:	2300      	movs	r3, #0
 80080d8:	643b      	str	r3, [r7, #64]	; 0x40
 80080da:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80080de:	2303      	movs	r3, #3
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f7ff fd2d 	bl	8007b40 <lfs_dir_commit>
 80080e6:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80080e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080ea:	f113 0f1c 	cmn.w	r3, #28
 80080ee:	d001      	beq.n	80080f4 <lfs_file_rawopencfg+0x11c>
 80080f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080f2:	e001      	b.n	80080f8 <lfs_file_rawopencfg+0x120>
 80080f4:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80080f8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 80080fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f040 8125 	bne.w	800834c <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8008102:	4b9a      	ldr	r3, [pc, #616]	; (800836c <lfs_file_rawopencfg+0x394>)
 8008104:	65bb      	str	r3, [r7, #88]	; 0x58
 8008106:	e044      	b.n	8008192 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8008112:	f06f 0310 	mvn.w	r3, #16
 8008116:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8008118:	e119      	b.n	800834e <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800811a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800811c:	4618      	mov	r0, r3
 800811e:	f7fc f9b9 	bl	8004494 <lfs_tag_type3>
 8008122:	4603      	mov	r3, r0
 8008124:	2b01      	cmp	r3, #1
 8008126:	d003      	beq.n	8008130 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8008128:	f06f 0314 	mvn.w	r3, #20
 800812c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800812e:	e10e      	b.n	800834e <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00e      	beq.n	8008158 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	889b      	ldrh	r3, [r3, #4]
 800813e:	029b      	lsls	r3, r3, #10
 8008140:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008148:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	631a      	str	r2, [r3, #48]	; 0x30
 8008156:	e01c      	b.n	8008192 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	889b      	ldrh	r3, [r3, #4]
 8008162:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008168:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008170:	9200      	str	r2, [sp, #0]
 8008172:	4a7f      	ldr	r2, [pc, #508]	; (8008370 <lfs_file_rawopencfg+0x398>)
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f7fc fe0f 	bl	8004d98 <lfs_dir_get>
 800817a:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 800817c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800817e:	2b00      	cmp	r3, #0
 8008180:	da02      	bge.n	8008188 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8008182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008184:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8008186:	e0e2      	b.n	800834e <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	3328      	adds	r3, #40	; 0x28
 800818c:	4618      	mov	r0, r3
 800818e:	f7fc faf7 	bl	8004780 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8008192:	2300      	movs	r3, #0
 8008194:	657b      	str	r3, [r7, #84]	; 0x54
 8008196:	e063      	b.n	8008260 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d03c      	beq.n	800821e <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ae:	6859      	ldr	r1, [r3, #4]
 80081b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081b2:	4613      	mov	r3, r2
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	440b      	add	r3, r1
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80081c2:	051a      	lsls	r2, r3, #20
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	889b      	ldrh	r3, [r3, #4]
 80081c8:	029b      	lsls	r3, r3, #10
 80081ca:	ea42 0103 	orr.w	r1, r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d2:	6858      	ldr	r0, [r3, #4]
 80081d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081d6:	4613      	mov	r3, r2
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	4413      	add	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4403      	add	r3, r0
 80081e0:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80081e2:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ea:	6859      	ldr	r1, [r3, #4]
 80081ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081ee:	4613      	mov	r3, r2
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	4413      	add	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	4603      	mov	r3, r0
 80081fe:	4a5d      	ldr	r2, [pc, #372]	; (8008374 <lfs_file_rawopencfg+0x39c>)
 8008200:	4621      	mov	r1, r4
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f7fc fdc8 	bl	8004d98 <lfs_dir_get>
 8008208:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800820a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800820c:	2b00      	cmp	r3, #0
 800820e:	da06      	bge.n	800821e <lfs_file_rawopencfg+0x246>
 8008210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008212:	f113 0f02 	cmn.w	r3, #2
 8008216:	d002      	beq.n	800821e <lfs_file_rawopencfg+0x246>
                err = res;
 8008218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800821a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800821c:	e097      	b.n	800834e <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d017      	beq.n	800825a <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822e:	6859      	ldr	r1, [r3, #4]
 8008230:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008232:	4613      	mov	r3, r2
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	440b      	add	r3, r1
 800823c:	689a      	ldr	r2, [r3, #8]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008242:	429a      	cmp	r2, r3
 8008244:	d903      	bls.n	800824e <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8008246:	f06f 031b 	mvn.w	r3, #27
 800824a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800824c:	e07f      	b.n	800834e <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800825a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800825c:	3301      	adds	r3, #1
 800825e:	657b      	str	r3, [r7, #84]	; 0x54
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008268:	429a      	cmp	r2, r3
 800826a:	d395      	bcc.n	8008198 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	64da      	str	r2, [r3, #76]	; 0x4c
 8008280:	e010      	b.n	80082a4 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008288:	4618      	mov	r0, r3
 800828a:	f7fb fc60 	bl	8003b4e <lfs_malloc>
 800828e:	4602      	mov	r2, r0
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008298:	2b00      	cmp	r3, #0
 800829a:	d103      	bne.n	80082a4 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 800829c:	f06f 030b 	mvn.w	r3, #11
 80082a0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80082a2:	e054      	b.n	800834e <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	3340      	adds	r3, #64	; 0x40
 80082a8:	4619      	mov	r1, r3
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f7fb fc75 	bl	8003b9a <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80082b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fc f8ee 	bl	8004494 <lfs_tag_type3>
 80082b8:	4603      	mov	r3, r0
 80082ba:	461a      	mov	r2, r3
 80082bc:	f240 2301 	movw	r3, #513	; 0x201
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d141      	bne.n	8008348 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f06f 0201 	mvn.w	r2, #1
 80082ca:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80082cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fc f91a 	bl	8004508 <lfs_tag_size>
 80082d4:	4602      	mov	r2, r0
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2200      	movs	r2, #0
 80082f2:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d020      	beq.n	8008348 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	889b      	ldrh	r3, [r3, #4]
 8008310:	029c      	lsls	r4, r3, #10
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008316:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800831a:	4618      	mov	r0, r3
 800831c:	f7fb fb78 	bl	8003a10 <lfs_min>
 8008320:	4603      	mov	r3, r0
 8008322:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8008324:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	4613      	mov	r3, r2
 8008330:	4a0f      	ldr	r2, [pc, #60]	; (8008370 <lfs_file_rawopencfg+0x398>)
 8008332:	4629      	mov	r1, r5
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7fc fd2f 	bl	8004d98 <lfs_dir_get>
 800833a:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 800833c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800833e:	2b00      	cmp	r3, #0
 8008340:	da02      	bge.n	8008348 <lfs_file_rawopencfg+0x370>
                err = res;
 8008342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008344:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8008346:	e002      	b.n	800834e <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8008348:	2300      	movs	r3, #0
 800834a:	e00b      	b.n	8008364 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 800834c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008352:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 f823 	bl	80083a8 <lfs_file_rawclose>
    return err;
 8008362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8008364:	4618      	mov	r0, r3
 8008366:	3760      	adds	r7, #96	; 0x60
 8008368:	46bd      	mov	sp, r7
 800836a:	bdb0      	pop	{r4, r5, r7, pc}
 800836c:	20100000 	.word	0x20100000
 8008370:	700ffc00 	.word	0x700ffc00
 8008374:	7ffffc00 	.word	0x7ffffc00

08008378 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af02      	add	r7, sp, #8
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8008386:	4b07      	ldr	r3, [pc, #28]	; (80083a4 <lfs_file_rawopen+0x2c>)
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff fe21 	bl	8007fd8 <lfs_file_rawopencfg>
 8008396:	6178      	str	r0, [r7, #20]
    return err;
 8008398:	697b      	ldr	r3, [r7, #20]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3718      	adds	r7, #24
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	0800cc54 	.word	0x0800cc54

080083a8 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f9e5 	bl	8008784 <lfs_file_rawsync>
 80083ba:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7fc fa9b 	bl	80048fa <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d104      	bne.n	80083d8 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fb fbc7 	bl	8003b66 <lfs_free>
    }

    return err;
 80083d8:	68fb      	ldr	r3, [r7, #12]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80083e4:	b590      	push	{r4, r7, lr}
 80083e6:	b08d      	sub	sp, #52	; 0x34
 80083e8:	af06      	add	r7, sp, #24
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80083ee:	f107 030c 	add.w	r3, r7, #12
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7fc fb35 	bl	8004a64 <lfs_alloc>
 80083fa:	6138      	str	r0, [r7, #16]
        if (err) {
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <lfs_file_relocate+0x22>
            return err;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	e0bb      	b.n	800857e <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7fb ff14 	bl	8004238 <lfs_bd_erase>
 8008410:	6138      	str	r0, [r7, #16]
        if (err) {
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d006      	beq.n	8008426 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800841e:	f000 809b 	beq.w	8008558 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	e0ab      	b.n	800857e <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	e069      	b.n	8008500 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d027      	beq.n	8008488 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f103 0008 	add.w	r0, r3, #8
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	889b      	ldrh	r3, [r3, #4]
 8008450:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8008452:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800845a:	2101      	movs	r1, #1
 800845c:	9105      	str	r1, [sp, #20]
 800845e:	f107 010b 	add.w	r1, r7, #11
 8008462:	9104      	str	r1, [sp, #16]
 8008464:	6979      	ldr	r1, [r7, #20]
 8008466:	9103      	str	r1, [sp, #12]
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	4b47      	ldr	r3, [pc, #284]	; (8008588 <lfs_file_relocate+0x1a4>)
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	9200      	str	r2, [sp, #0]
 8008470:	4623      	mov	r3, r4
 8008472:	2200      	movs	r2, #0
 8008474:	4601      	mov	r1, r0
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7fc fca9 	bl	8004dce <lfs_dir_getread>
 800847c:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01e      	beq.n	80084c2 <lfs_file_relocate+0xde>
                    return err;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	e07a      	b.n	800857e <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800848e:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	1ad4      	subs	r4, r2, r3
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	2201      	movs	r2, #1
 800849e:	9203      	str	r2, [sp, #12]
 80084a0:	f107 020b 	add.w	r2, r7, #11
 80084a4:	9202      	str	r2, [sp, #8]
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	9201      	str	r2, [sp, #4]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	4623      	mov	r3, r4
 80084ae:	4602      	mov	r2, r0
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7fb fb89 	bl	8003bc8 <lfs_bd_read>
 80084b6:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <lfs_file_relocate+0xde>
                    return err;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	e05d      	b.n	800857e <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f103 0110 	add.w	r1, r3, #16
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	9203      	str	r2, [sp, #12]
 80084d0:	f107 020b 	add.w	r2, r7, #11
 80084d4:	9202      	str	r2, [sp, #8]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	9201      	str	r2, [sp, #4]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	2301      	movs	r3, #1
 80084de:	4602      	mov	r2, r0
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7fb fdfd 	bl	80040e0 <lfs_bd_prog>
 80084e6:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d005      	beq.n	80084fa <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80084f4:	d032      	beq.n	800855c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	e041      	b.n	800857e <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	3301      	adds	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	429a      	cmp	r2, r3
 8008508:	d390      	bcc.n	800842c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69d9      	ldr	r1, [r3, #28]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008518:	461a      	mov	r2, r3
 800851a:	f002 ff1b 	bl	800b354 <memcpy>
        file->cache.block = lfs->pcache.block;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691a      	ldr	r2, [r3, #16]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695a      	ldr	r2, [r3, #20]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699a      	ldr	r2, [r3, #24]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3310      	adds	r3, #16
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7fb fb2c 	bl	8003b9a <lfs_cache_zero>

        file->block = nblock;
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8008554:	2300      	movs	r3, #0
 8008556:	e012      	b.n	800857e <lfs_file_relocate+0x19a>
                goto relocate;
 8008558:	bf00      	nop
 800855a:	e000      	b.n	800855e <lfs_file_relocate+0x17a>
                    goto relocate;
 800855c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4a0a      	ldr	r2, [pc, #40]	; (800858c <lfs_file_relocate+0x1a8>)
 8008562:	9200      	str	r2, [sp, #0]
 8008564:	f640 42b3 	movw	r2, #3251	; 0xcb3
 8008568:	4909      	ldr	r1, [pc, #36]	; (8008590 <lfs_file_relocate+0x1ac>)
 800856a:	480a      	ldr	r0, [pc, #40]	; (8008594 <lfs_file_relocate+0x1b0>)
 800856c:	f002 fdcc 	bl	800b108 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3310      	adds	r3, #16
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fb fb00 	bl	8003b7c <lfs_cache_drop>
    while (true) {
 800857c:	e737      	b.n	80083ee <lfs_file_relocate+0xa>
    }
}
 800857e:	4618      	mov	r0, r3
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	bd90      	pop	{r4, r7, pc}
 8008586:	bf00      	nop
 8008588:	fff7fc00 	.word	0xfff7fc00
 800858c:	0800c03c 	.word	0x0800c03c
 8008590:	0800bf48 	.word	0x0800bf48
 8008594:	0800c0bc 	.word	0x0800c0bc

08008598 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7fc fa3a 	bl	8004a24 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff ff16 	bl	80083e4 <lfs_file_relocate>
 80085b8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <lfs_file_outline+0x2c>
        return err;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	e006      	b.n	80085d2 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80085dc:	b590      	push	{r4, r7, lr}
 80085de:	b09f      	sub	sp, #124	; 0x7c
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d011      	beq.n	8008616 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d105      	bne.n	800860a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	3340      	adds	r3, #64	; 0x40
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7fb fab9 	bl	8003b7c <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 80a4 	beq.w	800876c <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008628:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d176      	bne.n	8008724 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8008636:	f107 030c 	add.w	r3, r7, #12
 800863a:	2254      	movs	r2, #84	; 0x54
 800863c:	2100      	movs	r1, #0
 800863e:	4618      	mov	r0, r3
 8008640:	f002 fdcf 	bl	800b1e2 <memset>
                .ctz.head = file->ctz.head,
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8008648:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800864e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008650:	2301      	movs	r3, #1
 8008652:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8008658:	643b      	str	r3, [r7, #64]	; 0x40
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8008660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7fb fa86 	bl	8003b7c <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8008670:	e02b      	b.n	80086ca <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8008672:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008676:	f107 010c 	add.w	r1, r7, #12
 800867a:	2301      	movs	r3, #1
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f90d 	bl	800889c <lfs_file_flushedread>
 8008682:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8008684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008686:	2b00      	cmp	r3, #0
 8008688:	da01      	bge.n	800868e <lfs_file_flush+0xb2>
                    return res;
 800868a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800868c:	e06f      	b.n	800876e <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 800868e:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008692:	2301      	movs	r3, #1
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa08 	bl	8008aac <lfs_file_flushedwrite>
 800869c:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800869e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	da01      	bge.n	80086a8 <lfs_file_flush+0xcc>
                    return res;
 80086a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086a6:	e062      	b.n	800876e <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086b0:	d00b      	beq.n	80086ca <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80086b2:	f107 030c 	add.w	r3, r7, #12
 80086b6:	3340      	adds	r3, #64	; 0x40
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7fb fa5e 	bl	8003b7c <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7fb fa59 	bl	8003b7c <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d3cd      	bcc.n	8008672 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	2301      	movs	r3, #1
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7fb fc4d 	bl	8003f80 <lfs_bd_flush>
 80086e6:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80086e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d026      	beq.n	800873c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80086ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086f0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80086f4:	d001      	beq.n	80086fa <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80086f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086f8:	e039      	b.n	800876e <lfs_file_flush+0x192>
                        goto relocate;
 80086fa:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008700:	4a1d      	ldr	r2, [pc, #116]	; (8008778 <lfs_file_flush+0x19c>)
 8008702:	9200      	str	r2, [sp, #0]
 8008704:	f640 5202 	movw	r2, #3330	; 0xd02
 8008708:	491c      	ldr	r1, [pc, #112]	; (800877c <lfs_file_flush+0x1a0>)
 800870a:	481d      	ldr	r0, [pc, #116]	; (8008780 <lfs_file_flush+0x1a4>)
 800870c:	f002 fcfc 	bl	800b108 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff fe66 	bl	80083e4 <lfs_file_relocate>
 8008718:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800871a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0da      	beq.n	80086d6 <lfs_file_flush+0xfa>
                    return err;
 8008720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008722:	e024      	b.n	800876e <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	4619      	mov	r1, r3
 800872e:	4610      	mov	r0, r2
 8008730:	f7fb f95e 	bl	80039f0 <lfs_max>
 8008734:	4602      	mov	r2, r0
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	635a      	str	r2, [r3, #52]	; 0x34
 800873a:	e000      	b.n	800873e <lfs_file_flush+0x162>
                break;
 800873c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008752:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800876a:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3774      	adds	r7, #116	; 0x74
 8008772:	46bd      	mov	sp, r7
 8008774:	bd90      	pop	{r4, r7, pc}
 8008776:	bf00      	nop
 8008778:	0800c03c 	.word	0x0800c03c
 800877c:	0800bf48 	.word	0x0800bf48
 8008780:	0800c0bc 	.word	0x0800c0bc

08008784 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8008784:	b580      	push	{r7, lr}
 8008786:	b090      	sub	sp, #64	; 0x40
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800879a:	2300      	movs	r3, #0
 800879c:	e07a      	b.n	8008894 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff ff1b 	bl	80085dc <lfs_file_flush>
 80087a6:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d007      	beq.n	80087be <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80087ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087bc:	e06a      	b.n	8008894 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d063      	beq.n	8008892 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	3308      	adds	r3, #8
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fb fd79 	bl	80042c6 <lfs_pair_isnull>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f083 0301 	eor.w	r3, r3, #1
 80087da:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d058      	beq.n	8008892 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d009      	beq.n	8008800 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80087ec:	f240 2301 	movw	r3, #513	; 0x201
 80087f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f6:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	637b      	str	r3, [r7, #52]	; 0x34
 80087fe:	e014      	b.n	800882a <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8008800:	f240 2302 	movw	r3, #514	; 0x202
 8008804:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800880c:	3228      	adds	r2, #40	; 0x28
 800880e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008812:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8008816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800881a:	4618      	mov	r0, r3
 800881c:	f7fb ffc8 	bl	80047b0 <lfs_ctz_tole32>
            buffer = &ctz;
 8008820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008824:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8008826:	2308      	movs	r3, #8
 8008828:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	f103 0108 	add.w	r1, r3, #8
 8008830:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008832:	051a      	lsls	r2, r3, #20
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	889b      	ldrh	r3, [r3, #4]
 8008838:	029b      	lsls	r3, r3, #10
 800883a:	431a      	orrs	r2, r3
 800883c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883e:	4313      	orrs	r3, r2
 8008840:	61bb      	str	r3, [r7, #24]
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	61fb      	str	r3, [r7, #28]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	889b      	ldrh	r3, [r3, #4]
 800884a:	029a      	lsls	r2, r3, #10
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	4313      	orrs	r3, r2
 8008854:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8008858:	623b      	str	r3, [r7, #32]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
 8008862:	f107 0218 	add.w	r2, r7, #24
 8008866:	2302      	movs	r3, #2
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7ff f969 	bl	8007b40 <lfs_dir_commit>
 800886e:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	2b00      	cmp	r3, #0
 8008874:	d007      	beq.n	8008886 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	e006      	b.n	8008894 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3740      	adds	r7, #64	; 0x40
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800889c:	b5b0      	push	{r4, r5, r7, lr}
 800889e:	b090      	sub	sp, #64	; 0x40
 80088a0:	af06      	add	r7, sp, #24
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d301      	bcc.n	80088c2 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	e0b7      	b.n	8008a32 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	4619      	mov	r1, r3
 80088ce:	6838      	ldr	r0, [r7, #0]
 80088d0:	f7fb f89e 	bl	8003a10 <lfs_min>
 80088d4:	6038      	str	r0, [r7, #0]
    nsize = size;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80088da:	e0a5      	b.n	8008a28 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d006      	beq.n	80088f6 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088f0:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d130      	bne.n	8008958 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d11c      	bne.n	800893c <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008914:	68b9      	ldr	r1, [r7, #8]
 8008916:	3138      	adds	r1, #56	; 0x38
 8008918:	68b8      	ldr	r0, [r7, #8]
 800891a:	303c      	adds	r0, #60	; 0x3c
 800891c:	9003      	str	r0, [sp, #12]
 800891e:	9102      	str	r1, [sp, #8]
 8008920:	9201      	str	r2, [sp, #4]
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	462b      	mov	r3, r5
 8008926:	4622      	mov	r2, r4
 8008928:	2100      	movs	r1, #0
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7ff f965 	bl	8007bfa <lfs_ctz_find>
 8008930:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d009      	beq.n	800894c <lfs_file_flushedread+0xb0>
                    return err;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	e07a      	b.n	8008a32 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f06f 0201 	mvn.w	r2, #1
 8008942:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008950:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800895c:	69da      	ldr	r2, [r3, #28]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	4619      	mov	r1, r3
 8008966:	6a38      	ldr	r0, [r7, #32]
 8008968:	f7fb f852 	bl	8003a10 <lfs_min>
 800896c:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d026      	beq.n	80089c8 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	f103 0408 	add.w	r4, r3, #8
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800898a:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	889b      	ldrh	r3, [r3, #4]
 8008990:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8008992:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800899e:	69b8      	ldr	r0, [r7, #24]
 80089a0:	9005      	str	r0, [sp, #20]
 80089a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089a4:	9004      	str	r0, [sp, #16]
 80089a6:	9103      	str	r1, [sp, #12]
 80089a8:	9302      	str	r3, [sp, #8]
 80089aa:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <lfs_file_flushedread+0x1a0>)
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	9200      	str	r2, [sp, #0]
 80089b0:	462b      	mov	r3, r5
 80089b2:	2200      	movs	r2, #0
 80089b4:	4621      	mov	r1, r4
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f7fc fa09 	bl	8004dce <lfs_dir_getread>
 80089bc:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d01d      	beq.n	8008a00 <lfs_file_flushedread+0x164>
                return err;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	e034      	b.n	8008a32 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d2:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80089dc:	69b9      	ldr	r1, [r7, #24]
 80089de:	9103      	str	r1, [sp, #12]
 80089e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089e2:	9102      	str	r1, [sp, #8]
 80089e4:	9201      	str	r2, [sp, #4]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	4623      	mov	r3, r4
 80089ea:	4602      	mov	r2, r0
 80089ec:	2100      	movs	r1, #0
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7fb f8ea 	bl	8003bc8 <lfs_bd_read>
 80089f4:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <lfs_file_flushedread+0x164>
                return err;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	e018      	b.n	8008a32 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	441a      	add	r2, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	441a      	add	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8008a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8008a20:	6a3a      	ldr	r2, [r7, #32]
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f47f af56 	bne.w	80088dc <lfs_file_flushedread+0x40>
    }

    return size;
 8008a30:	683b      	ldr	r3, [r7, #0]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3728      	adds	r7, #40	; 0x28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bdb0      	pop	{r4, r5, r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	fff7fc00 	.word	0xfff7fc00

08008a40 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
 8008a4c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d106      	bne.n	8008a68 <lfs_file_rawread+0x28>
 8008a5a:	4b11      	ldr	r3, [pc, #68]	; (8008aa0 <lfs_file_rawread+0x60>)
 8008a5c:	4a11      	ldr	r2, [pc, #68]	; (8008aa4 <lfs_file_rawread+0x64>)
 8008a5e:	f640 518d 	movw	r1, #3469	; 0xd8d
 8008a62:	4811      	ldr	r0, [pc, #68]	; (8008aa8 <lfs_file_rawread+0x68>)
 8008a64:	f002 f976 	bl	800ad54 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d009      	beq.n	8008a88 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f7ff fdb0 	bl	80085dc <lfs_file_flush>
 8008a7c:	6178      	str	r0, [r7, #20]
        if (err) {
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <lfs_file_rawread+0x48>
            return err;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	e006      	b.n	8008a96 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f7ff ff04 	bl	800889c <lfs_file_flushedread>
 8008a94:	4603      	mov	r3, r0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	0800c264 	.word	0x0800c264
 8008aa4:	0800cc60 	.word	0x0800cc60
 8008aa8:	0800bf48 	.word	0x0800bf48

08008aac <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008aac:	b5b0      	push	{r4, r5, r7, lr}
 8008aae:	b090      	sub	sp, #64	; 0x40
 8008ab0:	af04      	add	r7, sp, #16
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 810e 	beq.w	8008cec <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	441a      	add	r2, r3
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	4619      	mov	r1, r3
 8008ade:	4610      	mov	r0, r2
 8008ae0:	f7fa ff86 	bl	80039f0 <lfs_max>
 8008ae4:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d004      	beq.n	8008b00 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8008afc:	08db      	lsrs	r3, r3, #3
 8008afe:	e003      	b.n	8008b08 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b04:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8008b06:	08db      	lsrs	r3, r3, #3
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	f7fa ff80 	bl	8003a10 <lfs_min>
 8008b10:	4603      	mov	r3, r0
 8008b12:	4619      	mov	r1, r3
 8008b14:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8008b18:	f7fa ff7a 	bl	8003a10 <lfs_min>
 8008b1c:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8008b1e:	429c      	cmp	r4, r3
 8008b20:	f240 80e4 	bls.w	8008cec <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7ff fd36 	bl	8008598 <lfs_file_outline>
 8008b2c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 80db 	beq.w	8008cec <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	e0d7      	b.n	8008cf6 <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d006      	beq.n	8008b60 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b5a:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d16d      	bne.n	8008c3c <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d159      	bne.n	8008c20 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d12f      	bne.n	8008bd8 <lfs_file_flushedwrite+0x12c>
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d02b      	beq.n	8008bd8 <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008b92:	3a01      	subs	r2, #1
 8008b94:	68b9      	ldr	r1, [r7, #8]
 8008b96:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8008b98:	2000      	movs	r0, #0
 8008b9a:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008b9c:	f107 0010 	add.w	r0, r7, #16
 8008ba0:	9003      	str	r0, [sp, #12]
 8008ba2:	9102      	str	r1, [sp, #8]
 8008ba4:	9201      	str	r2, [sp, #4]
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	462b      	mov	r3, r5
 8008baa:	4622      	mov	r2, r4
 8008bac:	2100      	movs	r1, #0
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f7ff f823 	bl	8007bfa <lfs_ctz_find>
 8008bb4:	6238      	str	r0, [r7, #32]
                    if (err) {
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d007      	beq.n	8008bcc <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	e094      	b.n	8008cf6 <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	3340      	adds	r3, #64	; 0x40
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7fa ffe1 	bl	8003b9a <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f7fb ff23 	bl	8004a24 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008be4:	68fc      	ldr	r4, [r7, #12]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	3238      	adds	r2, #56	; 0x38
 8008bf2:	68b9      	ldr	r1, [r7, #8]
 8008bf4:	313c      	adds	r1, #60	; 0x3c
 8008bf6:	9102      	str	r1, [sp, #8]
 8008bf8:	9201      	str	r2, [sp, #4]
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	4622      	mov	r2, r4
 8008c00:	4601      	mov	r1, r0
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f7ff f864 	bl	8007cd0 <lfs_ctz_extend>
 8008c08:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00f      	beq.n	8008c30 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c14:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	e06a      	b.n	8008cf6 <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f06f 0201 	mvn.w	r2, #1
 8008c26:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c34:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c40:	69da      	ldr	r2, [r3, #28]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4c:	f7fa fee0 	bl	8003a10 <lfs_min>
 8008c50:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008c58:	68fc      	ldr	r4, [r7, #12]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008c62:	69b9      	ldr	r1, [r7, #24]
 8008c64:	9103      	str	r1, [sp, #12]
 8008c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c68:	9102      	str	r1, [sp, #8]
 8008c6a:	9201      	str	r2, [sp, #4]
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4622      	mov	r2, r4
 8008c72:	4601      	mov	r1, r0
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7fb fa33 	bl	80040e0 <lfs_bd_prog>
 8008c7a:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d01c      	beq.n	8008cbc <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008c88:	d007      	beq.n	8008c9a <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	e02d      	b.n	8008cf6 <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 8008c9a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8008c9c:	68b9      	ldr	r1, [r7, #8]
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7ff fba0 	bl	80083e4 <lfs_file_relocate>
 8008ca4:	6178      	str	r0, [r7, #20]
            if (err) {
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0d2      	beq.n	8008c52 <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	e01c      	b.n	8008cf6 <lfs_file_flushedwrite+0x24a>
            break;
 8008cbc:	bf00      	nop
            }
        }

        file->pos += diff;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	441a      	add	r2, r3
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8008cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	4413      	add	r3, r2
 8008cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8008cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f7fb fe9c 	bl	8004a24 <lfs_alloc_ack>
    while (nsize > 0) {
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f47f af29 	bne.w	8008b46 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8008cf4:	683b      	ldr	r3, [r7, #0]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3730      	adds	r7, #48	; 0x30
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008d00 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b08a      	sub	sp, #40	; 0x28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <lfs_file_rawwrite+0x28>
 8008d1a:	4b38      	ldr	r3, [pc, #224]	; (8008dfc <lfs_file_rawwrite+0xfc>)
 8008d1c:	4a38      	ldr	r2, [pc, #224]	; (8008e00 <lfs_file_rawwrite+0x100>)
 8008d1e:	f640 51f8 	movw	r1, #3576	; 0xdf8
 8008d22:	4838      	ldr	r0, [pc, #224]	; (8008e04 <lfs_file_rawwrite+0x104>)
 8008d24:	f002 f816 	bl	800ad54 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d009      	beq.n	8008d48 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8008d34:	68b9      	ldr	r1, [r7, #8]
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f7ff fc50 	bl	80085dc <lfs_file_flush>
 8008d3c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <lfs_file_rawwrite+0x48>
            return err;
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	e055      	b.n	8008df4 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d009      	beq.n	8008d68 <lfs_file_rawwrite+0x68>
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d203      	bcs.n	8008d68 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	441a      	add	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d902      	bls.n	8008d7e <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8008d78:	f06f 031a 	mvn.w	r3, #26
 8008d7c:	e03a      	b.n	8008df4 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d121      	bne.n	8008dce <lfs_file_rawwrite+0xce>
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d91b      	bls.n	8008dce <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9a:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8008da4:	e00e      	b.n	8008dc4 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8008da6:	2300      	movs	r3, #0
 8008da8:	75fb      	strb	r3, [r7, #23]
 8008daa:	f107 0217 	add.w	r2, r7, #23
 8008dae:	2301      	movs	r3, #1
 8008db0:	68b9      	ldr	r1, [r7, #8]
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f7ff fe7a 	bl	8008aac <lfs_file_flushedwrite>
 8008db8:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	da01      	bge.n	8008dc4 <lfs_file_rawwrite+0xc4>
                return res;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	e017      	b.n	8008df4 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc8:	6a3a      	ldr	r2, [r7, #32]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d8eb      	bhi.n	8008da6 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	68b9      	ldr	r1, [r7, #8]
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f7ff fe69 	bl	8008aac <lfs_file_flushedwrite>
 8008dda:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	da01      	bge.n	8008de6 <lfs_file_rawwrite+0xe6>
        return nsize;
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	e006      	b.n	8008df4 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8008df2:	69bb      	ldr	r3, [r7, #24]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3728      	adds	r7, #40	; 0x28
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	0800c294 	.word	0x0800c294
 8008e00:	0800cc74 	.word	0x0800cc74
 8008e04:	0800bf48 	.word	0x0800bf48

08008e08 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08c      	sub	sp, #48	; 0x30
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d102      	bne.n	8008e28 <lfs_file_rawseek+0x20>
        npos = off;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e26:	e025      	b.n	8008e74 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d10f      	bne.n	8008e4e <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e32:	461a      	mov	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4413      	add	r3, r2
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	da02      	bge.n	8008e42 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8008e3c:	f06f 0315 	mvn.w	r3, #21
 8008e40:	e067      	b.n	8008f12 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4413      	add	r3, r2
 8008e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e4c:	e012      	b.n	8008e74 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d10f      	bne.n	8008e74 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8008e54:	68b9      	ldr	r1, [r7, #8]
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 f875 	bl	8008f46 <lfs_file_rawsize>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4413      	add	r3, r2
 8008e62:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	da02      	bge.n	8008e70 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8008e6a:	f06f 0315 	mvn.w	r3, #21
 8008e6e:	e050      	b.n	8008f12 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d902      	bls.n	8008e84 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8008e7e:	f06f 0315 	mvn.w	r3, #21
 8008e82:	e046      	b.n	8008f12 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d101      	bne.n	8008e92 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	e03f      	b.n	8008f12 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d12b      	bne.n	8008ef6 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea2:	61bb      	str	r3, [r7, #24]
 8008ea4:	f107 0318 	add.w	r3, r7, #24
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f7fe fe6d 	bl	8007b8a <lfs_ctz_index>
 8008eb0:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8008eb6:	f107 0314 	add.w	r3, r7, #20
 8008eba:	4619      	mov	r1, r3
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7fe fe64 	bl	8007b8a <lfs_ctz_index>
 8008ec2:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8008ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d114      	bne.n	8008ef6 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d80f      	bhi.n	8008ef6 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ede:	441a      	add	r2, r3
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d907      	bls.n	8008ef6 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eea:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	e00d      	b.n	8008f12 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff fb6f 	bl	80085dc <lfs_file_flush>
 8008efe:	61f8      	str	r0, [r7, #28]
    if (err) {
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <lfs_file_rawseek+0x102>
        return err;
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	e003      	b.n	8008f12 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f0e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3730      	adds	r7, #48	; 0x30
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <lfs_file_rawrewind>:
static lfs_soff_t lfs_file_rawtell(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 8008f24:	2300      	movs	r3, #0
 8008f26:	2200      	movs	r2, #0
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff ff6c 	bl	8008e08 <lfs_file_rawseek>
 8008f30:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	da01      	bge.n	8008f3c <lfs_file_rawrewind+0x22>
        return (int)res;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	e000      	b.n	8008f3e <lfs_file_rawrewind+0x24>
    }

    return 0;
 8008f3c:	2300      	movs	r3, #0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d009      	beq.n	8008f70 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	4619      	mov	r1, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	f7fa fd42 	bl	80039f0 <lfs_max>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	e001      	b.n	8008f74 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <lfs_rawremove>:

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
}

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b0a0      	sub	sp, #128	; 0x80
 8008f80:	af02      	add	r7, sp, #8
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 fb40 	bl	800a60c <lfs_fs_forceconsistency>
 8008f8c:	6778      	str	r0, [r7, #116]	; 0x74
    if (err) {
 8008f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <lfs_rawremove+0x1c>
        return err;
 8008f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f96:	e0c4      	b.n	8009122 <lfs_rawremove+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8008f98:	463a      	mov	r2, r7
 8008f9a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7fd f891 	bl	80060c8 <lfs_dir_find>
 8008fa6:	6738      	str	r0, [r7, #112]	; 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8008fa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	db09      	blt.n	8008fc2 <lfs_rawremove+0x46>
 8008fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fb fa99 	bl	80044e8 <lfs_tag_id>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d107      	bne.n	8008fd2 <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8008fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da01      	bge.n	8008fcc <lfs_rawremove+0x50>
 8008fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fca:	e0aa      	b.n	8009122 <lfs_rawremove+0x1a6>
 8008fcc:	f06f 0315 	mvn.w	r3, #21
 8008fd0:	e0a7      	b.n	8009122 <lfs_rawremove+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	627b      	str	r3, [r7, #36]	; 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8008fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fb fa5a 	bl	8004494 <lfs_tag_type3>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d14a      	bne.n	800907c <lfs_rawremove+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8008fe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fb fa7d 	bl	80044e8 <lfs_tag_id>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8008ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ff6:	f043 0308 	orr.w	r3, r3, #8
 8008ffa:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008ffe:	f107 020c 	add.w	r2, r7, #12
 8009002:	9200      	str	r2, [sp, #0]
 8009004:	4a49      	ldr	r2, [pc, #292]	; (800912c <lfs_rawremove+0x1b0>)
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7fb fec6 	bl	8004d98 <lfs_dir_get>
 800900c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (res < 0) {
 800900e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009010:	2b00      	cmp	r3, #0
 8009012:	da01      	bge.n	8009018 <lfs_rawremove+0x9c>
            return (int)res;
 8009014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009016:	e084      	b.n	8009122 <lfs_rawremove+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8009018:	f107 030c 	add.w	r3, r7, #12
 800901c:	4618      	mov	r0, r3
 800901e:	f7fb f9c4 	bl	80043aa <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8009022:	f107 020c 	add.w	r2, r7, #12
 8009026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800902a:	3308      	adds	r3, #8
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7fc ffb2 	bl	8005f98 <lfs_dir_fetch>
 8009034:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8009036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <lfs_rawremove+0xc4>
            return err;
 800903c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800903e:	e070      	b.n	8009122 <lfs_rawremove+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8009040:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009044:	2b00      	cmp	r3, #0
 8009046:	d103      	bne.n	8009050 <lfs_rawremove+0xd4>
 8009048:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800904c:	2b00      	cmp	r3, #0
 800904e:	d002      	beq.n	8009056 <lfs_rawremove+0xda>
            return LFS_ERR_NOTEMPTY;
 8009050:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8009054:	e065      	b.n	8009122 <lfs_rawremove+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8009056:	2101      	movs	r1, #1
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 ffb3 	bl	8009fc4 <lfs_fs_preporphans>
 800905e:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8009060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <lfs_rawremove+0xee>
            return err;
 8009066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009068:	e05b      	b.n	8009122 <lfs_rawremove+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        dir.id = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	853b      	strh	r3, [r7, #40]	; 0x28
        lfs->mlist = &dir;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800907a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 800907c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800907e:	4618      	mov	r0, r3
 8009080:	f7fb fa32 	bl	80044e8 <lfs_tag_id>
 8009084:	4603      	mov	r3, r0
 8009086:	029b      	lsls	r3, r3, #10
 8009088:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800908c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8009090:	61fb      	str	r3, [r7, #28]
 8009092:	2300      	movs	r3, #0
 8009094:	623b      	str	r3, [r7, #32]
 8009096:	f107 021c 	add.w	r2, r7, #28
 800909a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800909e:	2301      	movs	r3, #1
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7fe fd4d 	bl	8007b40 <lfs_dir_commit>
 80090a6:	6778      	str	r0, [r7, #116]	; 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 80090a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d004      	beq.n	80090b8 <lfs_rawremove+0x13c>
        lfs->mlist = dir.next;
 80090ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 80090b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090b6:	e034      	b.n	8009122 <lfs_rawremove+0x1a6>
    }

    lfs->mlist = dir.next;
 80090b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 80090be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fb f9e7 	bl	8004494 <lfs_tag_type3>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d129      	bne.n	8009120 <lfs_rawremove+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 80090cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 ff77 	bl	8009fc4 <lfs_fs_preporphans>
 80090d6:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 80090d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <lfs_rawremove+0x166>
            return err;
 80090de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090e0:	e01f      	b.n	8009122 <lfs_rawremove+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 80090e2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80090e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090ea:	3308      	adds	r3, #8
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fe1e 	bl	8009d30 <lfs_fs_pred>
 80090f4:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 80090f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <lfs_rawremove+0x184>
            return err;
 80090fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090fe:	e010      	b.n	8009122 <lfs_rawremove+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8009100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009104:	f103 0208 	add.w	r2, r3, #8
 8009108:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7fd fb74 	bl	80067fc <lfs_dir_drop>
 8009114:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8009116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <lfs_rawremove+0x1a4>
            return err;
 800911c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800911e:	e000      	b.n	8009122 <lfs_rawremove+0x1a6>
        }
    }

    return 0;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3778      	adds	r7, #120	; 0x78
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	700ffc00 	.word	0x700ffc00

08009130 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8009130:	b580      	push	{r7, lr}
 8009132:	b08c      	sub	sp, #48	; 0x30
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d106      	bne.n	800915c <lfs_init+0x2c>
 800914e:	4b98      	ldr	r3, [pc, #608]	; (80093b0 <lfs_init+0x280>)
 8009150:	4a98      	ldr	r2, [pc, #608]	; (80093b4 <lfs_init+0x284>)
 8009152:	f241 0115 	movw	r1, #4117	; 0x1015
 8009156:	4898      	ldr	r0, [pc, #608]	; (80093b8 <lfs_init+0x288>)
 8009158:	f001 fdfc 	bl	800ad54 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d106      	bne.n	8009174 <lfs_init+0x44>
 8009166:	4b95      	ldr	r3, [pc, #596]	; (80093bc <lfs_init+0x28c>)
 8009168:	4a92      	ldr	r2, [pc, #584]	; (80093b4 <lfs_init+0x284>)
 800916a:	f241 0116 	movw	r1, #4118	; 0x1016
 800916e:	4892      	ldr	r0, [pc, #584]	; (80093b8 <lfs_init+0x288>)
 8009170:	f001 fdf0 	bl	800ad54 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917a:	2b00      	cmp	r3, #0
 800917c:	d106      	bne.n	800918c <lfs_init+0x5c>
 800917e:	4b90      	ldr	r3, [pc, #576]	; (80093c0 <lfs_init+0x290>)
 8009180:	4a8c      	ldr	r2, [pc, #560]	; (80093b4 <lfs_init+0x284>)
 8009182:	f241 0117 	movw	r1, #4119	; 0x1017
 8009186:	488c      	ldr	r0, [pc, #560]	; (80093b8 <lfs_init+0x288>)
 8009188:	f001 fde4 	bl	800ad54 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009196:	6952      	ldr	r2, [r2, #20]
 8009198:	fbb3 f1f2 	udiv	r1, r3, r2
 800919c:	fb01 f202 	mul.w	r2, r1, r2
 80091a0:	1a9b      	subs	r3, r3, r2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d006      	beq.n	80091b4 <lfs_init+0x84>
 80091a6:	4b87      	ldr	r3, [pc, #540]	; (80093c4 <lfs_init+0x294>)
 80091a8:	4a82      	ldr	r2, [pc, #520]	; (80093b4 <lfs_init+0x284>)
 80091aa:	f241 011b 	movw	r1, #4123	; 0x101b
 80091ae:	4882      	ldr	r0, [pc, #520]	; (80093b8 <lfs_init+0x288>)
 80091b0:	f001 fdd0 	bl	800ad54 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80091be:	6992      	ldr	r2, [r2, #24]
 80091c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80091c4:	fb01 f202 	mul.w	r2, r1, r2
 80091c8:	1a9b      	subs	r3, r3, r2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d006      	beq.n	80091dc <lfs_init+0xac>
 80091ce:	4b7e      	ldr	r3, [pc, #504]	; (80093c8 <lfs_init+0x298>)
 80091d0:	4a78      	ldr	r2, [pc, #480]	; (80093b4 <lfs_init+0x284>)
 80091d2:	f241 011c 	movw	r1, #4124	; 0x101c
 80091d6:	4878      	ldr	r0, [pc, #480]	; (80093b8 <lfs_init+0x288>)
 80091d8:	f001 fdbc 	bl	800ad54 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80091e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80091e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80091ec:	fb01 f202 	mul.w	r2, r1, r2
 80091f0:	1a9b      	subs	r3, r3, r2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d006      	beq.n	8009204 <lfs_init+0xd4>
 80091f6:	4b75      	ldr	r3, [pc, #468]	; (80093cc <lfs_init+0x29c>)
 80091f8:	4a6e      	ldr	r2, [pc, #440]	; (80093b4 <lfs_init+0x284>)
 80091fa:	f241 011d 	movw	r1, #4125	; 0x101d
 80091fe:	486e      	ldr	r0, [pc, #440]	; (80093b8 <lfs_init+0x288>)
 8009200:	f001 fda8 	bl	800ad54 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	2b7f      	cmp	r3, #127	; 0x7f
 800920c:	d806      	bhi.n	800921c <lfs_init+0xec>
 800920e:	4b70      	ldr	r3, [pc, #448]	; (80093d0 <lfs_init+0x2a0>)
 8009210:	4a68      	ldr	r2, [pc, #416]	; (80093b4 <lfs_init+0x284>)
 8009212:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8009216:	4868      	ldr	r0, [pc, #416]	; (80093b8 <lfs_init+0x288>)
 8009218:	f001 fd9c 	bl	800ad54 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	3b08      	subs	r3, #8
 8009224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009228:	fbb2 f3f3 	udiv	r3, r2, r3
 800922c:	4618      	mov	r0, r3
 800922e:	f7fa fc26 	bl	8003a7e <lfs_npw2>
 8009232:	4603      	mov	r3, r0
 8009234:	009a      	lsls	r2, r3, #2
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	429a      	cmp	r2, r3
 800923e:	d906      	bls.n	800924e <lfs_init+0x11e>
 8009240:	4b64      	ldr	r3, [pc, #400]	; (80093d4 <lfs_init+0x2a4>)
 8009242:	4a5c      	ldr	r2, [pc, #368]	; (80093b4 <lfs_init+0x284>)
 8009244:	f241 0123 	movw	r1, #4131	; 0x1023
 8009248:	485b      	ldr	r0, [pc, #364]	; (80093b8 <lfs_init+0x288>)
 800924a:	f001 fd83 	bl	800ad54 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	d106      	bne.n	8009266 <lfs_init+0x136>
 8009258:	4b5f      	ldr	r3, [pc, #380]	; (80093d8 <lfs_init+0x2a8>)
 800925a:	4a56      	ldr	r2, [pc, #344]	; (80093b4 <lfs_init+0x284>)
 800925c:	f241 012c 	movw	r1, #4140	; 0x102c
 8009260:	4855      	ldr	r0, [pc, #340]	; (80093b8 <lfs_init+0x288>)
 8009262:	f001 fd77 	bl	800ad54 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800926a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <lfs_init+0x14c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60da      	str	r2, [r3, #12]
 800927a:	e010      	b.n	800929e <lfs_init+0x16e>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009282:	4618      	mov	r0, r3
 8009284:	f7fa fc63 	bl	8003b4e <lfs_malloc>
 8009288:	4602      	mov	r2, r0
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d103      	bne.n	800929e <lfs_init+0x16e>
            err = LFS_ERR_NOMEM;
 8009296:	f06f 030b 	mvn.w	r3, #11
 800929a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800929c:	e0ff      	b.n	800949e <lfs_init+0x36e>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d005      	beq.n	80092b4 <lfs_init+0x184>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	61da      	str	r2, [r3, #28]
 80092b2:	e010      	b.n	80092d6 <lfs_init+0x1a6>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fa fc47 	bl	8003b4e <lfs_malloc>
 80092c0:	4602      	mov	r2, r0
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d103      	bne.n	80092d6 <lfs_init+0x1a6>
            err = LFS_ERR_NOMEM;
 80092ce:	f06f 030b 	mvn.w	r3, #11
 80092d2:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80092d4:	e0e3      	b.n	800949e <lfs_init+0x36e>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7fa fc5d 	bl	8003b9a <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3310      	adds	r3, #16
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7fa fc57 	bl	8003b9a <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d106      	bne.n	8009304 <lfs_init+0x1d4>
 80092f6:	4b39      	ldr	r3, [pc, #228]	; (80093dc <lfs_init+0x2ac>)
 80092f8:	4a2e      	ldr	r2, [pc, #184]	; (80093b4 <lfs_init+0x284>)
 80092fa:	f241 014a 	movw	r1, #4170	; 0x104a
 80092fe:	482e      	ldr	r0, [pc, #184]	; (80093b8 <lfs_init+0x288>)
 8009300:	f001 fd28 	bl	800ad54 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	f003 0307 	and.w	r3, r3, #7
 800930e:	2b00      	cmp	r3, #0
 8009310:	d106      	bne.n	8009320 <lfs_init+0x1f0>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	f003 0303 	and.w	r3, r3, #3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d006      	beq.n	800932e <lfs_init+0x1fe>
 8009320:	4b2f      	ldr	r3, [pc, #188]	; (80093e0 <lfs_init+0x2b0>)
 8009322:	4a24      	ldr	r2, [pc, #144]	; (80093b4 <lfs_init+0x284>)
 8009324:	f241 014b 	movw	r1, #4171	; 0x104b
 8009328:	4823      	ldr	r0, [pc, #140]	; (80093b8 <lfs_init+0x288>)
 800932a:	f001 fd13 	bl	800ad54 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <lfs_init+0x214>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800933c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	665a      	str	r2, [r3, #100]	; 0x64
 8009342:	e010      	b.n	8009366 <lfs_init+0x236>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934a:	4618      	mov	r0, r3
 800934c:	f7fa fbff 	bl	8003b4e <lfs_malloc>
 8009350:	4602      	mov	r2, r0
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800935a:	2b00      	cmp	r3, #0
 800935c:	d103      	bne.n	8009366 <lfs_init+0x236>
            err = LFS_ERR_NOMEM;
 800935e:	f06f 030b 	mvn.w	r3, #11
 8009362:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8009364:	e09b      	b.n	800949e <lfs_init+0x36e>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800936a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936c:	2bff      	cmp	r3, #255	; 0xff
 800936e:	d906      	bls.n	800937e <lfs_init+0x24e>
 8009370:	4b1c      	ldr	r3, [pc, #112]	; (80093e4 <lfs_init+0x2b4>)
 8009372:	4a10      	ldr	r2, [pc, #64]	; (80093b4 <lfs_init+0x284>)
 8009374:	f241 0158 	movw	r1, #4184	; 0x1058
 8009378:	480f      	ldr	r0, [pc, #60]	; (80093b8 <lfs_init+0x288>)
 800937a:	f001 fceb 	bl	800ad54 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d102      	bne.n	8009396 <lfs_init+0x266>
        lfs->name_max = LFS_NAME_MAX;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	22ff      	movs	r2, #255	; 0xff
 8009394:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800939a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939c:	2b00      	cmp	r3, #0
 800939e:	da25      	bge.n	80093ec <lfs_init+0x2bc>
 80093a0:	4b11      	ldr	r3, [pc, #68]	; (80093e8 <lfs_init+0x2b8>)
 80093a2:	4a04      	ldr	r2, [pc, #16]	; (80093b4 <lfs_init+0x284>)
 80093a4:	f241 015e 	movw	r1, #4190	; 0x105e
 80093a8:	4803      	ldr	r0, [pc, #12]	; (80093b8 <lfs_init+0x288>)
 80093aa:	f001 fcd3 	bl	800ad54 <__assert_func>
 80093ae:	bf00      	nop
 80093b0:	0800c2c4 	.word	0x0800c2c4
 80093b4:	0800cc88 	.word	0x0800cc88
 80093b8:	0800bf48 	.word	0x0800bf48
 80093bc:	0800c2e0 	.word	0x0800c2e0
 80093c0:	0800c2fc 	.word	0x0800c2fc
 80093c4:	0800c318 	.word	0x0800c318
 80093c8:	0800c348 	.word	0x0800c348
 80093cc:	0800c378 	.word	0x0800c378
 80093d0:	0800c3ac 	.word	0x0800c3ac
 80093d4:	0800c3c8 	.word	0x0800c3c8
 80093d8:	0800c414 	.word	0x0800c414
 80093dc:	0800c430 	.word	0x0800c430
 80093e0:	0800c450 	.word	0x0800c450
 80093e4:	0800c4a4 	.word	0x0800c4a4
 80093e8:	0800c4c0 	.word	0x0800c4c0
    lfs->file_max = lfs->cfg->file_max;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d103      	bne.n	8009406 <lfs_init+0x2d6>
        lfs->file_max = LFS_FILE_MAX;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009404:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800940a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800940c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8009410:	4293      	cmp	r3, r2
 8009412:	d906      	bls.n	8009422 <lfs_init+0x2f2>
 8009414:	4b26      	ldr	r3, [pc, #152]	; (80094b0 <lfs_init+0x380>)
 8009416:	4a27      	ldr	r2, [pc, #156]	; (80094b4 <lfs_init+0x384>)
 8009418:	f241 0164 	movw	r1, #4196	; 0x1064
 800941c:	4826      	ldr	r0, [pc, #152]	; (80094b8 <lfs_init+0x388>)
 800941e:	f001 fc99 	bl	800ad54 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009430:	2b00      	cmp	r3, #0
 8009432:	d103      	bne.n	800943c <lfs_init+0x30c>
        lfs->attr_max = LFS_ATTR_MAX;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800943a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	429a      	cmp	r2, r3
 800944a:	d906      	bls.n	800945a <lfs_init+0x32a>
 800944c:	4b1b      	ldr	r3, [pc, #108]	; (80094bc <lfs_init+0x38c>)
 800944e:	4a19      	ldr	r2, [pc, #100]	; (80094b4 <lfs_init+0x384>)
 8009450:	f241 016a 	movw	r1, #4202	; 0x106a
 8009454:	4818      	ldr	r0, [pc, #96]	; (80094b8 <lfs_init+0x388>)
 8009456:	f001 fc7d 	bl	800ad54 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009460:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009468:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	333c      	adds	r3, #60	; 0x3c
 800947a:	2200      	movs	r2, #0
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	605a      	str	r2, [r3, #4]
 8009480:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	3330      	adds	r3, #48	; 0x30
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	605a      	str	r2, [r3, #4]
 800948c:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3348      	adds	r3, #72	; 0x48
 8009492:	2200      	movs	r2, #0
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	605a      	str	r2, [r3, #4]
 8009498:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800949a:	2300      	movs	r3, #0
 800949c:	e003      	b.n	80094a6 <lfs_init+0x376>

cleanup:
    lfs_deinit(lfs);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f80e 	bl	80094c0 <lfs_deinit>
    return err;
 80094a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3730      	adds	r7, #48	; 0x30
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	0800c4e4 	.word	0x0800c4e4
 80094b4:	0800cc88 	.word	0x0800cc88
 80094b8:	0800bf48 	.word	0x0800bf48
 80094bc:	0800c500 	.word	0x0800c500

080094c0 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d104      	bne.n	80094dc <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fa fb45 	bl	8003b66 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d104      	bne.n	80094f0 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fa fb3b 	bl	8003b66 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d104      	bne.n	8009504 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fa fb31 	bl	8003b66 <lfs_free>
    }

    return 0;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8009510:	b580      	push	{r7, lr}
 8009512:	b0a0      	sub	sp, #128	; 0x80
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
    int err = 0;
 800951a:	2300      	movs	r3, #0
 800951c:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff fe05 	bl	8009130 <lfs_init>
 8009526:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009528:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <lfs_rawformat+0x22>
            return err;
 800952e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009530:	e084      	b.n	800963c <lfs_rawformat+0x12c>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800953a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953c:	461a      	mov	r2, r3
 800953e:	2100      	movs	r1, #0
 8009540:	f001 fe4f 	bl	800b1e2 <memset>
        lfs->free.off = 0;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009556:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8009558:	4619      	mov	r1, r3
 800955a:	4610      	mov	r0, r2
 800955c:	f7fa fa58 	bl	8003a10 <lfs_min>
 8009560:	4602      	mov	r2, r0
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7fb fa59 	bl	8004a24 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8009572:	f107 030c 	add.w	r3, r7, #12
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7fd f8c5 	bl	8006708 <lfs_dir_alloc>
 800957e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009580:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d151      	bne.n	800962a <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7fb f9ec 	bl	8004964 <lfs_fs_disk_version>
 800958c:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 800958e:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009594:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8009596:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800959c:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 800959e:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 80095a4:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 80095aa:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 80095b0:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 80095b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fb f94a 	bl	8004850 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80095bc:	4b21      	ldr	r3, [pc, #132]	; (8009644 <lfs_rawformat+0x134>)
 80095be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095c0:	2300      	movs	r3, #0
 80095c2:	653b      	str	r3, [r7, #80]	; 0x50
 80095c4:	4b20      	ldr	r3, [pc, #128]	; (8009648 <lfs_rawformat+0x138>)
 80095c6:	657b      	str	r3, [r7, #84]	; 0x54
 80095c8:	4b20      	ldr	r3, [pc, #128]	; (800964c <lfs_rawformat+0x13c>)
 80095ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80095cc:	4b20      	ldr	r3, [pc, #128]	; (8009650 <lfs_rawformat+0x140>)
 80095ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80095d4:	663b      	str	r3, [r7, #96]	; 0x60
 80095d6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80095da:	f107 010c 	add.w	r1, r7, #12
 80095de:	2303      	movs	r3, #3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7fe faad 	bl	8007b40 <lfs_dir_commit>
 80095e6:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80095e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d11f      	bne.n	800962e <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80095ee:	2300      	movs	r3, #0
 80095f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80095f4:	f107 010c 	add.w	r1, r7, #12
 80095f8:	2300      	movs	r3, #0
 80095fa:	2200      	movs	r2, #0
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fe fa9f 	bl	8007b40 <lfs_dir_commit>
 8009602:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009604:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009606:	2b00      	cmp	r3, #0
 8009608:	d113      	bne.n	8009632 <lfs_rawformat+0x122>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800960a:	2300      	movs	r3, #0
 800960c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800960e:	2301      	movs	r3, #1
 8009610:	633b      	str	r3, [r7, #48]	; 0x30
 8009612:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009616:	f107 030c 	add.w	r3, r7, #12
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7fc fcbb 	bl	8005f98 <lfs_dir_fetch>
 8009622:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009626:	2b00      	cmp	r3, #0
 8009628:	e004      	b.n	8009634 <lfs_rawformat+0x124>
            goto cleanup;
 800962a:	bf00      	nop
 800962c:	e002      	b.n	8009634 <lfs_rawformat+0x124>
            goto cleanup;
 800962e:	bf00      	nop
 8009630:	e000      	b.n	8009634 <lfs_rawformat+0x124>
            goto cleanup;
 8009632:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ff43 	bl	80094c0 <lfs_deinit>
    return err;
 800963a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 800963c:	4618      	mov	r0, r3
 800963e:	3780      	adds	r7, #128	; 0x80
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	40100000 	.word	0x40100000
 8009648:	0ff00008 	.word	0x0ff00008
 800964c:	0800c530 	.word	0x0800c530
 8009650:	20100018 	.word	0x20100018

08009654 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8009654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009656:	b09f      	sub	sp, #124	; 0x7c
 8009658:	af04      	add	r7, sp, #16
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7ff fd65 	bl	8009130 <lfs_init>
 8009666:	6678      	str	r0, [r7, #100]	; 0x64
    if (err) {
 8009668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <lfs_rawmount+0x1e>
        return err;
 800966e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009670:	e1f5      	b.n	8009a5e <lfs_rawmount+0x40a>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009672:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009676:	2220      	movs	r2, #32
 8009678:	2100      	movs	r1, #0
 800967a:	4618      	mov	r0, r3
 800967c:	f001 fdb1 	bl	800b1e2 <memset>
 8009680:	2301      	movs	r3, #1
 8009682:	653b      	str	r3, [r7, #80]	; 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009684:	4aa3      	ldr	r2, [pc, #652]	; (8009914 <lfs_rawmount+0x2c0>)
 8009686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800968a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800968e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009692:	2301      	movs	r3, #1
 8009694:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 8009696:	2301      	movs	r3, #1
 8009698:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 800969a:	e17f      	b.n	800999c <lfs_rawmount+0x348>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 800969c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80096a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80096a4:	3318      	adds	r3, #24
 80096a6:	4611      	mov	r1, r2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fa fe51 	bl	8004350 <lfs_pair_issync>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00a      	beq.n	80096ca <lfs_rawmount+0x76>
            LFS_WARN("Cycle detected in tail list");
 80096b4:	4b98      	ldr	r3, [pc, #608]	; (8009918 <lfs_rawmount+0x2c4>)
 80096b6:	f44f 5287 	mov.w	r2, #4320	; 0x10e0
 80096ba:	4998      	ldr	r1, [pc, #608]	; (800991c <lfs_rawmount+0x2c8>)
 80096bc:	4898      	ldr	r0, [pc, #608]	; (8009920 <lfs_rawmount+0x2cc>)
 80096be:	f001 fd23 	bl	800b108 <iprintf>
            err = LFS_ERR_CORRUPT;
 80096c2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80096c6:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 80096c8:	e1c5      	b.n	8009a56 <lfs_rawmount+0x402>
        }
        if (tortoise_i == tortoise_period) {
 80096ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d108      	bne.n	80096e4 <lfs_rawmount+0x90>
            tortoise[0] = dir.tail[0];
 80096d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise[1] = dir.tail[1];
 80096d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096d8:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise_i = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 80096de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 80096e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096e6:	3301      	adds	r3, #1
 80096e8:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	623b      	str	r3, [r7, #32]
 80096ee:	4b8d      	ldr	r3, [pc, #564]	; (8009924 <lfs_rawmount+0x2d0>)
 80096f0:	627b      	str	r3, [r7, #36]	; 0x24
 80096f2:	2308      	movs	r3, #8
 80096f4:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80096f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80096fa:	f103 0218 	add.w	r2, r3, #24
 80096fe:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009702:	f107 0320 	add.w	r3, r7, #32
 8009706:	9303      	str	r3, [sp, #12]
 8009708:	4b87      	ldr	r3, [pc, #540]	; (8009928 <lfs_rawmount+0x2d4>)
 800970a:	9302      	str	r3, [sp, #8]
 800970c:	2300      	movs	r3, #0
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	4b86      	ldr	r3, [pc, #536]	; (800992c <lfs_rawmount+0x2d8>)
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	4b86      	ldr	r3, [pc, #536]	; (8009930 <lfs_rawmount+0x2dc>)
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7fc f870 	bl	80057fc <lfs_dir_fetchmatch>
 800971c:	65b8      	str	r0, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800971e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009720:	2b00      	cmp	r3, #0
 8009722:	da02      	bge.n	800972a <lfs_rawmount+0xd6>
            err = tag;
 8009724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009726:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 8009728:	e195      	b.n	8009a56 <lfs_rawmount+0x402>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800972a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 8128 	beq.w	8009982 <lfs_rawmount+0x32e>
 8009732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009734:	4618      	mov	r0, r3
 8009736:	f7fa fe7a 	bl	800442e <lfs_tag_isdelete>
 800973a:	4603      	mov	r3, r0
 800973c:	f083 0301 	eor.w	r3, r3, #1
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 811d 	beq.w	8009982 <lfs_rawmount+0x32e>
            // update root
            lfs->root[0] = dir.pair[0];
 8009748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800974e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8009754:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009758:	f107 0308 	add.w	r3, r7, #8
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	4b75      	ldr	r3, [pc, #468]	; (8009934 <lfs_rawmount+0x2e0>)
 8009760:	4a73      	ldr	r2, [pc, #460]	; (8009930 <lfs_rawmount+0x2dc>)
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7fb fb18 	bl	8004d98 <lfs_dir_get>
 8009768:	65b8      	str	r0, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800976a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800976c:	2b00      	cmp	r3, #0
 800976e:	da02      	bge.n	8009776 <lfs_rawmount+0x122>
                err = tag;
 8009770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009772:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8009774:	e16f      	b.n	8009a56 <lfs_rawmount+0x402>
            }
            lfs_superblock_fromle32(&superblock);
 8009776:	f107 0308 	add.w	r3, r7, #8
 800977a:	4618      	mov	r0, r3
 800977c:	f7fb f830 	bl	80047e0 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	0c1b      	lsrs	r3, r3, #16
 8009784:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7fb f8f6 	bl	8004980 <lfs_fs_disk_version_major>
 8009794:	4603      	mov	r3, r0
 8009796:	461a      	mov	r2, r3
 8009798:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800979c:	4293      	cmp	r3, r2
 800979e:	d108      	bne.n	80097b2 <lfs_rawmount+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7fb f8fb 	bl	800499c <lfs_fs_disk_version_minor>
 80097a6:	4603      	mov	r3, r0
 80097a8:	461a      	mov	r2, r3
 80097aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d91d      	bls.n	80097ee <lfs_rawmount+0x19a>
                LFS_ERROR("Invalid version "
 80097b2:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 80097b6:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7fb f8e0 	bl	8004980 <lfs_fs_disk_version_major>
 80097c0:	4603      	mov	r3, r0
 80097c2:	461e      	mov	r6, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7fb f8e9 	bl	800499c <lfs_fs_disk_version_minor>
 80097ca:	4603      	mov	r3, r0
 80097cc:	461a      	mov	r2, r3
 80097ce:	4b52      	ldr	r3, [pc, #328]	; (8009918 <lfs_rawmount+0x2c4>)
 80097d0:	9303      	str	r3, [sp, #12]
 80097d2:	9202      	str	r2, [sp, #8]
 80097d4:	9601      	str	r6, [sp, #4]
 80097d6:	9400      	str	r4, [sp, #0]
 80097d8:	462b      	mov	r3, r5
 80097da:	f241 120e 	movw	r2, #4366	; 0x110e
 80097de:	494f      	ldr	r1, [pc, #316]	; (800991c <lfs_rawmount+0x2c8>)
 80097e0:	4855      	ldr	r0, [pc, #340]	; (8009938 <lfs_rawmount+0x2e4>)
 80097e2:	f001 fc91 	bl	800b108 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80097e6:	f06f 0315 	mvn.w	r3, #21
 80097ea:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80097ec:	e0c8      	b.n	8009980 <lfs_rawmount+0x32c>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7fb f8d4 	bl	800499c <lfs_fs_disk_version_minor>
 80097f4:	4603      	mov	r3, r0
 80097f6:	461a      	mov	r2, r3
 80097f8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d21d      	bcs.n	800983c <lfs_rawmount+0x1e8>
                LFS_DEBUG("Found older minor version "
 8009800:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 8009804:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7fb f8b9 	bl	8004980 <lfs_fs_disk_version_major>
 800980e:	4603      	mov	r3, r0
 8009810:	461e      	mov	r6, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fb f8c2 	bl	800499c <lfs_fs_disk_version_minor>
 8009818:	4603      	mov	r3, r0
 800981a:	461a      	mov	r2, r3
 800981c:	4b3e      	ldr	r3, [pc, #248]	; (8009918 <lfs_rawmount+0x2c4>)
 800981e:	9303      	str	r3, [sp, #12]
 8009820:	9202      	str	r2, [sp, #8]
 8009822:	9601      	str	r6, [sp, #4]
 8009824:	9400      	str	r4, [sp, #0]
 8009826:	462b      	mov	r3, r5
 8009828:	f241 121c 	movw	r2, #4380	; 0x111c
 800982c:	493b      	ldr	r1, [pc, #236]	; (800991c <lfs_rawmount+0x2c8>)
 800982e:	4843      	ldr	r0, [pc, #268]	; (800993c <lfs_rawmount+0x2e8>)
 8009830:	f001 fc6a 	bl	800b108 <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 8009834:	2101      	movs	r1, #1
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fbae 	bl	8009f98 <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d018      	beq.n	8009874 <lfs_rawmount+0x220>
                if (superblock.name_max > lfs->name_max) {
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009848:	429a      	cmp	r2, r3
 800984a:	d910      	bls.n	800986e <lfs_rawmount+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009852:	4931      	ldr	r1, [pc, #196]	; (8009918 <lfs_rawmount+0x2c4>)
 8009854:	9101      	str	r1, [sp, #4]
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	4613      	mov	r3, r2
 800985a:	f241 122a 	movw	r2, #4394	; 0x112a
 800985e:	492f      	ldr	r1, [pc, #188]	; (800991c <lfs_rawmount+0x2c8>)
 8009860:	4837      	ldr	r0, [pc, #220]	; (8009940 <lfs_rawmount+0x2ec>)
 8009862:	f001 fc51 	bl	800b108 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8009866:	f06f 0315 	mvn.w	r3, #21
 800986a:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 800986c:	e088      	b.n	8009980 <lfs_rawmount+0x32c>
                }

                lfs->name_max = superblock.name_max;
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d018      	beq.n	80098ac <lfs_rawmount+0x258>
                if (superblock.file_max > lfs->file_max) {
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009880:	429a      	cmp	r2, r3
 8009882:	d910      	bls.n	80098a6 <lfs_rawmount+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8009884:	69ba      	ldr	r2, [r7, #24]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988a:	4923      	ldr	r1, [pc, #140]	; (8009918 <lfs_rawmount+0x2c4>)
 800988c:	9101      	str	r1, [sp, #4]
 800988e:	9300      	str	r3, [sp, #0]
 8009890:	4613      	mov	r3, r2
 8009892:	f241 1235 	movw	r2, #4405	; 0x1135
 8009896:	4921      	ldr	r1, [pc, #132]	; (800991c <lfs_rawmount+0x2c8>)
 8009898:	482a      	ldr	r0, [pc, #168]	; (8009944 <lfs_rawmount+0x2f0>)
 800989a:	f001 fc35 	bl	800b108 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800989e:	f06f 0315 	mvn.w	r3, #21
 80098a2:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 80098a4:	e06c      	b.n	8009980 <lfs_rawmount+0x32c>
                }

                lfs->file_max = superblock.file_max;
 80098a6:	69ba      	ldr	r2, [r7, #24]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d018      	beq.n	80098e4 <lfs_rawmount+0x290>
                if (superblock.attr_max > lfs->attr_max) {
 80098b2:	69fa      	ldr	r2, [r7, #28]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d910      	bls.n	80098de <lfs_rawmount+0x28a>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098c2:	4915      	ldr	r1, [pc, #84]	; (8009918 <lfs_rawmount+0x2c4>)
 80098c4:	9101      	str	r1, [sp, #4]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	4613      	mov	r3, r2
 80098ca:	f44f 528a 	mov.w	r2, #4416	; 0x1140
 80098ce:	4913      	ldr	r1, [pc, #76]	; (800991c <lfs_rawmount+0x2c8>)
 80098d0:	481d      	ldr	r0, [pc, #116]	; (8009948 <lfs_rawmount+0x2f4>)
 80098d2:	f001 fc19 	bl	800b108 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80098d6:	f06f 0315 	mvn.w	r3, #21
 80098da:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 80098dc:	e050      	b.n	8009980 <lfs_rawmount+0x32c>
                }

                lfs->attr_max = superblock.attr_max;
 80098de:	69fa      	ldr	r2, [r7, #28]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d02f      	beq.n	8009950 <lfs_rawmount+0x2fc>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	4907      	ldr	r1, [pc, #28]	; (8009918 <lfs_rawmount+0x2c4>)
 80098fa:	9101      	str	r1, [sp, #4]
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	4613      	mov	r3, r2
 8009900:	f241 124a 	movw	r2, #4426	; 0x114a
 8009904:	4905      	ldr	r1, [pc, #20]	; (800991c <lfs_rawmount+0x2c8>)
 8009906:	4811      	ldr	r0, [pc, #68]	; (800994c <lfs_rawmount+0x2f8>)
 8009908:	f001 fbfe 	bl	800b108 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800990c:	f06f 0315 	mvn.w	r3, #21
 8009910:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8009912:	e035      	b.n	8009980 <lfs_rawmount+0x32c>
 8009914:	0800c080 	.word	0x0800c080
 8009918:	0800c03c 	.word	0x0800c03c
 800991c:	0800bf48 	.word	0x0800bf48
 8009920:	0800c53c 	.word	0x0800c53c
 8009924:	0800c530 	.word	0x0800c530
 8009928:	08006035 	.word	0x08006035
 800992c:	0ff00008 	.word	0x0ff00008
 8009930:	7ffffc00 	.word	0x7ffffc00
 8009934:	20100018 	.word	0x20100018
 8009938:	0800c568 	.word	0x0800c568
 800993c:	0800c5a0 	.word	0x0800c5a0
 8009940:	0800c5e0 	.word	0x0800c5e0
 8009944:	0800c614 	.word	0x0800c614
 8009948:	0800c648 	.word	0x0800c648
 800994c:	0800c67c 	.word	0x0800c67c
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	429a      	cmp	r2, r3
 800995a:	d012      	beq.n	8009982 <lfs_rawmount+0x32e>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	4940      	ldr	r1, [pc, #256]	; (8009a68 <lfs_rawmount+0x414>)
 8009966:	9101      	str	r1, [sp, #4]
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	4613      	mov	r3, r2
 800996c:	f241 1251 	movw	r2, #4433	; 0x1151
 8009970:	493e      	ldr	r1, [pc, #248]	; (8009a6c <lfs_rawmount+0x418>)
 8009972:	483f      	ldr	r0, [pc, #252]	; (8009a70 <lfs_rawmount+0x41c>)
 8009974:	f001 fbc8 	bl	800b108 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8009978:	f06f 0315 	mvn.w	r3, #21
 800997c:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 800997e:	bf00      	nop
            goto cleanup;
 8009980:	e069      	b.n	8009a56 <lfs_rawmount+0x402>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7fc fb1e 	bl	8005fd0 <lfs_dir_getgstate>
 8009994:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 8009996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009998:	2b00      	cmp	r3, #0
 800999a:	d15b      	bne.n	8009a54 <lfs_rawmount+0x400>
    while (!lfs_pair_isnull(dir.tail)) {
 800999c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80099a0:	3318      	adds	r3, #24
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fa fc8f 	bl	80042c6 <lfs_pair_isnull>
 80099a8:	4603      	mov	r3, r0
 80099aa:	f083 0301 	eor.w	r3, r3, #1
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f47f ae73 	bne.w	800969c <lfs_rawmount+0x48>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	3320      	adds	r3, #32
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fa fc83 	bl	80042c6 <lfs_pair_isnull>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <lfs_rawmount+0x37a>
        err = LFS_ERR_INVAL;
 80099c6:	f06f 0315 	mvn.w	r3, #21
 80099ca:	667b      	str	r3, [r7, #100]	; 0x64
        goto cleanup;
 80099cc:	e043      	b.n	8009a56 <lfs_rawmount+0x402>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	3330      	adds	r3, #48	; 0x30
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fa fdde 	bl	8004594 <lfs_gstate_iszero>
 80099d8:	4603      	mov	r3, r0
 80099da:	f083 0301 	eor.w	r3, r3, #1
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d010      	beq.n	8009a06 <lfs_rawmount+0x3b2>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80099f0:	481d      	ldr	r0, [pc, #116]	; (8009a68 <lfs_rawmount+0x414>)
 80099f2:	9002      	str	r0, [sp, #8]
 80099f4:	9201      	str	r2, [sp, #4]
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	460b      	mov	r3, r1
 80099fa:	f241 1267 	movw	r2, #4455	; 0x1167
 80099fe:	491b      	ldr	r1, [pc, #108]	; (8009a6c <lfs_rawmount+0x418>)
 8009a00:	481c      	ldr	r0, [pc, #112]	; (8009a74 <lfs_rawmount+0x420>)
 8009a02:	f001 fb81 	bl	800b108 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fa fd01 	bl	8004412 <lfs_tag_isvalid>
 8009a10:	4603      	mov	r3, r0
 8009a12:	f083 0301 	eor.w	r3, r3, #1
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	461a      	mov	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1e:	441a      	add	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	333c      	adds	r3, #60	; 0x3c
 8009a2a:	3230      	adds	r2, #48	; 0x30
 8009a2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009a3a:	6a12      	ldr	r2, [r2, #32]
 8009a3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a40:	fb01 f202 	mul.w	r2, r1, r2
 8009a44:	1a9a      	subs	r2, r3, r2
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7fa fff9 	bl	8004a42 <lfs_alloc_drop>

    return 0;
 8009a50:	2300      	movs	r3, #0
 8009a52:	e004      	b.n	8009a5e <lfs_rawmount+0x40a>
            goto cleanup;
 8009a54:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f80e 	bl	8009a78 <lfs_rawunmount>
    return err;
 8009a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	376c      	adds	r7, #108	; 0x6c
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a66:	bf00      	nop
 8009a68:	0800c03c 	.word	0x0800c03c
 8009a6c:	0800bf48 	.word	0x0800bf48
 8009a70:	0800c6b0 	.word	0x0800c6b0
 8009a74:	0800c6e0 	.word	0x0800c6e0

08009a78 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f7ff fd1d 	bl	80094c0 <lfs_deinit>
 8009a86:	4603      	mov	r3, r0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8009a90:	b590      	push	{r4, r7, lr}
 8009a92:	b0a1      	sub	sp, #132	; 0x84
 8009a94:	af04      	add	r7, sp, #16
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f001 fb9b 	bl	800b1e2 <memset>
 8009aac:	2301      	movs	r3, #1
 8009aae:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009ab0:	4a9a      	ldr	r2, [pc, #616]	; (8009d1c <lfs_fs_rawtraverse+0x28c>)
 8009ab2:	f107 031c 	add.w	r3, r7, #28
 8009ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009aba:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8009ac6:	e0c0      	b.n	8009c4a <lfs_fs_rawtraverse+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8009ac8:	f107 021c 	add.w	r2, r7, #28
 8009acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ad0:	3318      	adds	r3, #24
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fa fc3b 	bl	8004350 <lfs_pair_issync>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d009      	beq.n	8009af4 <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 8009ae0:	4b8f      	ldr	r3, [pc, #572]	; (8009d20 <lfs_fs_rawtraverse+0x290>)
 8009ae2:	f241 12be 	movw	r2, #4542	; 0x11be
 8009ae6:	498f      	ldr	r1, [pc, #572]	; (8009d24 <lfs_fs_rawtraverse+0x294>)
 8009ae8:	488f      	ldr	r0, [pc, #572]	; (8009d28 <lfs_fs_rawtraverse+0x298>)
 8009aea:	f001 fb0d 	bl	800b108 <iprintf>
            return LFS_ERR_CORRUPT;
 8009aee:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009af2:	e10f      	b.n	8009d14 <lfs_fs_rawtraverse+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8009af4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d108      	bne.n	8009b0e <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 8009afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009afe:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8009b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b02:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 8009b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 8009b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b10:	3301      	adds	r3, #1
 8009b12:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 8009b14:	2300      	movs	r3, #0
 8009b16:	667b      	str	r3, [r7, #100]	; 0x64
 8009b18:	e013      	b.n	8009b42 <lfs_fs_rawtraverse+0xb2>
            int err = cb(data, dir.tail[i]);
 8009b1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b1c:	3306      	adds	r3, #6
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	3370      	adds	r3, #112	; 0x70
 8009b22:	443b      	add	r3, r7
 8009b24:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	4798      	blx	r3
 8009b30:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 8009b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <lfs_fs_rawtraverse+0xac>
                return err;
 8009b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b3a:	e0eb      	b.n	8009d14 <lfs_fs_rawtraverse+0x284>
        for (int i = 0; i < 2; i++) {
 8009b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b3e:	3301      	adds	r3, #1
 8009b40:	667b      	str	r3, [r7, #100]	; 0x64
 8009b42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	dde8      	ble.n	8009b1a <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8009b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b4c:	f103 0218 	add.w	r2, r3, #24
 8009b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b54:	4619      	mov	r1, r3
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7fc fa1e 	bl	8005f98 <lfs_dir_fetch>
 8009b5c:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8009b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <lfs_fs_rawtraverse+0xd8>
            return err;
 8009b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b66:	e0d5      	b.n	8009d14 <lfs_fs_rawtraverse+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009b6e:	e067      	b.n	8009c40 <lfs_fs_rawtraverse+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8009b70:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009b74:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8009b76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b7a:	f043 0308 	orr.w	r3, r3, #8
 8009b7e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009b82:	f107 0214 	add.w	r2, r7, #20
 8009b86:	9200      	str	r2, [sp, #0]
 8009b88:	4a68      	ldr	r2, [pc, #416]	; (8009d2c <lfs_fs_rawtraverse+0x29c>)
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f7fb f904 	bl	8004d98 <lfs_dir_get>
 8009b90:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 8009b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	da05      	bge.n	8009ba4 <lfs_fs_rawtraverse+0x114>
                if (tag == LFS_ERR_NOENT) {
 8009b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b9a:	f113 0f02 	cmn.w	r3, #2
 8009b9e:	d049      	beq.n	8009c34 <lfs_fs_rawtraverse+0x1a4>
                    continue;
                }
                return tag;
 8009ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ba2:	e0b7      	b.n	8009d14 <lfs_fs_rawtraverse+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 8009ba4:	f107 0314 	add.w	r3, r7, #20
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fa fde9 	bl	8004780 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8009bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fa fc6f 	bl	8004494 <lfs_tag_type3>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f240 2302 	movw	r3, #514	; 0x202
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d113      	bne.n	8009bea <lfs_fs_rawtraverse+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8009bc2:	68f9      	ldr	r1, [r7, #12]
 8009bc4:	6978      	ldr	r0, [r7, #20]
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	9202      	str	r2, [sp, #8]
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	9201      	str	r2, [sp, #4]
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	460a      	mov	r2, r1
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f7fe f981 	bl	8007ee0 <lfs_ctz_traverse>
 8009bde:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8009be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d027      	beq.n	8009c36 <lfs_fs_rawtraverse+0x1a6>
                    return err;
 8009be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be8:	e094      	b.n	8009d14 <lfs_fs_rawtraverse+0x284>
                }
            } else if (includeorphans &&
 8009bea:	78fb      	ldrb	r3, [r7, #3]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d022      	beq.n	8009c36 <lfs_fs_rawtraverse+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8009bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fa fc4e 	bl	8004494 <lfs_tag_type3>
 8009bf8:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8009bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bfe:	d11a      	bne.n	8009c36 <lfs_fs_rawtraverse+0x1a6>
                for (int i = 0; i < 2; i++) {
 8009c00:	2300      	movs	r3, #0
 8009c02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c04:	e012      	b.n	8009c2c <lfs_fs_rawtraverse+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 8009c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	f107 0214 	add.w	r2, r7, #20
 8009c0e:	4413      	add	r3, r2
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	4611      	mov	r1, r2
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	4798      	blx	r3
 8009c1a:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 8009c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <lfs_fs_rawtraverse+0x196>
                        return err;
 8009c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c24:	e076      	b.n	8009d14 <lfs_fs_rawtraverse+0x284>
                for (int i = 0; i < 2; i++) {
 8009c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c28:	3301      	adds	r3, #1
 8009c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	dde9      	ble.n	8009c06 <lfs_fs_rawtraverse+0x176>
 8009c32:	e000      	b.n	8009c36 <lfs_fs_rawtraverse+0x1a6>
                    continue;
 8009c34:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8009c36:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009c40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c42:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d392      	bcc.n	8009b70 <lfs_fs_rawtraverse+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 8009c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c4e:	3318      	adds	r3, #24
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fa fb38 	bl	80042c6 <lfs_pair_isnull>
 8009c56:	4603      	mov	r3, r0
 8009c58:	f083 0301 	eor.w	r3, r3, #1
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f47f af32 	bne.w	8009ac8 <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c68:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c6a:	e04f      	b.n	8009d0c <lfs_fs_rawtraverse+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8009c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c6e:	799b      	ldrb	r3, [r3, #6]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d147      	bne.n	8009d04 <lfs_fs_rawtraverse+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8009c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d01d      	beq.n	8009cbc <lfs_fs_rawtraverse+0x22c>
 8009c80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d117      	bne.n	8009cbc <lfs_fs_rawtraverse+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c8e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c96:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8009c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	9202      	str	r2, [sp, #8]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	9201      	str	r2, [sp, #4]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	4623      	mov	r3, r4
 8009ca8:	4602      	mov	r2, r0
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7fe f918 	bl	8007ee0 <lfs_ctz_traverse>
 8009cb0:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8009cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <lfs_fs_rawtraverse+0x22c>
                return err;
 8009cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cba:	e02b      	b.n	8009d14 <lfs_fs_rawtraverse+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8009cbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01e      	beq.n	8009d06 <lfs_fs_rawtraverse+0x276>
 8009cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d118      	bne.n	8009d06 <lfs_fs_rawtraverse+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cd6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cde:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	9202      	str	r2, [sp, #8]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	9201      	str	r2, [sp, #4]
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	4623      	mov	r3, r4
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f7fe f8f4 	bl	8007ee0 <lfs_ctz_traverse>
 8009cf8:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8009cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <lfs_fs_rawtraverse+0x276>
                return err;
 8009d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d02:	e007      	b.n	8009d14 <lfs_fs_rawtraverse+0x284>
            continue;
 8009d04:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1ac      	bne.n	8009c6c <lfs_fs_rawtraverse+0x1dc>
            }
        }
    }
#endif

    return 0;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3774      	adds	r7, #116	; 0x74
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd90      	pop	{r4, r7, pc}
 8009d1c:	0800c080 	.word	0x0800c080
 8009d20:	0800c03c 	.word	0x0800c03c
 8009d24:	0800bf48 	.word	0x0800bf48
 8009d28:	0800c53c 	.word	0x0800c53c
 8009d2c:	700ffc00 	.word	0x700ffc00

08009d30 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08a      	sub	sp, #40	; 0x28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009d48:	4a2d      	ldr	r2, [pc, #180]	; (8009e00 <lfs_fs_pred+0xd0>)
 8009d4a:	f107 0314 	add.w	r3, r7, #20
 8009d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d52:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009d56:	2301      	movs	r3, #1
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8009d5e:	e03e      	b.n	8009dde <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	3318      	adds	r3, #24
 8009d64:	f107 0214 	add.w	r2, r7, #20
 8009d68:	4611      	mov	r1, r2
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fa faf0 	bl	8004350 <lfs_pair_issync>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d009      	beq.n	8009d8a <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8009d76:	4b23      	ldr	r3, [pc, #140]	; (8009e04 <lfs_fs_pred+0xd4>)
 8009d78:	f241 221c 	movw	r2, #4636	; 0x121c
 8009d7c:	4922      	ldr	r1, [pc, #136]	; (8009e08 <lfs_fs_pred+0xd8>)
 8009d7e:	4823      	ldr	r0, [pc, #140]	; (8009e0c <lfs_fs_pred+0xdc>)
 8009d80:	f001 f9c2 	bl	800b108 <iprintf>
            return LFS_ERR_CORRUPT;
 8009d84:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009d88:	e036      	b.n	8009df8 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8009d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d10a      	bne.n	8009da8 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	69db      	ldr	r3, [r3, #28]
 8009d9c:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	3301      	adds	r3, #1
 8009dac:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	3318      	adds	r3, #24
 8009db2:	68b9      	ldr	r1, [r7, #8]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fa faa1 	bl	80042fc <lfs_pair_cmp>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <lfs_fs_pred+0x94>
            return 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	e019      	b.n	8009df8 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3318      	adds	r3, #24
 8009dc8:	461a      	mov	r2, r3
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f7fc f8e3 	bl	8005f98 <lfs_dir_fetch>
 8009dd2:	61f8      	str	r0, [r7, #28]
        if (err) {
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <lfs_fs_pred+0xae>
            return err;
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	e00c      	b.n	8009df8 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	3318      	adds	r3, #24
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fa fa6f 	bl	80042c6 <lfs_pair_isnull>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f083 0301 	eor.w	r3, r3, #1
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1b5      	bne.n	8009d60 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8009df4:	f06f 0301 	mvn.w	r3, #1
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3728      	adds	r7, #40	; 0x28
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	0800c080 	.word	0x0800c080
 8009e04:	0800c03c 	.word	0x0800c03c
 8009e08:	0800bf48 	.word	0x0800bf48
 8009e0c:	0800c53c 	.word	0x0800c53c

08009e10 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8009e10:	b5b0      	push	{r4, r5, r7, lr}
 8009e12:	b08e      	sub	sp, #56	; 0x38
 8009e14:	af04      	add	r7, sp, #16
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8009e30:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e36:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	69fa      	ldr	r2, [r7, #28]
 8009e3e:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8009e40:	2108      	movs	r1, #8
 8009e42:	9103      	str	r1, [sp, #12]
 8009e44:	f107 0110 	add.w	r1, r7, #16
 8009e48:	9102      	str	r1, [sp, #8]
 8009e4a:	9201      	str	r2, [sp, #4]
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	462b      	mov	r3, r5
 8009e50:	4622      	mov	r2, r4
 8009e52:	4601      	mov	r1, r0
 8009e54:	6a38      	ldr	r0, [r7, #32]
 8009e56:	f7f9 feb7 	bl	8003bc8 <lfs_bd_read>
 8009e5a:	61b8      	str	r0, [r7, #24]
    if (err) {
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <lfs_fs_parent_match+0x56>
        return err;
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	e012      	b.n	8009e8c <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8009e66:	f107 0310 	add.w	r3, r7, #16
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fa fa9d 	bl	80043aa <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	1d1a      	adds	r2, r3, #4
 8009e74:	f107 0310 	add.w	r3, r7, #16
 8009e78:	4611      	mov	r1, r2
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fa fa3e 	bl	80042fc <lfs_pair_cmp>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bf14      	ite	ne
 8009e86:	2301      	movne	r3, #1
 8009e88:	2300      	moveq	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3728      	adds	r7, #40	; 0x28
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bdb0      	pop	{r4, r5, r7, pc}

08009e94 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b090      	sub	sp, #64	; 0x40
 8009e98:	af04      	add	r7, sp, #16
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009eac:	4a33      	ldr	r2, [pc, #204]	; (8009f7c <lfs_fs_parent+0xe8>)
 8009eae:	f107 031c 	add.w	r3, r7, #28
 8009eb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009eb6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8009ec2:	e04a      	b.n	8009f5a <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	3318      	adds	r3, #24
 8009ec8:	f107 021c 	add.w	r2, r7, #28
 8009ecc:	4611      	mov	r1, r2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fa fa3e 	bl	8004350 <lfs_pair_issync>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d009      	beq.n	8009eee <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8009eda:	4b29      	ldr	r3, [pc, #164]	; (8009f80 <lfs_fs_parent+0xec>)
 8009edc:	f241 225d 	movw	r2, #4701	; 0x125d
 8009ee0:	4928      	ldr	r1, [pc, #160]	; (8009f84 <lfs_fs_parent+0xf0>)
 8009ee2:	4829      	ldr	r0, [pc, #164]	; (8009f88 <lfs_fs_parent+0xf4>)
 8009ee4:	f001 f910 	bl	800b108 <iprintf>
            return LFS_ERR_CORRUPT;
 8009ee8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009eec:	e042      	b.n	8009f74 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8009eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d10a      	bne.n	8009f0c <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 8009f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0e:	3301      	adds	r3, #1
 8009f10:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009f20:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	3304      	adds	r3, #4
 8009f26:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009f28:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8009f2a:	f107 0310 	add.w	r3, r7, #16
 8009f2e:	9303      	str	r3, [sp, #12]
 8009f30:	4b16      	ldr	r3, [pc, #88]	; (8009f8c <lfs_fs_parent+0xf8>)
 8009f32:	9302      	str	r3, [sp, #8]
 8009f34:	2300      	movs	r3, #0
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	4b15      	ldr	r3, [pc, #84]	; (8009f90 <lfs_fs_parent+0xfc>)
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	4b15      	ldr	r3, [pc, #84]	; (8009f94 <lfs_fs_parent+0x100>)
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f7fb fc5b 	bl	80057fc <lfs_dir_fetchmatch>
 8009f46:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <lfs_fs_parent+0xc6>
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	f113 0f02 	cmn.w	r3, #2
 8009f54:	d001      	beq.n	8009f5a <lfs_fs_parent+0xc6>
            return tag;
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	e00c      	b.n	8009f74 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	3318      	adds	r3, #24
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fa f9b1 	bl	80042c6 <lfs_pair_isnull>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f083 0301 	eor.w	r3, r3, #1
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1a9      	bne.n	8009ec4 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8009f70:	f06f 0301 	mvn.w	r3, #1
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3730      	adds	r7, #48	; 0x30
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	0800c080 	.word	0x0800c080
 8009f80:	0800c03c 	.word	0x0800c03c
 8009f84:	0800bf48 	.word	0x0800bf48
 8009f88:	0800c53c 	.word	0x0800c53c
 8009f8c:	08009e11 	.word	0x08009e11
 8009f90:	20000008 	.word	0x20000008
 8009f94:	7ff003ff 	.word	0x7ff003ff

08009f98 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	025b      	lsls	r3, r3, #9
 8009fb0:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009fb6:	bf00      	nop
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
	...

08009fc4 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8009fc4:	b590      	push	{r4, r7, lr}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fa fa97 	bl	8004508 <lfs_tag_size>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10a      	bne.n	8009ff6 <lfs_fs_preporphans+0x32>
 8009fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	da06      	bge.n	8009ff6 <lfs_fs_preporphans+0x32>
 8009fe8:	4b1a      	ldr	r3, [pc, #104]	; (800a054 <lfs_fs_preporphans+0x90>)
 8009fea:	4a1b      	ldr	r2, [pc, #108]	; (800a058 <lfs_fs_preporphans+0x94>)
 8009fec:	f241 217e 	movw	r1, #4734	; 0x127e
 8009ff0:	481a      	ldr	r0, [pc, #104]	; (800a05c <lfs_fs_preporphans+0x98>)
 8009ff2:	f000 feaf 	bl	800ad54 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fa fa84 	bl	8004508 <lfs_tag_size>
 800a000:	4603      	mov	r3, r0
 800a002:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800a006:	d90a      	bls.n	800a01e <lfs_fs_preporphans+0x5a>
 800a008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	dd06      	ble.n	800a01e <lfs_fs_preporphans+0x5a>
 800a010:	4b13      	ldr	r3, [pc, #76]	; (800a060 <lfs_fs_preporphans+0x9c>)
 800a012:	4a11      	ldr	r2, [pc, #68]	; (800a058 <lfs_fs_preporphans+0x94>)
 800a014:	f241 217f 	movw	r1, #4735	; 0x127f
 800a018:	4810      	ldr	r0, [pc, #64]	; (800a05c <lfs_fs_preporphans+0x98>)
 800a01a:	f000 fe9b 	bl	800ad54 <__assert_func>
    lfs->gstate.tag += orphans;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a026:	441a      	add	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a030:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3330      	adds	r3, #48	; 0x30
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fa fac8 	bl	80045ce <lfs_gstate_hasorphans>
 800a03e:	4603      	mov	r3, r0
 800a040:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800a042:	ea44 0203 	orr.w	r2, r4, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	bd90      	pop	{r4, r7, pc}
 800a054:	0800c718 	.word	0x0800c718
 800a058:	0800cc94 	.word	0x0800cc94
 800a05c:	0800bf48 	.word	0x0800bf48
 800a060:	0800c750 	.word	0x0800c750

0800a064 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	460b      	mov	r3, r1
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a076:	4a17      	ldr	r2, [pc, #92]	; (800a0d4 <lfs_fs_prepmove+0x70>)
 800a078:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800a07a:	897b      	ldrh	r3, [r7, #10]
 800a07c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a080:	428b      	cmp	r3, r1
 800a082:	d006      	beq.n	800a092 <lfs_fs_prepmove+0x2e>
 800a084:	897b      	ldrh	r3, [r7, #10]
 800a086:	029b      	lsls	r3, r3, #10
 800a088:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a08c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a090:	e000      	b.n	800a094 <lfs_fs_prepmove+0x30>
 800a092:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800a094:	431a      	orrs	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800a09a:	897b      	ldrh	r3, [r7, #10]
 800a09c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d002      	beq.n	800a0aa <lfs_fs_prepmove+0x46>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	e000      	b.n	800a0ac <lfs_fs_prepmove+0x48>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800a0b0:	897b      	ldrh	r3, [r7, #10]
 800a0b2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d003      	beq.n	800a0c2 <lfs_fs_prepmove+0x5e>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	e000      	b.n	800a0c4 <lfs_fs_prepmove+0x60>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a0c8:	bf00      	nop
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr
 800a0d4:	800003ff 	.word	0x800003ff

0800a0d8 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b098      	sub	sp, #96	; 0x60
 800a0dc:	af02      	add	r7, sp, #8
 800a0de:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3330      	adds	r3, #48	; 0x30
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fa faa7 	bl	8004638 <lfs_gstate_needssuperblock>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	f083 0301 	eor.w	r3, r3, #1
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <lfs_fs_desuperblock+0x22>
        return 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e04f      	b.n	800a19a <lfs_fs_desuperblock+0xc2>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a1a      	ldr	r2, [r3, #32]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	4928      	ldr	r1, [pc, #160]	; (800a1a4 <lfs_fs_desuperblock+0xcc>)
 800a104:	9101      	str	r1, [sp, #4]
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	4613      	mov	r3, r2
 800a10a:	f241 2298 	movw	r2, #4760	; 0x1298
 800a10e:	4926      	ldr	r1, [pc, #152]	; (800a1a8 <lfs_fs_desuperblock+0xd0>)
 800a110:	4826      	ldr	r0, [pc, #152]	; (800a1ac <lfs_fs_desuperblock+0xd4>)
 800a112:	f000 fff9 	bl	800b108 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f103 0220 	add.w	r2, r3, #32
 800a11c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7fb ff38 	bl	8005f98 <lfs_dir_fetch>
 800a128:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 800a12a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <lfs_fs_desuperblock+0x5c>
        return err;
 800a130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a132:	e032      	b.n	800a19a <lfs_fs_desuperblock+0xc2>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7fa fc15 	bl	8004964 <lfs_fs_disk_version>
 800a13a:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 800a13c:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a142:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 800a144:	623b      	str	r3, [r7, #32]
        .block_count = lfs->cfg->block_count,
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a14a:	6a1b      	ldr	r3, [r3, #32]
    lfs_superblock_t superblock = {
 800a14c:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 800a152:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 800a158:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 800a15e:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 800a160:	f107 031c 	add.w	r3, r7, #28
 800a164:	4618      	mov	r0, r3
 800a166:	f7fa fb73 	bl	8004850 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800a16a:	4b11      	ldr	r3, [pc, #68]	; (800a1b0 <lfs_fs_desuperblock+0xd8>)
 800a16c:	617b      	str	r3, [r7, #20]
 800a16e:	f107 031c 	add.w	r3, r7, #28
 800a172:	61bb      	str	r3, [r7, #24]
 800a174:	f107 0214 	add.w	r2, r7, #20
 800a178:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a17c:	2301      	movs	r3, #1
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7fd fcde 	bl	8007b40 <lfs_dir_commit>
 800a184:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 800a186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <lfs_fs_desuperblock+0xb8>
        return err;
 800a18c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a18e:	e004      	b.n	800a19a <lfs_fs_desuperblock+0xc2>
    }

    lfs_fs_prepsuperblock(lfs, false);
 800a190:	2100      	movs	r1, #0
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7ff ff00 	bl	8009f98 <lfs_fs_prepsuperblock>
    return 0;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3758      	adds	r7, #88	; 0x58
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	0800c03c 	.word	0x0800c03c
 800a1a8:	0800bf48 	.word	0x0800bf48
 800a1ac:	0800c788 	.word	0x0800c788
 800a1b0:	20100018 	.word	0x20100018

0800a1b4 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800a1b4:	b5b0      	push	{r4, r5, r7, lr}
 800a1b6:	b094      	sub	sp, #80	; 0x50
 800a1b8:	af04      	add	r7, sp, #16
 800a1ba:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	333c      	adds	r3, #60	; 0x3c
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fa fa26 	bl	8004612 <lfs_gstate_hasmove>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	f083 0301 	eor.w	r3, r3, #1
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d001      	beq.n	800a1d6 <lfs_fs_demove+0x22>
        return 0;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	e05b      	b.n	800a28e <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fa f980 	bl	80044e8 <lfs_tag_id>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	4b2a      	ldr	r3, [pc, #168]	; (800a298 <lfs_fs_demove+0xe4>)
 800a1ee:	9302      	str	r3, [sp, #8]
 800a1f0:	9201      	str	r2, [sp, #4]
 800a1f2:	9400      	str	r4, [sp, #0]
 800a1f4:	462b      	mov	r3, r5
 800a1f6:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800a1fa:	4928      	ldr	r1, [pc, #160]	; (800a29c <lfs_fs_demove+0xe8>)
 800a1fc:	4828      	ldr	r0, [pc, #160]	; (800a2a0 <lfs_fs_demove+0xec>)
 800a1fe:	f000 ff83 	bl	800b108 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a206:	4618      	mov	r0, r3
 800a208:	f7fa f944 	bl	8004494 <lfs_tag_type3>
 800a20c:	4603      	mov	r3, r0
 800a20e:	461a      	mov	r2, r3
 800a210:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800a214:	429a      	cmp	r2, r3
 800a216:	d006      	beq.n	800a226 <lfs_fs_demove+0x72>
 800a218:	4b22      	ldr	r3, [pc, #136]	; (800a2a4 <lfs_fs_demove+0xf0>)
 800a21a:	4a23      	ldr	r2, [pc, #140]	; (800a2a8 <lfs_fs_demove+0xf4>)
 800a21c:	f241 21c7 	movw	r1, #4807	; 0x12c7
 800a220:	481e      	ldr	r0, [pc, #120]	; (800a29c <lfs_fs_demove+0xe8>)
 800a222:	f000 fd97 	bl	800ad54 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a22c:	f107 0318 	add.w	r3, r7, #24
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7fb feb0 	bl	8005f98 <lfs_dir_fetch>
 800a238:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 800a23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <lfs_fs_demove+0x90>
        return err;
 800a240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a242:	e024      	b.n	800a28e <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fa f94d 	bl	80044e8 <lfs_tag_id>
 800a24e:	4603      	mov	r3, r0
 800a250:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800a252:	2200      	movs	r2, #0
 800a254:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff ff03 	bl	800a064 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800a25e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a260:	029b      	lsls	r3, r3, #10
 800a262:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a266:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a26a:	613b      	str	r3, [r7, #16]
 800a26c:	2300      	movs	r3, #0
 800a26e:	617b      	str	r3, [r7, #20]
 800a270:	f107 0210 	add.w	r2, r7, #16
 800a274:	f107 0118 	add.w	r1, r7, #24
 800a278:	2301      	movs	r3, #1
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7fd fc60 	bl	8007b40 <lfs_dir_commit>
 800a280:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800a282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <lfs_fs_demove+0xd8>
        return err;
 800a288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a28a:	e000      	b.n	800a28e <lfs_fs_demove+0xda>
    }

    return 0;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3740      	adds	r7, #64	; 0x40
 800a292:	46bd      	mov	sp, r7
 800a294:	bdb0      	pop	{r4, r5, r7, pc}
 800a296:	bf00      	nop
 800a298:	0800c03c 	.word	0x0800c03c
 800a29c:	0800bf48 	.word	0x0800bf48
 800a2a0:	0800c7bc 	.word	0x0800c7bc
 800a2a4:	0800c7f0 	.word	0x0800c7f0
 800a2a8:	0800cca8 	.word	0x0800cca8

0800a2ac <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 800a2ac:	b5b0      	push	{r4, r5, r7, lr}
 800a2ae:	b0b2      	sub	sp, #200	; 0xc8
 800a2b0:	af04      	add	r7, sp, #16
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	3330      	adds	r3, #48	; 0x30
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fa f986 	bl	80045ce <lfs_gstate_hasorphans>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	f083 0301 	eor.w	r3, r3, #1
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <lfs_fs_deorphan+0x26>
        return 0;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	e187      	b.n	800a5e2 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 800a2d8:	e170      	b.n	800a5bc <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800a2da:	f107 0308 	add.w	r3, r7, #8
 800a2de:	2220      	movs	r2, #32
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 ff7d 	bl	800b1e2 <memset>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	77fb      	strb	r3, [r7, #31]
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800a2f6:	e149      	b.n	800a58c <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800a2f8:	f107 0308 	add.w	r3, r7, #8
 800a2fc:	f103 0218 	add.w	r2, r3, #24
 800a300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7fb fe46 	bl	8005f98 <lfs_dir_fetch>
 800a30c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 800a310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <lfs_fs_deorphan+0x72>
                return err;
 800a318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a31c:	e161      	b.n	800a5e2 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800a31e:	7ffb      	ldrb	r3, [r7, #31]
 800a320:	f083 0301 	eor.w	r3, r3, #1
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 8126 	beq.w	800a578 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800a32c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a330:	f107 0308 	add.w	r3, r7, #8
 800a334:	3318      	adds	r3, #24
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff fdab 	bl	8009e94 <lfs_fs_parent>
 800a33e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800a342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a346:	2b00      	cmp	r3, #0
 800a348:	da07      	bge.n	800a35a <lfs_fs_deorphan+0xae>
 800a34a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a34e:	f113 0f02 	cmn.w	r3, #2
 800a352:	d002      	beq.n	800a35a <lfs_fs_deorphan+0xae>
                    return tag;
 800a354:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a358:	e143      	b.n	800a5e2 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 800a35a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f040 80ac 	bne.w	800a4bc <lfs_fs_deorphan+0x210>
 800a364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a368:	f113 0f02 	cmn.w	r3, #2
 800a36c:	f000 80a6 	beq.w	800a4bc <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800a370:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a374:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a378:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	4613      	mov	r3, r2
 800a380:	4a9a      	ldr	r2, [pc, #616]	; (800a5ec <lfs_fs_deorphan+0x340>)
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7fa fd08 	bl	8004d98 <lfs_dir_get>
 800a388:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800a38c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a390:	2b00      	cmp	r3, #0
 800a392:	da02      	bge.n	800a39a <lfs_fs_deorphan+0xee>
                        return state;
 800a394:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a398:	e0eb      	b.n	800a572 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 800a39a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fa f803 	bl	80043aa <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 800a3a4:	f107 0308 	add.w	r3, r7, #8
 800a3a8:	f103 0218 	add.w	r2, r3, #24
 800a3ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7f9 ffcc 	bl	8004350 <lfs_pair_issync>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f083 0301 	eor.w	r3, r3, #1
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d07b      	beq.n	800a4bc <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800a3c4:	6a38      	ldr	r0, [r7, #32]
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a3cc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a3d0:	4c87      	ldr	r4, [pc, #540]	; (800a5f0 <lfs_fs_deorphan+0x344>)
 800a3d2:	9403      	str	r4, [sp, #12]
 800a3d4:	9102      	str	r1, [sp, #8]
 800a3d6:	9201      	str	r2, [sp, #4]
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	4603      	mov	r3, r0
 800a3dc:	f241 320d 	movw	r2, #4877	; 0x130d
 800a3e0:	4984      	ldr	r1, [pc, #528]	; (800a5f4 <lfs_fs_deorphan+0x348>)
 800a3e2:	4885      	ldr	r0, [pc, #532]	; (800a5f8 <lfs_fs_deorphan+0x34c>)
 800a3e4:	f000 fe90 	bl	800b108 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800a3e8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a3ec:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3330      	adds	r3, #48	; 0x30
 800a3f4:	f107 0208 	add.w	r2, r7, #8
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fa f930 	bl	8004660 <lfs_gstate_hasmovehere>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d01c      	beq.n	800a440 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fa f86c 	bl	80044e8 <lfs_tag_id>
 800a410:	4603      	mov	r3, r0
 800a412:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 800a416:	68b9      	ldr	r1, [r7, #8]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 800a41e:	4874      	ldr	r0, [pc, #464]	; (800a5f0 <lfs_fs_deorphan+0x344>)
 800a420:	9002      	str	r0, [sp, #8]
 800a422:	9201      	str	r2, [sp, #4]
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	460b      	mov	r3, r1
 800a428:	f241 3218 	movw	r2, #4888	; 0x1318
 800a42c:	4971      	ldr	r1, [pc, #452]	; (800a5f4 <lfs_fs_deorphan+0x348>)
 800a42e:	4873      	ldr	r0, [pc, #460]	; (800a5fc <lfs_fs_deorphan+0x350>)
 800a430:	f000 fe6a 	bl	800b108 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800a434:	2200      	movs	r2, #0
 800a436:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7ff fe12 	bl	800a064 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800a440:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a444:	4618      	mov	r0, r3
 800a446:	f7f9 ffca 	bl	80043de <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800a44a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800a44e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a452:	4293      	cmp	r3, r2
 800a454:	d007      	beq.n	800a466 <lfs_fs_deorphan+0x1ba>
 800a456:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800a45a:	029b      	lsls	r3, r3, #10
 800a45c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a460:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a464:	e000      	b.n	800a468 <lfs_fs_deorphan+0x1bc>
 800a466:	2300      	movs	r3, #0
 800a468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a46c:	2300      	movs	r3, #0
 800a46e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a472:	4b63      	ldr	r3, [pc, #396]	; (800a600 <lfs_fs_deorphan+0x354>)
 800a474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a478:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a47c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a480:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800a484:	f107 0108 	add.w	r1, r7, #8
 800a488:	2302      	movs	r3, #2
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7fd f85e 	bl	800754c <lfs_dir_orphaningcommit>
 800a490:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 800a494:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a498:	4618      	mov	r0, r3
 800a49a:	f7f9 ff86 	bl	80043aa <lfs_pair_fromle32>
                        if (state < 0) {
 800a49e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	da02      	bge.n	800a4ac <lfs_fs_deorphan+0x200>
                            return state;
 800a4a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 800a4aa:	e062      	b.n	800a572 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800a4ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d16b      	bne.n	800a58c <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800a4ba:	e067      	b.n	800a58c <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 800a4bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d159      	bne.n	800a578 <lfs_fs_deorphan+0x2cc>
 800a4c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4c8:	f113 0f02 	cmn.w	r3, #2
 800a4cc:	d154      	bne.n	800a578 <lfs_fs_deorphan+0x2cc>
 800a4ce:	78fb      	ldrb	r3, [r7, #3]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d051      	beq.n	800a578 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800a4d4:	6a3a      	ldr	r2, [r7, #32]
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d8:	4945      	ldr	r1, [pc, #276]	; (800a5f0 <lfs_fs_deorphan+0x344>)
 800a4da:	9101      	str	r1, [sp, #4]
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	f241 3238 	movw	r2, #4920	; 0x1338
 800a4e4:	4943      	ldr	r1, [pc, #268]	; (800a5f4 <lfs_fs_deorphan+0x348>)
 800a4e6:	4847      	ldr	r0, [pc, #284]	; (800a604 <lfs_fs_deorphan+0x358>)
 800a4e8:	f000 fe0e 	bl	800b108 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a4f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7fb fd69 	bl	8005fd0 <lfs_dir_getgstate>
 800a4fe:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 800a502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a506:	2b00      	cmp	r3, #0
 800a508:	d002      	beq.n	800a510 <lfs_fs_deorphan+0x264>
                        return err;
 800a50a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a50e:	e030      	b.n	800a572 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800a510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a514:	3318      	adds	r3, #24
 800a516:	4618      	mov	r0, r3
 800a518:	f7f9 ff61 	bl	80043de <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800a51c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a520:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800a524:	051a      	lsls	r2, r3, #20
 800a526:	4b38      	ldr	r3, [pc, #224]	; (800a608 <lfs_fs_deorphan+0x35c>)
 800a528:	4313      	orrs	r3, r2
 800a52a:	673b      	str	r3, [r7, #112]	; 0x70
 800a52c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a530:	3318      	adds	r3, #24
 800a532:	677b      	str	r3, [r7, #116]	; 0x74
 800a534:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a538:	f107 0108 	add.w	r1, r7, #8
 800a53c:	2301      	movs	r3, #1
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7fd f804 	bl	800754c <lfs_dir_orphaningcommit>
 800a544:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800a548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a54c:	3318      	adds	r3, #24
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f9 ff2b 	bl	80043aa <lfs_pair_fromle32>
                    if (state < 0) {
 800a554:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	da02      	bge.n	800a562 <lfs_fs_deorphan+0x2b6>
                        return state;
 800a55c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 800a560:	e03f      	b.n	800a5e2 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800a562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a566:	2b03      	cmp	r3, #3
 800a568:	d104      	bne.n	800a574 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 800a56a:	2301      	movs	r3, #1
 800a56c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800a570:	e00c      	b.n	800a58c <lfs_fs_deorphan+0x2e0>
                return err;
 800a572:	e036      	b.n	800a5e2 <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 800a574:	bf00      	nop
 800a576:	e009      	b.n	800a58c <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 800a578:	f107 0408 	add.w	r4, r7, #8
 800a57c:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800a580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a584:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 800a58c:	f107 0308 	add.w	r3, r7, #8
 800a590:	3318      	adds	r3, #24
 800a592:	4618      	mov	r0, r3
 800a594:	f7f9 fe97 	bl	80042c6 <lfs_pair_isnull>
 800a598:	4603      	mov	r3, r0
 800a59a:	f083 0301 	eor.w	r3, r3, #1
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f47f aea9 	bne.w	800a2f8 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 800a5a6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <lfs_fs_deorphan+0x306>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	e002      	b.n	800a5b8 <lfs_fs_deorphan+0x30c>
 800a5b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 800a5bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	f77f ae8a 	ble.w	800a2da <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	3330      	adds	r3, #48	; 0x30
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fa f812 	bl	80045f4 <lfs_gstate_getorphans>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	425b      	negs	r3, r3
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	b25b      	sxtb	r3, r3
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff fcf2 	bl	8009fc4 <lfs_fs_preporphans>
 800a5e0:	4603      	mov	r3, r0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	37b8      	adds	r7, #184	; 0xb8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	7ffffc00 	.word	0x7ffffc00
 800a5f0:	0800c03c 	.word	0x0800c03c
 800a5f4:	0800bf48 	.word	0x0800bf48
 800a5f8:	0800c824 	.word	0x0800c824
 800a5fc:	0800c868 	.word	0x0800c868
 800a600:	600ffc08 	.word	0x600ffc08
 800a604:	0800c8b0 	.word	0x0800c8b0
 800a608:	000ffc08 	.word	0x000ffc08

0800a60c <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f7ff fd5f 	bl	800a0d8 <lfs_fs_desuperblock>
 800a61a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <lfs_fs_forceconsistency+0x1a>
        return err;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	e013      	b.n	800a64e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff fdc4 	bl	800a1b4 <lfs_fs_demove>
 800a62c:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <lfs_fs_forceconsistency+0x2c>
        return err;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	e00a      	b.n	800a64e <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 800a638:	2101      	movs	r1, #1
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f7ff fe36 	bl	800a2ac <lfs_fs_deorphan>
 800a640:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <lfs_fs_forceconsistency+0x40>
        return err;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	e000      	b.n	800a64e <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800a656:	b480      	push	{r7}
 800a658:	b085      	sub	sp, #20
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
 800a65e:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	1c5a      	adds	r2, r3, #1
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	601a      	str	r2, [r3, #0]
    return 0;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800a684:	2300      	movs	r3, #0
 800a686:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800a688:	f107 0208 	add.w	r2, r7, #8
 800a68c:	2300      	movs	r3, #0
 800a68e:	4907      	ldr	r1, [pc, #28]	; (800a6ac <lfs_fs_rawsize+0x30>)
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7ff f9fd 	bl	8009a90 <lfs_fs_rawtraverse>
 800a696:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <lfs_fs_rawsize+0x26>
        return err;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	e000      	b.n	800a6a4 <lfs_fs_rawsize+0x28>
    }

    return size;
 800a6a2:	68bb      	ldr	r3, [r7, #8]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	0800a657 	.word	0x0800a657

0800a6b0 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <lfs_format+0x18>
        return err;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	e005      	b.n	800a6d4 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800a6c8:	6839      	ldr	r1, [r7, #0]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7fe ff20 	bl	8009510 <lfs_rawformat>
 800a6d0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <lfs_mount+0x18>
        return err;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	e005      	b.n	800a700 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7fe ffac 	bl	8009654 <lfs_rawmount>
 800a6fc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a712:	2300      	movs	r3, #0
 800a714:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <lfs_remove+0x18>
        return err;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	e005      	b.n	800a72c <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7fe fc2a 	bl	8008f7c <lfs_rawremove>
 800a728:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a72a:	68fb      	ldr	r3, [r7, #12]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a742:	2300      	movs	r3, #0
 800a744:	617b      	str	r3, [r7, #20]
    if (err) {
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <lfs_file_open+0x1c>
        return err;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	e01a      	b.n	800a786 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a754:	68b9      	ldr	r1, [r7, #8]
 800a756:	4618      	mov	r0, r3
 800a758:	f7fa f8b2 	bl	80048c0 <lfs_mlist_isopen>
 800a75c:	4603      	mov	r3, r0
 800a75e:	f083 0301 	eor.w	r3, r3, #1
 800a762:	b2db      	uxtb	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d106      	bne.n	800a776 <lfs_file_open+0x42>
 800a768:	4b09      	ldr	r3, [pc, #36]	; (800a790 <lfs_file_open+0x5c>)
 800a76a:	4a0a      	ldr	r2, [pc, #40]	; (800a794 <lfs_file_open+0x60>)
 800a76c:	f241 61ec 	movw	r1, #5868	; 0x16ec
 800a770:	4809      	ldr	r0, [pc, #36]	; (800a798 <lfs_file_open+0x64>)
 800a772:	f000 faef 	bl	800ad54 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	68b9      	ldr	r1, [r7, #8]
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7fd fdfb 	bl	8008378 <lfs_file_rawopen>
 800a782:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a784:	697b      	ldr	r3, [r7, #20]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	0800c8e0 	.word	0x0800c8e0
 800a794:	0800ccb8 	.word	0x0800ccb8
 800a798:	0800bf48 	.word	0x0800bf48

0800a79c <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <lfs_file_close+0x18>
        return err;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	e015      	b.n	800a7e0 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fa f880 	bl	80048c0 <lfs_mlist_isopen>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d106      	bne.n	800a7d4 <lfs_file_close+0x38>
 800a7c6:	4b08      	ldr	r3, [pc, #32]	; (800a7e8 <lfs_file_close+0x4c>)
 800a7c8:	4a08      	ldr	r2, [pc, #32]	; (800a7ec <lfs_file_close+0x50>)
 800a7ca:	f241 7110 	movw	r1, #5904	; 0x1710
 800a7ce:	4808      	ldr	r0, [pc, #32]	; (800a7f0 <lfs_file_close+0x54>)
 800a7d0:	f000 fac0 	bl	800ad54 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7fd fde6 	bl	80083a8 <lfs_file_rawclose>
 800a7dc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a7de:	68fb      	ldr	r3, [r7, #12]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	0800c918 	.word	0x0800c918
 800a7ec:	0800ccc8 	.word	0x0800ccc8
 800a7f0:	0800bf48 	.word	0x0800bf48

0800a7f4 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
 800a800:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a802:	2300      	movs	r3, #0
 800a804:	617b      	str	r3, [r7, #20]
    if (err) {
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <lfs_file_read+0x1c>
        return err;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	e017      	b.n	800a840 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a814:	68b9      	ldr	r1, [r7, #8]
 800a816:	4618      	mov	r0, r3
 800a818:	f7fa f852 	bl	80048c0 <lfs_mlist_isopen>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d106      	bne.n	800a830 <lfs_file_read+0x3c>
 800a822:	4b09      	ldr	r3, [pc, #36]	; (800a848 <lfs_file_read+0x54>)
 800a824:	4a09      	ldr	r2, [pc, #36]	; (800a84c <lfs_file_read+0x58>)
 800a826:	f241 7132 	movw	r1, #5938	; 0x1732
 800a82a:	4809      	ldr	r0, [pc, #36]	; (800a850 <lfs_file_read+0x5c>)
 800a82c:	f000 fa92 	bl	800ad54 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	68b9      	ldr	r1, [r7, #8]
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f7fe f902 	bl	8008a40 <lfs_file_rawread>
 800a83c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a83e:	693b      	ldr	r3, [r7, #16]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	0800c918 	.word	0x0800c918
 800a84c:	0800ccd8 	.word	0x0800ccd8
 800a850:	0800bf48 	.word	0x0800bf48

0800a854 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a862:	2300      	movs	r3, #0
 800a864:	617b      	str	r3, [r7, #20]
    if (err) {
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <lfs_file_write+0x1c>
        return err;
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	e017      	b.n	800a8a0 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a874:	68b9      	ldr	r1, [r7, #8]
 800a876:	4618      	mov	r0, r3
 800a878:	f7fa f822 	bl	80048c0 <lfs_mlist_isopen>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d106      	bne.n	800a890 <lfs_file_write+0x3c>
 800a882:	4b09      	ldr	r3, [pc, #36]	; (800a8a8 <lfs_file_write+0x54>)
 800a884:	4a09      	ldr	r2, [pc, #36]	; (800a8ac <lfs_file_write+0x58>)
 800a886:	f241 7144 	movw	r1, #5956	; 0x1744
 800a88a:	4809      	ldr	r0, [pc, #36]	; (800a8b0 <lfs_file_write+0x5c>)
 800a88c:	f000 fa62 	bl	800ad54 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	68b9      	ldr	r1, [r7, #8]
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f7fe fa32 	bl	8008d00 <lfs_file_rawwrite>
 800a89c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a89e:	693b      	ldr	r3, [r7, #16]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	0800c918 	.word	0x0800c918
 800a8ac:	0800cce8 	.word	0x0800cce8
 800a8b0:	0800bf48 	.word	0x0800bf48

0800a8b4 <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a8be:	2300      	movs	r3, #0
 800a8c0:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d001      	beq.n	800a8cc <lfs_file_rewind+0x18>
        return err;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	e005      	b.n	800a8d8 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 800a8cc:	6839      	ldr	r1, [r7, #0]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7fe fb23 	bl	8008f1a <lfs_file_rawrewind>
 800a8d4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800a8e0:	b480      	push	{r7}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	617b      	str	r3, [r7, #20]
 800a8f4:	e024      	b.n	800a940 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	091a      	lsrs	r2, r3, #4
 800a8fa:	6939      	ldr	r1, [r7, #16]
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	440b      	add	r3, r1
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	4619      	mov	r1, r3
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	404b      	eors	r3, r1
 800a908:	f003 030f 	and.w	r3, r3, #15
 800a90c:	4912      	ldr	r1, [pc, #72]	; (800a958 <lfs_crc+0x78>)
 800a90e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a912:	4053      	eors	r3, r2
 800a914:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	091a      	lsrs	r2, r3, #4
 800a91a:	6939      	ldr	r1, [r7, #16]
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	440b      	add	r3, r1
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	091b      	lsrs	r3, r3, #4
 800a924:	b2db      	uxtb	r3, r3
 800a926:	4619      	mov	r1, r3
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	404b      	eors	r3, r1
 800a92c:	f003 030f 	and.w	r3, r3, #15
 800a930:	4909      	ldr	r1, [pc, #36]	; (800a958 <lfs_crc+0x78>)
 800a932:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a936:	4053      	eors	r3, r2
 800a938:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	3301      	adds	r3, #1
 800a93e:	617b      	str	r3, [r7, #20]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	429a      	cmp	r2, r3
 800a946:	d3d6      	bcc.n	800a8f6 <lfs_crc+0x16>
    }

    return crc;
 800a948:	68fb      	ldr	r3, [r7, #12]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	371c      	adds	r7, #28
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	0800ccf8 	.word	0x0800ccf8

0800a95c <m24cxx_init>:

#include "m24cxx.h"

/* Public functions */

M24CXX_StatusTypeDef m24cxx_init(M24CXX_HandleTypeDef *m24cxx, I2C_HandleTypeDef *i2c, uint8_t i2c_address) {
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	4613      	mov	r3, r2
 800a968:	71fb      	strb	r3, [r7, #7]

    M24CXXDBG("M24CXX Init type = %s size = %d ", M24CXX_TYPE, M24CXX_SIZE);
 800a96a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a96e:	490d      	ldr	r1, [pc, #52]	; (800a9a4 <m24cxx_init+0x48>)
 800a970:	480d      	ldr	r0, [pc, #52]	; (800a9a8 <m24cxx_init+0x4c>)
 800a972:	f000 fbc9 	bl	800b108 <iprintf>
 800a976:	200a      	movs	r0, #10
 800a978:	f000 fbd8 	bl	800b12c <putchar>

    m24cxx->i2c = i2c;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	601a      	str	r2, [r3, #0]
    m24cxx->i2c_address = i2c_address;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	79fa      	ldrb	r2, [r7, #7]
 800a986:	711a      	strb	r2, [r3, #4]

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
#endif

    if (m24cxx_isconnected(m24cxx) != M24CXX_Ok)
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 f80f 	bl	800a9ac <m24cxx_isconnected>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <m24cxx_init+0x3c>
        return M24CXX_Err;
 800a994:	2301      	movs	r3, #1
 800a996:	e000      	b.n	800a99a <m24cxx_init+0x3e>

    return M24CXX_Ok;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	0800c988 	.word	0x0800c988
 800a9a8:	0800c990 	.word	0x0800c990

0800a9ac <m24cxx_isconnected>:

M24CXX_StatusTypeDef m24cxx_isconnected(M24CXX_HandleTypeDef *m24cxx) {
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]

    if (HAL_I2C_IsDeviceReady(m24cxx->i2c, m24cxx->i2c_address << 1, 2, HAL_MAX_DELAY) != HAL_OK) {
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6818      	ldr	r0, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	791b      	ldrb	r3, [r3, #4]
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	005b      	lsls	r3, r3, #1
 800a9c0:	b299      	uxth	r1, r3
 800a9c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f7f7 fb6e 	bl	80020a8 <HAL_I2C_IsDeviceReady>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <m24cxx_isconnected+0x2a>
        return M24CXX_Err;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e000      	b.n	800a9d8 <m24cxx_isconnected+0x2c>
    }

    return M24CXX_Ok;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <m24cxx_wait>:

M24CXX_StatusTypeDef m24cxx_wait(M24CXX_HandleTypeDef *m24cxx) {
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();
 800a9e8:	f7f6 fbe8 	bl	80011bc <HAL_GetTick>
 800a9ec:	60f8      	str	r0, [r7, #12]
    while (m24cxx_isconnected(m24cxx) != M24CXX_Ok) {
 800a9ee:	e008      	b.n	800aa02 <m24cxx_wait+0x22>
        if (HAL_GetTick() - start_time >= M24CXX_WRITE_TIMEOUT)
 800a9f0:	f7f6 fbe4 	bl	80011bc <HAL_GetTick>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	2b63      	cmp	r3, #99	; 0x63
 800a9fc:	d901      	bls.n	800aa02 <m24cxx_wait+0x22>
            return M24CXX_Err;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e006      	b.n	800aa10 <m24cxx_wait+0x30>
    while (m24cxx_isconnected(m24cxx) != M24CXX_Ok) {
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff ffd2 	bl	800a9ac <m24cxx_isconnected>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1f0      	bne.n	800a9f0 <m24cxx_wait+0x10>
    }
    return M24CXX_Ok;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <m24cxx_read>:

M24CXX_StatusTypeDef m24cxx_read(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 800aa18:	b5b0      	push	{r4, r5, r7, lr}
 800aa1a:	b090      	sub	sp, #64	; 0x40
 800aa1c:	af04      	add	r7, sp, #16
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
 800aa24:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX read - address = 0x%04lx len = 0x%04lx", address, len);
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	68b9      	ldr	r1, [r7, #8]
 800aa2a:	4844      	ldr	r0, [pc, #272]	; (800ab3c <m24cxx_read+0x124>)
 800aa2c:	f000 fb6c 	bl	800b108 <iprintf>
 800aa30:	200a      	movs	r0, #10
 800aa32:	f000 fb7b 	bl	800b12c <putchar>

    uint32_t page_start = address / M24CXX_READ_PAGE_SIZE;
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	0a1b      	lsrs	r3, r3, #8
 800aa3a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t page_end = ((address + len - 1) / M24CXX_READ_PAGE_SIZE);
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	4413      	add	r3, r2
 800aa42:	3b01      	subs	r3, #1
 800aa44:	0a1b      	lsrs	r3, r3, #8
 800aa46:	623b      	str	r3, [r7, #32]
    uint32_t data_offset = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	62fb      	str	r3, [r7, #44]	; 0x2c

    M24CXXDBG("Reading %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);
 800aa4c:	6a3a      	ldr	r2, [r7, #32]
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	1c59      	adds	r1, r3, #1
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa58:	4839      	ldr	r0, [pc, #228]	; (800ab40 <m24cxx_read+0x128>)
 800aa5a:	f000 fb55 	bl	800b108 <iprintf>
 800aa5e:	200a      	movs	r0, #10
 800aa60:	f000 fb64 	bl	800b12c <putchar>

    for (uint32_t page = page_start; page <= page_end; ++page) {
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa68:	e05f      	b.n	800ab2a <m24cxx_read+0x112>

        uint32_t i2c_address, start_address, read_len;

        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 800aa6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d002      	beq.n	800aa78 <m24cxx_read+0x60>
 800aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa74:	021b      	lsls	r3, r3, #8
 800aa76:	e000      	b.n	800aa7a <m24cxx_read+0x62>
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	61fb      	str	r3, [r7, #28]
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 800aa7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d103      	bne.n	800aa8c <m24cxx_read+0x74>
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	e00b      	b.n	800aaa4 <m24cxx_read+0x8c>
 800aa8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d105      	bne.n	800aaa0 <m24cxx_read+0x88>
 800aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa96:	3301      	adds	r3, #1
 800aa98:	021a      	lsls	r2, r3, #8
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	e001      	b.n	800aaa4 <m24cxx_read+0x8c>
 800aaa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaa4:	61bb      	str	r3, [r7, #24]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	791b      	ldrb	r3, [r3, #4]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	0a1b      	lsrs	r3, r3, #8
 800aab0:	4413      	add	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]

        M24CXXDBG("Reading page %lu, i2c address = 0x%02lx start = 0x%04lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address & M24CXX_ADDRESS_MASK, read_len, data_offset);
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaba:	9301      	str	r3, [sp, #4]
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	4613      	mov	r3, r2
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aac6:	481f      	ldr	r0, [pc, #124]	; (800ab44 <m24cxx_read+0x12c>)
 800aac8:	f000 fb1e 	bl	800b108 <iprintf>
 800aacc:	200a      	movs	r0, #10
 800aace:	f000 fb2d 	bl	800b12c <putchar>

        HAL_StatusTypeDef result = HAL_I2C_Mem_Read(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, read_len, HAL_MAX_DELAY);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6818      	ldr	r0, [r3, #0]
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	b29b      	uxth	r3, r3
 800aada:	005b      	lsls	r3, r3, #1
 800aadc:	b299      	uxth	r1, r3
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	b29c      	uxth	r4, r3
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	4413      	add	r3, r2
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	b292      	uxth	r2, r2
 800aaf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aaf4:	9502      	str	r5, [sp, #8]
 800aaf6:	9201      	str	r2, [sp, #4]
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	2301      	movs	r3, #1
 800aafc:	4622      	mov	r2, r4
 800aafe:	f7f7 f8ad 	bl	8001c5c <HAL_I2C_Mem_Read>
 800ab02:	4603      	mov	r3, r0
 800ab04:	74fb      	strb	r3, [r7, #19]

        if (result != HAL_OK) {
 800ab06:	7cfb      	ldrb	r3, [r7, #19]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d007      	beq.n	800ab1c <m24cxx_read+0x104>
            M24CXXDBG("Failed to read memory");
 800ab0c:	480e      	ldr	r0, [pc, #56]	; (800ab48 <m24cxx_read+0x130>)
 800ab0e:	f000 fafb 	bl	800b108 <iprintf>
 800ab12:	200a      	movs	r0, #10
 800ab14:	f000 fb0a 	bl	800b12c <putchar>
            return M24CXX_Err;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e00b      	b.n	800ab34 <m24cxx_read+0x11c>
        }

        data_offset += read_len;
 800ab1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	4413      	add	r3, r2
 800ab22:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t page = page_start; page <= page_end; ++page) {
 800ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab26:	3301      	adds	r3, #1
 800ab28:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab2c:	6a3b      	ldr	r3, [r7, #32]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d99b      	bls.n	800aa6a <m24cxx_read+0x52>

    }

    return M24CXX_Ok;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3730      	adds	r7, #48	; 0x30
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab3c:	0800c9b4 	.word	0x0800c9b4
 800ab40:	0800c9e4 	.word	0x0800c9e4
 800ab44:	0800ca08 	.word	0x0800ca08
 800ab48:	0800ca60 	.word	0x0800ca60

0800ab4c <m24cxx_write>:

M24CXX_StatusTypeDef m24cxx_write(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 800ab4c:	b5b0      	push	{r4, r5, r7, lr}
 800ab4e:	b090      	sub	sp, #64	; 0x40
 800ab50:	af04      	add	r7, sp, #16
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX write - address = 0x%04lx len = 0x%04lx", address, len);
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	68b9      	ldr	r1, [r7, #8]
 800ab5e:	4850      	ldr	r0, [pc, #320]	; (800aca0 <m24cxx_write+0x154>)
 800ab60:	f000 fad2 	bl	800b108 <iprintf>
 800ab64:	200a      	movs	r0, #10
 800ab66:	f000 fae1 	bl	800b12c <putchar>

    uint32_t page_start = address / M24CXX_WRITE_PAGE_SIZE;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	091b      	lsrs	r3, r3, #4
 800ab6e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t page_end = ((address + len - 1) / M24CXX_WRITE_PAGE_SIZE);
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	4413      	add	r3, r2
 800ab76:	3b01      	subs	r3, #1
 800ab78:	091b      	lsrs	r3, r3, #4
 800ab7a:	623b      	str	r3, [r7, #32]
    uint32_t data_offset = 0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	62fb      	str	r3, [r7, #44]	; 0x2c

    M24CXXDBG("Writing %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);
 800ab80:	6a3a      	ldr	r2, [r7, #32]
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	1c59      	adds	r1, r3, #1
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab8c:	4845      	ldr	r0, [pc, #276]	; (800aca4 <m24cxx_write+0x158>)
 800ab8e:	f000 fabb 	bl	800b108 <iprintf>
 800ab92:	200a      	movs	r0, #10
 800ab94:	f000 faca 	bl	800b12c <putchar>

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_RESET);
#endif

    for (uint8_t page = page_start; page <= page_end; ++page) {
 800ab98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab9e:	e075      	b.n	800ac8c <m24cxx_write+0x140>

        uint32_t i2c_address, start_address, write_len;

        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 800aba0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d003      	beq.n	800abb2 <m24cxx_write+0x66>
 800abaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abae:	011b      	lsls	r3, r3, #4
 800abb0:	e000      	b.n	800abb4 <m24cxx_write+0x68>
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	61fb      	str	r3, [r7, #28]
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 800abb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abba:	6a3a      	ldr	r2, [r7, #32]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d103      	bne.n	800abc8 <m24cxx_write+0x7c>
 800abc0:	683a      	ldr	r2, [r7, #0]
 800abc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	e00d      	b.n	800abe4 <m24cxx_write+0x98>
 800abc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abce:	429a      	cmp	r2, r3
 800abd0:	d107      	bne.n	800abe2 <m24cxx_write+0x96>
 800abd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abd6:	3301      	adds	r3, #1
 800abd8:	011b      	lsls	r3, r3, #4
 800abda:	461a      	mov	r2, r3
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	e000      	b.n	800abe4 <m24cxx_write+0x98>
 800abe2:	2310      	movs	r3, #16
 800abe4:	61bb      	str	r3, [r7, #24]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	791b      	ldrb	r3, [r3, #4]
 800abea:	461a      	mov	r2, r3
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	0a1b      	lsrs	r3, r3, #8
 800abf0:	4413      	add	r3, r2
 800abf2:	617b      	str	r3, [r7, #20]

        M24CXXDBG("Writing page %d, i2c address = 0x%02lx start = 0x%04lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address & M24CXX_ADDRESS_MASK, write_len, data_offset);
 800abf4:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	9301      	str	r3, [sp, #4]
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	4613      	mov	r3, r2
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	4827      	ldr	r0, [pc, #156]	; (800aca8 <m24cxx_write+0x15c>)
 800ac0a:	f000 fa7d 	bl	800b108 <iprintf>
 800ac0e:	200a      	movs	r0, #10
 800ac10:	f000 fa8c 	bl	800b12c <putchar>

        HAL_StatusTypeDef result = HAL_I2C_Mem_Write(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, write_len, HAL_MAX_DELAY);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6818      	ldr	r0, [r3, #0]
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	005b      	lsls	r3, r3, #1
 800ac1e:	b299      	uxth	r1, r3
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	b29c      	uxth	r4, r3
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2c:	4413      	add	r3, r2
 800ac2e:	69ba      	ldr	r2, [r7, #24]
 800ac30:	b292      	uxth	r2, r2
 800ac32:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ac36:	9502      	str	r5, [sp, #8]
 800ac38:	9201      	str	r2, [sp, #4]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	4622      	mov	r2, r4
 800ac40:	f7f6 ff12 	bl	8001a68 <HAL_I2C_Mem_Write>
 800ac44:	4603      	mov	r3, r0
 800ac46:	74fb      	strb	r3, [r7, #19]

        if (result != HAL_OK) {
 800ac48:	7cfb      	ldrb	r3, [r7, #19]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d007      	beq.n	800ac5e <m24cxx_write+0x112>
            M24CXXDBG("Failed to write memory");
 800ac4e:	4817      	ldr	r0, [pc, #92]	; (800acac <m24cxx_write+0x160>)
 800ac50:	f000 fa5a 	bl	800b108 <iprintf>
 800ac54:	200a      	movs	r0, #10
 800ac56:	f000 fa69 	bl	800b12c <putchar>
            return M24CXX_Err;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e01c      	b.n	800ac98 <m24cxx_write+0x14c>
        }

        data_offset += write_len;
 800ac5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	4413      	add	r3, r2
 800ac64:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (m24cxx_wait(m24cxx) != M24CXX_Ok) {
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f7ff feba 	bl	800a9e0 <m24cxx_wait>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d007      	beq.n	800ac82 <m24cxx_write+0x136>
            M24CXXDBG("M24Cxx Device never got ready");
 800ac72:	480f      	ldr	r0, [pc, #60]	; (800acb0 <m24cxx_write+0x164>)
 800ac74:	f000 fa48 	bl	800b108 <iprintf>
 800ac78:	200a      	movs	r0, #10
 800ac7a:	f000 fa57 	bl	800b12c <putchar>
            return M24CXX_Err;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e00a      	b.n	800ac98 <m24cxx_write+0x14c>
    for (uint8_t page = page_start; page <= page_end; ++page) {
 800ac82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac86:	3301      	adds	r3, #1
 800ac88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac90:	6a3a      	ldr	r2, [r7, #32]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d284      	bcs.n	800aba0 <m24cxx_write+0x54>

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
#endif

    return M24CXX_Ok;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3730      	adds	r7, #48	; 0x30
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bdb0      	pop	{r4, r5, r7, pc}
 800aca0:	0800ca78 	.word	0x0800ca78
 800aca4:	0800caa8 	.word	0x0800caa8
 800aca8:	0800cacc 	.word	0x0800cacc
 800acac:	0800cb24 	.word	0x0800cb24
 800acb0:	0800cb3c 	.word	0x0800cb3c

0800acb4 <m24cxx_erase>:

M24CXX_StatusTypeDef m24cxx_erase(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint32_t len) {
 800acb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acb8:	b089      	sub	sp, #36	; 0x24
 800acba:	af00      	add	r7, sp, #0
 800acbc:	60f8      	str	r0, [r7, #12]
 800acbe:	60b9      	str	r1, [r7, #8]
 800acc0:	607a      	str	r2, [r7, #4]
 800acc2:	466b      	mov	r3, sp
 800acc4:	461e      	mov	r6, r3

    M24CXXDBG("M24CXX erase - address = 0x%04lx len = 0x%04lx", address, len);
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	68b9      	ldr	r1, [r7, #8]
 800acca:	4821      	ldr	r0, [pc, #132]	; (800ad50 <m24cxx_erase+0x9c>)
 800accc:	f000 fa1c 	bl	800b108 <iprintf>
 800acd0:	200a      	movs	r0, #10
 800acd2:	f000 fa2b 	bl	800b12c <putchar>

    uint8_t buf[len];
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	460b      	mov	r3, r1
 800acda:	3b01      	subs	r3, #1
 800acdc:	61fb      	str	r3, [r7, #28]
 800acde:	2300      	movs	r3, #0
 800ace0:	4688      	mov	r8, r1
 800ace2:	4699      	mov	r9, r3
 800ace4:	f04f 0200 	mov.w	r2, #0
 800ace8:	f04f 0300 	mov.w	r3, #0
 800acec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800acf0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800acf4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800acf8:	2300      	movs	r3, #0
 800acfa:	460c      	mov	r4, r1
 800acfc:	461d      	mov	r5, r3
 800acfe:	f04f 0200 	mov.w	r2, #0
 800ad02:	f04f 0300 	mov.w	r3, #0
 800ad06:	00eb      	lsls	r3, r5, #3
 800ad08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad0c:	00e2      	lsls	r2, r4, #3
 800ad0e:	1dcb      	adds	r3, r1, #7
 800ad10:	08db      	lsrs	r3, r3, #3
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	ebad 0d03 	sub.w	sp, sp, r3
 800ad18:	466b      	mov	r3, sp
 800ad1a:	3300      	adds	r3, #0
 800ad1c:	61bb      	str	r3, [r7, #24]

    memset(buf, 0xff, len);
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	21ff      	movs	r1, #255	; 0xff
 800ad22:	69b8      	ldr	r0, [r7, #24]
 800ad24:	f000 fa5d 	bl	800b1e2 <memset>

    M24CXX_StatusTypeDef result = m24cxx_write(m24cxx, address, (uint8_t*) &buf, len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	69ba      	ldr	r2, [r7, #24]
 800ad2c:	68b9      	ldr	r1, [r7, #8]
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f7ff ff0c 	bl	800ab4c <m24cxx_write>
 800ad34:	4603      	mov	r3, r0
 800ad36:	75fb      	strb	r3, [r7, #23]
    if (result != M24CXX_Ok)
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <m24cxx_erase+0x8e>
        return result;
 800ad3e:	7dfb      	ldrb	r3, [r7, #23]
 800ad40:	e000      	b.n	800ad44 <m24cxx_erase+0x90>

    return M24CXX_Ok;
 800ad42:	2300      	movs	r3, #0
 800ad44:	46b5      	mov	sp, r6
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3724      	adds	r7, #36	; 0x24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad50:	0800cb5c 	.word	0x0800cb5c

0800ad54 <__assert_func>:
 800ad54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad56:	4614      	mov	r4, r2
 800ad58:	461a      	mov	r2, r3
 800ad5a:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <__assert_func+0x2c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4605      	mov	r5, r0
 800ad60:	68d8      	ldr	r0, [r3, #12]
 800ad62:	b14c      	cbz	r4, 800ad78 <__assert_func+0x24>
 800ad64:	4b07      	ldr	r3, [pc, #28]	; (800ad84 <__assert_func+0x30>)
 800ad66:	9100      	str	r1, [sp, #0]
 800ad68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad6c:	4906      	ldr	r1, [pc, #24]	; (800ad88 <__assert_func+0x34>)
 800ad6e:	462b      	mov	r3, r5
 800ad70:	f000 f99a 	bl	800b0a8 <fiprintf>
 800ad74:	f000 fafc 	bl	800b370 <abort>
 800ad78:	4b04      	ldr	r3, [pc, #16]	; (800ad8c <__assert_func+0x38>)
 800ad7a:	461c      	mov	r4, r3
 800ad7c:	e7f3      	b.n	800ad66 <__assert_func+0x12>
 800ad7e:	bf00      	nop
 800ad80:	200000b0 	.word	0x200000b0
 800ad84:	0800cd38 	.word	0x0800cd38
 800ad88:	0800cd45 	.word	0x0800cd45
 800ad8c:	0800cd73 	.word	0x0800cd73

0800ad90 <malloc>:
 800ad90:	4b02      	ldr	r3, [pc, #8]	; (800ad9c <malloc+0xc>)
 800ad92:	4601      	mov	r1, r0
 800ad94:	6818      	ldr	r0, [r3, #0]
 800ad96:	f000 b82b 	b.w	800adf0 <_malloc_r>
 800ad9a:	bf00      	nop
 800ad9c:	200000b0 	.word	0x200000b0

0800ada0 <free>:
 800ada0:	4b02      	ldr	r3, [pc, #8]	; (800adac <free+0xc>)
 800ada2:	4601      	mov	r1, r0
 800ada4:	6818      	ldr	r0, [r3, #0]
 800ada6:	f000 baeb 	b.w	800b380 <_free_r>
 800adaa:	bf00      	nop
 800adac:	200000b0 	.word	0x200000b0

0800adb0 <sbrk_aligned>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	4e0e      	ldr	r6, [pc, #56]	; (800adec <sbrk_aligned+0x3c>)
 800adb4:	460c      	mov	r4, r1
 800adb6:	6831      	ldr	r1, [r6, #0]
 800adb8:	4605      	mov	r5, r0
 800adba:	b911      	cbnz	r1, 800adc2 <sbrk_aligned+0x12>
 800adbc:	f000 fa7c 	bl	800b2b8 <_sbrk_r>
 800adc0:	6030      	str	r0, [r6, #0]
 800adc2:	4621      	mov	r1, r4
 800adc4:	4628      	mov	r0, r5
 800adc6:	f000 fa77 	bl	800b2b8 <_sbrk_r>
 800adca:	1c43      	adds	r3, r0, #1
 800adcc:	d00a      	beq.n	800ade4 <sbrk_aligned+0x34>
 800adce:	1cc4      	adds	r4, r0, #3
 800add0:	f024 0403 	bic.w	r4, r4, #3
 800add4:	42a0      	cmp	r0, r4
 800add6:	d007      	beq.n	800ade8 <sbrk_aligned+0x38>
 800add8:	1a21      	subs	r1, r4, r0
 800adda:	4628      	mov	r0, r5
 800addc:	f000 fa6c 	bl	800b2b8 <_sbrk_r>
 800ade0:	3001      	adds	r0, #1
 800ade2:	d101      	bne.n	800ade8 <sbrk_aligned+0x38>
 800ade4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ade8:	4620      	mov	r0, r4
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	20000250 	.word	0x20000250

0800adf0 <_malloc_r>:
 800adf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf4:	1ccd      	adds	r5, r1, #3
 800adf6:	f025 0503 	bic.w	r5, r5, #3
 800adfa:	3508      	adds	r5, #8
 800adfc:	2d0c      	cmp	r5, #12
 800adfe:	bf38      	it	cc
 800ae00:	250c      	movcc	r5, #12
 800ae02:	2d00      	cmp	r5, #0
 800ae04:	4607      	mov	r7, r0
 800ae06:	db01      	blt.n	800ae0c <_malloc_r+0x1c>
 800ae08:	42a9      	cmp	r1, r5
 800ae0a:	d905      	bls.n	800ae18 <_malloc_r+0x28>
 800ae0c:	230c      	movs	r3, #12
 800ae0e:	603b      	str	r3, [r7, #0]
 800ae10:	2600      	movs	r6, #0
 800ae12:	4630      	mov	r0, r6
 800ae14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aeec <_malloc_r+0xfc>
 800ae1c:	f000 f868 	bl	800aef0 <__malloc_lock>
 800ae20:	f8d8 3000 	ldr.w	r3, [r8]
 800ae24:	461c      	mov	r4, r3
 800ae26:	bb5c      	cbnz	r4, 800ae80 <_malloc_r+0x90>
 800ae28:	4629      	mov	r1, r5
 800ae2a:	4638      	mov	r0, r7
 800ae2c:	f7ff ffc0 	bl	800adb0 <sbrk_aligned>
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	4604      	mov	r4, r0
 800ae34:	d155      	bne.n	800aee2 <_malloc_r+0xf2>
 800ae36:	f8d8 4000 	ldr.w	r4, [r8]
 800ae3a:	4626      	mov	r6, r4
 800ae3c:	2e00      	cmp	r6, #0
 800ae3e:	d145      	bne.n	800aecc <_malloc_r+0xdc>
 800ae40:	2c00      	cmp	r4, #0
 800ae42:	d048      	beq.n	800aed6 <_malloc_r+0xe6>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	4631      	mov	r1, r6
 800ae48:	4638      	mov	r0, r7
 800ae4a:	eb04 0903 	add.w	r9, r4, r3
 800ae4e:	f000 fa33 	bl	800b2b8 <_sbrk_r>
 800ae52:	4581      	cmp	r9, r0
 800ae54:	d13f      	bne.n	800aed6 <_malloc_r+0xe6>
 800ae56:	6821      	ldr	r1, [r4, #0]
 800ae58:	1a6d      	subs	r5, r5, r1
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	f7ff ffa7 	bl	800adb0 <sbrk_aligned>
 800ae62:	3001      	adds	r0, #1
 800ae64:	d037      	beq.n	800aed6 <_malloc_r+0xe6>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	442b      	add	r3, r5
 800ae6a:	6023      	str	r3, [r4, #0]
 800ae6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d038      	beq.n	800aee6 <_malloc_r+0xf6>
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	42a2      	cmp	r2, r4
 800ae78:	d12b      	bne.n	800aed2 <_malloc_r+0xe2>
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	605a      	str	r2, [r3, #4]
 800ae7e:	e00f      	b.n	800aea0 <_malloc_r+0xb0>
 800ae80:	6822      	ldr	r2, [r4, #0]
 800ae82:	1b52      	subs	r2, r2, r5
 800ae84:	d41f      	bmi.n	800aec6 <_malloc_r+0xd6>
 800ae86:	2a0b      	cmp	r2, #11
 800ae88:	d917      	bls.n	800aeba <_malloc_r+0xca>
 800ae8a:	1961      	adds	r1, r4, r5
 800ae8c:	42a3      	cmp	r3, r4
 800ae8e:	6025      	str	r5, [r4, #0]
 800ae90:	bf18      	it	ne
 800ae92:	6059      	strne	r1, [r3, #4]
 800ae94:	6863      	ldr	r3, [r4, #4]
 800ae96:	bf08      	it	eq
 800ae98:	f8c8 1000 	streq.w	r1, [r8]
 800ae9c:	5162      	str	r2, [r4, r5]
 800ae9e:	604b      	str	r3, [r1, #4]
 800aea0:	4638      	mov	r0, r7
 800aea2:	f104 060b 	add.w	r6, r4, #11
 800aea6:	f000 f829 	bl	800aefc <__malloc_unlock>
 800aeaa:	f026 0607 	bic.w	r6, r6, #7
 800aeae:	1d23      	adds	r3, r4, #4
 800aeb0:	1af2      	subs	r2, r6, r3
 800aeb2:	d0ae      	beq.n	800ae12 <_malloc_r+0x22>
 800aeb4:	1b9b      	subs	r3, r3, r6
 800aeb6:	50a3      	str	r3, [r4, r2]
 800aeb8:	e7ab      	b.n	800ae12 <_malloc_r+0x22>
 800aeba:	42a3      	cmp	r3, r4
 800aebc:	6862      	ldr	r2, [r4, #4]
 800aebe:	d1dd      	bne.n	800ae7c <_malloc_r+0x8c>
 800aec0:	f8c8 2000 	str.w	r2, [r8]
 800aec4:	e7ec      	b.n	800aea0 <_malloc_r+0xb0>
 800aec6:	4623      	mov	r3, r4
 800aec8:	6864      	ldr	r4, [r4, #4]
 800aeca:	e7ac      	b.n	800ae26 <_malloc_r+0x36>
 800aecc:	4634      	mov	r4, r6
 800aece:	6876      	ldr	r6, [r6, #4]
 800aed0:	e7b4      	b.n	800ae3c <_malloc_r+0x4c>
 800aed2:	4613      	mov	r3, r2
 800aed4:	e7cc      	b.n	800ae70 <_malloc_r+0x80>
 800aed6:	230c      	movs	r3, #12
 800aed8:	603b      	str	r3, [r7, #0]
 800aeda:	4638      	mov	r0, r7
 800aedc:	f000 f80e 	bl	800aefc <__malloc_unlock>
 800aee0:	e797      	b.n	800ae12 <_malloc_r+0x22>
 800aee2:	6025      	str	r5, [r4, #0]
 800aee4:	e7dc      	b.n	800aea0 <_malloc_r+0xb0>
 800aee6:	605b      	str	r3, [r3, #4]
 800aee8:	deff      	udf	#255	; 0xff
 800aeea:	bf00      	nop
 800aeec:	2000024c 	.word	0x2000024c

0800aef0 <__malloc_lock>:
 800aef0:	4801      	ldr	r0, [pc, #4]	; (800aef8 <__malloc_lock+0x8>)
 800aef2:	f000 ba2d 	b.w	800b350 <__retarget_lock_acquire_recursive>
 800aef6:	bf00      	nop
 800aef8:	20000394 	.word	0x20000394

0800aefc <__malloc_unlock>:
 800aefc:	4801      	ldr	r0, [pc, #4]	; (800af04 <__malloc_unlock+0x8>)
 800aefe:	f000 ba28 	b.w	800b352 <__retarget_lock_release_recursive>
 800af02:	bf00      	nop
 800af04:	20000394 	.word	0x20000394

0800af08 <random>:
 800af08:	4b16      	ldr	r3, [pc, #88]	; (800af64 <random+0x5c>)
 800af0a:	b510      	push	{r4, lr}
 800af0c:	681c      	ldr	r4, [r3, #0]
 800af0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af10:	b9b3      	cbnz	r3, 800af40 <random+0x38>
 800af12:	2018      	movs	r0, #24
 800af14:	f7ff ff3c 	bl	800ad90 <malloc>
 800af18:	4602      	mov	r2, r0
 800af1a:	6320      	str	r0, [r4, #48]	; 0x30
 800af1c:	b920      	cbnz	r0, 800af28 <random+0x20>
 800af1e:	4b12      	ldr	r3, [pc, #72]	; (800af68 <random+0x60>)
 800af20:	4812      	ldr	r0, [pc, #72]	; (800af6c <random+0x64>)
 800af22:	214c      	movs	r1, #76	; 0x4c
 800af24:	f7ff ff16 	bl	800ad54 <__assert_func>
 800af28:	4911      	ldr	r1, [pc, #68]	; (800af70 <random+0x68>)
 800af2a:	4b12      	ldr	r3, [pc, #72]	; (800af74 <random+0x6c>)
 800af2c:	e9c0 1300 	strd	r1, r3, [r0]
 800af30:	4b11      	ldr	r3, [pc, #68]	; (800af78 <random+0x70>)
 800af32:	6083      	str	r3, [r0, #8]
 800af34:	230b      	movs	r3, #11
 800af36:	8183      	strh	r3, [r0, #12]
 800af38:	2100      	movs	r1, #0
 800af3a:	2001      	movs	r0, #1
 800af3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800af40:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800af42:	480e      	ldr	r0, [pc, #56]	; (800af7c <random+0x74>)
 800af44:	690b      	ldr	r3, [r1, #16]
 800af46:	694c      	ldr	r4, [r1, #20]
 800af48:	4a0d      	ldr	r2, [pc, #52]	; (800af80 <random+0x78>)
 800af4a:	4358      	muls	r0, r3
 800af4c:	fb02 0004 	mla	r0, r2, r4, r0
 800af50:	fba3 3202 	umull	r3, r2, r3, r2
 800af54:	3301      	adds	r3, #1
 800af56:	eb40 0002 	adc.w	r0, r0, r2
 800af5a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800af5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800af62:	bd10      	pop	{r4, pc}
 800af64:	200000b0 	.word	0x200000b0
 800af68:	0800cd74 	.word	0x0800cd74
 800af6c:	0800cd8b 	.word	0x0800cd8b
 800af70:	abcd330e 	.word	0xabcd330e
 800af74:	e66d1234 	.word	0xe66d1234
 800af78:	0005deec 	.word	0x0005deec
 800af7c:	5851f42d 	.word	0x5851f42d
 800af80:	4c957f2d 	.word	0x4c957f2d

0800af84 <std>:
 800af84:	2300      	movs	r3, #0
 800af86:	b510      	push	{r4, lr}
 800af88:	4604      	mov	r4, r0
 800af8a:	e9c0 3300 	strd	r3, r3, [r0]
 800af8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af92:	6083      	str	r3, [r0, #8]
 800af94:	8181      	strh	r1, [r0, #12]
 800af96:	6643      	str	r3, [r0, #100]	; 0x64
 800af98:	81c2      	strh	r2, [r0, #14]
 800af9a:	6183      	str	r3, [r0, #24]
 800af9c:	4619      	mov	r1, r3
 800af9e:	2208      	movs	r2, #8
 800afa0:	305c      	adds	r0, #92	; 0x5c
 800afa2:	f000 f91e 	bl	800b1e2 <memset>
 800afa6:	4b05      	ldr	r3, [pc, #20]	; (800afbc <std+0x38>)
 800afa8:	6263      	str	r3, [r4, #36]	; 0x24
 800afaa:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <std+0x3c>)
 800afac:	62a3      	str	r3, [r4, #40]	; 0x28
 800afae:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <std+0x40>)
 800afb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afb2:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <std+0x44>)
 800afb4:	6224      	str	r4, [r4, #32]
 800afb6:	6323      	str	r3, [r4, #48]	; 0x30
 800afb8:	bd10      	pop	{r4, pc}
 800afba:	bf00      	nop
 800afbc:	0800b13d 	.word	0x0800b13d
 800afc0:	0800b15f 	.word	0x0800b15f
 800afc4:	0800b197 	.word	0x0800b197
 800afc8:	0800b1bb 	.word	0x0800b1bb

0800afcc <stdio_exit_handler>:
 800afcc:	4a02      	ldr	r2, [pc, #8]	; (800afd8 <stdio_exit_handler+0xc>)
 800afce:	4903      	ldr	r1, [pc, #12]	; (800afdc <stdio_exit_handler+0x10>)
 800afd0:	4803      	ldr	r0, [pc, #12]	; (800afe0 <stdio_exit_handler+0x14>)
 800afd2:	f000 b87b 	b.w	800b0cc <_fwalk_sglue>
 800afd6:	bf00      	nop
 800afd8:	20000058 	.word	0x20000058
 800afdc:	0800bacd 	.word	0x0800bacd
 800afe0:	20000064 	.word	0x20000064

0800afe4 <cleanup_stdio>:
 800afe4:	6841      	ldr	r1, [r0, #4]
 800afe6:	4b0c      	ldr	r3, [pc, #48]	; (800b018 <cleanup_stdio+0x34>)
 800afe8:	4299      	cmp	r1, r3
 800afea:	b510      	push	{r4, lr}
 800afec:	4604      	mov	r4, r0
 800afee:	d001      	beq.n	800aff4 <cleanup_stdio+0x10>
 800aff0:	f000 fd6c 	bl	800bacc <_fflush_r>
 800aff4:	68a1      	ldr	r1, [r4, #8]
 800aff6:	4b09      	ldr	r3, [pc, #36]	; (800b01c <cleanup_stdio+0x38>)
 800aff8:	4299      	cmp	r1, r3
 800affa:	d002      	beq.n	800b002 <cleanup_stdio+0x1e>
 800affc:	4620      	mov	r0, r4
 800affe:	f000 fd65 	bl	800bacc <_fflush_r>
 800b002:	68e1      	ldr	r1, [r4, #12]
 800b004:	4b06      	ldr	r3, [pc, #24]	; (800b020 <cleanup_stdio+0x3c>)
 800b006:	4299      	cmp	r1, r3
 800b008:	d004      	beq.n	800b014 <cleanup_stdio+0x30>
 800b00a:	4620      	mov	r0, r4
 800b00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b010:	f000 bd5c 	b.w	800bacc <_fflush_r>
 800b014:	bd10      	pop	{r4, pc}
 800b016:	bf00      	nop
 800b018:	20000254 	.word	0x20000254
 800b01c:	200002bc 	.word	0x200002bc
 800b020:	20000324 	.word	0x20000324

0800b024 <global_stdio_init.part.0>:
 800b024:	b510      	push	{r4, lr}
 800b026:	4b0b      	ldr	r3, [pc, #44]	; (800b054 <global_stdio_init.part.0+0x30>)
 800b028:	4c0b      	ldr	r4, [pc, #44]	; (800b058 <global_stdio_init.part.0+0x34>)
 800b02a:	4a0c      	ldr	r2, [pc, #48]	; (800b05c <global_stdio_init.part.0+0x38>)
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	4620      	mov	r0, r4
 800b030:	2200      	movs	r2, #0
 800b032:	2104      	movs	r1, #4
 800b034:	f7ff ffa6 	bl	800af84 <std>
 800b038:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b03c:	2201      	movs	r2, #1
 800b03e:	2109      	movs	r1, #9
 800b040:	f7ff ffa0 	bl	800af84 <std>
 800b044:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b048:	2202      	movs	r2, #2
 800b04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b04e:	2112      	movs	r1, #18
 800b050:	f7ff bf98 	b.w	800af84 <std>
 800b054:	2000038c 	.word	0x2000038c
 800b058:	20000254 	.word	0x20000254
 800b05c:	0800afcd 	.word	0x0800afcd

0800b060 <__sfp_lock_acquire>:
 800b060:	4801      	ldr	r0, [pc, #4]	; (800b068 <__sfp_lock_acquire+0x8>)
 800b062:	f000 b975 	b.w	800b350 <__retarget_lock_acquire_recursive>
 800b066:	bf00      	nop
 800b068:	20000395 	.word	0x20000395

0800b06c <__sfp_lock_release>:
 800b06c:	4801      	ldr	r0, [pc, #4]	; (800b074 <__sfp_lock_release+0x8>)
 800b06e:	f000 b970 	b.w	800b352 <__retarget_lock_release_recursive>
 800b072:	bf00      	nop
 800b074:	20000395 	.word	0x20000395

0800b078 <__sinit>:
 800b078:	b510      	push	{r4, lr}
 800b07a:	4604      	mov	r4, r0
 800b07c:	f7ff fff0 	bl	800b060 <__sfp_lock_acquire>
 800b080:	6a23      	ldr	r3, [r4, #32]
 800b082:	b11b      	cbz	r3, 800b08c <__sinit+0x14>
 800b084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b088:	f7ff bff0 	b.w	800b06c <__sfp_lock_release>
 800b08c:	4b04      	ldr	r3, [pc, #16]	; (800b0a0 <__sinit+0x28>)
 800b08e:	6223      	str	r3, [r4, #32]
 800b090:	4b04      	ldr	r3, [pc, #16]	; (800b0a4 <__sinit+0x2c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1f5      	bne.n	800b084 <__sinit+0xc>
 800b098:	f7ff ffc4 	bl	800b024 <global_stdio_init.part.0>
 800b09c:	e7f2      	b.n	800b084 <__sinit+0xc>
 800b09e:	bf00      	nop
 800b0a0:	0800afe5 	.word	0x0800afe5
 800b0a4:	2000038c 	.word	0x2000038c

0800b0a8 <fiprintf>:
 800b0a8:	b40e      	push	{r1, r2, r3}
 800b0aa:	b503      	push	{r0, r1, lr}
 800b0ac:	4601      	mov	r1, r0
 800b0ae:	ab03      	add	r3, sp, #12
 800b0b0:	4805      	ldr	r0, [pc, #20]	; (800b0c8 <fiprintf+0x20>)
 800b0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0b6:	6800      	ldr	r0, [r0, #0]
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	f000 f9d7 	bl	800b46c <_vfiprintf_r>
 800b0be:	b002      	add	sp, #8
 800b0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0c4:	b003      	add	sp, #12
 800b0c6:	4770      	bx	lr
 800b0c8:	200000b0 	.word	0x200000b0

0800b0cc <_fwalk_sglue>:
 800b0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0d0:	4607      	mov	r7, r0
 800b0d2:	4688      	mov	r8, r1
 800b0d4:	4614      	mov	r4, r2
 800b0d6:	2600      	movs	r6, #0
 800b0d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0dc:	f1b9 0901 	subs.w	r9, r9, #1
 800b0e0:	d505      	bpl.n	800b0ee <_fwalk_sglue+0x22>
 800b0e2:	6824      	ldr	r4, [r4, #0]
 800b0e4:	2c00      	cmp	r4, #0
 800b0e6:	d1f7      	bne.n	800b0d8 <_fwalk_sglue+0xc>
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ee:	89ab      	ldrh	r3, [r5, #12]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d907      	bls.n	800b104 <_fwalk_sglue+0x38>
 800b0f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	d003      	beq.n	800b104 <_fwalk_sglue+0x38>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4638      	mov	r0, r7
 800b100:	47c0      	blx	r8
 800b102:	4306      	orrs	r6, r0
 800b104:	3568      	adds	r5, #104	; 0x68
 800b106:	e7e9      	b.n	800b0dc <_fwalk_sglue+0x10>

0800b108 <iprintf>:
 800b108:	b40f      	push	{r0, r1, r2, r3}
 800b10a:	b507      	push	{r0, r1, r2, lr}
 800b10c:	4906      	ldr	r1, [pc, #24]	; (800b128 <iprintf+0x20>)
 800b10e:	ab04      	add	r3, sp, #16
 800b110:	6808      	ldr	r0, [r1, #0]
 800b112:	f853 2b04 	ldr.w	r2, [r3], #4
 800b116:	6881      	ldr	r1, [r0, #8]
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	f000 f9a7 	bl	800b46c <_vfiprintf_r>
 800b11e:	b003      	add	sp, #12
 800b120:	f85d eb04 	ldr.w	lr, [sp], #4
 800b124:	b004      	add	sp, #16
 800b126:	4770      	bx	lr
 800b128:	200000b0 	.word	0x200000b0

0800b12c <putchar>:
 800b12c:	4b02      	ldr	r3, [pc, #8]	; (800b138 <putchar+0xc>)
 800b12e:	4601      	mov	r1, r0
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	6882      	ldr	r2, [r0, #8]
 800b134:	f000 bcf2 	b.w	800bb1c <_putc_r>
 800b138:	200000b0 	.word	0x200000b0

0800b13c <__sread>:
 800b13c:	b510      	push	{r4, lr}
 800b13e:	460c      	mov	r4, r1
 800b140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b144:	f000 f8a6 	bl	800b294 <_read_r>
 800b148:	2800      	cmp	r0, #0
 800b14a:	bfab      	itete	ge
 800b14c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b14e:	89a3      	ldrhlt	r3, [r4, #12]
 800b150:	181b      	addge	r3, r3, r0
 800b152:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b156:	bfac      	ite	ge
 800b158:	6563      	strge	r3, [r4, #84]	; 0x54
 800b15a:	81a3      	strhlt	r3, [r4, #12]
 800b15c:	bd10      	pop	{r4, pc}

0800b15e <__swrite>:
 800b15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b162:	461f      	mov	r7, r3
 800b164:	898b      	ldrh	r3, [r1, #12]
 800b166:	05db      	lsls	r3, r3, #23
 800b168:	4605      	mov	r5, r0
 800b16a:	460c      	mov	r4, r1
 800b16c:	4616      	mov	r6, r2
 800b16e:	d505      	bpl.n	800b17c <__swrite+0x1e>
 800b170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b174:	2302      	movs	r3, #2
 800b176:	2200      	movs	r2, #0
 800b178:	f000 f87a 	bl	800b270 <_lseek_r>
 800b17c:	89a3      	ldrh	r3, [r4, #12]
 800b17e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b186:	81a3      	strh	r3, [r4, #12]
 800b188:	4632      	mov	r2, r6
 800b18a:	463b      	mov	r3, r7
 800b18c:	4628      	mov	r0, r5
 800b18e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b192:	f000 b8a1 	b.w	800b2d8 <_write_r>

0800b196 <__sseek>:
 800b196:	b510      	push	{r4, lr}
 800b198:	460c      	mov	r4, r1
 800b19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b19e:	f000 f867 	bl	800b270 <_lseek_r>
 800b1a2:	1c43      	adds	r3, r0, #1
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	bf15      	itete	ne
 800b1a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1b2:	81a3      	strheq	r3, [r4, #12]
 800b1b4:	bf18      	it	ne
 800b1b6:	81a3      	strhne	r3, [r4, #12]
 800b1b8:	bd10      	pop	{r4, pc}

0800b1ba <__sclose>:
 800b1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1be:	f000 b847 	b.w	800b250 <_close_r>

0800b1c2 <memcmp>:
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	3901      	subs	r1, #1
 800b1c6:	4402      	add	r2, r0
 800b1c8:	4290      	cmp	r0, r2
 800b1ca:	d101      	bne.n	800b1d0 <memcmp+0xe>
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	e005      	b.n	800b1dc <memcmp+0x1a>
 800b1d0:	7803      	ldrb	r3, [r0, #0]
 800b1d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b1d6:	42a3      	cmp	r3, r4
 800b1d8:	d001      	beq.n	800b1de <memcmp+0x1c>
 800b1da:	1b18      	subs	r0, r3, r4
 800b1dc:	bd10      	pop	{r4, pc}
 800b1de:	3001      	adds	r0, #1
 800b1e0:	e7f2      	b.n	800b1c8 <memcmp+0x6>

0800b1e2 <memset>:
 800b1e2:	4402      	add	r2, r0
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d100      	bne.n	800b1ec <memset+0xa>
 800b1ea:	4770      	bx	lr
 800b1ec:	f803 1b01 	strb.w	r1, [r3], #1
 800b1f0:	e7f9      	b.n	800b1e6 <memset+0x4>

0800b1f2 <strchr>:
 800b1f2:	b2c9      	uxtb	r1, r1
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1fa:	b11a      	cbz	r2, 800b204 <strchr+0x12>
 800b1fc:	428a      	cmp	r2, r1
 800b1fe:	d1f9      	bne.n	800b1f4 <strchr+0x2>
 800b200:	4618      	mov	r0, r3
 800b202:	4770      	bx	lr
 800b204:	2900      	cmp	r1, #0
 800b206:	bf18      	it	ne
 800b208:	2300      	movne	r3, #0
 800b20a:	e7f9      	b.n	800b200 <strchr+0xe>

0800b20c <strcspn>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	4603      	mov	r3, r0
 800b210:	461e      	mov	r6, r3
 800b212:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b216:	b144      	cbz	r4, 800b22a <strcspn+0x1e>
 800b218:	1e4a      	subs	r2, r1, #1
 800b21a:	e001      	b.n	800b220 <strcspn+0x14>
 800b21c:	42a5      	cmp	r5, r4
 800b21e:	d004      	beq.n	800b22a <strcspn+0x1e>
 800b220:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b224:	2d00      	cmp	r5, #0
 800b226:	d1f9      	bne.n	800b21c <strcspn+0x10>
 800b228:	e7f2      	b.n	800b210 <strcspn+0x4>
 800b22a:	1a30      	subs	r0, r6, r0
 800b22c:	bd70      	pop	{r4, r5, r6, pc}

0800b22e <strspn>:
 800b22e:	b570      	push	{r4, r5, r6, lr}
 800b230:	4603      	mov	r3, r0
 800b232:	461e      	mov	r6, r3
 800b234:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b238:	b13c      	cbz	r4, 800b24a <strspn+0x1c>
 800b23a:	1e4a      	subs	r2, r1, #1
 800b23c:	e001      	b.n	800b242 <strspn+0x14>
 800b23e:	42a5      	cmp	r5, r4
 800b240:	d0f7      	beq.n	800b232 <strspn+0x4>
 800b242:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b246:	2d00      	cmp	r5, #0
 800b248:	d1f9      	bne.n	800b23e <strspn+0x10>
 800b24a:	1a30      	subs	r0, r6, r0
 800b24c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b250 <_close_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4d06      	ldr	r5, [pc, #24]	; (800b26c <_close_r+0x1c>)
 800b254:	2300      	movs	r3, #0
 800b256:	4604      	mov	r4, r0
 800b258:	4608      	mov	r0, r1
 800b25a:	602b      	str	r3, [r5, #0]
 800b25c:	f7f5 fea2 	bl	8000fa4 <_close>
 800b260:	1c43      	adds	r3, r0, #1
 800b262:	d102      	bne.n	800b26a <_close_r+0x1a>
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	b103      	cbz	r3, 800b26a <_close_r+0x1a>
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	bd38      	pop	{r3, r4, r5, pc}
 800b26c:	20000390 	.word	0x20000390

0800b270 <_lseek_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4d07      	ldr	r5, [pc, #28]	; (800b290 <_lseek_r+0x20>)
 800b274:	4604      	mov	r4, r0
 800b276:	4608      	mov	r0, r1
 800b278:	4611      	mov	r1, r2
 800b27a:	2200      	movs	r2, #0
 800b27c:	602a      	str	r2, [r5, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	f7f5 feb7 	bl	8000ff2 <_lseek>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	d102      	bne.n	800b28e <_lseek_r+0x1e>
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	b103      	cbz	r3, 800b28e <_lseek_r+0x1e>
 800b28c:	6023      	str	r3, [r4, #0]
 800b28e:	bd38      	pop	{r3, r4, r5, pc}
 800b290:	20000390 	.word	0x20000390

0800b294 <_read_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d07      	ldr	r5, [pc, #28]	; (800b2b4 <_read_r+0x20>)
 800b298:	4604      	mov	r4, r0
 800b29a:	4608      	mov	r0, r1
 800b29c:	4611      	mov	r1, r2
 800b29e:	2200      	movs	r2, #0
 800b2a0:	602a      	str	r2, [r5, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	f7f5 fe61 	bl	8000f6a <_read>
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	d102      	bne.n	800b2b2 <_read_r+0x1e>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	b103      	cbz	r3, 800b2b2 <_read_r+0x1e>
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	bd38      	pop	{r3, r4, r5, pc}
 800b2b4:	20000390 	.word	0x20000390

0800b2b8 <_sbrk_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4d06      	ldr	r5, [pc, #24]	; (800b2d4 <_sbrk_r+0x1c>)
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4604      	mov	r4, r0
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	602b      	str	r3, [r5, #0]
 800b2c4:	f7f5 fea2 	bl	800100c <_sbrk>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d102      	bne.n	800b2d2 <_sbrk_r+0x1a>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b103      	cbz	r3, 800b2d2 <_sbrk_r+0x1a>
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	bd38      	pop	{r3, r4, r5, pc}
 800b2d4:	20000390 	.word	0x20000390

0800b2d8 <_write_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4d07      	ldr	r5, [pc, #28]	; (800b2f8 <_write_r+0x20>)
 800b2dc:	4604      	mov	r4, r0
 800b2de:	4608      	mov	r0, r1
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	602a      	str	r2, [r5, #0]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	f7f5 f9fa 	bl	80006e0 <_write>
 800b2ec:	1c43      	adds	r3, r0, #1
 800b2ee:	d102      	bne.n	800b2f6 <_write_r+0x1e>
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	b103      	cbz	r3, 800b2f6 <_write_r+0x1e>
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
 800b2f8:	20000390 	.word	0x20000390

0800b2fc <__errno>:
 800b2fc:	4b01      	ldr	r3, [pc, #4]	; (800b304 <__errno+0x8>)
 800b2fe:	6818      	ldr	r0, [r3, #0]
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	200000b0 	.word	0x200000b0

0800b308 <__libc_init_array>:
 800b308:	b570      	push	{r4, r5, r6, lr}
 800b30a:	4d0d      	ldr	r5, [pc, #52]	; (800b340 <__libc_init_array+0x38>)
 800b30c:	4c0d      	ldr	r4, [pc, #52]	; (800b344 <__libc_init_array+0x3c>)
 800b30e:	1b64      	subs	r4, r4, r5
 800b310:	10a4      	asrs	r4, r4, #2
 800b312:	2600      	movs	r6, #0
 800b314:	42a6      	cmp	r6, r4
 800b316:	d109      	bne.n	800b32c <__libc_init_array+0x24>
 800b318:	4d0b      	ldr	r5, [pc, #44]	; (800b348 <__libc_init_array+0x40>)
 800b31a:	4c0c      	ldr	r4, [pc, #48]	; (800b34c <__libc_init_array+0x44>)
 800b31c:	f000 fd90 	bl	800be40 <_init>
 800b320:	1b64      	subs	r4, r4, r5
 800b322:	10a4      	asrs	r4, r4, #2
 800b324:	2600      	movs	r6, #0
 800b326:	42a6      	cmp	r6, r4
 800b328:	d105      	bne.n	800b336 <__libc_init_array+0x2e>
 800b32a:	bd70      	pop	{r4, r5, r6, pc}
 800b32c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b330:	4798      	blx	r3
 800b332:	3601      	adds	r6, #1
 800b334:	e7ee      	b.n	800b314 <__libc_init_array+0xc>
 800b336:	f855 3b04 	ldr.w	r3, [r5], #4
 800b33a:	4798      	blx	r3
 800b33c:	3601      	adds	r6, #1
 800b33e:	e7f2      	b.n	800b326 <__libc_init_array+0x1e>
 800b340:	0800ce20 	.word	0x0800ce20
 800b344:	0800ce20 	.word	0x0800ce20
 800b348:	0800ce20 	.word	0x0800ce20
 800b34c:	0800ce24 	.word	0x0800ce24

0800b350 <__retarget_lock_acquire_recursive>:
 800b350:	4770      	bx	lr

0800b352 <__retarget_lock_release_recursive>:
 800b352:	4770      	bx	lr

0800b354 <memcpy>:
 800b354:	440a      	add	r2, r1
 800b356:	4291      	cmp	r1, r2
 800b358:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b35c:	d100      	bne.n	800b360 <memcpy+0xc>
 800b35e:	4770      	bx	lr
 800b360:	b510      	push	{r4, lr}
 800b362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b36a:	4291      	cmp	r1, r2
 800b36c:	d1f9      	bne.n	800b362 <memcpy+0xe>
 800b36e:	bd10      	pop	{r4, pc}

0800b370 <abort>:
 800b370:	b508      	push	{r3, lr}
 800b372:	2006      	movs	r0, #6
 800b374:	f000 fcc4 	bl	800bd00 <raise>
 800b378:	2001      	movs	r0, #1
 800b37a:	f7f5 fdec 	bl	8000f56 <_exit>
	...

0800b380 <_free_r>:
 800b380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b382:	2900      	cmp	r1, #0
 800b384:	d044      	beq.n	800b410 <_free_r+0x90>
 800b386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b38a:	9001      	str	r0, [sp, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f1a1 0404 	sub.w	r4, r1, #4
 800b392:	bfb8      	it	lt
 800b394:	18e4      	addlt	r4, r4, r3
 800b396:	f7ff fdab 	bl	800aef0 <__malloc_lock>
 800b39a:	4a1e      	ldr	r2, [pc, #120]	; (800b414 <_free_r+0x94>)
 800b39c:	9801      	ldr	r0, [sp, #4]
 800b39e:	6813      	ldr	r3, [r2, #0]
 800b3a0:	b933      	cbnz	r3, 800b3b0 <_free_r+0x30>
 800b3a2:	6063      	str	r3, [r4, #4]
 800b3a4:	6014      	str	r4, [r2, #0]
 800b3a6:	b003      	add	sp, #12
 800b3a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3ac:	f7ff bda6 	b.w	800aefc <__malloc_unlock>
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	d908      	bls.n	800b3c6 <_free_r+0x46>
 800b3b4:	6825      	ldr	r5, [r4, #0]
 800b3b6:	1961      	adds	r1, r4, r5
 800b3b8:	428b      	cmp	r3, r1
 800b3ba:	bf01      	itttt	eq
 800b3bc:	6819      	ldreq	r1, [r3, #0]
 800b3be:	685b      	ldreq	r3, [r3, #4]
 800b3c0:	1949      	addeq	r1, r1, r5
 800b3c2:	6021      	streq	r1, [r4, #0]
 800b3c4:	e7ed      	b.n	800b3a2 <_free_r+0x22>
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	b10b      	cbz	r3, 800b3d0 <_free_r+0x50>
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	d9fa      	bls.n	800b3c6 <_free_r+0x46>
 800b3d0:	6811      	ldr	r1, [r2, #0]
 800b3d2:	1855      	adds	r5, r2, r1
 800b3d4:	42a5      	cmp	r5, r4
 800b3d6:	d10b      	bne.n	800b3f0 <_free_r+0x70>
 800b3d8:	6824      	ldr	r4, [r4, #0]
 800b3da:	4421      	add	r1, r4
 800b3dc:	1854      	adds	r4, r2, r1
 800b3de:	42a3      	cmp	r3, r4
 800b3e0:	6011      	str	r1, [r2, #0]
 800b3e2:	d1e0      	bne.n	800b3a6 <_free_r+0x26>
 800b3e4:	681c      	ldr	r4, [r3, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	6053      	str	r3, [r2, #4]
 800b3ea:	440c      	add	r4, r1
 800b3ec:	6014      	str	r4, [r2, #0]
 800b3ee:	e7da      	b.n	800b3a6 <_free_r+0x26>
 800b3f0:	d902      	bls.n	800b3f8 <_free_r+0x78>
 800b3f2:	230c      	movs	r3, #12
 800b3f4:	6003      	str	r3, [r0, #0]
 800b3f6:	e7d6      	b.n	800b3a6 <_free_r+0x26>
 800b3f8:	6825      	ldr	r5, [r4, #0]
 800b3fa:	1961      	adds	r1, r4, r5
 800b3fc:	428b      	cmp	r3, r1
 800b3fe:	bf04      	itt	eq
 800b400:	6819      	ldreq	r1, [r3, #0]
 800b402:	685b      	ldreq	r3, [r3, #4]
 800b404:	6063      	str	r3, [r4, #4]
 800b406:	bf04      	itt	eq
 800b408:	1949      	addeq	r1, r1, r5
 800b40a:	6021      	streq	r1, [r4, #0]
 800b40c:	6054      	str	r4, [r2, #4]
 800b40e:	e7ca      	b.n	800b3a6 <_free_r+0x26>
 800b410:	b003      	add	sp, #12
 800b412:	bd30      	pop	{r4, r5, pc}
 800b414:	2000024c 	.word	0x2000024c

0800b418 <__sfputc_r>:
 800b418:	6893      	ldr	r3, [r2, #8]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	b410      	push	{r4}
 800b420:	6093      	str	r3, [r2, #8]
 800b422:	da08      	bge.n	800b436 <__sfputc_r+0x1e>
 800b424:	6994      	ldr	r4, [r2, #24]
 800b426:	42a3      	cmp	r3, r4
 800b428:	db01      	blt.n	800b42e <__sfputc_r+0x16>
 800b42a:	290a      	cmp	r1, #10
 800b42c:	d103      	bne.n	800b436 <__sfputc_r+0x1e>
 800b42e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b432:	f000 bba7 	b.w	800bb84 <__swbuf_r>
 800b436:	6813      	ldr	r3, [r2, #0]
 800b438:	1c58      	adds	r0, r3, #1
 800b43a:	6010      	str	r0, [r2, #0]
 800b43c:	7019      	strb	r1, [r3, #0]
 800b43e:	4608      	mov	r0, r1
 800b440:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b444:	4770      	bx	lr

0800b446 <__sfputs_r>:
 800b446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b448:	4606      	mov	r6, r0
 800b44a:	460f      	mov	r7, r1
 800b44c:	4614      	mov	r4, r2
 800b44e:	18d5      	adds	r5, r2, r3
 800b450:	42ac      	cmp	r4, r5
 800b452:	d101      	bne.n	800b458 <__sfputs_r+0x12>
 800b454:	2000      	movs	r0, #0
 800b456:	e007      	b.n	800b468 <__sfputs_r+0x22>
 800b458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b45c:	463a      	mov	r2, r7
 800b45e:	4630      	mov	r0, r6
 800b460:	f7ff ffda 	bl	800b418 <__sfputc_r>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d1f3      	bne.n	800b450 <__sfputs_r+0xa>
 800b468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b46c <_vfiprintf_r>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	460d      	mov	r5, r1
 800b472:	b09d      	sub	sp, #116	; 0x74
 800b474:	4614      	mov	r4, r2
 800b476:	4698      	mov	r8, r3
 800b478:	4606      	mov	r6, r0
 800b47a:	b118      	cbz	r0, 800b484 <_vfiprintf_r+0x18>
 800b47c:	6a03      	ldr	r3, [r0, #32]
 800b47e:	b90b      	cbnz	r3, 800b484 <_vfiprintf_r+0x18>
 800b480:	f7ff fdfa 	bl	800b078 <__sinit>
 800b484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b486:	07d9      	lsls	r1, r3, #31
 800b488:	d405      	bmi.n	800b496 <_vfiprintf_r+0x2a>
 800b48a:	89ab      	ldrh	r3, [r5, #12]
 800b48c:	059a      	lsls	r2, r3, #22
 800b48e:	d402      	bmi.n	800b496 <_vfiprintf_r+0x2a>
 800b490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b492:	f7ff ff5d 	bl	800b350 <__retarget_lock_acquire_recursive>
 800b496:	89ab      	ldrh	r3, [r5, #12]
 800b498:	071b      	lsls	r3, r3, #28
 800b49a:	d501      	bpl.n	800b4a0 <_vfiprintf_r+0x34>
 800b49c:	692b      	ldr	r3, [r5, #16]
 800b49e:	b99b      	cbnz	r3, 800b4c8 <_vfiprintf_r+0x5c>
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f000 fbac 	bl	800bc00 <__swsetup_r>
 800b4a8:	b170      	cbz	r0, 800b4c8 <_vfiprintf_r+0x5c>
 800b4aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4ac:	07dc      	lsls	r4, r3, #31
 800b4ae:	d504      	bpl.n	800b4ba <_vfiprintf_r+0x4e>
 800b4b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4b4:	b01d      	add	sp, #116	; 0x74
 800b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ba:	89ab      	ldrh	r3, [r5, #12]
 800b4bc:	0598      	lsls	r0, r3, #22
 800b4be:	d4f7      	bmi.n	800b4b0 <_vfiprintf_r+0x44>
 800b4c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4c2:	f7ff ff46 	bl	800b352 <__retarget_lock_release_recursive>
 800b4c6:	e7f3      	b.n	800b4b0 <_vfiprintf_r+0x44>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b4cc:	2320      	movs	r3, #32
 800b4ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4d6:	2330      	movs	r3, #48	; 0x30
 800b4d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b68c <_vfiprintf_r+0x220>
 800b4dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4e0:	f04f 0901 	mov.w	r9, #1
 800b4e4:	4623      	mov	r3, r4
 800b4e6:	469a      	mov	sl, r3
 800b4e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4ec:	b10a      	cbz	r2, 800b4f2 <_vfiprintf_r+0x86>
 800b4ee:	2a25      	cmp	r2, #37	; 0x25
 800b4f0:	d1f9      	bne.n	800b4e6 <_vfiprintf_r+0x7a>
 800b4f2:	ebba 0b04 	subs.w	fp, sl, r4
 800b4f6:	d00b      	beq.n	800b510 <_vfiprintf_r+0xa4>
 800b4f8:	465b      	mov	r3, fp
 800b4fa:	4622      	mov	r2, r4
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	4630      	mov	r0, r6
 800b500:	f7ff ffa1 	bl	800b446 <__sfputs_r>
 800b504:	3001      	adds	r0, #1
 800b506:	f000 80a9 	beq.w	800b65c <_vfiprintf_r+0x1f0>
 800b50a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b50c:	445a      	add	r2, fp
 800b50e:	9209      	str	r2, [sp, #36]	; 0x24
 800b510:	f89a 3000 	ldrb.w	r3, [sl]
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80a1 	beq.w	800b65c <_vfiprintf_r+0x1f0>
 800b51a:	2300      	movs	r3, #0
 800b51c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b524:	f10a 0a01 	add.w	sl, sl, #1
 800b528:	9304      	str	r3, [sp, #16]
 800b52a:	9307      	str	r3, [sp, #28]
 800b52c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b530:	931a      	str	r3, [sp, #104]	; 0x68
 800b532:	4654      	mov	r4, sl
 800b534:	2205      	movs	r2, #5
 800b536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b53a:	4854      	ldr	r0, [pc, #336]	; (800b68c <_vfiprintf_r+0x220>)
 800b53c:	f7f4 fe58 	bl	80001f0 <memchr>
 800b540:	9a04      	ldr	r2, [sp, #16]
 800b542:	b9d8      	cbnz	r0, 800b57c <_vfiprintf_r+0x110>
 800b544:	06d1      	lsls	r1, r2, #27
 800b546:	bf44      	itt	mi
 800b548:	2320      	movmi	r3, #32
 800b54a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b54e:	0713      	lsls	r3, r2, #28
 800b550:	bf44      	itt	mi
 800b552:	232b      	movmi	r3, #43	; 0x2b
 800b554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b558:	f89a 3000 	ldrb.w	r3, [sl]
 800b55c:	2b2a      	cmp	r3, #42	; 0x2a
 800b55e:	d015      	beq.n	800b58c <_vfiprintf_r+0x120>
 800b560:	9a07      	ldr	r2, [sp, #28]
 800b562:	4654      	mov	r4, sl
 800b564:	2000      	movs	r0, #0
 800b566:	f04f 0c0a 	mov.w	ip, #10
 800b56a:	4621      	mov	r1, r4
 800b56c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b570:	3b30      	subs	r3, #48	; 0x30
 800b572:	2b09      	cmp	r3, #9
 800b574:	d94d      	bls.n	800b612 <_vfiprintf_r+0x1a6>
 800b576:	b1b0      	cbz	r0, 800b5a6 <_vfiprintf_r+0x13a>
 800b578:	9207      	str	r2, [sp, #28]
 800b57a:	e014      	b.n	800b5a6 <_vfiprintf_r+0x13a>
 800b57c:	eba0 0308 	sub.w	r3, r0, r8
 800b580:	fa09 f303 	lsl.w	r3, r9, r3
 800b584:	4313      	orrs	r3, r2
 800b586:	9304      	str	r3, [sp, #16]
 800b588:	46a2      	mov	sl, r4
 800b58a:	e7d2      	b.n	800b532 <_vfiprintf_r+0xc6>
 800b58c:	9b03      	ldr	r3, [sp, #12]
 800b58e:	1d19      	adds	r1, r3, #4
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	9103      	str	r1, [sp, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	bfbb      	ittet	lt
 800b598:	425b      	neglt	r3, r3
 800b59a:	f042 0202 	orrlt.w	r2, r2, #2
 800b59e:	9307      	strge	r3, [sp, #28]
 800b5a0:	9307      	strlt	r3, [sp, #28]
 800b5a2:	bfb8      	it	lt
 800b5a4:	9204      	strlt	r2, [sp, #16]
 800b5a6:	7823      	ldrb	r3, [r4, #0]
 800b5a8:	2b2e      	cmp	r3, #46	; 0x2e
 800b5aa:	d10c      	bne.n	800b5c6 <_vfiprintf_r+0x15a>
 800b5ac:	7863      	ldrb	r3, [r4, #1]
 800b5ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b5b0:	d134      	bne.n	800b61c <_vfiprintf_r+0x1b0>
 800b5b2:	9b03      	ldr	r3, [sp, #12]
 800b5b4:	1d1a      	adds	r2, r3, #4
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	9203      	str	r2, [sp, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	bfb8      	it	lt
 800b5be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b5c2:	3402      	adds	r4, #2
 800b5c4:	9305      	str	r3, [sp, #20]
 800b5c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b69c <_vfiprintf_r+0x230>
 800b5ca:	7821      	ldrb	r1, [r4, #0]
 800b5cc:	2203      	movs	r2, #3
 800b5ce:	4650      	mov	r0, sl
 800b5d0:	f7f4 fe0e 	bl	80001f0 <memchr>
 800b5d4:	b138      	cbz	r0, 800b5e6 <_vfiprintf_r+0x17a>
 800b5d6:	9b04      	ldr	r3, [sp, #16]
 800b5d8:	eba0 000a 	sub.w	r0, r0, sl
 800b5dc:	2240      	movs	r2, #64	; 0x40
 800b5de:	4082      	lsls	r2, r0
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	3401      	adds	r4, #1
 800b5e4:	9304      	str	r3, [sp, #16]
 800b5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ea:	4829      	ldr	r0, [pc, #164]	; (800b690 <_vfiprintf_r+0x224>)
 800b5ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5f0:	2206      	movs	r2, #6
 800b5f2:	f7f4 fdfd 	bl	80001f0 <memchr>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d03f      	beq.n	800b67a <_vfiprintf_r+0x20e>
 800b5fa:	4b26      	ldr	r3, [pc, #152]	; (800b694 <_vfiprintf_r+0x228>)
 800b5fc:	bb1b      	cbnz	r3, 800b646 <_vfiprintf_r+0x1da>
 800b5fe:	9b03      	ldr	r3, [sp, #12]
 800b600:	3307      	adds	r3, #7
 800b602:	f023 0307 	bic.w	r3, r3, #7
 800b606:	3308      	adds	r3, #8
 800b608:	9303      	str	r3, [sp, #12]
 800b60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b60c:	443b      	add	r3, r7
 800b60e:	9309      	str	r3, [sp, #36]	; 0x24
 800b610:	e768      	b.n	800b4e4 <_vfiprintf_r+0x78>
 800b612:	fb0c 3202 	mla	r2, ip, r2, r3
 800b616:	460c      	mov	r4, r1
 800b618:	2001      	movs	r0, #1
 800b61a:	e7a6      	b.n	800b56a <_vfiprintf_r+0xfe>
 800b61c:	2300      	movs	r3, #0
 800b61e:	3401      	adds	r4, #1
 800b620:	9305      	str	r3, [sp, #20]
 800b622:	4619      	mov	r1, r3
 800b624:	f04f 0c0a 	mov.w	ip, #10
 800b628:	4620      	mov	r0, r4
 800b62a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b62e:	3a30      	subs	r2, #48	; 0x30
 800b630:	2a09      	cmp	r2, #9
 800b632:	d903      	bls.n	800b63c <_vfiprintf_r+0x1d0>
 800b634:	2b00      	cmp	r3, #0
 800b636:	d0c6      	beq.n	800b5c6 <_vfiprintf_r+0x15a>
 800b638:	9105      	str	r1, [sp, #20]
 800b63a:	e7c4      	b.n	800b5c6 <_vfiprintf_r+0x15a>
 800b63c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b640:	4604      	mov	r4, r0
 800b642:	2301      	movs	r3, #1
 800b644:	e7f0      	b.n	800b628 <_vfiprintf_r+0x1bc>
 800b646:	ab03      	add	r3, sp, #12
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	462a      	mov	r2, r5
 800b64c:	4b12      	ldr	r3, [pc, #72]	; (800b698 <_vfiprintf_r+0x22c>)
 800b64e:	a904      	add	r1, sp, #16
 800b650:	4630      	mov	r0, r6
 800b652:	f3af 8000 	nop.w
 800b656:	4607      	mov	r7, r0
 800b658:	1c78      	adds	r0, r7, #1
 800b65a:	d1d6      	bne.n	800b60a <_vfiprintf_r+0x19e>
 800b65c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b65e:	07d9      	lsls	r1, r3, #31
 800b660:	d405      	bmi.n	800b66e <_vfiprintf_r+0x202>
 800b662:	89ab      	ldrh	r3, [r5, #12]
 800b664:	059a      	lsls	r2, r3, #22
 800b666:	d402      	bmi.n	800b66e <_vfiprintf_r+0x202>
 800b668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b66a:	f7ff fe72 	bl	800b352 <__retarget_lock_release_recursive>
 800b66e:	89ab      	ldrh	r3, [r5, #12]
 800b670:	065b      	lsls	r3, r3, #25
 800b672:	f53f af1d 	bmi.w	800b4b0 <_vfiprintf_r+0x44>
 800b676:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b678:	e71c      	b.n	800b4b4 <_vfiprintf_r+0x48>
 800b67a:	ab03      	add	r3, sp, #12
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	462a      	mov	r2, r5
 800b680:	4b05      	ldr	r3, [pc, #20]	; (800b698 <_vfiprintf_r+0x22c>)
 800b682:	a904      	add	r1, sp, #16
 800b684:	4630      	mov	r0, r6
 800b686:	f000 f879 	bl	800b77c <_printf_i>
 800b68a:	e7e4      	b.n	800b656 <_vfiprintf_r+0x1ea>
 800b68c:	0800cde5 	.word	0x0800cde5
 800b690:	0800cdef 	.word	0x0800cdef
 800b694:	00000000 	.word	0x00000000
 800b698:	0800b447 	.word	0x0800b447
 800b69c:	0800cdeb 	.word	0x0800cdeb

0800b6a0 <_printf_common>:
 800b6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a4:	4616      	mov	r6, r2
 800b6a6:	4699      	mov	r9, r3
 800b6a8:	688a      	ldr	r2, [r1, #8]
 800b6aa:	690b      	ldr	r3, [r1, #16]
 800b6ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	bfb8      	it	lt
 800b6b4:	4613      	movlt	r3, r2
 800b6b6:	6033      	str	r3, [r6, #0]
 800b6b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6bc:	4607      	mov	r7, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	b10a      	cbz	r2, 800b6c6 <_printf_common+0x26>
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	6033      	str	r3, [r6, #0]
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	0699      	lsls	r1, r3, #26
 800b6ca:	bf42      	ittt	mi
 800b6cc:	6833      	ldrmi	r3, [r6, #0]
 800b6ce:	3302      	addmi	r3, #2
 800b6d0:	6033      	strmi	r3, [r6, #0]
 800b6d2:	6825      	ldr	r5, [r4, #0]
 800b6d4:	f015 0506 	ands.w	r5, r5, #6
 800b6d8:	d106      	bne.n	800b6e8 <_printf_common+0x48>
 800b6da:	f104 0a19 	add.w	sl, r4, #25
 800b6de:	68e3      	ldr	r3, [r4, #12]
 800b6e0:	6832      	ldr	r2, [r6, #0]
 800b6e2:	1a9b      	subs	r3, r3, r2
 800b6e4:	42ab      	cmp	r3, r5
 800b6e6:	dc26      	bgt.n	800b736 <_printf_common+0x96>
 800b6e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6ec:	1e13      	subs	r3, r2, #0
 800b6ee:	6822      	ldr	r2, [r4, #0]
 800b6f0:	bf18      	it	ne
 800b6f2:	2301      	movne	r3, #1
 800b6f4:	0692      	lsls	r2, r2, #26
 800b6f6:	d42b      	bmi.n	800b750 <_printf_common+0xb0>
 800b6f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6fc:	4649      	mov	r1, r9
 800b6fe:	4638      	mov	r0, r7
 800b700:	47c0      	blx	r8
 800b702:	3001      	adds	r0, #1
 800b704:	d01e      	beq.n	800b744 <_printf_common+0xa4>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	6922      	ldr	r2, [r4, #16]
 800b70a:	f003 0306 	and.w	r3, r3, #6
 800b70e:	2b04      	cmp	r3, #4
 800b710:	bf02      	ittt	eq
 800b712:	68e5      	ldreq	r5, [r4, #12]
 800b714:	6833      	ldreq	r3, [r6, #0]
 800b716:	1aed      	subeq	r5, r5, r3
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	bf0c      	ite	eq
 800b71c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b720:	2500      	movne	r5, #0
 800b722:	4293      	cmp	r3, r2
 800b724:	bfc4      	itt	gt
 800b726:	1a9b      	subgt	r3, r3, r2
 800b728:	18ed      	addgt	r5, r5, r3
 800b72a:	2600      	movs	r6, #0
 800b72c:	341a      	adds	r4, #26
 800b72e:	42b5      	cmp	r5, r6
 800b730:	d11a      	bne.n	800b768 <_printf_common+0xc8>
 800b732:	2000      	movs	r0, #0
 800b734:	e008      	b.n	800b748 <_printf_common+0xa8>
 800b736:	2301      	movs	r3, #1
 800b738:	4652      	mov	r2, sl
 800b73a:	4649      	mov	r1, r9
 800b73c:	4638      	mov	r0, r7
 800b73e:	47c0      	blx	r8
 800b740:	3001      	adds	r0, #1
 800b742:	d103      	bne.n	800b74c <_printf_common+0xac>
 800b744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74c:	3501      	adds	r5, #1
 800b74e:	e7c6      	b.n	800b6de <_printf_common+0x3e>
 800b750:	18e1      	adds	r1, r4, r3
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	2030      	movs	r0, #48	; 0x30
 800b756:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b75a:	4422      	add	r2, r4
 800b75c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b760:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b764:	3302      	adds	r3, #2
 800b766:	e7c7      	b.n	800b6f8 <_printf_common+0x58>
 800b768:	2301      	movs	r3, #1
 800b76a:	4622      	mov	r2, r4
 800b76c:	4649      	mov	r1, r9
 800b76e:	4638      	mov	r0, r7
 800b770:	47c0      	blx	r8
 800b772:	3001      	adds	r0, #1
 800b774:	d0e6      	beq.n	800b744 <_printf_common+0xa4>
 800b776:	3601      	adds	r6, #1
 800b778:	e7d9      	b.n	800b72e <_printf_common+0x8e>
	...

0800b77c <_printf_i>:
 800b77c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	7e0f      	ldrb	r7, [r1, #24]
 800b782:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b784:	2f78      	cmp	r7, #120	; 0x78
 800b786:	4691      	mov	r9, r2
 800b788:	4680      	mov	r8, r0
 800b78a:	460c      	mov	r4, r1
 800b78c:	469a      	mov	sl, r3
 800b78e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b792:	d807      	bhi.n	800b7a4 <_printf_i+0x28>
 800b794:	2f62      	cmp	r7, #98	; 0x62
 800b796:	d80a      	bhi.n	800b7ae <_printf_i+0x32>
 800b798:	2f00      	cmp	r7, #0
 800b79a:	f000 80d4 	beq.w	800b946 <_printf_i+0x1ca>
 800b79e:	2f58      	cmp	r7, #88	; 0x58
 800b7a0:	f000 80c0 	beq.w	800b924 <_printf_i+0x1a8>
 800b7a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7ac:	e03a      	b.n	800b824 <_printf_i+0xa8>
 800b7ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7b2:	2b15      	cmp	r3, #21
 800b7b4:	d8f6      	bhi.n	800b7a4 <_printf_i+0x28>
 800b7b6:	a101      	add	r1, pc, #4	; (adr r1, 800b7bc <_printf_i+0x40>)
 800b7b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7bc:	0800b815 	.word	0x0800b815
 800b7c0:	0800b829 	.word	0x0800b829
 800b7c4:	0800b7a5 	.word	0x0800b7a5
 800b7c8:	0800b7a5 	.word	0x0800b7a5
 800b7cc:	0800b7a5 	.word	0x0800b7a5
 800b7d0:	0800b7a5 	.word	0x0800b7a5
 800b7d4:	0800b829 	.word	0x0800b829
 800b7d8:	0800b7a5 	.word	0x0800b7a5
 800b7dc:	0800b7a5 	.word	0x0800b7a5
 800b7e0:	0800b7a5 	.word	0x0800b7a5
 800b7e4:	0800b7a5 	.word	0x0800b7a5
 800b7e8:	0800b92d 	.word	0x0800b92d
 800b7ec:	0800b855 	.word	0x0800b855
 800b7f0:	0800b8e7 	.word	0x0800b8e7
 800b7f4:	0800b7a5 	.word	0x0800b7a5
 800b7f8:	0800b7a5 	.word	0x0800b7a5
 800b7fc:	0800b94f 	.word	0x0800b94f
 800b800:	0800b7a5 	.word	0x0800b7a5
 800b804:	0800b855 	.word	0x0800b855
 800b808:	0800b7a5 	.word	0x0800b7a5
 800b80c:	0800b7a5 	.word	0x0800b7a5
 800b810:	0800b8ef 	.word	0x0800b8ef
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	1d1a      	adds	r2, r3, #4
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	602a      	str	r2, [r5, #0]
 800b81c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b824:	2301      	movs	r3, #1
 800b826:	e09f      	b.n	800b968 <_printf_i+0x1ec>
 800b828:	6820      	ldr	r0, [r4, #0]
 800b82a:	682b      	ldr	r3, [r5, #0]
 800b82c:	0607      	lsls	r7, r0, #24
 800b82e:	f103 0104 	add.w	r1, r3, #4
 800b832:	6029      	str	r1, [r5, #0]
 800b834:	d501      	bpl.n	800b83a <_printf_i+0xbe>
 800b836:	681e      	ldr	r6, [r3, #0]
 800b838:	e003      	b.n	800b842 <_printf_i+0xc6>
 800b83a:	0646      	lsls	r6, r0, #25
 800b83c:	d5fb      	bpl.n	800b836 <_printf_i+0xba>
 800b83e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b842:	2e00      	cmp	r6, #0
 800b844:	da03      	bge.n	800b84e <_printf_i+0xd2>
 800b846:	232d      	movs	r3, #45	; 0x2d
 800b848:	4276      	negs	r6, r6
 800b84a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b84e:	485a      	ldr	r0, [pc, #360]	; (800b9b8 <_printf_i+0x23c>)
 800b850:	230a      	movs	r3, #10
 800b852:	e012      	b.n	800b87a <_printf_i+0xfe>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	6820      	ldr	r0, [r4, #0]
 800b858:	1d19      	adds	r1, r3, #4
 800b85a:	6029      	str	r1, [r5, #0]
 800b85c:	0605      	lsls	r5, r0, #24
 800b85e:	d501      	bpl.n	800b864 <_printf_i+0xe8>
 800b860:	681e      	ldr	r6, [r3, #0]
 800b862:	e002      	b.n	800b86a <_printf_i+0xee>
 800b864:	0641      	lsls	r1, r0, #25
 800b866:	d5fb      	bpl.n	800b860 <_printf_i+0xe4>
 800b868:	881e      	ldrh	r6, [r3, #0]
 800b86a:	4853      	ldr	r0, [pc, #332]	; (800b9b8 <_printf_i+0x23c>)
 800b86c:	2f6f      	cmp	r7, #111	; 0x6f
 800b86e:	bf0c      	ite	eq
 800b870:	2308      	moveq	r3, #8
 800b872:	230a      	movne	r3, #10
 800b874:	2100      	movs	r1, #0
 800b876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b87a:	6865      	ldr	r5, [r4, #4]
 800b87c:	60a5      	str	r5, [r4, #8]
 800b87e:	2d00      	cmp	r5, #0
 800b880:	bfa2      	ittt	ge
 800b882:	6821      	ldrge	r1, [r4, #0]
 800b884:	f021 0104 	bicge.w	r1, r1, #4
 800b888:	6021      	strge	r1, [r4, #0]
 800b88a:	b90e      	cbnz	r6, 800b890 <_printf_i+0x114>
 800b88c:	2d00      	cmp	r5, #0
 800b88e:	d04b      	beq.n	800b928 <_printf_i+0x1ac>
 800b890:	4615      	mov	r5, r2
 800b892:	fbb6 f1f3 	udiv	r1, r6, r3
 800b896:	fb03 6711 	mls	r7, r3, r1, r6
 800b89a:	5dc7      	ldrb	r7, [r0, r7]
 800b89c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8a0:	4637      	mov	r7, r6
 800b8a2:	42bb      	cmp	r3, r7
 800b8a4:	460e      	mov	r6, r1
 800b8a6:	d9f4      	bls.n	800b892 <_printf_i+0x116>
 800b8a8:	2b08      	cmp	r3, #8
 800b8aa:	d10b      	bne.n	800b8c4 <_printf_i+0x148>
 800b8ac:	6823      	ldr	r3, [r4, #0]
 800b8ae:	07de      	lsls	r6, r3, #31
 800b8b0:	d508      	bpl.n	800b8c4 <_printf_i+0x148>
 800b8b2:	6923      	ldr	r3, [r4, #16]
 800b8b4:	6861      	ldr	r1, [r4, #4]
 800b8b6:	4299      	cmp	r1, r3
 800b8b8:	bfde      	ittt	le
 800b8ba:	2330      	movle	r3, #48	; 0x30
 800b8bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b8c4:	1b52      	subs	r2, r2, r5
 800b8c6:	6122      	str	r2, [r4, #16]
 800b8c8:	f8cd a000 	str.w	sl, [sp]
 800b8cc:	464b      	mov	r3, r9
 800b8ce:	aa03      	add	r2, sp, #12
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	4640      	mov	r0, r8
 800b8d4:	f7ff fee4 	bl	800b6a0 <_printf_common>
 800b8d8:	3001      	adds	r0, #1
 800b8da:	d14a      	bne.n	800b972 <_printf_i+0x1f6>
 800b8dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8e0:	b004      	add	sp, #16
 800b8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e6:	6823      	ldr	r3, [r4, #0]
 800b8e8:	f043 0320 	orr.w	r3, r3, #32
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	4833      	ldr	r0, [pc, #204]	; (800b9bc <_printf_i+0x240>)
 800b8f0:	2778      	movs	r7, #120	; 0x78
 800b8f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	6829      	ldr	r1, [r5, #0]
 800b8fa:	061f      	lsls	r7, r3, #24
 800b8fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b900:	d402      	bmi.n	800b908 <_printf_i+0x18c>
 800b902:	065f      	lsls	r7, r3, #25
 800b904:	bf48      	it	mi
 800b906:	b2b6      	uxthmi	r6, r6
 800b908:	07df      	lsls	r7, r3, #31
 800b90a:	bf48      	it	mi
 800b90c:	f043 0320 	orrmi.w	r3, r3, #32
 800b910:	6029      	str	r1, [r5, #0]
 800b912:	bf48      	it	mi
 800b914:	6023      	strmi	r3, [r4, #0]
 800b916:	b91e      	cbnz	r6, 800b920 <_printf_i+0x1a4>
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	f023 0320 	bic.w	r3, r3, #32
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	2310      	movs	r3, #16
 800b922:	e7a7      	b.n	800b874 <_printf_i+0xf8>
 800b924:	4824      	ldr	r0, [pc, #144]	; (800b9b8 <_printf_i+0x23c>)
 800b926:	e7e4      	b.n	800b8f2 <_printf_i+0x176>
 800b928:	4615      	mov	r5, r2
 800b92a:	e7bd      	b.n	800b8a8 <_printf_i+0x12c>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	6826      	ldr	r6, [r4, #0]
 800b930:	6961      	ldr	r1, [r4, #20]
 800b932:	1d18      	adds	r0, r3, #4
 800b934:	6028      	str	r0, [r5, #0]
 800b936:	0635      	lsls	r5, r6, #24
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	d501      	bpl.n	800b940 <_printf_i+0x1c4>
 800b93c:	6019      	str	r1, [r3, #0]
 800b93e:	e002      	b.n	800b946 <_printf_i+0x1ca>
 800b940:	0670      	lsls	r0, r6, #25
 800b942:	d5fb      	bpl.n	800b93c <_printf_i+0x1c0>
 800b944:	8019      	strh	r1, [r3, #0]
 800b946:	2300      	movs	r3, #0
 800b948:	6123      	str	r3, [r4, #16]
 800b94a:	4615      	mov	r5, r2
 800b94c:	e7bc      	b.n	800b8c8 <_printf_i+0x14c>
 800b94e:	682b      	ldr	r3, [r5, #0]
 800b950:	1d1a      	adds	r2, r3, #4
 800b952:	602a      	str	r2, [r5, #0]
 800b954:	681d      	ldr	r5, [r3, #0]
 800b956:	6862      	ldr	r2, [r4, #4]
 800b958:	2100      	movs	r1, #0
 800b95a:	4628      	mov	r0, r5
 800b95c:	f7f4 fc48 	bl	80001f0 <memchr>
 800b960:	b108      	cbz	r0, 800b966 <_printf_i+0x1ea>
 800b962:	1b40      	subs	r0, r0, r5
 800b964:	6060      	str	r0, [r4, #4]
 800b966:	6863      	ldr	r3, [r4, #4]
 800b968:	6123      	str	r3, [r4, #16]
 800b96a:	2300      	movs	r3, #0
 800b96c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b970:	e7aa      	b.n	800b8c8 <_printf_i+0x14c>
 800b972:	6923      	ldr	r3, [r4, #16]
 800b974:	462a      	mov	r2, r5
 800b976:	4649      	mov	r1, r9
 800b978:	4640      	mov	r0, r8
 800b97a:	47d0      	blx	sl
 800b97c:	3001      	adds	r0, #1
 800b97e:	d0ad      	beq.n	800b8dc <_printf_i+0x160>
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	079b      	lsls	r3, r3, #30
 800b984:	d413      	bmi.n	800b9ae <_printf_i+0x232>
 800b986:	68e0      	ldr	r0, [r4, #12]
 800b988:	9b03      	ldr	r3, [sp, #12]
 800b98a:	4298      	cmp	r0, r3
 800b98c:	bfb8      	it	lt
 800b98e:	4618      	movlt	r0, r3
 800b990:	e7a6      	b.n	800b8e0 <_printf_i+0x164>
 800b992:	2301      	movs	r3, #1
 800b994:	4632      	mov	r2, r6
 800b996:	4649      	mov	r1, r9
 800b998:	4640      	mov	r0, r8
 800b99a:	47d0      	blx	sl
 800b99c:	3001      	adds	r0, #1
 800b99e:	d09d      	beq.n	800b8dc <_printf_i+0x160>
 800b9a0:	3501      	adds	r5, #1
 800b9a2:	68e3      	ldr	r3, [r4, #12]
 800b9a4:	9903      	ldr	r1, [sp, #12]
 800b9a6:	1a5b      	subs	r3, r3, r1
 800b9a8:	42ab      	cmp	r3, r5
 800b9aa:	dcf2      	bgt.n	800b992 <_printf_i+0x216>
 800b9ac:	e7eb      	b.n	800b986 <_printf_i+0x20a>
 800b9ae:	2500      	movs	r5, #0
 800b9b0:	f104 0619 	add.w	r6, r4, #25
 800b9b4:	e7f5      	b.n	800b9a2 <_printf_i+0x226>
 800b9b6:	bf00      	nop
 800b9b8:	0800cdf6 	.word	0x0800cdf6
 800b9bc:	0800ce07 	.word	0x0800ce07

0800b9c0 <__sflush_r>:
 800b9c0:	898a      	ldrh	r2, [r1, #12]
 800b9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	4605      	mov	r5, r0
 800b9c8:	0710      	lsls	r0, r2, #28
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	d458      	bmi.n	800ba80 <__sflush_r+0xc0>
 800b9ce:	684b      	ldr	r3, [r1, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	dc05      	bgt.n	800b9e0 <__sflush_r+0x20>
 800b9d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	dc02      	bgt.n	800b9e0 <__sflush_r+0x20>
 800b9da:	2000      	movs	r0, #0
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9e2:	2e00      	cmp	r6, #0
 800b9e4:	d0f9      	beq.n	800b9da <__sflush_r+0x1a>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9ec:	682f      	ldr	r7, [r5, #0]
 800b9ee:	6a21      	ldr	r1, [r4, #32]
 800b9f0:	602b      	str	r3, [r5, #0]
 800b9f2:	d032      	beq.n	800ba5a <__sflush_r+0x9a>
 800b9f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	075a      	lsls	r2, r3, #29
 800b9fa:	d505      	bpl.n	800ba08 <__sflush_r+0x48>
 800b9fc:	6863      	ldr	r3, [r4, #4]
 800b9fe:	1ac0      	subs	r0, r0, r3
 800ba00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba02:	b10b      	cbz	r3, 800ba08 <__sflush_r+0x48>
 800ba04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba06:	1ac0      	subs	r0, r0, r3
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba0e:	6a21      	ldr	r1, [r4, #32]
 800ba10:	4628      	mov	r0, r5
 800ba12:	47b0      	blx	r6
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	d106      	bne.n	800ba28 <__sflush_r+0x68>
 800ba1a:	6829      	ldr	r1, [r5, #0]
 800ba1c:	291d      	cmp	r1, #29
 800ba1e:	d82b      	bhi.n	800ba78 <__sflush_r+0xb8>
 800ba20:	4a29      	ldr	r2, [pc, #164]	; (800bac8 <__sflush_r+0x108>)
 800ba22:	410a      	asrs	r2, r1
 800ba24:	07d6      	lsls	r6, r2, #31
 800ba26:	d427      	bmi.n	800ba78 <__sflush_r+0xb8>
 800ba28:	2200      	movs	r2, #0
 800ba2a:	6062      	str	r2, [r4, #4]
 800ba2c:	04d9      	lsls	r1, r3, #19
 800ba2e:	6922      	ldr	r2, [r4, #16]
 800ba30:	6022      	str	r2, [r4, #0]
 800ba32:	d504      	bpl.n	800ba3e <__sflush_r+0x7e>
 800ba34:	1c42      	adds	r2, r0, #1
 800ba36:	d101      	bne.n	800ba3c <__sflush_r+0x7c>
 800ba38:	682b      	ldr	r3, [r5, #0]
 800ba3a:	b903      	cbnz	r3, 800ba3e <__sflush_r+0x7e>
 800ba3c:	6560      	str	r0, [r4, #84]	; 0x54
 800ba3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba40:	602f      	str	r7, [r5, #0]
 800ba42:	2900      	cmp	r1, #0
 800ba44:	d0c9      	beq.n	800b9da <__sflush_r+0x1a>
 800ba46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba4a:	4299      	cmp	r1, r3
 800ba4c:	d002      	beq.n	800ba54 <__sflush_r+0x94>
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f7ff fc96 	bl	800b380 <_free_r>
 800ba54:	2000      	movs	r0, #0
 800ba56:	6360      	str	r0, [r4, #52]	; 0x34
 800ba58:	e7c0      	b.n	800b9dc <__sflush_r+0x1c>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	47b0      	blx	r6
 800ba60:	1c41      	adds	r1, r0, #1
 800ba62:	d1c8      	bne.n	800b9f6 <__sflush_r+0x36>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d0c5      	beq.n	800b9f6 <__sflush_r+0x36>
 800ba6a:	2b1d      	cmp	r3, #29
 800ba6c:	d001      	beq.n	800ba72 <__sflush_r+0xb2>
 800ba6e:	2b16      	cmp	r3, #22
 800ba70:	d101      	bne.n	800ba76 <__sflush_r+0xb6>
 800ba72:	602f      	str	r7, [r5, #0]
 800ba74:	e7b1      	b.n	800b9da <__sflush_r+0x1a>
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	e7ad      	b.n	800b9dc <__sflush_r+0x1c>
 800ba80:	690f      	ldr	r7, [r1, #16]
 800ba82:	2f00      	cmp	r7, #0
 800ba84:	d0a9      	beq.n	800b9da <__sflush_r+0x1a>
 800ba86:	0793      	lsls	r3, r2, #30
 800ba88:	680e      	ldr	r6, [r1, #0]
 800ba8a:	bf08      	it	eq
 800ba8c:	694b      	ldreq	r3, [r1, #20]
 800ba8e:	600f      	str	r7, [r1, #0]
 800ba90:	bf18      	it	ne
 800ba92:	2300      	movne	r3, #0
 800ba94:	eba6 0807 	sub.w	r8, r6, r7
 800ba98:	608b      	str	r3, [r1, #8]
 800ba9a:	f1b8 0f00 	cmp.w	r8, #0
 800ba9e:	dd9c      	ble.n	800b9da <__sflush_r+0x1a>
 800baa0:	6a21      	ldr	r1, [r4, #32]
 800baa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800baa4:	4643      	mov	r3, r8
 800baa6:	463a      	mov	r2, r7
 800baa8:	4628      	mov	r0, r5
 800baaa:	47b0      	blx	r6
 800baac:	2800      	cmp	r0, #0
 800baae:	dc06      	bgt.n	800babe <__sflush_r+0xfe>
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bab6:	81a3      	strh	r3, [r4, #12]
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800babc:	e78e      	b.n	800b9dc <__sflush_r+0x1c>
 800babe:	4407      	add	r7, r0
 800bac0:	eba8 0800 	sub.w	r8, r8, r0
 800bac4:	e7e9      	b.n	800ba9a <__sflush_r+0xda>
 800bac6:	bf00      	nop
 800bac8:	dfbffffe 	.word	0xdfbffffe

0800bacc <_fflush_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	690b      	ldr	r3, [r1, #16]
 800bad0:	4605      	mov	r5, r0
 800bad2:	460c      	mov	r4, r1
 800bad4:	b913      	cbnz	r3, 800badc <_fflush_r+0x10>
 800bad6:	2500      	movs	r5, #0
 800bad8:	4628      	mov	r0, r5
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	b118      	cbz	r0, 800bae6 <_fflush_r+0x1a>
 800bade:	6a03      	ldr	r3, [r0, #32]
 800bae0:	b90b      	cbnz	r3, 800bae6 <_fflush_r+0x1a>
 800bae2:	f7ff fac9 	bl	800b078 <__sinit>
 800bae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d0f3      	beq.n	800bad6 <_fflush_r+0xa>
 800baee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800baf0:	07d0      	lsls	r0, r2, #31
 800baf2:	d404      	bmi.n	800bafe <_fflush_r+0x32>
 800baf4:	0599      	lsls	r1, r3, #22
 800baf6:	d402      	bmi.n	800bafe <_fflush_r+0x32>
 800baf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bafa:	f7ff fc29 	bl	800b350 <__retarget_lock_acquire_recursive>
 800bafe:	4628      	mov	r0, r5
 800bb00:	4621      	mov	r1, r4
 800bb02:	f7ff ff5d 	bl	800b9c0 <__sflush_r>
 800bb06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb08:	07da      	lsls	r2, r3, #31
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	d4e4      	bmi.n	800bad8 <_fflush_r+0xc>
 800bb0e:	89a3      	ldrh	r3, [r4, #12]
 800bb10:	059b      	lsls	r3, r3, #22
 800bb12:	d4e1      	bmi.n	800bad8 <_fflush_r+0xc>
 800bb14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb16:	f7ff fc1c 	bl	800b352 <__retarget_lock_release_recursive>
 800bb1a:	e7dd      	b.n	800bad8 <_fflush_r+0xc>

0800bb1c <_putc_r>:
 800bb1c:	b570      	push	{r4, r5, r6, lr}
 800bb1e:	460d      	mov	r5, r1
 800bb20:	4614      	mov	r4, r2
 800bb22:	4606      	mov	r6, r0
 800bb24:	b118      	cbz	r0, 800bb2e <_putc_r+0x12>
 800bb26:	6a03      	ldr	r3, [r0, #32]
 800bb28:	b90b      	cbnz	r3, 800bb2e <_putc_r+0x12>
 800bb2a:	f7ff faa5 	bl	800b078 <__sinit>
 800bb2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb30:	07d8      	lsls	r0, r3, #31
 800bb32:	d405      	bmi.n	800bb40 <_putc_r+0x24>
 800bb34:	89a3      	ldrh	r3, [r4, #12]
 800bb36:	0599      	lsls	r1, r3, #22
 800bb38:	d402      	bmi.n	800bb40 <_putc_r+0x24>
 800bb3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb3c:	f7ff fc08 	bl	800b350 <__retarget_lock_acquire_recursive>
 800bb40:	68a3      	ldr	r3, [r4, #8]
 800bb42:	3b01      	subs	r3, #1
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	60a3      	str	r3, [r4, #8]
 800bb48:	da05      	bge.n	800bb56 <_putc_r+0x3a>
 800bb4a:	69a2      	ldr	r2, [r4, #24]
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	db12      	blt.n	800bb76 <_putc_r+0x5a>
 800bb50:	b2eb      	uxtb	r3, r5
 800bb52:	2b0a      	cmp	r3, #10
 800bb54:	d00f      	beq.n	800bb76 <_putc_r+0x5a>
 800bb56:	6823      	ldr	r3, [r4, #0]
 800bb58:	1c5a      	adds	r2, r3, #1
 800bb5a:	6022      	str	r2, [r4, #0]
 800bb5c:	701d      	strb	r5, [r3, #0]
 800bb5e:	b2ed      	uxtb	r5, r5
 800bb60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb62:	07da      	lsls	r2, r3, #31
 800bb64:	d405      	bmi.n	800bb72 <_putc_r+0x56>
 800bb66:	89a3      	ldrh	r3, [r4, #12]
 800bb68:	059b      	lsls	r3, r3, #22
 800bb6a:	d402      	bmi.n	800bb72 <_putc_r+0x56>
 800bb6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb6e:	f7ff fbf0 	bl	800b352 <__retarget_lock_release_recursive>
 800bb72:	4628      	mov	r0, r5
 800bb74:	bd70      	pop	{r4, r5, r6, pc}
 800bb76:	4629      	mov	r1, r5
 800bb78:	4622      	mov	r2, r4
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f000 f802 	bl	800bb84 <__swbuf_r>
 800bb80:	4605      	mov	r5, r0
 800bb82:	e7ed      	b.n	800bb60 <_putc_r+0x44>

0800bb84 <__swbuf_r>:
 800bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb86:	460e      	mov	r6, r1
 800bb88:	4614      	mov	r4, r2
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	b118      	cbz	r0, 800bb96 <__swbuf_r+0x12>
 800bb8e:	6a03      	ldr	r3, [r0, #32]
 800bb90:	b90b      	cbnz	r3, 800bb96 <__swbuf_r+0x12>
 800bb92:	f7ff fa71 	bl	800b078 <__sinit>
 800bb96:	69a3      	ldr	r3, [r4, #24]
 800bb98:	60a3      	str	r3, [r4, #8]
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	071a      	lsls	r2, r3, #28
 800bb9e:	d525      	bpl.n	800bbec <__swbuf_r+0x68>
 800bba0:	6923      	ldr	r3, [r4, #16]
 800bba2:	b31b      	cbz	r3, 800bbec <__swbuf_r+0x68>
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	6922      	ldr	r2, [r4, #16]
 800bba8:	1a98      	subs	r0, r3, r2
 800bbaa:	6963      	ldr	r3, [r4, #20]
 800bbac:	b2f6      	uxtb	r6, r6
 800bbae:	4283      	cmp	r3, r0
 800bbb0:	4637      	mov	r7, r6
 800bbb2:	dc04      	bgt.n	800bbbe <__swbuf_r+0x3a>
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f7ff ff88 	bl	800bacc <_fflush_r>
 800bbbc:	b9e0      	cbnz	r0, 800bbf8 <__swbuf_r+0x74>
 800bbbe:	68a3      	ldr	r3, [r4, #8]
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	60a3      	str	r3, [r4, #8]
 800bbc4:	6823      	ldr	r3, [r4, #0]
 800bbc6:	1c5a      	adds	r2, r3, #1
 800bbc8:	6022      	str	r2, [r4, #0]
 800bbca:	701e      	strb	r6, [r3, #0]
 800bbcc:	6962      	ldr	r2, [r4, #20]
 800bbce:	1c43      	adds	r3, r0, #1
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d004      	beq.n	800bbde <__swbuf_r+0x5a>
 800bbd4:	89a3      	ldrh	r3, [r4, #12]
 800bbd6:	07db      	lsls	r3, r3, #31
 800bbd8:	d506      	bpl.n	800bbe8 <__swbuf_r+0x64>
 800bbda:	2e0a      	cmp	r6, #10
 800bbdc:	d104      	bne.n	800bbe8 <__swbuf_r+0x64>
 800bbde:	4621      	mov	r1, r4
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f7ff ff73 	bl	800bacc <_fflush_r>
 800bbe6:	b938      	cbnz	r0, 800bbf8 <__swbuf_r+0x74>
 800bbe8:	4638      	mov	r0, r7
 800bbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbec:	4621      	mov	r1, r4
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f000 f806 	bl	800bc00 <__swsetup_r>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d0d5      	beq.n	800bba4 <__swbuf_r+0x20>
 800bbf8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bbfc:	e7f4      	b.n	800bbe8 <__swbuf_r+0x64>
	...

0800bc00 <__swsetup_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4b2a      	ldr	r3, [pc, #168]	; (800bcac <__swsetup_r+0xac>)
 800bc04:	4605      	mov	r5, r0
 800bc06:	6818      	ldr	r0, [r3, #0]
 800bc08:	460c      	mov	r4, r1
 800bc0a:	b118      	cbz	r0, 800bc14 <__swsetup_r+0x14>
 800bc0c:	6a03      	ldr	r3, [r0, #32]
 800bc0e:	b90b      	cbnz	r3, 800bc14 <__swsetup_r+0x14>
 800bc10:	f7ff fa32 	bl	800b078 <__sinit>
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc1a:	0718      	lsls	r0, r3, #28
 800bc1c:	d422      	bmi.n	800bc64 <__swsetup_r+0x64>
 800bc1e:	06d9      	lsls	r1, r3, #27
 800bc20:	d407      	bmi.n	800bc32 <__swsetup_r+0x32>
 800bc22:	2309      	movs	r3, #9
 800bc24:	602b      	str	r3, [r5, #0]
 800bc26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc2a:	81a3      	strh	r3, [r4, #12]
 800bc2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc30:	e034      	b.n	800bc9c <__swsetup_r+0x9c>
 800bc32:	0758      	lsls	r0, r3, #29
 800bc34:	d512      	bpl.n	800bc5c <__swsetup_r+0x5c>
 800bc36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc38:	b141      	cbz	r1, 800bc4c <__swsetup_r+0x4c>
 800bc3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc3e:	4299      	cmp	r1, r3
 800bc40:	d002      	beq.n	800bc48 <__swsetup_r+0x48>
 800bc42:	4628      	mov	r0, r5
 800bc44:	f7ff fb9c 	bl	800b380 <_free_r>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	6363      	str	r3, [r4, #52]	; 0x34
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc52:	81a3      	strh	r3, [r4, #12]
 800bc54:	2300      	movs	r3, #0
 800bc56:	6063      	str	r3, [r4, #4]
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	f043 0308 	orr.w	r3, r3, #8
 800bc62:	81a3      	strh	r3, [r4, #12]
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	b94b      	cbnz	r3, 800bc7c <__swsetup_r+0x7c>
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc72:	d003      	beq.n	800bc7c <__swsetup_r+0x7c>
 800bc74:	4621      	mov	r1, r4
 800bc76:	4628      	mov	r0, r5
 800bc78:	f000 f884 	bl	800bd84 <__smakebuf_r>
 800bc7c:	89a0      	ldrh	r0, [r4, #12]
 800bc7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc82:	f010 0301 	ands.w	r3, r0, #1
 800bc86:	d00a      	beq.n	800bc9e <__swsetup_r+0x9e>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	60a3      	str	r3, [r4, #8]
 800bc8c:	6963      	ldr	r3, [r4, #20]
 800bc8e:	425b      	negs	r3, r3
 800bc90:	61a3      	str	r3, [r4, #24]
 800bc92:	6923      	ldr	r3, [r4, #16]
 800bc94:	b943      	cbnz	r3, 800bca8 <__swsetup_r+0xa8>
 800bc96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc9a:	d1c4      	bne.n	800bc26 <__swsetup_r+0x26>
 800bc9c:	bd38      	pop	{r3, r4, r5, pc}
 800bc9e:	0781      	lsls	r1, r0, #30
 800bca0:	bf58      	it	pl
 800bca2:	6963      	ldrpl	r3, [r4, #20]
 800bca4:	60a3      	str	r3, [r4, #8]
 800bca6:	e7f4      	b.n	800bc92 <__swsetup_r+0x92>
 800bca8:	2000      	movs	r0, #0
 800bcaa:	e7f7      	b.n	800bc9c <__swsetup_r+0x9c>
 800bcac:	200000b0 	.word	0x200000b0

0800bcb0 <_raise_r>:
 800bcb0:	291f      	cmp	r1, #31
 800bcb2:	b538      	push	{r3, r4, r5, lr}
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	460d      	mov	r5, r1
 800bcb8:	d904      	bls.n	800bcc4 <_raise_r+0x14>
 800bcba:	2316      	movs	r3, #22
 800bcbc:	6003      	str	r3, [r0, #0]
 800bcbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bcc6:	b112      	cbz	r2, 800bcce <_raise_r+0x1e>
 800bcc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bccc:	b94b      	cbnz	r3, 800bce2 <_raise_r+0x32>
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f000 f830 	bl	800bd34 <_getpid_r>
 800bcd4:	462a      	mov	r2, r5
 800bcd6:	4601      	mov	r1, r0
 800bcd8:	4620      	mov	r0, r4
 800bcda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcde:	f000 b817 	b.w	800bd10 <_kill_r>
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d00a      	beq.n	800bcfc <_raise_r+0x4c>
 800bce6:	1c59      	adds	r1, r3, #1
 800bce8:	d103      	bne.n	800bcf2 <_raise_r+0x42>
 800bcea:	2316      	movs	r3, #22
 800bcec:	6003      	str	r3, [r0, #0]
 800bcee:	2001      	movs	r0, #1
 800bcf0:	e7e7      	b.n	800bcc2 <_raise_r+0x12>
 800bcf2:	2400      	movs	r4, #0
 800bcf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	4798      	blx	r3
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	e7e0      	b.n	800bcc2 <_raise_r+0x12>

0800bd00 <raise>:
 800bd00:	4b02      	ldr	r3, [pc, #8]	; (800bd0c <raise+0xc>)
 800bd02:	4601      	mov	r1, r0
 800bd04:	6818      	ldr	r0, [r3, #0]
 800bd06:	f7ff bfd3 	b.w	800bcb0 <_raise_r>
 800bd0a:	bf00      	nop
 800bd0c:	200000b0 	.word	0x200000b0

0800bd10 <_kill_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d07      	ldr	r5, [pc, #28]	; (800bd30 <_kill_r+0x20>)
 800bd14:	2300      	movs	r3, #0
 800bd16:	4604      	mov	r4, r0
 800bd18:	4608      	mov	r0, r1
 800bd1a:	4611      	mov	r1, r2
 800bd1c:	602b      	str	r3, [r5, #0]
 800bd1e:	f7f5 f90a 	bl	8000f36 <_kill>
 800bd22:	1c43      	adds	r3, r0, #1
 800bd24:	d102      	bne.n	800bd2c <_kill_r+0x1c>
 800bd26:	682b      	ldr	r3, [r5, #0]
 800bd28:	b103      	cbz	r3, 800bd2c <_kill_r+0x1c>
 800bd2a:	6023      	str	r3, [r4, #0]
 800bd2c:	bd38      	pop	{r3, r4, r5, pc}
 800bd2e:	bf00      	nop
 800bd30:	20000390 	.word	0x20000390

0800bd34 <_getpid_r>:
 800bd34:	f7f5 b8f7 	b.w	8000f26 <_getpid>

0800bd38 <__swhatbuf_r>:
 800bd38:	b570      	push	{r4, r5, r6, lr}
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd40:	2900      	cmp	r1, #0
 800bd42:	b096      	sub	sp, #88	; 0x58
 800bd44:	4615      	mov	r5, r2
 800bd46:	461e      	mov	r6, r3
 800bd48:	da0d      	bge.n	800bd66 <__swhatbuf_r+0x2e>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bd50:	f04f 0100 	mov.w	r1, #0
 800bd54:	bf0c      	ite	eq
 800bd56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd5a:	2340      	movne	r3, #64	; 0x40
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	6031      	str	r1, [r6, #0]
 800bd60:	602b      	str	r3, [r5, #0]
 800bd62:	b016      	add	sp, #88	; 0x58
 800bd64:	bd70      	pop	{r4, r5, r6, pc}
 800bd66:	466a      	mov	r2, sp
 800bd68:	f000 f848 	bl	800bdfc <_fstat_r>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	dbec      	blt.n	800bd4a <__swhatbuf_r+0x12>
 800bd70:	9901      	ldr	r1, [sp, #4]
 800bd72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bd76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bd7a:	4259      	negs	r1, r3
 800bd7c:	4159      	adcs	r1, r3
 800bd7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd82:	e7eb      	b.n	800bd5c <__swhatbuf_r+0x24>

0800bd84 <__smakebuf_r>:
 800bd84:	898b      	ldrh	r3, [r1, #12]
 800bd86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd88:	079d      	lsls	r5, r3, #30
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	d507      	bpl.n	800bda0 <__smakebuf_r+0x1c>
 800bd90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd94:	6023      	str	r3, [r4, #0]
 800bd96:	6123      	str	r3, [r4, #16]
 800bd98:	2301      	movs	r3, #1
 800bd9a:	6163      	str	r3, [r4, #20]
 800bd9c:	b002      	add	sp, #8
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}
 800bda0:	ab01      	add	r3, sp, #4
 800bda2:	466a      	mov	r2, sp
 800bda4:	f7ff ffc8 	bl	800bd38 <__swhatbuf_r>
 800bda8:	9900      	ldr	r1, [sp, #0]
 800bdaa:	4605      	mov	r5, r0
 800bdac:	4630      	mov	r0, r6
 800bdae:	f7ff f81f 	bl	800adf0 <_malloc_r>
 800bdb2:	b948      	cbnz	r0, 800bdc8 <__smakebuf_r+0x44>
 800bdb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb8:	059a      	lsls	r2, r3, #22
 800bdba:	d4ef      	bmi.n	800bd9c <__smakebuf_r+0x18>
 800bdbc:	f023 0303 	bic.w	r3, r3, #3
 800bdc0:	f043 0302 	orr.w	r3, r3, #2
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	e7e3      	b.n	800bd90 <__smakebuf_r+0xc>
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	6020      	str	r0, [r4, #0]
 800bdcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdd0:	81a3      	strh	r3, [r4, #12]
 800bdd2:	9b00      	ldr	r3, [sp, #0]
 800bdd4:	6163      	str	r3, [r4, #20]
 800bdd6:	9b01      	ldr	r3, [sp, #4]
 800bdd8:	6120      	str	r0, [r4, #16]
 800bdda:	b15b      	cbz	r3, 800bdf4 <__smakebuf_r+0x70>
 800bddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bde0:	4630      	mov	r0, r6
 800bde2:	f000 f81d 	bl	800be20 <_isatty_r>
 800bde6:	b128      	cbz	r0, 800bdf4 <__smakebuf_r+0x70>
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	f023 0303 	bic.w	r3, r3, #3
 800bdee:	f043 0301 	orr.w	r3, r3, #1
 800bdf2:	81a3      	strh	r3, [r4, #12]
 800bdf4:	89a3      	ldrh	r3, [r4, #12]
 800bdf6:	431d      	orrs	r5, r3
 800bdf8:	81a5      	strh	r5, [r4, #12]
 800bdfa:	e7cf      	b.n	800bd9c <__smakebuf_r+0x18>

0800bdfc <_fstat_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d07      	ldr	r5, [pc, #28]	; (800be1c <_fstat_r+0x20>)
 800be00:	2300      	movs	r3, #0
 800be02:	4604      	mov	r4, r0
 800be04:	4608      	mov	r0, r1
 800be06:	4611      	mov	r1, r2
 800be08:	602b      	str	r3, [r5, #0]
 800be0a:	f7f5 f8d7 	bl	8000fbc <_fstat>
 800be0e:	1c43      	adds	r3, r0, #1
 800be10:	d102      	bne.n	800be18 <_fstat_r+0x1c>
 800be12:	682b      	ldr	r3, [r5, #0]
 800be14:	b103      	cbz	r3, 800be18 <_fstat_r+0x1c>
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	bd38      	pop	{r3, r4, r5, pc}
 800be1a:	bf00      	nop
 800be1c:	20000390 	.word	0x20000390

0800be20 <_isatty_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4d06      	ldr	r5, [pc, #24]	; (800be3c <_isatty_r+0x1c>)
 800be24:	2300      	movs	r3, #0
 800be26:	4604      	mov	r4, r0
 800be28:	4608      	mov	r0, r1
 800be2a:	602b      	str	r3, [r5, #0]
 800be2c:	f7f5 f8d6 	bl	8000fdc <_isatty>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_isatty_r+0x1a>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_isatty_r+0x1a>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	20000390 	.word	0x20000390

0800be40 <_init>:
 800be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be42:	bf00      	nop
 800be44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be46:	bc08      	pop	{r3}
 800be48:	469e      	mov	lr, r3
 800be4a:	4770      	bx	lr

0800be4c <_fini>:
 800be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4e:	bf00      	nop
 800be50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be52:	bc08      	pop	{r3}
 800be54:	469e      	mov	lr, r3
 800be56:	4770      	bx	lr
