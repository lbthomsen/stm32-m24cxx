
stm32f411-littlefs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b81c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de4  0800b9bc  0800b9bc  0001b9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7a0  0800c7a0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7a0  0800c7a0  0001c7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7a8  0800c7a8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7a8  0800c7a8  0001c7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7ac  0800c7ac  0001c7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800c7b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200000b4  0800c864  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800c864  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001241c  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021a8  00000000  00000000  00032543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  000346f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df0  00000000  00000000  000356c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c2a  00000000  00000000  000364b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012909  00000000  00000000  0004e0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ccd7  00000000  00000000  000609eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ed8  00000000  00000000  000ed6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f259c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b9a4 	.word	0x0800b9a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	0800b9a4 	.word	0x0800b9a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b984 	b.w	80005b0 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f81a 	bl	80002e8 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__popcountsi2>:
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	0883      	lsrs	r3, r0, #2
 80002ca:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002ce:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002d2:	4418      	add	r0, r3
 80002d4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002d8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002dc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002e0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002e4:	0e00      	lsrs	r0, r0, #24
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9e08      	ldr	r6, [sp, #32]
 80002ee:	460d      	mov	r5, r1
 80002f0:	4604      	mov	r4, r0
 80002f2:	460f      	mov	r7, r1
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d14a      	bne.n	800038e <__udivmoddi4+0xa6>
 80002f8:	428a      	cmp	r2, r1
 80002fa:	4694      	mov	ip, r2
 80002fc:	d965      	bls.n	80003ca <__udivmoddi4+0xe2>
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	b143      	cbz	r3, 8000316 <__udivmoddi4+0x2e>
 8000304:	fa02 fc03 	lsl.w	ip, r2, r3
 8000308:	f1c3 0220 	rsb	r2, r3, #32
 800030c:	409f      	lsls	r7, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	409c      	lsls	r4, r3
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fa1f f58c 	uxth.w	r5, ip
 800031e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000322:	0c22      	lsrs	r2, r4, #16
 8000324:	fb0e 7711 	mls	r7, lr, r1, r7
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	fb01 f005 	mul.w	r0, r1, r5
 8000330:	4290      	cmp	r0, r2
 8000332:	d90a      	bls.n	800034a <__udivmoddi4+0x62>
 8000334:	eb1c 0202 	adds.w	r2, ip, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800033c:	f080 811c 	bcs.w	8000578 <__udivmoddi4+0x290>
 8000340:	4290      	cmp	r0, r2
 8000342:	f240 8119 	bls.w	8000578 <__udivmoddi4+0x290>
 8000346:	3902      	subs	r1, #2
 8000348:	4462      	add	r2, ip
 800034a:	1a12      	subs	r2, r2, r0
 800034c:	b2a4      	uxth	r4, r4
 800034e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000352:	fb0e 2210 	mls	r2, lr, r0, r2
 8000356:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800035a:	fb00 f505 	mul.w	r5, r0, r5
 800035e:	42a5      	cmp	r5, r4
 8000360:	d90a      	bls.n	8000378 <__udivmoddi4+0x90>
 8000362:	eb1c 0404 	adds.w	r4, ip, r4
 8000366:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800036a:	f080 8107 	bcs.w	800057c <__udivmoddi4+0x294>
 800036e:	42a5      	cmp	r5, r4
 8000370:	f240 8104 	bls.w	800057c <__udivmoddi4+0x294>
 8000374:	4464      	add	r4, ip
 8000376:	3802      	subs	r0, #2
 8000378:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	2100      	movs	r1, #0
 8000380:	b11e      	cbz	r6, 800038a <__udivmoddi4+0xa2>
 8000382:	40dc      	lsrs	r4, r3
 8000384:	2300      	movs	r3, #0
 8000386:	e9c6 4300 	strd	r4, r3, [r6]
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	428b      	cmp	r3, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0xbc>
 8000392:	2e00      	cmp	r6, #0
 8000394:	f000 80ed 	beq.w	8000572 <__udivmoddi4+0x28a>
 8000398:	2100      	movs	r1, #0
 800039a:	e9c6 0500 	strd	r0, r5, [r6]
 800039e:	4608      	mov	r0, r1
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	fab3 f183 	clz	r1, r3
 80003a8:	2900      	cmp	r1, #0
 80003aa:	d149      	bne.n	8000440 <__udivmoddi4+0x158>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d302      	bcc.n	80003b6 <__udivmoddi4+0xce>
 80003b0:	4282      	cmp	r2, r0
 80003b2:	f200 80f8 	bhi.w	80005a6 <__udivmoddi4+0x2be>
 80003b6:	1a84      	subs	r4, r0, r2
 80003b8:	eb65 0203 	sbc.w	r2, r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	4617      	mov	r7, r2
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d0e2      	beq.n	800038a <__udivmoddi4+0xa2>
 80003c4:	e9c6 4700 	strd	r4, r7, [r6]
 80003c8:	e7df      	b.n	800038a <__udivmoddi4+0xa2>
 80003ca:	b902      	cbnz	r2, 80003ce <__udivmoddi4+0xe6>
 80003cc:	deff      	udf	#255	; 0xff
 80003ce:	fab2 f382 	clz	r3, r2
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	f040 8090 	bne.w	80004f8 <__udivmoddi4+0x210>
 80003d8:	1a8a      	subs	r2, r1, r2
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2101      	movs	r1, #1
 80003e4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e8:	fb07 2015 	mls	r0, r7, r5, r2
 80003ec:	0c22      	lsrs	r2, r4, #16
 80003ee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003f2:	fb0e f005 	mul.w	r0, lr, r5
 80003f6:	4290      	cmp	r0, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x124>
 80003fa:	eb1c 0202 	adds.w	r2, ip, r2
 80003fe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x122>
 8000404:	4290      	cmp	r0, r2
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2b8>
 800040a:	4645      	mov	r5, r8
 800040c:	1a12      	subs	r2, r2, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x14e>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x14c>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c2>
 8000434:	4610      	mov	r0, r2
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800043e:	e79f      	b.n	8000380 <__udivmoddi4+0x98>
 8000440:	f1c1 0720 	rsb	r7, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa05 f401 	lsl.w	r4, r5, r1
 8000452:	fa20 f307 	lsr.w	r3, r0, r7
 8000456:	40fd      	lsrs	r5, r7
 8000458:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045c:	4323      	orrs	r3, r4
 800045e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000462:	fa1f fe8c 	uxth.w	lr, ip
 8000466:	fb09 5518 	mls	r5, r9, r8, r5
 800046a:	0c1c      	lsrs	r4, r3, #16
 800046c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000470:	fb08 f50e 	mul.w	r5, r8, lr
 8000474:	42a5      	cmp	r5, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	fa00 f001 	lsl.w	r0, r0, r1
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b0>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2b4>
 800048c:	42a5      	cmp	r5, r4
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2b4>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4464      	add	r4, ip
 8000498:	1b64      	subs	r4, r4, r5
 800049a:	b29d      	uxth	r5, r3
 800049c:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a0:	fb09 4413 	mls	r4, r9, r3, r4
 80004a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004ac:	45a6      	cmp	lr, r4
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1da>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2ac>
 80004ba:	45a6      	cmp	lr, r4
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2ac>
 80004be:	3b02      	subs	r3, #2
 80004c0:	4464      	add	r4, ip
 80004c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ca:	eba4 040e 	sub.w	r4, r4, lr
 80004ce:	42ac      	cmp	r4, r5
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46ae      	mov	lr, r5
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x29c>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x298>
 80004d8:	b156      	cbz	r6, 80004f0 <__udivmoddi4+0x208>
 80004da:	ebb0 0208 	subs.w	r2, r0, r8
 80004de:	eb64 040e 	sbc.w	r4, r4, lr
 80004e2:	fa04 f707 	lsl.w	r7, r4, r7
 80004e6:	40ca      	lsrs	r2, r1
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	4317      	orrs	r7, r2
 80004ec:	e9c6 7400 	strd	r7, r4, [r6]
 80004f0:	4618      	mov	r0, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f8:	f1c3 0120 	rsb	r1, r3, #32
 80004fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000500:	fa20 f201 	lsr.w	r2, r0, r1
 8000504:	fa25 f101 	lsr.w	r1, r5, r1
 8000508:	409d      	lsls	r5, r3
 800050a:	432a      	orrs	r2, r5
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb1 f0f7 	udiv	r0, r1, r7
 8000518:	fb07 1510 	mls	r5, r7, r0, r1
 800051c:	0c11      	lsrs	r1, r2, #16
 800051e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000522:	fb00 f50e 	mul.w	r5, r0, lr
 8000526:	428d      	cmp	r5, r1
 8000528:	fa04 f403 	lsl.w	r4, r4, r3
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x258>
 800052e:	eb1c 0101 	adds.w	r1, ip, r1
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b0>
 8000538:	428d      	cmp	r5, r1
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b0>
 800053c:	3802      	subs	r0, #2
 800053e:	4461      	add	r1, ip
 8000540:	1b49      	subs	r1, r1, r5
 8000542:	b292      	uxth	r2, r2
 8000544:	fbb1 f5f7 	udiv	r5, r1, r7
 8000548:	fb07 1115 	mls	r1, r7, r5, r1
 800054c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000550:	fb05 f10e 	mul.w	r1, r5, lr
 8000554:	4291      	cmp	r1, r2
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x282>
 8000558:	eb1c 0202 	adds.w	r2, ip, r2
 800055c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2a8>
 8000562:	4291      	cmp	r1, r2
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2a8>
 8000566:	3d02      	subs	r5, #2
 8000568:	4462      	add	r2, ip
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0xfc>
 8000572:	4631      	mov	r1, r6
 8000574:	4630      	mov	r0, r6
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xa2>
 8000578:	4639      	mov	r1, r7
 800057a:	e6e6      	b.n	800034a <__udivmoddi4+0x62>
 800057c:	4610      	mov	r0, r2
 800057e:	e6fb      	b.n	8000378 <__udivmoddi4+0x90>
 8000580:	4548      	cmp	r0, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f0>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb65 0e0c 	sbc.w	lr, r5, ip
 800058c:	3b01      	subs	r3, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f0>
 8000590:	4645      	mov	r5, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x282>
 8000594:	462b      	mov	r3, r5
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1da>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x258>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b0>
 80005a0:	3d02      	subs	r5, #2
 80005a2:	4462      	add	r2, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x124>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e70a      	b.n	80003c0 <__udivmoddi4+0xd8>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x14e>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <m24cxx_littlefs_init>:
};

lfs_t littlefs;
M24CXX_HandleTypeDef *m24cxx_handle;

int m24cxx_littlefs_init(M24CXX_HandleTypeDef *m24cxx_init) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    LFS_DBG("LittleFS Init");
 80005bc:	480e      	ldr	r0, [pc, #56]	; (80005f8 <m24cxx_littlefs_init+0x44>)
 80005be:	f00a fb55 	bl	800ac6c <iprintf>
 80005c2:	200a      	movs	r0, #10
 80005c4:	f00a fb64 	bl	800ac90 <putchar>
    m24cxx_handle = m24cxx_init;
 80005c8:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <m24cxx_littlefs_init+0x48>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6013      	str	r3, [r2, #0]

    //littlefs_config.block_size = w25qxx_handle->sector_size;
    //littlefs_config.block_count = w25qxx_handle->sectors_in_block * w25qxx_handle->block_count;

    int err = lfs_mount(&littlefs, &littlefs_config);
 80005ce:	490c      	ldr	r1, [pc, #48]	; (8000600 <m24cxx_littlefs_init+0x4c>)
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <m24cxx_littlefs_init+0x50>)
 80005d2:	f009 ff15 	bl	800a400 <lfs_mount>
 80005d6:	60f8      	str	r0, [r7, #12]

    // reformat if we can't mount the filesystem
    // this should only happen on the first boot
    if (err) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d007      	beq.n	80005ee <m24cxx_littlefs_init+0x3a>
        lfs_format(&littlefs, &littlefs_config);
 80005de:	4908      	ldr	r1, [pc, #32]	; (8000600 <m24cxx_littlefs_init+0x4c>)
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <m24cxx_littlefs_init+0x50>)
 80005e2:	f009 fef7 	bl	800a3d4 <lfs_format>
        lfs_mount(&littlefs, &littlefs_config);
 80005e6:	4906      	ldr	r1, [pc, #24]	; (8000600 <m24cxx_littlefs_init+0x4c>)
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <m24cxx_littlefs_init+0x50>)
 80005ea:	f009 ff09 	bl	800a400 <lfs_mount>
    }

    return 0;
 80005ee:	2300      	movs	r3, #0

}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	0800b9bc 	.word	0x0800b9bc
 80005fc:	20000148 	.word	0x20000148
 8000600:	20000000 	.word	0x20000000
 8000604:	200000d0 	.word	0x200000d0

08000608 <littlefs_read>:

int littlefs_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	603b      	str	r3, [r7, #0]
    LFS_DBG("LittleFS Read b = 0x%04lx o = 0x%04lx s = 0x%04lx", block, off, size);
 8000616:	69bb      	ldr	r3, [r7, #24]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	68b9      	ldr	r1, [r7, #8]
 800061c:	480e      	ldr	r0, [pc, #56]	; (8000658 <littlefs_read+0x50>)
 800061e:	f00a fb25 	bl	800ac6c <iprintf>
 8000622:	200a      	movs	r0, #10
 8000624:	f00a fb34 	bl	800ac90 <putchar>
    if (m24cxx_read(m24cxx_handle, block * littlefs_config.block_size + off, buffer, size) != M24CXX_Ok)
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <littlefs_read+0x54>)
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <littlefs_read+0x58>)
 800062e:	69db      	ldr	r3, [r3, #28]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	fb03 f202 	mul.w	r2, r3, r2
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	18d1      	adds	r1, r2, r3
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	f00a f859 	bl	800a6f4 <m24cxx_read>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <littlefs_read+0x46>
        return -1;
 8000648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064c:	e000      	b.n	8000650 <littlefs_read+0x48>
    return 0;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	0800b9cc 	.word	0x0800b9cc
 800065c:	20000148 	.word	0x20000148
 8000660:	20000000 	.word	0x20000000

08000664 <littlefs_prog>:

int littlefs_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	603b      	str	r3, [r7, #0]
    LFS_DBG("LittleFS Prog b = 0x%04lx o = 0x%04lx s = 0x%04lx", block, off, size);
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	68b9      	ldr	r1, [r7, #8]
 8000678:	480e      	ldr	r0, [pc, #56]	; (80006b4 <littlefs_prog+0x50>)
 800067a:	f00a faf7 	bl	800ac6c <iprintf>
 800067e:	200a      	movs	r0, #10
 8000680:	f00a fb06 	bl	800ac90 <putchar>
    if (m24cxx_write(m24cxx_handle, block * littlefs_config.block_size + off, (void*) buffer, size) != M24CXX_Ok)
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <littlefs_prog+0x54>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <littlefs_prog+0x58>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	fb03 f202 	mul.w	r2, r3, r2
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	18d1      	adds	r1, r2, r3
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	f00a f894 	bl	800a7c6 <m24cxx_write>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <littlefs_prog+0x46>
        return -1;
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a8:	e000      	b.n	80006ac <littlefs_prog+0x48>
    return 0;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	0800ba00 	.word	0x0800ba00
 80006b8:	20000148 	.word	0x20000148
 80006bc:	20000000 	.word	0x20000000

080006c0 <littlefs_erase>:

int littlefs_erase(const struct lfs_config *c, lfs_block_t block) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
    LFS_DBG("LittleFS Erase b = 0x%04lx", block);
 80006ca:	6839      	ldr	r1, [r7, #0]
 80006cc:	480e      	ldr	r0, [pc, #56]	; (8000708 <littlefs_erase+0x48>)
 80006ce:	f00a facd 	bl	800ac6c <iprintf>
 80006d2:	200a      	movs	r0, #10
 80006d4:	f00a fadc 	bl	800ac90 <putchar>
    if (m24cxx_erase(m24cxx_handle, block * littlefs_config.block_size, littlefs_config.block_size) != M24CXX_Ok)
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <littlefs_erase+0x4c>)
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <littlefs_erase+0x50>)
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	fb02 f303 	mul.w	r3, r2, r3
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <littlefs_erase+0x50>)
 80006e8:	69d2      	ldr	r2, [r2, #28]
 80006ea:	4619      	mov	r1, r3
 80006ec:	f00a f8db 	bl	800a8a6 <m24cxx_erase>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <littlefs_erase+0x3c>
        return -1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006fa:	e000      	b.n	80006fe <littlefs_erase+0x3e>
    return 0;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	0800ba34 	.word	0x0800ba34
 800070c:	20000148 	.word	0x20000148
 8000710:	20000000 	.word	0x20000000

08000714 <littlefs_sync>:

int littlefs_sync(const struct lfs_config *c) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    LFS_DBG("LittleFS Sync");
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <littlefs_sync+0x20>)
 800071e:	f00a faa5 	bl	800ac6c <iprintf>
 8000722:	200a      	movs	r0, #10
 8000724:	f00a fab4 	bl	800ac90 <putchar>
    return 0;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	0800ba50 	.word	0x0800ba50

08000738 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d002      	beq.n	8000750 <_write+0x18>
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d111      	bne.n	8000774 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	4809      	ldr	r0, [pc, #36]	; (8000780 <_write+0x48>)
 800075c:	f002 fd7d 	bl	800325a <HAL_UART_Transmit>
 8000760:	4603      	mov	r3, r0
 8000762:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000764:	7dfb      	ldrb	r3, [r7, #23]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <_write+0x36>
            return len;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	e004      	b.n	8000778 <_write+0x40>
        else
            return -1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000772:	e001      	b.n	8000778 <_write+0x40>
    }
    return -1;
 8000774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200001a0 	.word	0x200001a0

08000784 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BTN_Pin) // If the button
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d102      	bne.n	800079a <HAL_GPIO_EXTI_Callback+0x16>
    {
        do_action = 1;
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
    }
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200001ec 	.word	0x200001ec

080007ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80007b2:	f000 fc47 	bl	8001044 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80007b6:	f000 f923 	bl	8000a00 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80007ba:	f000 f9e1 	bl	8000b80 <MX_GPIO_Init>
    MX_I2C1_Init();
 80007be:	f000 f987 	bl	8000ad0 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 80007c2:	f000 f9b3 	bl	8000b2c <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */

    DBG("\n\n\n\n--------\nStarting");
 80007c6:	487b      	ldr	r0, [pc, #492]	; (80009b4 <main+0x208>)
 80007c8:	f00a fa50 	bl	800ac6c <iprintf>
 80007cc:	200a      	movs	r0, #10
 80007ce:	f00a fa5f 	bl	800ac90 <putchar>

    DBG("Powering up memory");
 80007d2:	4879      	ldr	r0, [pc, #484]	; (80009b8 <main+0x20c>)
 80007d4:	f00a fa4a 	bl	800ac6c <iprintf>
 80007d8:	200a      	movs	r0, #10
 80007da:	f00a fa59 	bl	800ac90 <putchar>
    HAL_GPIO_WritePin(POW_GPIO_Port, POW_Pin, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e4:	4875      	ldr	r0, [pc, #468]	; (80009bc <main+0x210>)
 80007e6:	f000 ff59 	bl	800169c <HAL_GPIO_WritePin>

    // Wait a few ms to get ready
    HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f000 fc9c 	bl	8001128 <HAL_Delay>

    DBG("Scanning I2C bus:");
 80007f0:	4873      	ldr	r0, [pc, #460]	; (80009c0 <main+0x214>)
 80007f2:	f00a fa3b 	bl	800ac6c <iprintf>
 80007f6:	200a      	movs	r0, #10
 80007f8:	f00a fa4a 	bl	800ac90 <putchar>
    // Go through all possible i2c addresses
    for (uint8_t i = 0; i < 128; i++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	77fb      	strb	r3, [r7, #31]
 8000800:	e023      	b.n	800084a <main+0x9e>

        if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 3, 100) == HAL_OK) {
 8000802:	7ffb      	ldrb	r3, [r7, #31]
 8000804:	b29b      	uxth	r3, r3
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	b299      	uxth	r1, r3
 800080a:	2364      	movs	r3, #100	; 0x64
 800080c:	2203      	movs	r2, #3
 800080e:	486d      	ldr	r0, [pc, #436]	; (80009c4 <main+0x218>)
 8000810:	f001 fbf4 	bl	8001ffc <HAL_I2C_IsDeviceReady>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <main+0x7a>
            // We got an ack
            printf("%2x ", i);
 800081a:	7ffb      	ldrb	r3, [r7, #31]
 800081c:	4619      	mov	r1, r3
 800081e:	486a      	ldr	r0, [pc, #424]	; (80009c8 <main+0x21c>)
 8000820:	f00a fa24 	bl	800ac6c <iprintf>
 8000824:	e002      	b.n	800082c <main+0x80>
        } else {
            printf("-- ");
 8000826:	4869      	ldr	r0, [pc, #420]	; (80009cc <main+0x220>)
 8000828:	f00a fa20 	bl	800ac6c <iprintf>
        }

        if (i > 0 && (i + 1) % 16 == 0)
 800082c:	7ffb      	ldrb	r3, [r7, #31]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d008      	beq.n	8000844 <main+0x98>
 8000832:	7ffb      	ldrb	r3, [r7, #31]
 8000834:	3301      	adds	r3, #1
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	2b00      	cmp	r3, #0
 800083c:	d102      	bne.n	8000844 <main+0x98>
            printf("\n");
 800083e:	200a      	movs	r0, #10
 8000840:	f00a fa26 	bl	800ac90 <putchar>
    for (uint8_t i = 0; i < 128; i++) {
 8000844:	7ffb      	ldrb	r3, [r7, #31]
 8000846:	3301      	adds	r3, #1
 8000848:	77fb      	strb	r3, [r7, #31]
 800084a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800084e:	2b00      	cmp	r3, #0
 8000850:	dad7      	bge.n	8000802 <main+0x56>

    }

    printf("\n");
 8000852:	200a      	movs	r0, #10
 8000854:	f00a fa1c 	bl	800ac90 <putchar>

    if (m24cxx_init(&m24cxx, &hi2c1, 0x50) != M24CXX_Ok) {
 8000858:	2250      	movs	r2, #80	; 0x50
 800085a:	495a      	ldr	r1, [pc, #360]	; (80009c4 <main+0x218>)
 800085c:	485c      	ldr	r0, [pc, #368]	; (80009d0 <main+0x224>)
 800085e:	f009 fef9 	bl	800a654 <m24cxx_init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d007      	beq.n	8000878 <main+0xcc>
        DBG("M24CXX Failed to initialize");
 8000868:	485a      	ldr	r0, [pc, #360]	; (80009d4 <main+0x228>)
 800086a:	f00a f9ff 	bl	800ac6c <iprintf>
 800086e:	200a      	movs	r0, #10
 8000870:	f00a fa0e 	bl	800ac90 <putchar>
        Error_Handler();
 8000874:	f000 fa12 	bl	8000c9c <Error_Handler>
    }

    //m24cxx_erase_all(&m24cxx);

    m24cxx_littlefs_init(&m24cxx);
 8000878:	4855      	ldr	r0, [pc, #340]	; (80009d0 <main+0x224>)
 800087a:	f7ff fe9b 	bl	80005b4 <m24cxx_littlefs_init>

    // read current count
    uint32_t boot_count = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]

    lfs_file_open(&littlefs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 8000882:	f240 1303 	movw	r3, #259	; 0x103
 8000886:	4a54      	ldr	r2, [pc, #336]	; (80009d8 <main+0x22c>)
 8000888:	4954      	ldr	r1, [pc, #336]	; (80009dc <main+0x230>)
 800088a:	4855      	ldr	r0, [pc, #340]	; (80009e0 <main+0x234>)
 800088c:	f009 fdce 	bl	800a42c <lfs_file_open>
    lfs_file_read(&littlefs, &file, &boot_count, sizeof(boot_count));
 8000890:	f107 0208 	add.w	r2, r7, #8
 8000894:	2304      	movs	r3, #4
 8000896:	4951      	ldr	r1, [pc, #324]	; (80009dc <main+0x230>)
 8000898:	4851      	ldr	r0, [pc, #324]	; (80009e0 <main+0x234>)
 800089a:	f009 fe27 	bl	800a4ec <lfs_file_read>

    // update boot count
    boot_count += 1;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
    lfs_file_rewind(&littlefs, &file);
 80008a4:	494d      	ldr	r1, [pc, #308]	; (80009dc <main+0x230>)
 80008a6:	484e      	ldr	r0, [pc, #312]	; (80009e0 <main+0x234>)
 80008a8:	f009 fe80 	bl	800a5ac <lfs_file_rewind>
    lfs_file_write(&littlefs, &file, &boot_count, sizeof(boot_count));
 80008ac:	f107 0208 	add.w	r2, r7, #8
 80008b0:	2304      	movs	r3, #4
 80008b2:	494a      	ldr	r1, [pc, #296]	; (80009dc <main+0x230>)
 80008b4:	484a      	ldr	r0, [pc, #296]	; (80009e0 <main+0x234>)
 80008b6:	f009 fe49 	bl	800a54c <lfs_file_write>

    // remember the storage is not updated until the file is closed successfully
    lfs_file_close(&littlefs, &file);
 80008ba:	4948      	ldr	r1, [pc, #288]	; (80009dc <main+0x230>)
 80008bc:	4848      	ldr	r0, [pc, #288]	; (80009e0 <main+0x234>)
 80008be:	f009 fde9 	bl	800a494 <lfs_file_close>

    uint32_t start_uptime = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]

    lfs_file_open(&littlefs, &file, "uptime", LFS_O_RDWR | LFS_O_CREAT);
 80008c6:	f240 1303 	movw	r3, #259	; 0x103
 80008ca:	4a46      	ldr	r2, [pc, #280]	; (80009e4 <main+0x238>)
 80008cc:	4943      	ldr	r1, [pc, #268]	; (80009dc <main+0x230>)
 80008ce:	4844      	ldr	r0, [pc, #272]	; (80009e0 <main+0x234>)
 80008d0:	f009 fdac 	bl	800a42c <lfs_file_open>
    lfs_file_read(&littlefs, &file, &start_uptime, sizeof(start_uptime));
 80008d4:	1d3a      	adds	r2, r7, #4
 80008d6:	2304      	movs	r3, #4
 80008d8:	4940      	ldr	r1, [pc, #256]	; (80009dc <main+0x230>)
 80008da:	4841      	ldr	r0, [pc, #260]	; (80009e0 <main+0x234>)
 80008dc:	f009 fe06 	bl	800a4ec <lfs_file_read>
    lfs_file_close(&littlefs, &file);
 80008e0:	493e      	ldr	r1, [pc, #248]	; (80009dc <main+0x230>)
 80008e2:	483f      	ldr	r0, [pc, #252]	; (80009e0 <main+0x234>)
 80008e4:	f009 fdd6 	bl	800a494 <lfs_file_close>

    DBG("Boot count = %lu start uptime = %lu", boot_count, start_uptime);
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4619      	mov	r1, r3
 80008ee:	483e      	ldr	r0, [pc, #248]	; (80009e8 <main+0x23c>)
 80008f0:	f00a f9bc 	bl	800ac6c <iprintf>
 80008f4:	200a      	movs	r0, #10
 80008f6:	f00a f9cb 	bl	800ac90 <putchar>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    uint32_t now = 0, last_blink = 0, last_update = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]

    while (1) {

        now = HAL_GetTick();
 8000906:	f000 fc03 	bl	8001110 <HAL_GetTick>
 800090a:	6138      	str	r0, [r7, #16]

        if (now - last_blink >= 500) {
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000916:	d306      	bcc.n	8000926 <main+0x17a>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091c:	4833      	ldr	r0, [pc, #204]	; (80009ec <main+0x240>)
 800091e:	f000 fed6 	bl	80016ce <HAL_GPIO_TogglePin>
            last_blink = now;
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	61bb      	str	r3, [r7, #24]
        }

        if (now - last_update >= 10000) {
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000930:	4293      	cmp	r3, r2
 8000932:	d930      	bls.n	8000996 <main+0x1ea>

            uint32_t total_uptime = start_uptime + now;
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	4413      	add	r3, r2
 800093a:	603b      	str	r3, [r7, #0]

            DBG("Total uptime = %lu", total_uptime);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	4619      	mov	r1, r3
 8000940:	482b      	ldr	r0, [pc, #172]	; (80009f0 <main+0x244>)
 8000942:	f00a f993 	bl	800ac6c <iprintf>
 8000946:	200a      	movs	r0, #10
 8000948:	f00a f9a2 	bl	800ac90 <putchar>

            uint32_t start = HAL_GetTick();
 800094c:	f000 fbe0 	bl	8001110 <HAL_GetTick>
 8000950:	60f8      	str	r0, [r7, #12]
            lfs_file_open(&littlefs, &file, "uptime", LFS_O_RDWR);
 8000952:	2303      	movs	r3, #3
 8000954:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <main+0x238>)
 8000956:	4921      	ldr	r1, [pc, #132]	; (80009dc <main+0x230>)
 8000958:	4821      	ldr	r0, [pc, #132]	; (80009e0 <main+0x234>)
 800095a:	f009 fd67 	bl	800a42c <lfs_file_open>
            lfs_file_rewind(&littlefs, &file);
 800095e:	491f      	ldr	r1, [pc, #124]	; (80009dc <main+0x230>)
 8000960:	481f      	ldr	r0, [pc, #124]	; (80009e0 <main+0x234>)
 8000962:	f009 fe23 	bl	800a5ac <lfs_file_rewind>
            lfs_file_write(&littlefs, &file, &total_uptime, sizeof(total_uptime));
 8000966:	463a      	mov	r2, r7
 8000968:	2304      	movs	r3, #4
 800096a:	491c      	ldr	r1, [pc, #112]	; (80009dc <main+0x230>)
 800096c:	481c      	ldr	r0, [pc, #112]	; (80009e0 <main+0x234>)
 800096e:	f009 fded 	bl	800a54c <lfs_file_write>
            lfs_file_close(&littlefs, &file);
 8000972:	491a      	ldr	r1, [pc, #104]	; (80009dc <main+0x230>)
 8000974:	481a      	ldr	r0, [pc, #104]	; (80009e0 <main+0x234>)
 8000976:	f009 fd8d 	bl	800a494 <lfs_file_close>
            DBG("File update took %lu ms", HAL_GetTick() - start);
 800097a:	f000 fbc9 	bl	8001110 <HAL_GetTick>
 800097e:	4602      	mov	r2, r0
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	4619      	mov	r1, r3
 8000986:	481b      	ldr	r0, [pc, #108]	; (80009f4 <main+0x248>)
 8000988:	f00a f970 	bl	800ac6c <iprintf>
 800098c:	200a      	movs	r0, #10
 800098e:	f00a f97f 	bl	800ac90 <putchar>

            last_update = now;
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	617b      	str	r3, [r7, #20]
        }

        if (do_action) {
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <main+0x24c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0b3      	beq.n	8000906 <main+0x15a>
            do_action = 0;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <main+0x24c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	701a      	strb	r2, [r3, #0]
            DBG("Do action!");
 80009a4:	4815      	ldr	r0, [pc, #84]	; (80009fc <main+0x250>)
 80009a6:	f00a f961 	bl	800ac6c <iprintf>
 80009aa:	200a      	movs	r0, #10
 80009ac:	f00a f970 	bl	800ac90 <putchar>
        now = HAL_GetTick();
 80009b0:	e7a9      	b.n	8000906 <main+0x15a>
 80009b2:	bf00      	nop
 80009b4:	0800ba60 	.word	0x0800ba60
 80009b8:	0800ba78 	.word	0x0800ba78
 80009bc:	40020400 	.word	0x40020400
 80009c0:	0800ba8c 	.word	0x0800ba8c
 80009c4:	2000014c 	.word	0x2000014c
 80009c8:	0800baa0 	.word	0x0800baa0
 80009cc:	0800baa8 	.word	0x0800baa8
 80009d0:	200001e4 	.word	0x200001e4
 80009d4:	0800baac 	.word	0x0800baac
 80009d8:	0800bac8 	.word	0x0800bac8
 80009dc:	200001f0 	.word	0x200001f0
 80009e0:	200000d0 	.word	0x200000d0
 80009e4:	0800bad4 	.word	0x0800bad4
 80009e8:	0800badc 	.word	0x0800badc
 80009ec:	40020800 	.word	0x40020800
 80009f0:	0800bb00 	.word	0x0800bb00
 80009f4:	0800bb14 	.word	0x0800bb14
 80009f8:	200001ec 	.word	0x200001ec
 80009fc:	0800bb2c 	.word	0x0800bb2c

08000a00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	; 0x50
 8000a04:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	2230      	movs	r2, #48	; 0x30
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00a f999 	bl	800ad46 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <SystemClock_Config+0xc8>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a26      	ldr	r2, [pc, #152]	; (8000ac8 <SystemClock_Config+0xc8>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <SystemClock_Config+0xc8>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <SystemClock_Config+0xcc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a20      	ldr	r2, [pc, #128]	; (8000acc <SystemClock_Config+0xcc>)
 8000a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <SystemClock_Config+0xcc>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 12;
 8000a70:	230c      	movs	r3, #12
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 96;
 8000a74:	2360      	movs	r3, #96	; 0x60
 8000a76:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 ff43 	bl	8002910 <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x94>
        Error_Handler();
 8000a90:	f000 f904 	bl	8000c9c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a94:	230f      	movs	r3, #15
 8000a96:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2103      	movs	r1, #3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 f9a5 	bl	8002e00 <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xc0>
        Error_Handler();
 8000abc:	f000 f8ee 	bl	8000c9c <Error_Handler>
    }
}
 8000ac0:	bf00      	nop
 8000ac2:	3750      	adds	r7, #80	; 0x50
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000

08000ad0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000ad6:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <MX_I2C1_Init+0x54>)
 8000ad8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000adc:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_I2C1_Init+0x58>)
 8000ade:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af2:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_I2C1_Init+0x50>)
 8000b0e:	f000 fe11 	bl	8001734 <HAL_I2C_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000b18:	f000 f8c0 	bl	8000c9c <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000014c 	.word	0x2000014c
 8000b24:	40005400 	.word	0x40005400
 8000b28:	00061a80 	.word	0x00061a80

08000b2c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_USART1_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 921600;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b38:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000b3c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b64:	f002 fb2c 	bl	80031c0 <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8000b6e:	f000 f895 	bl	8000c9c <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200001a0 	.word	0x200001a0
 8000b7c:	40011000 	.word	0x40011000

08000b80 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a3b      	ldr	r2, [pc, #236]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b39      	ldr	r3, [pc, #228]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a34      	ldr	r2, [pc, #208]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a2d      	ldr	r2, [pc, #180]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_GPIO_Init+0x10c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	4820      	ldr	r0, [pc, #128]	; (8000c90 <MX_GPIO_Init+0x110>)
 8000c0e:	f000 fd45 	bl	800169c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(POW_GPIO_Port, POW_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c18:	481e      	ldr	r0, [pc, #120]	; (8000c94 <MX_GPIO_Init+0x114>)
 8000c1a:	f000 fd3f 	bl	800169c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c24:	2311      	movs	r3, #17
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4816      	ldr	r0, [pc, #88]	; (8000c90 <MX_GPIO_Init+0x110>)
 8000c38:	f000 fbac 	bl	8001394 <HAL_GPIO_Init>

    /*Configure GPIO pin : BTN_Pin */
    GPIO_InitStruct.Pin = BTN_Pin;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <MX_GPIO_Init+0x118>)
 8000c52:	f000 fb9f 	bl	8001394 <HAL_GPIO_Init>

    /*Configure GPIO pin : POW_Pin */
    GPIO_InitStruct.Pin = POW_Pin;
 8000c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(POW_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4809      	ldr	r0, [pc, #36]	; (8000c94 <MX_GPIO_Init+0x114>)
 8000c70:	f000 fb90 	bl	8001394 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2006      	movs	r0, #6
 8000c7a:	f000 fb54 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c7e:	2006      	movs	r0, #6
 8000c80:	f000 fb6d 	bl	800135e <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020400 	.word	0x40020400
 8000c98:	40020000 	.word	0x40020000

08000c9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_I2C_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12b      	bne.n	8000d72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d36:	23c0      	movs	r3, #192	; 0xc0
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3a:	2312      	movs	r3, #18
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d46:	2304      	movs	r3, #4
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <HAL_I2C_MspInit+0x8c>)
 8000d52:	f000 fb1f 	bl	8001394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_I2C_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	; 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020400 	.word	0x40020400

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_UART_MspInit+0x84>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12c      	bne.n	8000e04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_UART_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000de2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000df4:	2307      	movs	r3, #7
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_UART_MspInit+0x8c>)
 8000e00:	f000 fac8 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40011000 	.word	0x40011000
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f940 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f000 fc47 	bl	8001704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  return 1;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_kill>:

int _kill(int pid, int sig)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e94:	f009 ffe4 	bl	800ae60 <__errno>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2216      	movs	r2, #22
 8000e9c:	601a      	str	r2, [r3, #0]
  return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <_exit>:

void _exit (int status)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffe7 	bl	8000e8a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ebc:	e7fe      	b.n	8000ebc <_exit+0x12>

08000ebe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e00a      	b.n	8000ee6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ed0:	f3af 8000 	nop.w
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	60ba      	str	r2, [r7, #8]
 8000edc:	b2ca      	uxtb	r2, r1
 8000ede:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbf0      	blt.n	8000ed0 <_read+0x12>
  }

  return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f20:	605a      	str	r2, [r3, #4]
  return 0;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_isatty>:

int _isatty(int file)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f38:	2301      	movs	r3, #1
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <_sbrk+0x5c>)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <_sbrk+0x60>)
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <_sbrk+0x64>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <_sbrk+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f90:	f009 ff66 	bl	800ae60 <__errno>
 8000f94:	4603      	mov	r3, r0
 8000f96:	220c      	movs	r2, #12
 8000f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9e:	e009      	b.n	8000fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <_sbrk+0x64>)
 8000fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20020000 	.word	0x20020000
 8000fc0:	00000400 	.word	0x00000400
 8000fc4:	20000244 	.word	0x20000244
 8000fc8:	20000398 	.word	0x20000398

08000fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ff6:	490e      	ldr	r1, [pc, #56]	; (8001030 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800100c:	4c0b      	ldr	r4, [pc, #44]	; (800103c <LoopFillZerobss+0x26>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800101a:	f7ff ffd7 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101e:	f009 ff25 	bl	800ae6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001022:	f7ff fbc3 	bl	80007ac <main>
  bx  lr    
 8001026:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001028:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001034:	0800c7b0 	.word	0x0800c7b0
  ldr r2, =_sbss
 8001038:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800103c:	20000398 	.word	0x20000398

08001040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HAL_Init+0x40>)
 800104e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_Init+0x40>)
 800105a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_Init+0x40>)
 8001066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f94f 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	200f      	movs	r0, #15
 8001074:	f000 f808 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fe16 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023c00 	.word	0x40023c00

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f967 	bl	800137a <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c4:	f000 f92f 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000004c 	.word	0x2000004c
 80010e0:	20000054 	.word	0x20000054
 80010e4:	20000050 	.word	0x20000050

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000054 	.word	0x20000054
 800110c:	20000248 	.word	0x20000248

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000248 	.word	0x20000248

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000054 	.word	0x20000054

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f0:	f7ff ff8e 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff29 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff3e 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff8e 	bl	8001264 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff31 	bl	80011d4 <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e159      	b.n	8001664 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 8148 	bne.w	800165e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d005      	beq.n	80013e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d130      	bne.n	8001448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 0201 	and.w	r2, r3, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b03      	cmp	r3, #3
 8001452:	d017      	beq.n	8001484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d123      	bne.n	80014d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0203 	and.w	r2, r3, #3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a2 	beq.w	800165e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b57      	ldr	r3, [pc, #348]	; (800167c <HAL_GPIO_Init+0x2e8>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a56      	ldr	r2, [pc, #344]	; (800167c <HAL_GPIO_Init+0x2e8>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <HAL_GPIO_Init+0x2e8>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001536:	4a52      	ldr	r2, [pc, #328]	; (8001680 <HAL_GPIO_Init+0x2ec>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a49      	ldr	r2, [pc, #292]	; (8001684 <HAL_GPIO_Init+0x2f0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x202>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a48      	ldr	r2, [pc, #288]	; (8001688 <HAL_GPIO_Init+0x2f4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x1fe>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a47      	ldr	r2, [pc, #284]	; (800168c <HAL_GPIO_Init+0x2f8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x1fa>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a46      	ldr	r2, [pc, #280]	; (8001690 <HAL_GPIO_Init+0x2fc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x1f6>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a45      	ldr	r2, [pc, #276]	; (8001694 <HAL_GPIO_Init+0x300>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x1f2>
 8001582:	2304      	movs	r3, #4
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001586:	2307      	movs	r3, #7
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001596:	2300      	movs	r3, #0
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	f002 0203 	and.w	r2, r2, #3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	; (8001680 <HAL_GPIO_Init+0x2ec>)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015da:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <HAL_GPIO_Init+0x304>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001604:	4a24      	ldr	r2, [pc, #144]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <HAL_GPIO_Init+0x304>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001658:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_GPIO_Init+0x304>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3301      	adds	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	f67f aea2 	bls.w	80013b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e0:	887a      	ldrh	r2, [r7, #2]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	041a      	lsls	r2, r3, #16
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	400b      	ands	r3, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	619a      	str	r2, [r3, #24]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff f82e 	bl	8000784 <HAL_GPIO_EXTI_Callback>
  }
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40013c00 	.word	0x40013c00

08001734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e12b      	b.n	800199e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff facc 	bl	8000cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2224      	movs	r2, #36	; 0x24
 8001764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001798:	f001 fcea 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 800179c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a81      	ldr	r2, [pc, #516]	; (80019a8 <HAL_I2C_Init+0x274>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d807      	bhi.n	80017b8 <HAL_I2C_Init+0x84>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a80      	ldr	r2, [pc, #512]	; (80019ac <HAL_I2C_Init+0x278>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	bf94      	ite	ls
 80017b0:	2301      	movls	r3, #1
 80017b2:	2300      	movhi	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e006      	b.n	80017c6 <HAL_I2C_Init+0x92>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4a7d      	ldr	r2, [pc, #500]	; (80019b0 <HAL_I2C_Init+0x27c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	bf94      	ite	ls
 80017c0:	2301      	movls	r3, #1
 80017c2:	2300      	movhi	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0e7      	b.n	800199e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4a78      	ldr	r2, [pc, #480]	; (80019b4 <HAL_I2C_Init+0x280>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0c9b      	lsrs	r3, r3, #18
 80017d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a6a      	ldr	r2, [pc, #424]	; (80019a8 <HAL_I2C_Init+0x274>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d802      	bhi.n	8001808 <HAL_I2C_Init+0xd4>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	e009      	b.n	800181c <HAL_I2C_Init+0xe8>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	4a69      	ldr	r2, [pc, #420]	; (80019b8 <HAL_I2C_Init+0x284>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	3301      	adds	r3, #1
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	430b      	orrs	r3, r1
 8001822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800182e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	495c      	ldr	r1, [pc, #368]	; (80019a8 <HAL_I2C_Init+0x274>)
 8001838:	428b      	cmp	r3, r1
 800183a:	d819      	bhi.n	8001870 <HAL_I2C_Init+0x13c>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e59      	subs	r1, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fbb1 f3f3 	udiv	r3, r1, r3
 800184a:	1c59      	adds	r1, r3, #1
 800184c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001850:	400b      	ands	r3, r1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00a      	beq.n	800186c <HAL_I2C_Init+0x138>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1e59      	subs	r1, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fbb1 f3f3 	udiv	r3, r1, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186a:	e051      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 800186c:	2304      	movs	r3, #4
 800186e:	e04f      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d111      	bne.n	800189c <HAL_I2C_Init+0x168>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1e58      	subs	r0, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	440b      	add	r3, r1
 8001886:	fbb0 f3f3 	udiv	r3, r0, r3
 800188a:	3301      	adds	r3, #1
 800188c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e012      	b.n	80018c2 <HAL_I2C_Init+0x18e>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Init+0x196>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e022      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10e      	bne.n	80018f0 <HAL_I2C_Init+0x1bc>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e58      	subs	r0, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6859      	ldr	r1, [r3, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	440b      	add	r3, r1
 80018e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ee:	e00f      	b.n	8001910 <HAL_I2C_Init+0x1dc>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	0099      	lsls	r1, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	fbb0 f3f3 	udiv	r3, r0, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800190c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	6809      	ldr	r1, [r1, #0]
 8001914:	4313      	orrs	r3, r2
 8001916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800193e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6911      	ldr	r1, [r2, #16]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68d2      	ldr	r2, [r2, #12]
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	430b      	orrs	r3, r1
 8001952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	000186a0 	.word	0x000186a0
 80019ac:	001e847f 	.word	0x001e847f
 80019b0:	003d08ff 	.word	0x003d08ff
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	10624dd3 	.word	0x10624dd3

080019bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	4608      	mov	r0, r1
 80019c6:	4611      	mov	r1, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	4603      	mov	r3, r0
 80019cc:	817b      	strh	r3, [r7, #10]
 80019ce:	460b      	mov	r3, r1
 80019d0:	813b      	strh	r3, [r7, #8]
 80019d2:	4613      	mov	r3, r2
 80019d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019d6:	f7ff fb9b 	bl	8001110 <HAL_GetTick>
 80019da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	f040 80d9 	bne.w	8001b9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2319      	movs	r3, #25
 80019f0:	2201      	movs	r2, #1
 80019f2:	496d      	ldr	r1, [pc, #436]	; (8001ba8 <HAL_I2C_Mem_Write+0x1ec>)
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 fdad 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a00:	2302      	movs	r3, #2
 8001a02:	e0cc      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2C_Mem_Write+0x56>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e0c5      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d007      	beq.n	8001a38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2221      	movs	r2, #33	; 0x21
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2240      	movs	r2, #64	; 0x40
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a3a      	ldr	r2, [r7, #32]
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a4d      	ldr	r2, [pc, #308]	; (8001bac <HAL_I2C_Mem_Write+0x1f0>)
 8001a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a7a:	88f8      	ldrh	r0, [r7, #6]
 8001a7c:	893a      	ldrh	r2, [r7, #8]
 8001a7e:	8979      	ldrh	r1, [r7, #10]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4603      	mov	r3, r0
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 fbe4 	bl	8002258 <I2C_RequestMemoryWrite>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d052      	beq.n	8001b3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e081      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fe2e 	bl	8002700 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d107      	bne.n	8001ac2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06b      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d11b      	bne.n	8001b3c <HAL_I2C_Mem_Write+0x180>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d017      	beq.n	8001b3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1aa      	bne.n	8001a9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fe1a 	bl	8002782 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00d      	beq.n	8001b70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d107      	bne.n	8001b6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e016      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b9c:	2302      	movs	r3, #2
  }
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	00100002 	.word	0x00100002
 8001bac:	ffff0000 	.word	0xffff0000

08001bb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	4608      	mov	r0, r1
 8001bba:	4611      	mov	r1, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	817b      	strh	r3, [r7, #10]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	813b      	strh	r3, [r7, #8]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bca:	f7ff faa1 	bl	8001110 <HAL_GetTick>
 8001bce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	f040 8208 	bne.w	8001fee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2319      	movs	r3, #25
 8001be4:	2201      	movs	r2, #1
 8001be6:	497b      	ldr	r1, [pc, #492]	; (8001dd4 <HAL_I2C_Mem_Read+0x224>)
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 fcb3 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e1fb      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_I2C_Mem_Read+0x56>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e1f4      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d007      	beq.n	8001c2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2222      	movs	r2, #34	; 0x22
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2240      	movs	r2, #64	; 0x40
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4a5b      	ldr	r2, [pc, #364]	; (8001dd8 <HAL_I2C_Mem_Read+0x228>)
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c6e:	88f8      	ldrh	r0, [r7, #6]
 8001c70:	893a      	ldrh	r2, [r7, #8]
 8001c72:	8979      	ldrh	r1, [r7, #10]
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fb80 	bl	8002384 <I2C_RequestMemoryRead>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e1b0      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d113      	bne.n	8001cbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	623b      	str	r3, [r7, #32]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e184      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d11b      	bne.n	8001cfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e164      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d11b      	bne.n	8001d3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	e144      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d54:	e138      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	f200 80f1 	bhi.w	8001f42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d123      	bne.n	8001db0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fd49 	bl	8002804 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e139      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dae:	e10b      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d14e      	bne.n	8001e56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4906      	ldr	r1, [pc, #24]	; (8001ddc <HAL_I2C_Mem_Read+0x22c>)
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fbc6 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e10e      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
 8001dd2:	bf00      	nop
 8001dd4:	00100002 	.word	0x00100002
 8001dd8:	ffff0000 	.word	0xffff0000
 8001ddc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e54:	e0b8      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4966      	ldr	r1, [pc, #408]	; (8001ff8 <HAL_I2C_Mem_Read+0x448>)
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 fb77 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0bf      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb8:	2200      	movs	r2, #0
 8001eba:	494f      	ldr	r1, [pc, #316]	; (8001ff8 <HAL_I2C_Mem_Read+0x448>)
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fb49 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e091      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f40:	e042      	b.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 fc5c 	bl	8002804 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e04c      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d118      	bne.n	8001fc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f aec2 	bne.w	8001d56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
  }
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3728      	adds	r7, #40	; 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	00010004 	.word	0x00010004

08001ffc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	460b      	mov	r3, r1
 800200a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800200c:	f7ff f880 	bl	8001110 <HAL_GetTick>
 8002010:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	f040 8111 	bne.w	8002246 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2319      	movs	r3, #25
 800202a:	2201      	movs	r2, #1
 800202c:	4988      	ldr	r1, [pc, #544]	; (8002250 <HAL_I2C_IsDeviceReady+0x254>)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fa90 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800203a:	2302      	movs	r3, #2
 800203c:	e104      	b.n	8002248 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_I2C_IsDeviceReady+0x50>
 8002048:	2302      	movs	r3, #2
 800204a:	e0fd      	b.n	8002248 <HAL_I2C_IsDeviceReady+0x24c>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d007      	beq.n	8002072 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002080:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2224      	movs	r2, #36	; 0x24
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a70      	ldr	r2, [pc, #448]	; (8002254 <HAL_I2C_IsDeviceReady+0x258>)
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fa4e 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00d      	beq.n	80020da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020cc:	d103      	bne.n	80020d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0b6      	b.n	8002248 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020da:	897b      	ldrh	r3, [r7, #10]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80020ea:	f7ff f811 	bl	8001110 <HAL_GetTick>
 80020ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800211e:	e025      	b.n	800216c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002120:	f7fe fff6 	bl	8001110 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d302      	bcc.n	8002136 <HAL_I2C_IsDeviceReady+0x13a>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	22a0      	movs	r2, #160	; 0xa0
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b02      	cmp	r3, #2
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2ba0      	cmp	r3, #160	; 0xa0
 8002176:	d005      	beq.n	8002184 <HAL_I2C_IsDeviceReady+0x188>
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_I2C_IsDeviceReady+0x188>
 800217e:	7dbb      	ldrb	r3, [r7, #22]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0cd      	beq.n	8002120 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b02      	cmp	r3, #2
 8002198:	d129      	bne.n	80021ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2319      	movs	r3, #25
 80021c6:	2201      	movs	r2, #1
 80021c8:	4921      	ldr	r1, [pc, #132]	; (8002250 <HAL_I2C_IsDeviceReady+0x254>)
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f9c2 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e036      	b.n	8002248 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e02c      	b.n	8002248 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002206:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2319      	movs	r3, #25
 800220e:	2201      	movs	r2, #1
 8002210:	490f      	ldr	r1, [pc, #60]	; (8002250 <HAL_I2C_IsDeviceReady+0x254>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f99e 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e012      	b.n	8002248 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	3301      	adds	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	f4ff af32 	bcc.w	8002096 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
  }
}
 8002248:	4618      	mov	r0, r3
 800224a:	3720      	adds	r7, #32
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	00100002 	.word	0x00100002
 8002254:	ffff0000 	.word	0xffff0000

08002258 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	4608      	mov	r0, r1
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4603      	mov	r3, r0
 8002268:	817b      	strh	r3, [r7, #10]
 800226a:	460b      	mov	r3, r1
 800226c:	813b      	strh	r3, [r7, #8]
 800226e:	4613      	mov	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002280:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	2200      	movs	r2, #0
 800228a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f960 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a8:	d103      	bne.n	80022b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e05f      	b.n	8002376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022b6:	897b      	ldrh	r3, [r7, #10]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	6a3a      	ldr	r2, [r7, #32]
 80022ca:	492d      	ldr	r1, [pc, #180]	; (8002380 <I2C_RequestMemoryWrite+0x128>)
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f998 	bl	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e04c      	b.n	8002376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f4:	6a39      	ldr	r1, [r7, #32]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fa02 	bl	8002700 <I2C_WaitOnTXEFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00d      	beq.n	800231e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	2b04      	cmp	r3, #4
 8002308:	d107      	bne.n	800231a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002318:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e02b      	b.n	8002376 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002324:	893b      	ldrh	r3, [r7, #8]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	611a      	str	r2, [r3, #16]
 800232e:	e021      	b.n	8002374 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002330:	893b      	ldrh	r3, [r7, #8]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	b29b      	uxth	r3, r3
 8002336:	b2da      	uxtb	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800233e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002340:	6a39      	ldr	r1, [r7, #32]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f9dc 	bl	8002700 <I2C_WaitOnTXEFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	2b04      	cmp	r3, #4
 8002354:	d107      	bne.n	8002366 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002364:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e005      	b.n	8002376 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800236a:	893b      	ldrh	r3, [r7, #8]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	00010002 	.word	0x00010002

08002384 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	4603      	mov	r3, r0
 8002394:	817b      	strh	r3, [r7, #10]
 8002396:	460b      	mov	r3, r1
 8002398:	813b      	strh	r3, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f8c2 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00d      	beq.n	80023f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e4:	d103      	bne.n	80023ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e0aa      	b.n	8002548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023f2:	897b      	ldrh	r3, [r7, #10]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002400:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	6a3a      	ldr	r2, [r7, #32]
 8002406:	4952      	ldr	r1, [pc, #328]	; (8002550 <I2C_RequestMemoryRead+0x1cc>)
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f8fa 	bl	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e097      	b.n	8002548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002430:	6a39      	ldr	r1, [r7, #32]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f964 	bl	8002700 <I2C_WaitOnTXEFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00d      	beq.n	800245a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	2b04      	cmp	r3, #4
 8002444:	d107      	bne.n	8002456 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002454:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e076      	b.n	8002548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d105      	bne.n	800246c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002460:	893b      	ldrh	r3, [r7, #8]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	611a      	str	r2, [r3, #16]
 800246a:	e021      	b.n	80024b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800246c:	893b      	ldrh	r3, [r7, #8]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	b29b      	uxth	r3, r3
 8002472:	b2da      	uxtb	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800247a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247c:	6a39      	ldr	r1, [r7, #32]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f93e 	bl	8002700 <I2C_WaitOnTXEFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	2b04      	cmp	r3, #4
 8002490:	d107      	bne.n	80024a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e050      	b.n	8002548 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024a6:	893b      	ldrh	r3, [r7, #8]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	6a39      	ldr	r1, [r7, #32]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f923 	bl	8002700 <I2C_WaitOnTXEFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d107      	bne.n	80024d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e035      	b.n	8002548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f82b 	bl	8002554 <I2C_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002512:	d103      	bne.n	800251c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e013      	b.n	8002548 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002520:	897b      	ldrh	r3, [r7, #10]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	b2da      	uxtb	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	6a3a      	ldr	r2, [r7, #32]
 8002534:	4906      	ldr	r1, [pc, #24]	; (8002550 <I2C_RequestMemoryRead+0x1cc>)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f863 	bl	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	00010002 	.word	0x00010002

08002554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002564:	e025      	b.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800256c:	d021      	beq.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256e:	f7fe fdcf 	bl	8001110 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d302      	bcc.n	8002584 <I2C_WaitOnFlagUntilTimeout+0x30>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d116      	bne.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f043 0220 	orr.w	r2, r3, #32
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e023      	b.n	80025fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10d      	bne.n	80025d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	e00c      	b.n	80025f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4013      	ands	r3, r2
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf0c      	ite	eq
 80025ea:	2301      	moveq	r3, #1
 80025ec:	2300      	movne	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d0b6      	beq.n	8002566 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002610:	e051      	b.n	80026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002620:	d123      	bne.n	800266a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002630:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800263a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f043 0204 	orr.w	r2, r3, #4
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e046      	b.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002670:	d021      	beq.n	80026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002672:	f7fe fd4d 	bl	8001110 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	d302      	bcc.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d116      	bne.n	80026b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f043 0220 	orr.w	r2, r3, #32
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e020      	b.n	80026f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10c      	bne.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4013      	ands	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf14      	ite	ne
 80026d2:	2301      	movne	r3, #1
 80026d4:	2300      	moveq	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	e00b      	b.n	80026f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4013      	ands	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d18d      	bne.n	8002612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800270c:	e02d      	b.n	800276a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f8ce 	bl	80028b0 <I2C_IsAcknowledgeFailed>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e02d      	b.n	800277a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002724:	d021      	beq.n	800276a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002726:	f7fe fcf3 	bl	8001110 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d116      	bne.n	800276a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e007      	b.n	800277a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002774:	2b80      	cmp	r3, #128	; 0x80
 8002776:	d1ca      	bne.n	800270e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800278e:	e02d      	b.n	80027ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f88d 	bl	80028b0 <I2C_IsAcknowledgeFailed>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e02d      	b.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027a6:	d021      	beq.n	80027ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a8:	f7fe fcb2 	bl	8001110 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d302      	bcc.n	80027be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f043 0220 	orr.w	r2, r3, #32
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e007      	b.n	80027fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d1ca      	bne.n	8002790 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002810:	e042      	b.n	8002898 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b10      	cmp	r3, #16
 800281e:	d119      	bne.n	8002854 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0210 	mvn.w	r2, #16
 8002828:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e029      	b.n	80028a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002854:	f7fe fc5c 	bl	8001110 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	429a      	cmp	r2, r3
 8002862:	d302      	bcc.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e007      	b.n	80028a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d1b5      	bne.n	8002812 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c6:	d11b      	bne.n	8002900 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f043 0204 	orr.w	r2, r3, #4
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e267      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d075      	beq.n	8002a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800292e:	4b88      	ldr	r3, [pc, #544]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b04      	cmp	r3, #4
 8002938:	d00c      	beq.n	8002954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293a:	4b85      	ldr	r3, [pc, #532]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002942:	2b08      	cmp	r3, #8
 8002944:	d112      	bne.n	800296c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002946:	4b82      	ldr	r3, [pc, #520]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002952:	d10b      	bne.n	800296c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	4b7e      	ldr	r3, [pc, #504]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d05b      	beq.n	8002a18 <HAL_RCC_OscConfig+0x108>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d157      	bne.n	8002a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e242      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002974:	d106      	bne.n	8002984 <HAL_RCC_OscConfig+0x74>
 8002976:	4b76      	ldr	r3, [pc, #472]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a75      	ldr	r2, [pc, #468]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e01d      	b.n	80029c0 <HAL_RCC_OscConfig+0xb0>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x98>
 800298e:	4b70      	ldr	r3, [pc, #448]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a6f      	ldr	r2, [pc, #444]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b6d      	ldr	r3, [pc, #436]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6c      	ldr	r2, [pc, #432]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0xb0>
 80029a8:	4b69      	ldr	r3, [pc, #420]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a68      	ldr	r2, [pc, #416]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a65      	ldr	r2, [pc, #404]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe fba2 	bl	8001110 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d0:	f7fe fb9e 	bl	8001110 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e207      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0xc0>
 80029ee:	e014      	b.n	8002a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe fb8e 	bl	8001110 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe fb8a 	bl	8001110 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1f3      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0xe8>
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d063      	beq.n	8002aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d11c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3e:	4b44      	ldr	r3, [pc, #272]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d116      	bne.n	8002a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_RCC_OscConfig+0x152>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e1c7      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4937      	ldr	r1, [pc, #220]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a76:	e03a      	b.n	8002aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a80:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <HAL_RCC_OscConfig+0x244>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7fe fb43 	bl	8001110 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8e:	f7fe fb3f 	bl	8001110 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e1a8      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4925      	ldr	r1, [pc, #148]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
 8002ac0:	e015      	b.n	8002aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <HAL_RCC_OscConfig+0x244>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fb22 	bl	8001110 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad0:	f7fe fb1e 	bl	8001110 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e187      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d036      	beq.n	8002b68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_RCC_OscConfig+0x248>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe fb02 	bl	8001110 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b10:	f7fe fafe 	bl	8001110 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e167      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_OscConfig+0x240>)
 8002b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x200>
 8002b2e:	e01b      	b.n	8002b68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_OscConfig+0x248>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7fe faeb 	bl	8001110 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	e00e      	b.n	8002b5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7fe fae7 	bl	8001110 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d907      	bls.n	8002b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e150      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
 8002b50:	40023800 	.word	0x40023800
 8002b54:	42470000 	.word	0x42470000
 8002b58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5c:	4b88      	ldr	r3, [pc, #544]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ea      	bne.n	8002b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8097 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7a:	4b81      	ldr	r3, [pc, #516]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10f      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	4b7d      	ldr	r3, [pc, #500]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a7c      	ldr	r2, [pc, #496]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b7a      	ldr	r3, [pc, #488]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba6:	4b77      	ldr	r3, [pc, #476]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d118      	bne.n	8002be4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb2:	4b74      	ldr	r3, [pc, #464]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a73      	ldr	r2, [pc, #460]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbe:	f7fe faa7 	bl	8001110 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc6:	f7fe faa3 	bl	8001110 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e10c      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_OscConfig+0x474>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x2ea>
 8002bec:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a63      	ldr	r2, [pc, #396]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	e01c      	b.n	8002c34 <HAL_RCC_OscConfig+0x324>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b05      	cmp	r3, #5
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x30c>
 8002c02:	4b5f      	ldr	r3, [pc, #380]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	4a5e      	ldr	r2, [pc, #376]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0e:	4b5c      	ldr	r3, [pc, #368]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a5b      	ldr	r2, [pc, #364]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCC_OscConfig+0x324>
 8002c1c:	4b58      	ldr	r3, [pc, #352]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a57      	ldr	r2, [pc, #348]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	4b55      	ldr	r3, [pc, #340]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a54      	ldr	r2, [pc, #336]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	f023 0304 	bic.w	r3, r3, #4
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d015      	beq.n	8002c68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe fa68 	bl	8001110 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c44:	f7fe fa64 	bl	8001110 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0cb      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ee      	beq.n	8002c44 <HAL_RCC_OscConfig+0x334>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c68:	f7fe fa52 	bl	8001110 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c70:	f7fe fa4e 	bl	8001110 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e0b5      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c86:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1ee      	bne.n	8002c70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c92:	7dfb      	ldrb	r3, [r7, #23]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d105      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c98:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	4a38      	ldr	r2, [pc, #224]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 80a1 	beq.w	8002df0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cae:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d05c      	beq.n	8002d74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d141      	bne.n	8002d46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_OscConfig+0x478>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fa22 	bl	8001110 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe fa1e 	bl	8001110 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e087      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	019b      	lsls	r3, r3, #6
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	3b01      	subs	r3, #1
 8002d08:	041b      	lsls	r3, r3, #16
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	491b      	ldr	r1, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_OscConfig+0x478>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fe f9f7 	bl	8001110 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d26:	f7fe f9f3 	bl	8001110 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e05c      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x416>
 8002d44:	e054      	b.n	8002df0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_RCC_OscConfig+0x478>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe f9e0 	bl	8001110 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fe f9dc 	bl	8001110 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e045      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_OscConfig+0x470>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x444>
 8002d72:	e03d      	b.n	8002df0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e038      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40007000 	.word	0x40007000
 8002d88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_RCC_OscConfig+0x4ec>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d028      	beq.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d121      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d11a      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d111      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800

08002e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0cc      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e14:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d90c      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b65      	ldr	r3, [pc, #404]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0b8      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d020      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e54:	4b59      	ldr	r3, [pc, #356]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e6c:	4b53      	ldr	r3, [pc, #332]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e78:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	494d      	ldr	r1, [pc, #308]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d044      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d119      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e07f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d003      	beq.n	8002ebe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebe:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e06f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ece:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e067      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ede:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f023 0203 	bic.w	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4934      	ldr	r1, [pc, #208]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef0:	f7fe f90e 	bl	8001110 <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef8:	f7fe f90a 	bl	8001110 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e04f      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 020c 	and.w	r2, r3, #12
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d1eb      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d20c      	bcs.n	8002f48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e032      	b.n	8002fae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4916      	ldr	r1, [pc, #88]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	490e      	ldr	r1, [pc, #56]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f86:	f000 f821 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	490a      	ldr	r1, [pc, #40]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	5ccb      	ldrb	r3, [r1, r3]
 8002f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9e:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe f86e 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023c00 	.word	0x40023c00
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	0800c598 	.word	0x0800c598
 8002fc4:	2000004c 	.word	0x2000004c
 8002fc8:	20000050 	.word	0x20000050

08002fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd0:	b090      	sub	sp, #64	; 0x40
 8002fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd8:	2300      	movs	r3, #0
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fdc:	2300      	movs	r3, #0
 8002fde:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe4:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d00d      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x40>
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	f200 80a1 	bhi.w	8003138 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x34>
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d003      	beq.n	8003006 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ffe:	e09b      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003000:	4b53      	ldr	r3, [pc, #332]	; (8003150 <HAL_RCC_GetSysClockFreq+0x184>)
 8003002:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003004:	e09b      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003006:	4b53      	ldr	r3, [pc, #332]	; (8003154 <HAL_RCC_GetSysClockFreq+0x188>)
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800300a:	e098      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800300c:	4b4f      	ldr	r3, [pc, #316]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003014:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003016:	4b4d      	ldr	r3, [pc, #308]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d028      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003022:	4b4a      	ldr	r3, [pc, #296]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	2200      	movs	r2, #0
 800302a:	623b      	str	r3, [r7, #32]
 800302c:	627a      	str	r2, [r7, #36]	; 0x24
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003034:	2100      	movs	r1, #0
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCC_GetSysClockFreq+0x188>)
 8003038:	fb03 f201 	mul.w	r2, r3, r1
 800303c:	2300      	movs	r3, #0
 800303e:	fb00 f303 	mul.w	r3, r0, r3
 8003042:	4413      	add	r3, r2
 8003044:	4a43      	ldr	r2, [pc, #268]	; (8003154 <HAL_RCC_GetSysClockFreq+0x188>)
 8003046:	fba0 1202 	umull	r1, r2, r0, r2
 800304a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800304c:	460a      	mov	r2, r1
 800304e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003052:	4413      	add	r3, r2
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	2200      	movs	r2, #0
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	61fa      	str	r2, [r7, #28]
 800305e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003062:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003066:	f7fd f913 	bl	8000290 <__aeabi_uldivmod>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4613      	mov	r3, r2
 8003070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003072:	e053      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003074:	4b35      	ldr	r3, [pc, #212]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	2200      	movs	r2, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	617a      	str	r2, [r7, #20]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003086:	f04f 0b00 	mov.w	fp, #0
 800308a:	4652      	mov	r2, sl
 800308c:	465b      	mov	r3, fp
 800308e:	f04f 0000 	mov.w	r0, #0
 8003092:	f04f 0100 	mov.w	r1, #0
 8003096:	0159      	lsls	r1, r3, #5
 8003098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309c:	0150      	lsls	r0, r2, #5
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	ebb2 080a 	subs.w	r8, r2, sl
 80030a6:	eb63 090b 	sbc.w	r9, r3, fp
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030be:	ebb2 0408 	subs.w	r4, r2, r8
 80030c2:	eb63 0509 	sbc.w	r5, r3, r9
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	00eb      	lsls	r3, r5, #3
 80030d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d4:	00e2      	lsls	r2, r4, #3
 80030d6:	4614      	mov	r4, r2
 80030d8:	461d      	mov	r5, r3
 80030da:	eb14 030a 	adds.w	r3, r4, sl
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	eb45 030b 	adc.w	r3, r5, fp
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030f2:	4629      	mov	r1, r5
 80030f4:	028b      	lsls	r3, r1, #10
 80030f6:	4621      	mov	r1, r4
 80030f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030fc:	4621      	mov	r1, r4
 80030fe:	028a      	lsls	r2, r1, #10
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	2200      	movs	r2, #0
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	60fa      	str	r2, [r7, #12]
 800310c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003110:	f7fd f8be 	bl	8000290 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4613      	mov	r3, r2
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_GetSysClockFreq+0x180>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	3301      	adds	r3, #1
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800312c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003136:	e002      	b.n	800313e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetSysClockFreq+0x184>)
 800313a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800313c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003140:	4618      	mov	r0, r3
 8003142:	3740      	adds	r7, #64	; 0x40
 8003144:	46bd      	mov	sp, r7
 8003146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	00f42400 	.word	0x00f42400
 8003154:	017d7840 	.word	0x017d7840

08003158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_RCC_GetHCLKFreq+0x14>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	2000004c 	.word	0x2000004c

08003170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003174:	f7ff fff0 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	0a9b      	lsrs	r3, r3, #10
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	; (8003194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	0800c5a8 	.word	0x0800c5a8

08003198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800319c:	f7ff ffdc 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0b5b      	lsrs	r3, r3, #13
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	0800c5a8 	.word	0x0800c5a8

080031c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e03f      	b.n	8003252 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd fdce 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2224      	movs	r2, #36	; 0x24
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f929 	bl	800345c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b08a      	sub	sp, #40	; 0x28
 800325e:	af02      	add	r7, sp, #8
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	4613      	mov	r3, r2
 8003268:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b20      	cmp	r3, #32
 8003278:	d17c      	bne.n	8003374 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_UART_Transmit+0x2c>
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e075      	b.n	8003376 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_UART_Transmit+0x3e>
 8003294:	2302      	movs	r3, #2
 8003296:	e06e      	b.n	8003376 <HAL_UART_Transmit+0x11c>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2221      	movs	r2, #33	; 0x21
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032ae:	f7fd ff2f 	bl	8001110 <HAL_GetTick>
 80032b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	88fa      	ldrh	r2, [r7, #6]
 80032b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	88fa      	ldrh	r2, [r7, #6]
 80032be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c8:	d108      	bne.n	80032dc <HAL_UART_Transmit+0x82>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	e003      	b.n	80032e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032ec:	e02a      	b.n	8003344 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2180      	movs	r1, #128	; 0x80
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f840 	bl	800337e <UART_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e036      	b.n	8003376 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800331c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	3302      	adds	r3, #2
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	e007      	b.n	8003336 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	781a      	ldrb	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	3301      	adds	r3, #1
 8003334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1cf      	bne.n	80032ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2200      	movs	r2, #0
 8003356:	2140      	movs	r1, #64	; 0x40
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f810 	bl	800337e <UART_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e006      	b.n	8003376 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b090      	sub	sp, #64	; 0x40
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338e:	e050      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003396:	d04c      	beq.n	8003432 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x30>
 800339e:	f7fd feb7 	bl	8001110 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d241      	bcs.n	8003432 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ce:	637a      	str	r2, [r7, #52]	; 0x34
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e5      	bne.n	80033ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	613b      	str	r3, [r7, #16]
   return(result);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3314      	adds	r3, #20
 8003400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003402:	623a      	str	r2, [r7, #32]
 8003404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	69f9      	ldr	r1, [r7, #28]
 8003408:	6a3a      	ldr	r2, [r7, #32]
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e5      	bne.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e00f      	b.n	8003452 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4013      	ands	r3, r2
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	429a      	cmp	r2, r3
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	429a      	cmp	r2, r3
 800344e:	d09f      	beq.n	8003390 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3740      	adds	r7, #64	; 0x40
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800345c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003460:	b0c0      	sub	sp, #256	; 0x100
 8003462:	af00      	add	r7, sp, #0
 8003464:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	68d9      	ldr	r1, [r3, #12]
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	ea40 0301 	orr.w	r3, r0, r1
 8003484:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	431a      	orrs	r2, r3
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	431a      	orrs	r2, r3
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034b4:	f021 010c 	bic.w	r1, r1, #12
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034c2:	430b      	orrs	r3, r1
 80034c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d6:	6999      	ldr	r1, [r3, #24]
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	ea40 0301 	orr.w	r3, r0, r1
 80034e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b8f      	ldr	r3, [pc, #572]	; (8003728 <UART_SetConfig+0x2cc>)
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d005      	beq.n	80034fc <UART_SetConfig+0xa0>
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b8d      	ldr	r3, [pc, #564]	; (800372c <UART_SetConfig+0x2d0>)
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d104      	bne.n	8003506 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034fc:	f7ff fe4c 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8003500:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003504:	e003      	b.n	800350e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003506:	f7ff fe33 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 800350a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003518:	f040 810c 	bne.w	8003734 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800351c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003520:	2200      	movs	r2, #0
 8003522:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003526:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800352a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800352e:	4622      	mov	r2, r4
 8003530:	462b      	mov	r3, r5
 8003532:	1891      	adds	r1, r2, r2
 8003534:	65b9      	str	r1, [r7, #88]	; 0x58
 8003536:	415b      	adcs	r3, r3
 8003538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800353a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800353e:	4621      	mov	r1, r4
 8003540:	eb12 0801 	adds.w	r8, r2, r1
 8003544:	4629      	mov	r1, r5
 8003546:	eb43 0901 	adc.w	r9, r3, r1
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800355a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800355e:	4690      	mov	r8, r2
 8003560:	4699      	mov	r9, r3
 8003562:	4623      	mov	r3, r4
 8003564:	eb18 0303 	adds.w	r3, r8, r3
 8003568:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800356c:	462b      	mov	r3, r5
 800356e:	eb49 0303 	adc.w	r3, r9, r3
 8003572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003582:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003586:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800358a:	460b      	mov	r3, r1
 800358c:	18db      	adds	r3, r3, r3
 800358e:	653b      	str	r3, [r7, #80]	; 0x50
 8003590:	4613      	mov	r3, r2
 8003592:	eb42 0303 	adc.w	r3, r2, r3
 8003596:	657b      	str	r3, [r7, #84]	; 0x54
 8003598:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800359c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035a0:	f7fc fe76 	bl	8000290 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4b61      	ldr	r3, [pc, #388]	; (8003730 <UART_SetConfig+0x2d4>)
 80035aa:	fba3 2302 	umull	r2, r3, r3, r2
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	011c      	lsls	r4, r3, #4
 80035b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035c4:	4642      	mov	r2, r8
 80035c6:	464b      	mov	r3, r9
 80035c8:	1891      	adds	r1, r2, r2
 80035ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80035cc:	415b      	adcs	r3, r3
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035d4:	4641      	mov	r1, r8
 80035d6:	eb12 0a01 	adds.w	sl, r2, r1
 80035da:	4649      	mov	r1, r9
 80035dc:	eb43 0b01 	adc.w	fp, r3, r1
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035f4:	4692      	mov	sl, r2
 80035f6:	469b      	mov	fp, r3
 80035f8:	4643      	mov	r3, r8
 80035fa:	eb1a 0303 	adds.w	r3, sl, r3
 80035fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003602:	464b      	mov	r3, r9
 8003604:	eb4b 0303 	adc.w	r3, fp, r3
 8003608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003618:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800361c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003620:	460b      	mov	r3, r1
 8003622:	18db      	adds	r3, r3, r3
 8003624:	643b      	str	r3, [r7, #64]	; 0x40
 8003626:	4613      	mov	r3, r2
 8003628:	eb42 0303 	adc.w	r3, r2, r3
 800362c:	647b      	str	r3, [r7, #68]	; 0x44
 800362e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003632:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003636:	f7fc fe2b 	bl	8000290 <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4611      	mov	r1, r2
 8003640:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <UART_SetConfig+0x2d4>)
 8003642:	fba3 2301 	umull	r2, r3, r3, r1
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2264      	movs	r2, #100	; 0x64
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	1acb      	subs	r3, r1, r3
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003656:	4b36      	ldr	r3, [pc, #216]	; (8003730 <UART_SetConfig+0x2d4>)
 8003658:	fba3 2302 	umull	r2, r3, r3, r2
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003664:	441c      	add	r4, r3
 8003666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366a:	2200      	movs	r2, #0
 800366c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003670:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003674:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003678:	4642      	mov	r2, r8
 800367a:	464b      	mov	r3, r9
 800367c:	1891      	adds	r1, r2, r2
 800367e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003680:	415b      	adcs	r3, r3
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003684:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003688:	4641      	mov	r1, r8
 800368a:	1851      	adds	r1, r2, r1
 800368c:	6339      	str	r1, [r7, #48]	; 0x30
 800368e:	4649      	mov	r1, r9
 8003690:	414b      	adcs	r3, r1
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036a0:	4659      	mov	r1, fp
 80036a2:	00cb      	lsls	r3, r1, #3
 80036a4:	4651      	mov	r1, sl
 80036a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036aa:	4651      	mov	r1, sl
 80036ac:	00ca      	lsls	r2, r1, #3
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	4642      	mov	r2, r8
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036bc:	464b      	mov	r3, r9
 80036be:	460a      	mov	r2, r1
 80036c0:	eb42 0303 	adc.w	r3, r2, r3
 80036c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036dc:	460b      	mov	r3, r1
 80036de:	18db      	adds	r3, r3, r3
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e2:	4613      	mov	r3, r2
 80036e4:	eb42 0303 	adc.w	r3, r2, r3
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036f2:	f7fc fdcd 	bl	8000290 <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <UART_SetConfig+0x2d4>)
 80036fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	2164      	movs	r1, #100	; 0x64
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	3332      	adds	r3, #50	; 0x32
 800370e:	4a08      	ldr	r2, [pc, #32]	; (8003730 <UART_SetConfig+0x2d4>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	f003 0207 	and.w	r2, r3, #7
 800371a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4422      	add	r2, r4
 8003722:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003724:	e106      	b.n	8003934 <UART_SetConfig+0x4d8>
 8003726:	bf00      	nop
 8003728:	40011000 	.word	0x40011000
 800372c:	40011400 	.word	0x40011400
 8003730:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003738:	2200      	movs	r2, #0
 800373a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800373e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003742:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003746:	4642      	mov	r2, r8
 8003748:	464b      	mov	r3, r9
 800374a:	1891      	adds	r1, r2, r2
 800374c:	6239      	str	r1, [r7, #32]
 800374e:	415b      	adcs	r3, r3
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
 8003752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003756:	4641      	mov	r1, r8
 8003758:	1854      	adds	r4, r2, r1
 800375a:	4649      	mov	r1, r9
 800375c:	eb43 0501 	adc.w	r5, r3, r1
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	00eb      	lsls	r3, r5, #3
 800376a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800376e:	00e2      	lsls	r2, r4, #3
 8003770:	4614      	mov	r4, r2
 8003772:	461d      	mov	r5, r3
 8003774:	4643      	mov	r3, r8
 8003776:	18e3      	adds	r3, r4, r3
 8003778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800377c:	464b      	mov	r3, r9
 800377e:	eb45 0303 	adc.w	r3, r5, r3
 8003782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003792:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037a2:	4629      	mov	r1, r5
 80037a4:	008b      	lsls	r3, r1, #2
 80037a6:	4621      	mov	r1, r4
 80037a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ac:	4621      	mov	r1, r4
 80037ae:	008a      	lsls	r2, r1, #2
 80037b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037b4:	f7fc fd6c 	bl	8000290 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4b60      	ldr	r3, [pc, #384]	; (8003940 <UART_SetConfig+0x4e4>)
 80037be:	fba3 2302 	umull	r2, r3, r3, r2
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	011c      	lsls	r4, r3, #4
 80037c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037d8:	4642      	mov	r2, r8
 80037da:	464b      	mov	r3, r9
 80037dc:	1891      	adds	r1, r2, r2
 80037de:	61b9      	str	r1, [r7, #24]
 80037e0:	415b      	adcs	r3, r3
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037e8:	4641      	mov	r1, r8
 80037ea:	1851      	adds	r1, r2, r1
 80037ec:	6139      	str	r1, [r7, #16]
 80037ee:	4649      	mov	r1, r9
 80037f0:	414b      	adcs	r3, r1
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003800:	4659      	mov	r1, fp
 8003802:	00cb      	lsls	r3, r1, #3
 8003804:	4651      	mov	r1, sl
 8003806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800380a:	4651      	mov	r1, sl
 800380c:	00ca      	lsls	r2, r1, #3
 800380e:	4610      	mov	r0, r2
 8003810:	4619      	mov	r1, r3
 8003812:	4603      	mov	r3, r0
 8003814:	4642      	mov	r2, r8
 8003816:	189b      	adds	r3, r3, r2
 8003818:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800381c:	464b      	mov	r3, r9
 800381e:	460a      	mov	r2, r1
 8003820:	eb42 0303 	adc.w	r3, r2, r3
 8003824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	67bb      	str	r3, [r7, #120]	; 0x78
 8003832:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003840:	4649      	mov	r1, r9
 8003842:	008b      	lsls	r3, r1, #2
 8003844:	4641      	mov	r1, r8
 8003846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800384a:	4641      	mov	r1, r8
 800384c:	008a      	lsls	r2, r1, #2
 800384e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003852:	f7fc fd1d 	bl	8000290 <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4611      	mov	r1, r2
 800385c:	4b38      	ldr	r3, [pc, #224]	; (8003940 <UART_SetConfig+0x4e4>)
 800385e:	fba3 2301 	umull	r2, r3, r3, r1
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2264      	movs	r2, #100	; 0x64
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	1acb      	subs	r3, r1, r3
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	3332      	adds	r3, #50	; 0x32
 8003870:	4a33      	ldr	r2, [pc, #204]	; (8003940 <UART_SetConfig+0x4e4>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800387c:	441c      	add	r4, r3
 800387e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003882:	2200      	movs	r2, #0
 8003884:	673b      	str	r3, [r7, #112]	; 0x70
 8003886:	677a      	str	r2, [r7, #116]	; 0x74
 8003888:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	1891      	adds	r1, r2, r2
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	415b      	adcs	r3, r3
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800389c:	4641      	mov	r1, r8
 800389e:	1851      	adds	r1, r2, r1
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	4649      	mov	r1, r9
 80038a4:	414b      	adcs	r3, r1
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038b4:	4659      	mov	r1, fp
 80038b6:	00cb      	lsls	r3, r1, #3
 80038b8:	4651      	mov	r1, sl
 80038ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038be:	4651      	mov	r1, sl
 80038c0:	00ca      	lsls	r2, r1, #3
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	4642      	mov	r2, r8
 80038ca:	189b      	adds	r3, r3, r2
 80038cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80038ce:	464b      	mov	r3, r9
 80038d0:	460a      	mov	r2, r1
 80038d2:	eb42 0303 	adc.w	r3, r2, r3
 80038d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	663b      	str	r3, [r7, #96]	; 0x60
 80038e2:	667a      	str	r2, [r7, #100]	; 0x64
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038f0:	4649      	mov	r1, r9
 80038f2:	008b      	lsls	r3, r1, #2
 80038f4:	4641      	mov	r1, r8
 80038f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038fa:	4641      	mov	r1, r8
 80038fc:	008a      	lsls	r2, r1, #2
 80038fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003902:	f7fc fcc5 	bl	8000290 <__aeabi_uldivmod>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <UART_SetConfig+0x4e4>)
 800390c:	fba3 1302 	umull	r1, r3, r3, r2
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	2164      	movs	r1, #100	; 0x64
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	3332      	adds	r3, #50	; 0x32
 800391e:	4a08      	ldr	r2, [pc, #32]	; (8003940 <UART_SetConfig+0x4e4>)
 8003920:	fba2 2303 	umull	r2, r3, r2, r3
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	f003 020f 	and.w	r2, r3, #15
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4422      	add	r2, r4
 8003932:	609a      	str	r2, [r3, #8]
}
 8003934:	bf00      	nop
 8003936:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800393a:	46bd      	mov	sp, r7
 800393c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003940:	51eb851f 	.word	0x51eb851f

08003944 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4293      	cmp	r3, r2
 8003954:	bf38      	it	cc
 8003956:	4613      	movcc	r3, r2
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4293      	cmp	r3, r2
 8003974:	bf28      	it	cs
 8003976:	4613      	movcs	r3, r2
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	fbb3 f2f2 	udiv	r2, r3, r2
 8003996:	6839      	ldr	r1, [r7, #0]
 8003998:	fb01 f202 	mul.w	r2, r1, r2
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	1ad3      	subs	r3, r2, r3
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	4413      	add	r3, r2
 80039be:	3b01      	subs	r3, #1
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ffde 	bl	8003984 <lfs_aligndown>
 80039c8:	4603      	mov	r3, r0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3b01      	subs	r3, #1
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fc fc51 	bl	80002c0 <__popcountsi2>
 8003a1e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	1ad3      	subs	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8003a4c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff ffee 	bl	8003a44 <lfs_fromle32>
 8003a68:	4603      	mov	r3, r0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ffed 	bl	8003a72 <lfs_frombe32>
 8003a98:	4603      	mov	r3, r0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f006 ff60 	bl	800a970 <malloc>
 8003ab0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f006 ff5c 	bl	800a980 <free>
#else
    (void)p;
#endif
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ae0:	601a      	str	r2, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68d8      	ldr	r0, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	461a      	mov	r2, r3
 8003b04:	21ff      	movs	r1, #255	; 0xff
 8003b06:	f007 f91e 	bl	800ad46 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8003b1c:	b5b0      	push	{r4, r5, r7, lr}
 8003b1e:	b08a      	sub	sp, #40	; 0x28
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d208      	bcs.n	8003b4c <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8003b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3e:	441a      	add	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b44:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	f240 811b 	bls.w	8003d82 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8003b4c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003b50:	e11c      	b.n	8003d8c <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8003b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b54:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d03f      	beq.n	8003bdc <lfs_bd_read+0xc0>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d13a      	bne.n	8003bdc <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8003b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d232      	bcs.n	8003bdc <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d324      	bcc.n	8003bca <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8a:	1acb      	subs	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	69b8      	ldr	r0, [r7, #24]
 8003b92:	f7ff fee7 	bl	8003964 <lfs_min>
 8003b96:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ba2:	1acb      	subs	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	69f8      	ldr	r0, [r7, #28]
 8003bac:	f007 f984 	bl	800aeb8 <memcpy>

                data += diff;
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003bc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003bc8:	e0db      	b.n	8003d82 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	69b8      	ldr	r0, [r7, #24]
 8003bd6:	f7ff fec5 	bl	8003964 <lfs_min>
 8003bda:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d13a      	bne.n	8003c5c <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	4413      	add	r3, r2
        if (block == rcache->block &&
 8003bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d232      	bcs.n	8003c5c <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d324      	bcc.n	8003c4a <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0a:	1acb      	subs	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	69b8      	ldr	r0, [r7, #24]
 8003c12:	f7ff fea7 	bl	8003964 <lfs_min>
 8003c16:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c22:	1acb      	subs	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	69f8      	ldr	r0, [r7, #28]
 8003c2c:	f007 f944 	bl	800aeb8 <memcpy>

                data += diff;
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003c48:	e09b      	b.n	8003d82 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	4619      	mov	r1, r3
 8003c54:	69b8      	ldr	r0, [r7, #24]
 8003c56:	f7ff fe85 	bl	8003964 <lfs_min>
 8003c5a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8003c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d336      	bcc.n	8003cd2 <lfs_bd_read+0x1b6>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c70:	fb01 f202 	mul.w	r2, r1, r2
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d12b      	bne.n	8003cd2 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8003c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d325      	bcc.n	8003cd2 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	69b8      	ldr	r0, [r7, #24]
 8003c90:	f7ff fe78 	bl	8003984 <lfs_aligndown>
 8003c94:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c9a:	685c      	ldr	r4, [r3, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003caa:	47a0      	blx	r4
 8003cac:	6178      	str	r0, [r7, #20]
            if (err) {
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <lfs_bd_read+0x19c>
                return err;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	e069      	b.n	8003d8c <lfs_bd_read+0x270>
            }

            data += diff;
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	61fb      	str	r3, [r7, #28]
            off += diff;
 8003cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8003cc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8003cd0:	e057      	b.n	8003d82 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d305      	bcc.n	8003cea <lfs_bd_read+0x1ce>
 8003cde:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <lfs_bd_read+0x278>)
 8003ce0:	4a2d      	ldr	r2, [pc, #180]	; (8003d98 <lfs_bd_read+0x27c>)
 8003ce2:	216b      	movs	r1, #107	; 0x6b
 8003ce4:	482d      	ldr	r0, [pc, #180]	; (8003d9c <lfs_bd_read+0x280>)
 8003ce6:	f006 fe25 	bl	800a934 <__assert_func>
        rcache->block = block;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cee:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003cfa:	f7ff fe43 	bl	8003984 <lfs_aligndown>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8003d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0e:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7ff fe4b 	bl	80039ae <lfs_alignup>
 8003d18:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d1e:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f7ff fe1e 	bl	8003964 <lfs_min>
 8003d28:	4602      	mov	r2, r0
                - rcache->off,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8003d2e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f7ff fe13 	bl	8003964 <lfs_min>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d48:	685c      	ldr	r4, [r3, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	462b      	mov	r3, r5
 8003d62:	47a0      	blx	r4
 8003d64:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	dd05      	ble.n	8003d78 <lfs_bd_read+0x25c>
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <lfs_bd_read+0x284>)
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <lfs_bd_read+0x27c>)
 8003d70:	2176      	movs	r1, #118	; 0x76
 8003d72:	480a      	ldr	r0, [pc, #40]	; (8003d9c <lfs_bd_read+0x280>)
 8003d74:	f006 fdde 	bl	800a934 <__assert_func>
        if (err) {
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <lfs_bd_read+0x266>
            return err;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	e004      	b.n	8003d8c <lfs_bd_read+0x270>
    while (size > 0) {
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f47f aee4 	bne.w	8003b52 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bdb0      	pop	{r4, r5, r7, pc}
 8003d94:	0800bb38 	.word	0x0800bb38
 8003d98:	0800c5b0 	.word	0x0800c5b0
 8003d9c:	0800bb58 	.word	0x0800bb58
 8003da0:	0800bb6c 	.word	0x0800bb6c

08003da4 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b090      	sub	sp, #64	; 0x40
 8003da8:	af04      	add	r7, sp, #16
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8003db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8003dba:	2300      	movs	r3, #0
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dbe:	e039      	b.n	8003e34 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8003dc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2108      	movs	r1, #8
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fdcb 	bl	8003964 <lfs_min>
 8003dce:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	1ad1      	subs	r1, r2, r3
 8003dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	4413      	add	r3, r2
 8003ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dde:	9203      	str	r2, [sp, #12]
 8003de0:	f107 0214 	add.w	r2, r7, #20
 8003de4:	9202      	str	r2, [sp, #8]
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	460b      	mov	r3, r1
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff fe92 	bl	8003b1c <lfs_bd_read>
 8003df8:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <lfs_bd_cmp+0x60>
            return err;
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	e01c      	b.n	8003e3e <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8003e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	18d1      	adds	r1, r2, r3
 8003e0a:	f107 0314 	add.w	r3, r7, #20
 8003e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e10:	4618      	mov	r0, r3
 8003e12:	f006 ff88 	bl	800ad26 <memcmp>
 8003e16:	61f8      	str	r0, [r7, #28]
        if (res) {
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d006      	beq.n	8003e2c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da01      	bge.n	8003e28 <lfs_bd_cmp+0x84>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e00a      	b.n	8003e3e <lfs_bd_cmp+0x9a>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e008      	b.n	8003e3e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8003e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	4413      	add	r3, r2
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d3c1      	bcc.n	8003dc0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3730      	adds	r7, #48	; 0x30
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08e      	sub	sp, #56	; 0x38
 8003e4a:	af04      	add	r7, sp, #16
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8003e58:	2300      	movs	r3, #0
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5c:	e030      	b.n	8003ec0 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8003e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2108      	movs	r1, #8
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fd7c 	bl	8003964 <lfs_min>
 8003e6c:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	1ad1      	subs	r1, r2, r3
 8003e74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	4413      	add	r3, r2
 8003e7a:	6a3a      	ldr	r2, [r7, #32]
 8003e7c:	9203      	str	r2, [sp, #12]
 8003e7e:	f107 0214 	add.w	r2, r7, #20
 8003e82:	9202      	str	r2, [sp, #8]
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff fe43 	bl	8003b1c <lfs_bd_read>
 8003e96:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <lfs_bd_crc+0x5c>
            return err;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	e013      	b.n	8003eca <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f107 0114 	add.w	r1, r7, #20
 8003eaa:	6a3a      	ldr	r2, [r7, #32]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f006 fb93 	bl	800a5d8 <lfs_crc>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb6:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8003eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d3ca      	bcc.n	8003e5e <lfs_bd_crc+0x18>
    }

    return 0;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3728      	adds	r7, #40	; 0x28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8003ed4:	b5b0      	push	{r4, r5, r7, lr}
 8003ed6:	b08c      	sub	sp, #48	; 0x30
 8003ed8:	af04      	add	r7, sp, #16
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eea:	d061      	beq.n	8003fb0 <lfs_bd_flush+0xdc>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f113 0f02 	cmn.w	r3, #2
 8003ef4:	d05c      	beq.n	8003fb0 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d305      	bcc.n	8003f10 <lfs_bd_flush+0x3c>
 8003f04:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <lfs_bd_flush+0xe8>)
 8003f06:	4a2e      	ldr	r2, [pc, #184]	; (8003fc0 <lfs_bd_flush+0xec>)
 8003f08:	21b3      	movs	r1, #179	; 0xb3
 8003f0a:	482e      	ldr	r0, [pc, #184]	; (8003fc4 <lfs_bd_flush+0xf0>)
 8003f0c:	f006 fd12 	bl	800a934 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f7ff fd46 	bl	80039ae <lfs_alignup>
 8003f22:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f28:	689c      	ldr	r4, [r3, #8]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6819      	ldr	r1, [r3, #0]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	462b      	mov	r3, r5
 8003f40:	47a0      	blx	r4
 8003f42:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	dd05      	ble.n	8003f56 <lfs_bd_flush+0x82>
 8003f4a:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <lfs_bd_flush+0xf4>)
 8003f4c:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <lfs_bd_flush+0xec>)
 8003f4e:	21b7      	movs	r1, #183	; 0xb7
 8003f50:	481c      	ldr	r0, [pc, #112]	; (8003fc4 <lfs_bd_flush+0xf0>)
 8003f52:	f006 fcef 	bl	800a934 <__assert_func>
        if (err) {
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <lfs_bd_flush+0x8c>
            return err;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	e028      	b.n	8003fb2 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d020      	beq.n	8003fa8 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff fdb1 	bl	8003ad0 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8003f7a:	69f8      	ldr	r0, [r7, #28]
 8003f7c:	9003      	str	r0, [sp, #12]
 8003f7e:	9102      	str	r1, [sp, #8]
 8003f80:	9201      	str	r2, [sp, #4]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	2100      	movs	r1, #0
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7ff ff0a 	bl	8003da4 <lfs_bd_cmp>
 8003f90:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	da01      	bge.n	8003f9c <lfs_bd_flush+0xc8>
                return res;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	e00a      	b.n	8003fb2 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8003fa2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003fa6:	e004      	b.n	8003fb2 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff fd9f 	bl	8003aee <lfs_cache_zero>
    }

    return 0;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	0800bb78 	.word	0x0800bb78
 8003fc0:	0800c5bc 	.word	0x0800c5bc
 8003fc4:	0800bb58 	.word	0x0800bb58
 8003fc8:	0800bb6c 	.word	0x0800bb6c

08003fcc <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7ff fd77 	bl	8003ad0 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f7ff ff73 	bl	8003ed4 <lfs_bd_flush>
 8003fee:	6178      	str	r0, [r7, #20]
    if (err) {
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <lfs_bd_sync+0x2e>
        return err;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	e011      	b.n	800401e <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004004:	4610      	mov	r0, r2
 8004006:	4798      	blx	r3
 8004008:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	dd05      	ble.n	800401c <lfs_bd_sync+0x50>
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <lfs_bd_sync+0x5c>)
 8004012:	4a06      	ldr	r2, [pc, #24]	; (800402c <lfs_bd_sync+0x60>)
 8004014:	21dd      	movs	r1, #221	; 0xdd
 8004016:	4806      	ldr	r0, [pc, #24]	; (8004030 <lfs_bd_sync+0x64>)
 8004018:	f006 fc8c 	bl	800a934 <__assert_func>
    return err;
 800401c:	697b      	ldr	r3, [r7, #20]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	0800bb6c 	.word	0x0800bb6c
 800402c:	0800c5cc 	.word	0x0800c5cc
 8004030:	0800bb58 	.word	0x0800bb58

08004034 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	f113 0f02 	cmn.w	r3, #2
 800404c:	d00b      	beq.n	8004066 <lfs_bd_prog+0x32>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004056:	429a      	cmp	r2, r3
 8004058:	d305      	bcc.n	8004066 <lfs_bd_prog+0x32>
 800405a:	4b47      	ldr	r3, [pc, #284]	; (8004178 <lfs_bd_prog+0x144>)
 800405c:	4a47      	ldr	r2, [pc, #284]	; (800417c <lfs_bd_prog+0x148>)
 800405e:	21e8      	movs	r1, #232	; 0xe8
 8004060:	4847      	ldr	r0, [pc, #284]	; (8004180 <lfs_bd_prog+0x14c>)
 8004062:	f006 fc67 	bl	800a934 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8004066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	441a      	add	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	429a      	cmp	r2, r3
 8004074:	d978      	bls.n	8004168 <lfs_bd_prog+0x134>
 8004076:	4b43      	ldr	r3, [pc, #268]	; (8004184 <lfs_bd_prog+0x150>)
 8004078:	4a40      	ldr	r2, [pc, #256]	; (800417c <lfs_bd_prog+0x148>)
 800407a:	21e9      	movs	r1, #233	; 0xe9
 800407c:	4840      	ldr	r0, [pc, #256]	; (8004180 <lfs_bd_prog+0x14c>)
 800407e:	f006 fc59 	bl	800a934 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004088:	429a      	cmp	r2, r3
 800408a:	d151      	bne.n	8004130 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8004090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004092:	429a      	cmp	r2, r3
 8004094:	d34c      	bcc.n	8004130 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	4413      	add	r3, r2
                off >= pcache->off &&
 80040a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d243      	bcs.n	8004130 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	6859      	ldr	r1, [r3, #4]
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80040b6:	4413      	add	r3, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040bc:	f7ff fc52 	bl	8003964 <lfs_min>
 80040c0:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040cc:	1acb      	subs	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	69f9      	ldr	r1, [r7, #28]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f006 feef 	bl	800aeb8 <memcpy>

            data += diff;
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	61fb      	str	r3, [r7, #28]
            off += diff;
 80040e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	4413      	add	r3, r2
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 80040ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6898      	ldr	r0, [r3, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	4619      	mov	r1, r3
 8004100:	f7ff fc20 	bl	8003944 <lfs_max>
 8004104:	4602      	mov	r2, r0
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	429a      	cmp	r2, r3
 8004116:	d127      	bne.n	8004168 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff fed8 	bl	8003ed4 <lfs_bd_flush>
 8004124:	6178      	str	r0, [r7, #20]
                if (err) {
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01d      	beq.n	8004168 <lfs_bd_prog+0x134>
                    return err;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	e01f      	b.n	8004170 <lfs_bd_prog+0x13c>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004138:	d006      	beq.n	8004148 <lfs_bd_prog+0x114>
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <lfs_bd_prog+0x154>)
 800413c:	4a0f      	ldr	r2, [pc, #60]	; (800417c <lfs_bd_prog+0x148>)
 800413e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004142:	480f      	ldr	r0, [pc, #60]	; (8004180 <lfs_bd_prog+0x14c>)
 8004144:	f006 fbf6 	bl	800a934 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800414c:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	4619      	mov	r1, r3
 8004156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004158:	f7ff fc14 	bl	8003984 <lfs_aligndown>
 800415c:	4602      	mov	r2, r0
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416a:	2b00      	cmp	r3, #0
 800416c:	d189      	bne.n	8004082 <lfs_bd_prog+0x4e>
    }

    return 0;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	0800bba0 	.word	0x0800bba0
 800417c:	0800c5d8 	.word	0x0800c5d8
 8004180:	0800bb58 	.word	0x0800bb58
 8004184:	0800bbdc 	.word	0x0800bbdc
 8004188:	0800bc00 	.word	0x0800bc00

0800418c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d306      	bcc.n	80041b0 <lfs_bd_erase+0x24>
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <lfs_bd_erase+0x54>)
 80041a4:	4a0f      	ldr	r2, [pc, #60]	; (80041e4 <lfs_bd_erase+0x58>)
 80041a6:	f44f 718a 	mov.w	r1, #276	; 0x114
 80041aa:	480f      	ldr	r0, [pc, #60]	; (80041e8 <lfs_bd_erase+0x5c>)
 80041ac:	f006 fbc2 	bl	800a934 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041ba:	6839      	ldr	r1, [r7, #0]
 80041bc:	4610      	mov	r0, r2
 80041be:	4798      	blx	r3
 80041c0:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	dd06      	ble.n	80041d6 <lfs_bd_erase+0x4a>
 80041c8:	4b08      	ldr	r3, [pc, #32]	; (80041ec <lfs_bd_erase+0x60>)
 80041ca:	4a06      	ldr	r2, [pc, #24]	; (80041e4 <lfs_bd_erase+0x58>)
 80041cc:	f44f 718b 	mov.w	r1, #278	; 0x116
 80041d0:	4805      	ldr	r0, [pc, #20]	; (80041e8 <lfs_bd_erase+0x5c>)
 80041d2:	f006 fbaf 	bl	800a934 <__assert_func>
    return err;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	0800bb38 	.word	0x0800bb38
 80041e4:	0800c5e4 	.word	0x0800c5e4
 80041e8:	0800bb58 	.word	0x0800bb58
 80041ec:	0800bb6c 	.word	0x0800bb6c

080041f0 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3304      	adds	r3, #4
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	601a      	str	r2, [r3, #0]
}
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800422a:	d005      	beq.n	8004238 <lfs_pair_isnull+0x1e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004236:	d101      	bne.n	800423c <lfs_pair_isnull+0x22>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <lfs_pair_isnull+0x24>
 800423c:	2300      	movs	r3, #0
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	b2db      	uxtb	r3, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d017      	beq.n	8004296 <lfs_pair_cmp+0x46>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3304      	adds	r3, #4
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	3304      	adds	r3, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d00f      	beq.n	8004296 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3304      	adds	r3, #4
 800427e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d008      	beq.n	8004296 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d001      	beq.n	8004296 <lfs_pair_cmp+0x46>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <lfs_pair_cmp+0x48>
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d107      	bne.n	80042ca <lfs_pair_issync+0x26>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	3304      	adds	r3, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d00d      	beq.n	80042e6 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	3304      	adds	r3, #4
 80042d2:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d108      	bne.n	80042ea <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d101      	bne.n	80042ea <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <lfs_pair_issync+0x48>
 80042ea:	2300      	movs	r3, #0
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	b2db      	uxtb	r3, r3
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80042fe:	b590      	push	{r4, r7, lr}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fb9a 	bl	8003a44 <lfs_fromle32>
 8004310:	4602      	mov	r2, r0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3304      	adds	r3, #4
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	1d1c      	adds	r4, r3, #4
 8004320:	4610      	mov	r0, r2
 8004322:	f7ff fb8f 	bl	8003a44 <lfs_fromle32>
 8004326:	4603      	mov	r3, r0
 8004328:	6023      	str	r3, [r4, #0]
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bd90      	pop	{r4, r7, pc}

08004332 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8004332:	b590      	push	{r4, r7, lr}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fb8b 	bl	8003a5a <lfs_tole32>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3304      	adds	r3, #4
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	1d1c      	adds	r4, r3, #4
 8004354:	4610      	mov	r0, r2
 8004356:	f7ff fb80 	bl	8003a5a <lfs_tole32>
 800435a:	4603      	mov	r3, r0
 800435c:	6023      	str	r3, [r4, #0]
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	bd90      	pop	{r4, r7, pc}

08004366 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	43db      	mvns	r3, r3
 8004372:	0fdb      	lsrs	r3, r3, #31
 8004374:	b2db      	uxtb	r3, r3
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	059b      	lsls	r3, r3, #22
 800438e:	159b      	asrs	r3, r3, #22
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004394:	bf0c      	ite	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	2300      	movne	r3, #0
 800439a:	b2db      	uxtb	r3, r3
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	0d1b      	lsrs	r3, r3, #20
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ba:	b29b      	uxth	r3, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	0d1b      	lsrs	r3, r3, #20
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 80043da:	b29b      	uxth	r3, r3
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	0d1b      	lsrs	r3, r3, #20
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043fa:	b29b      	uxth	r3, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	0d1b      	lsrs	r3, r3, #20
 8004414:	b2db      	uxtb	r3, r3
}
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ffec 	bl	8004408 <lfs_tag_chunk>
 8004430:	4603      	mov	r3, r0
 8004432:	b25b      	sxtb	r3, r3
}
 8004434:	4618      	mov	r0, r3
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0a9b      	lsrs	r3, r3, #10
 8004448:	b29b      	uxth	r3, r3
 800444a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800444e:	b29b      	uxth	r3, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff ff7f 	bl	8004382 <lfs_tag_isdelete>
 8004484:	4603      	mov	r3, r0
 8004486:	461a      	mov	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4413      	add	r3, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ffe5 	bl	800445c <lfs_tag_size>
 8004492:	4603      	mov	r3, r0
 8004494:	3304      	adds	r3, #4
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	e012      	b.n	80044d4 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	6819      	ldr	r1, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	4413      	add	r3, r2
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4403      	add	r3, r0
 80044ca:	404a      	eors	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3301      	adds	r3, #1
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	dde9      	ble.n	80044ae <lfs_gstate_xor+0x10>
    }
}
 80044da:	bf00      	nop
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e00b      	b.n	800450e <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4413      	add	r3, r2
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <lfs_gstate_iszero+0x20>
            return false;
 8004504:	2300      	movs	r3, #0
 8004506:	e006      	b.n	8004516 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3301      	adds	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b02      	cmp	r3, #2
 8004512:	ddf0      	ble.n	80044f6 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8004514:	2301      	movs	r3, #1
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff94 	bl	800445c <lfs_tag_size>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	bf14      	ite	ne
 800453a:	2301      	movne	r3, #1
 800453c:	2300      	moveq	r3, #0
 800453e:	b2db      	uxtb	r3, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff ff81 	bl	800445c <lfs_tag_size>
 800455a:	4603      	mov	r3, r0
 800455c:	b2db      	uxtb	r3, r3
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff ff18 	bl	80043a8 <lfs_tag_type1>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	bf14      	ite	ne
 800457e:	2301      	movne	r3, #1
 8004580:	2300      	moveq	r3, #0
 8004582:	b2db      	uxtb	r3, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ff5f 	bl	800445c <lfs_tag_size>
 800459e:	4603      	mov	r3, r0
 80045a0:	0a5b      	lsrs	r3, r3, #9
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fef0 	bl	80043a8 <lfs_tag_type1>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <lfs_gstate_hasmovehere+0x30>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fe3b 	bl	8004250 <lfs_pair_cmp>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <lfs_gstate_hasmovehere+0x30>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <lfs_gstate_hasmovehere+0x32>
 80045e4:	2300      	movs	r3, #0
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	b2db      	uxtb	r3, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff fa1f 	bl	8003a44 <lfs_fromle32>
 8004606:	4602      	mov	r2, r0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff fa17 	bl	8003a44 <lfs_fromle32>
 8004616:	4602      	mov	r2, r0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fa0f 	bl	8003a44 <lfs_fromle32>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	609a      	str	r2, [r3, #8]
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fa0a 	bl	8003a5a <lfs_tole32>
 8004646:	4602      	mov	r2, r0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fa02 	bl	8003a5a <lfs_tole32>
 8004656:	4602      	mov	r2, r0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff f9fa 	bl	8003a5a <lfs_tole32>
 8004666:	4602      	mov	r2, r0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	609a      	str	r2, [r3, #8]
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff f9df 	bl	8003a44 <lfs_fromle32>
 8004686:	4602      	mov	r2, r0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff f9d7 	bl	8003a44 <lfs_fromle32>
 8004696:	4602      	mov	r2, r0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	605a      	str	r2, [r3, #4]
}
 800469c:	bf00      	nop
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff f9d2 	bl	8003a5a <lfs_tole32>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff f9ca 	bl	8003a5a <lfs_tole32>
 80046c6:	4602      	mov	r2, r0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	605a      	str	r2, [r3, #4]
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff f9af 	bl	8003a44 <lfs_fromle32>
 80046e6:	4602      	mov	r2, r0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff f9a7 	bl	8003a44 <lfs_fromle32>
 80046f6:	4602      	mov	r2, r0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	605a      	str	r2, [r3, #4]
}
 80046fc:	bf00      	nop
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff f9a2 	bl	8003a5a <lfs_tole32>
 8004716:	4602      	mov	r2, r0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff f99a 	bl	8003a5a <lfs_tole32>
 8004726:	4602      	mov	r2, r0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	605a      	str	r2, [r3, #4]
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff f97f 	bl	8003a44 <lfs_fromle32>
 8004746:	4602      	mov	r2, r0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff f977 	bl	8003a44 <lfs_fromle32>
 8004756:	4602      	mov	r2, r0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff f96f 	bl	8003a44 <lfs_fromle32>
 8004766:	4602      	mov	r2, r0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff f967 	bl	8003a44 <lfs_fromle32>
 8004776:	4602      	mov	r2, r0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff f95f 	bl	8003a44 <lfs_fromle32>
 8004786:	4602      	mov	r2, r0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff f957 	bl	8003a44 <lfs_fromle32>
 8004796:	4602      	mov	r2, r0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	615a      	str	r2, [r3, #20]
}
 800479c:	bf00      	nop
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff f952 	bl	8003a5a <lfs_tole32>
 80047b6:	4602      	mov	r2, r0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff f94a 	bl	8003a5a <lfs_tole32>
 80047c6:	4602      	mov	r2, r0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff f942 	bl	8003a5a <lfs_tole32>
 80047d6:	4602      	mov	r2, r0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff f93a 	bl	8003a5a <lfs_tole32>
 80047e6:	4602      	mov	r2, r0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff f932 	bl	8003a5a <lfs_tole32>
 80047f6:	4602      	mov	r2, r0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff f92a 	bl	8003a5a <lfs_tole32>
 8004806:	4602      	mov	r2, r0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	615a      	str	r2, [r3, #20]
}
 800480c:	bf00      	nop
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800481e:	1d3b      	adds	r3, r7, #4
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e009      	b.n	8004838 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d101      	bne.n	8004832 <lfs_mlist_isopen+0x1e>
            return true;
 800482e:	2301      	movs	r3, #1
 8004830:	e007      	b.n	8004842 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f1      	bne.n	8004824 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3328      	adds	r3, #40	; 0x28
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	e00d      	b.n	800487c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d105      	bne.n	8004876 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	601a      	str	r2, [r3, #0]
            break;
 8004874:	e007      	b.n	8004886 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1ed      	bne.n	8004860 <lfs_mlist_remove+0x12>
        }
    }
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 80048c0:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <lfs_fs_disk_version+0x18>)
    }
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	00020001 	.word	0x00020001

080048d4 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff ffeb 	bl	80048b8 <lfs_fs_disk_version>
 80048e2:	4603      	mov	r3, r0
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	b29b      	uxth	r3, r3

}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff ffdd 	bl	80048b8 <lfs_fs_disk_version>
 80048fe:	4603      	mov	r3, r0
 8004900:	b29b      	uxth	r3, r3
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	4413      	add	r3, r2
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800492c:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 800492e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004932:	fb01 f202 	mul.w	r2, r1, r2
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	d212      	bcs.n	800496a <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	009a      	lsls	r2, r3, #2
 800494e:	440a      	add	r2, r1
 8004950:	6811      	ldr	r1, [r2, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	f002 021f 	and.w	r2, r2, #31
 8004958:	2001      	movs	r0, #1
 800495a:	fa00 f202 	lsl.w	r2, r0, r2
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4403      	add	r3, r0
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004984:	6a1a      	ldr	r2, [r3, #32]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	661a      	str	r2, [r3, #96]	; 0x60
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ffe4 	bl	8004978 <lfs_alloc_ack>
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af02      	add	r7, sp, #8
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 80049c2:	e04f      	b.n	8004a64 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c8:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d8:	1e5a      	subs	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	2101      	movs	r1, #1
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d132      	bne.n	8004a64 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4413      	add	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a0a:	6a12      	ldr	r2, [r2, #32]
 8004a0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a10:	fb01 f202 	mul.w	r2, r1, r2
 8004a14:	1a9a      	subs	r2, r3, r2
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8004a1a:	e009      	b.n	8004a30 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2a:	1e5a      	subs	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d011      	beq.n	8004a60 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	2101      	movs	r1, #1
 8004a56:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5a:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1dd      	bne.n	8004a1c <lfs_alloc+0x64>
                }

                return 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e050      	b.n	8004b06 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1a9      	bne.n	80049c4 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10f      	bne.n	8004a98 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	4413      	add	r3, r2
 8004a82:	4a23      	ldr	r2, [pc, #140]	; (8004b10 <lfs_alloc+0x158>)
 8004a84:	9200      	str	r2, [sp, #0]
 8004a86:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004a8a:	4922      	ldr	r1, [pc, #136]	; (8004b14 <lfs_alloc+0x15c>)
 8004a8c:	4822      	ldr	r0, [pc, #136]	; (8004b18 <lfs_alloc+0x160>)
 8004a8e:	f006 f8ed 	bl	800ac6c <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8004a92:	f06f 031b 	mvn.w	r3, #27
 8004a96:	e036      	b.n	8004b06 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004aa6:	6a12      	ldr	r2, [r2, #32]
 8004aa8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004aac:	fb01 f202 	mul.w	r2, r1, r2
 8004ab0:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	00da      	lsls	r2, r3, #3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	f7fe ff4d 	bl	8003964 <lfs_min>
 8004aca:	4602      	mov	r2, r0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	f006 f92f 	bl	800ad46 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8004ae8:	2301      	movs	r3, #1
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	490b      	ldr	r1, [pc, #44]	; (8004b1c <lfs_alloc+0x164>)
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f004 fe60 	bl	80097b4 <lfs_fs_rawtraverse>
 8004af4:	60f8      	str	r0, [r7, #12]
        if (err) {
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f43f af62 	beq.w	80049c2 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff ff49 	bl	8004996 <lfs_alloc_drop>
            return err;
 8004b04:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	0800bc4c 	.word	0x0800bc4c
 8004b14:	0800bb58 	.word	0x0800bb58
 8004b18:	0800bc24 	.word	0x0800bc24
 8004b1c:	0800490b 	.word	0x0800490b

08004b20 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b08f      	sub	sp, #60	; 0x3c
 8004b24:	af04      	add	r7, sp, #16
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	333c      	adds	r3, #60	; 0x3c
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4611      	mov	r1, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff fd34 	bl	80045b4 <lfs_gstate_hasmovehere>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80ba 	beq.w	8004cc8 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff fc71 	bl	800443c <lfs_tag_id>
 8004b5a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80b3 	beq.w	8004cc8 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fc68 	bl	800443c <lfs_tag_id>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	461c      	mov	r4, r3
 8004b70:	6838      	ldr	r0, [r7, #0]
 8004b72:	f7ff fc63 	bl	800443c <lfs_tag_id>
 8004b76:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8004b78:	429c      	cmp	r4, r3
 8004b7a:	f200 80a5 	bhi.w	8004cc8 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004b84:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8004b86:	e09f      	b.n	8004cc8 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fc73 	bl	8004476 <lfs_tag_dsize>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8004b9c:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	9203      	str	r2, [sp, #12]
 8004ba6:	f107 0210 	add.w	r2, r7, #16
 8004baa:	9202      	str	r2, [sp, #8]
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	9201      	str	r2, [sp, #4]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	2304      	movs	r3, #4
 8004bb4:	460a      	mov	r2, r1
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7fe ffaf 	bl	8003b1c <lfs_bd_read>
 8004bbe:	61b8      	str	r0, [r7, #24]
        if (err) {
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <lfs_dir_getslice+0xaa>
            return err;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	e08a      	b.n	8004ce0 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fe ff50 	bl	8003a72 <lfs_frombe32>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4053      	eors	r3, r2
 8004bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bdc:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff fc2c 	bl	800443c <lfs_tag_id>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d02b      	beq.n	8004c42 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004bea:	69f8      	ldr	r0, [r7, #28]
 8004bec:	f7ff fbdc 	bl	80043a8 <lfs_tag_type1>
 8004bf0:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8004bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf6:	d124      	bne.n	8004c42 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8004bf8:	69f8      	ldr	r0, [r7, #28]
 8004bfa:	f7ff fc1f 	bl	800443c <lfs_tag_id>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	461c      	mov	r4, r3
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fc17 	bl	800443c <lfs_tag_id>
 8004c0e:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004c10:	429c      	cmp	r4, r3
 8004c12:	d816      	bhi.n	8004c42 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	1ad2      	subs	r2, r2, r3
 8004c1a:	4b33      	ldr	r3, [pc, #204]	; (8004ce8 <lfs_dir_getslice+0x1c8>)
 8004c1c:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8004c1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d102      	bne.n	8004c32 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8004c2c:	f06f 0301 	mvn.w	r3, #1
 8004c30:	e056      	b.n	8004ce0 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004c32:	69f8      	ldr	r0, [r7, #28]
 8004c34:	f7ff fbf5 	bl	8004422 <lfs_tag_splice>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	029a      	lsls	r2, r3, #10
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	4413      	add	r3, r2
 8004c40:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	401a      	ands	r2, r3
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	6839      	ldr	r1, [r7, #0]
 8004c4c:	1ac9      	subs	r1, r1, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	400b      	ands	r3, r1
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d138      	bne.n	8004cc8 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8004c56:	69f8      	ldr	r0, [r7, #28]
 8004c58:	f7ff fb93 	bl	8004382 <lfs_tag_isdelete>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8004c62:	f06f 0301 	mvn.w	r3, #1
 8004c66:	e03b      	b.n	8004ce0 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8004c68:	69f8      	ldr	r0, [r7, #28]
 8004c6a:	f7ff fbf7 	bl	800445c <lfs_tag_size>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fe76 	bl	8003964 <lfs_min>
 8004c78:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8004c7a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c84:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8004c86:	3204      	adds	r2, #4
 8004c88:	6979      	ldr	r1, [r7, #20]
 8004c8a:	9103      	str	r1, [sp, #12]
 8004c8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c8e:	9102      	str	r1, [sp, #8]
 8004c90:	9201      	str	r2, [sp, #4]
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	4602      	mov	r2, r0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7fe ff3e 	bl	8003b1c <lfs_bd_read>
 8004ca0:	61b8      	str	r0, [r7, #24]
            if (err) {
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <lfs_dir_getslice+0x18c>
                return err;
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	e019      	b.n	8004ce0 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8004cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	18d0      	adds	r0, r2, r3
 8004cb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2100      	movs	r1, #0
 8004cbc:	f006 f843 	bl	800ad46 <memset>

            return tag + gdiff;
 8004cc0:	6a3a      	ldr	r2, [r7, #32]
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	e00b      	b.n	8004ce0 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fbd3 	bl	8004476 <lfs_tag_dsize>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	f4bf af56 	bcs.w	8004b88 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8004cdc:	f06f 0301 	mvn.w	r3, #1
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	372c      	adds	r7, #44	; 0x2c
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd90      	pop	{r4, r7, pc}
 8004ce8:	000ffc00 	.word	0x000ffc00

08004cec <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af04      	add	r7, sp, #16
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8004cfa:	6838      	ldr	r0, [r7, #0]
 8004cfc:	f7ff fbae 	bl	800445c <lfs_tag_size>
 8004d00:	4603      	mov	r3, r0
 8004d02:	9302      	str	r3, [sp, #8]
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff ff04 	bl	8004b20 <lfs_dir_getslice>
 8004d18:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b08c      	sub	sp, #48	; 0x30
 8004d26:	af04      	add	r7, sp, #16
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8004d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d38:	441a      	add	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	f240 80c0 	bls.w	8004ec6 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8004d46:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004d4a:	e0c1      	b.n	8004ed0 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8004d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4e:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03f      	beq.n	8004dd6 <lfs_dir_getread+0xb4>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f113 0f02 	cmn.w	r3, #2
 8004d5e:	d13a      	bne.n	8004dd6 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8004d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d232      	bcs.n	8004dd6 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d324      	bcc.n	8004dc4 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6859      	ldr	r1, [r3, #4]
 8004d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d84:	1acb      	subs	r3, r1, r3
 8004d86:	4413      	add	r3, r2
 8004d88:	4619      	mov	r1, r3
 8004d8a:	69b8      	ldr	r0, [r7, #24]
 8004d8c:	f7fe fdea 	bl	8003964 <lfs_min>
 8004d90:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d9c:	1acb      	subs	r3, r1, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4619      	mov	r1, r3
 8004da4:	69f8      	ldr	r0, [r7, #28]
 8004da6:	f006 f887 	bl	800aeb8 <memcpy>

                data += diff;
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	4413      	add	r3, r2
 8004db0:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	4413      	add	r3, r2
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8004dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8004dc2:	e080      	b.n	8004ec6 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	4619      	mov	r1, r3
 8004dce:	69b8      	ldr	r0, [r7, #24]
 8004dd0:	f7fe fdc8 	bl	8003964 <lfs_min>
 8004dd4:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f113 0f02 	cmn.w	r3, #2
 8004dde:	d13a      	bne.n	8004e56 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8004dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d232      	bcs.n	8004e56 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d324      	bcc.n	8004e44 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
 8004e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e04:	1acb      	subs	r3, r1, r3
 8004e06:	4413      	add	r3, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	69b8      	ldr	r0, [r7, #24]
 8004e0c:	f7fe fdaa 	bl	8003964 <lfs_min>
 8004e10:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e1c:	1acb      	subs	r3, r1, r3
 8004e1e:	4413      	add	r3, r2
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4619      	mov	r1, r3
 8004e24:	69f8      	ldr	r0, [r7, #28]
 8004e26:	f006 f847 	bl	800aeb8 <memcpy>

                data += diff;
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	4413      	add	r3, r2
 8004e30:	61fb      	str	r3, [r7, #28]
                off += diff;
 8004e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	4413      	add	r3, r2
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8004e3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8004e42:	e040      	b.n	8004ec6 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	69b8      	ldr	r0, [r7, #24]
 8004e50:	f7fe fd88 	bl	8003964 <lfs_min>
 8004e54:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	f06f 0201 	mvn.w	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	4619      	mov	r1, r3
 8004e66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e68:	f7fe fd8c 	bl	8003984 <lfs_aligndown>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8004e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	441a      	add	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f7fe fd94 	bl	80039ae <lfs_alignup>
 8004e86:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7fe fd67 	bl	8003964 <lfs_min>
 8004e96:	4602      	mov	r2, r0
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	6889      	ldr	r1, [r1, #8]
 8004ea8:	9102      	str	r1, [sp, #8]
 8004eaa:	9201      	str	r2, [sp, #4]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff fe33 	bl	8004b20 <lfs_dir_getslice>
 8004eba:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	da01      	bge.n	8004ec6 <lfs_dir_getread+0x1a4>
            return err;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	e004      	b.n	8004ed0 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f47f af3f 	bne.w	8004d4c <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3720      	adds	r7, #32
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8004ed8:	b590      	push	{r4, r7, lr}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <lfs_dir_traverse_filter+0x1e>
 8004ef2:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <lfs_dir_traverse_filter+0xac>)
 8004ef4:	e000      	b.n	8004ef8 <lfs_dir_traverse_filter+0x20>
 8004ef6:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8004ef8:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	405a      	eors	r2, r3
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d014      	beq.n	8004f34 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fa37 	bl	8004382 <lfs_tag_isdelete>
 8004f14:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10c      	bne.n	8004f34 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <lfs_dir_traverse_filter+0xac>)
 8004f1e:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <lfs_dir_traverse_filter+0xb4>)
 8004f26:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8004f28:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004f2c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d104      	bne.n	8004f3e <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
        return true;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e01e      	b.n	8004f7c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004f3e:	68b8      	ldr	r0, [r7, #8]
 8004f40:	f7ff fa32 	bl	80043a8 <lfs_tag_type1>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4a:	d116      	bne.n	8004f7a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8004f4c:	68b8      	ldr	r0, [r7, #8]
 8004f4e:	f7ff fa75 	bl	800443c <lfs_tag_id>
 8004f52:	4603      	mov	r3, r0
 8004f54:	461c      	mov	r4, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff fa6e 	bl	800443c <lfs_tag_id>
 8004f60:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004f62:	429c      	cmp	r4, r3
 8004f64:	d809      	bhi.n	8004f7a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004f66:	68b8      	ldr	r0, [r7, #8]
 8004f68:	f7ff fa5b 	bl	8004422 <lfs_tag_splice>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	029a      	lsls	r2, r3, #10
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	441a      	add	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	601a      	str	r2, [r3, #0]
    }

    return false;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd90      	pop	{r4, r7, pc}
 8004f84:	7ffffc00 	.word	0x7ffffc00
 8004f88:	700ffc00 	.word	0x700ffc00
 8004f8c:	000ffc00 	.word	0x000ffc00

08004f90 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8004f90:	b590      	push	{r4, r7, lr}
 8004f92:	b0c1      	sub	sp, #260	; 0x104
 8004f94:	af04      	add	r7, sp, #16
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8004fa4:	6838      	ldr	r0, [r7, #0]
 8004fa6:	f7ff fa66 	bl	8004476 <lfs_tag_dsize>
 8004faa:	4602      	mov	r2, r0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	441a      	add	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d237      	bcs.n	8005028 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8004fb8:	6838      	ldr	r0, [r7, #0]
 8004fba:	f7ff fa5c 	bl	8004476 <lfs_tag_dsize>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8004fc6:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8004fcc:	2204      	movs	r2, #4
 8004fce:	9203      	str	r2, [sp, #12]
 8004fd0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004fd4:	9202      	str	r2, [sp, #8]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	9201      	str	r2, [sp, #4]
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	2304      	movs	r3, #4
 8004fde:	460a      	mov	r2, r1
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7fe fd9a 	bl	8003b1c <lfs_bd_read>
 8004fe8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8004fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <lfs_dir_traverse+0x6a>
                    return err;
 8004ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff8:	e3a6      	b.n	8005748 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8004ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fe fd38 	bl	8003a72 <lfs_frombe32>
 8005002:	4602      	mov	r2, r0
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	4053      	eors	r3, r2
 8005008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800500c:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 800501a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800501e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8005022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005024:	603b      	str	r3, [r7, #0]
 8005026:	e01b      	b.n	8005060 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8005028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502c:	2b00      	cmp	r3, #0
 800502e:	dd13      	ble.n	8005058 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8005030:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8005038:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8005042:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005046:	3308      	adds	r3, #8
 8005048:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 800504c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005050:	3b01      	subs	r3, #1
 8005052:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005056:	e003      	b.n	8005060 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 800505e:	e2a2      	b.n	80055a6 <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8005060:	4b7e      	ldr	r3, [pc, #504]	; (800525c <lfs_dir_traverse+0x2cc>)
 8005062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8005066:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800506c:	405a      	eors	r2, r3
 800506e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005072:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005076:	400b      	ands	r3, r1
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	f040 8285 	bne.w	800558a <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8005080:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8005084:	f7ff f9da 	bl	800443c <lfs_tag_id>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80f0 	beq.w	8005270 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8005090:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005094:	2b02      	cmp	r3, #2
 8005096:	d906      	bls.n	80050a6 <lfs_dir_traverse+0x116>
 8005098:	4b71      	ldr	r3, [pc, #452]	; (8005260 <lfs_dir_traverse+0x2d0>)
 800509a:	4a72      	ldr	r2, [pc, #456]	; (8005264 <lfs_dir_traverse+0x2d4>)
 800509c:	f240 3193 	movw	r1, #915	; 0x393
 80050a0:	4871      	ldr	r0, [pc, #452]	; (8005268 <lfs_dir_traverse+0x2d8>)
 80050a2:	f005 fc47 	bl	800a934 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 80050a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050a8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80050ac:	4613      	mov	r3, r2
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	33f0      	adds	r3, #240	; 0xf0
 80050b6:	443b      	add	r3, r7
 80050b8:	3b98      	subs	r3, #152	; 0x98
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80050c2:	4613      	mov	r3, r2
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	33f0      	adds	r3, #240	; 0xf0
 80050cc:	443b      	add	r3, r7
 80050ce:	3b94      	subs	r3, #148	; 0x94
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80050d8:	4613      	mov	r3, r2
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	33f0      	adds	r3, #240	; 0xf0
 80050e2:	443b      	add	r3, r7
 80050e4:	3b90      	subs	r3, #144	; 0x90
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80050ee:	4613      	mov	r3, r2
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	33f0      	adds	r3, #240	; 0xf0
 80050f8:	443b      	add	r3, r7
 80050fa:	3b8c      	subs	r3, #140	; 0x8c
 80050fc:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005106:	4613      	mov	r3, r2
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	33f0      	adds	r3, #240	; 0xf0
 8005110:	443b      	add	r3, r7
 8005112:	3b88      	subs	r3, #136	; 0x88
 8005114:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800511e:	4613      	mov	r3, r2
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	33f0      	adds	r3, #240	; 0xf0
 8005128:	443b      	add	r3, r7
 800512a:	3b84      	subs	r3, #132	; 0x84
 800512c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005136:	4613      	mov	r3, r2
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	33f0      	adds	r3, #240	; 0xf0
 8005140:	443b      	add	r3, r7
 8005142:	3b80      	subs	r3, #128	; 0x80
 8005144:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800514e:	4613      	mov	r3, r2
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	33f0      	adds	r3, #240	; 0xf0
 8005158:	443b      	add	r3, r7
 800515a:	3b7c      	subs	r3, #124	; 0x7c
 800515c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005166:	4613      	mov	r3, r2
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	33f0      	adds	r3, #240	; 0xf0
 8005170:	443b      	add	r3, r7
 8005172:	3b7a      	subs	r3, #122	; 0x7a
 8005174:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800517e:	4613      	mov	r3, r2
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	1a9b      	subs	r3, r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	33f0      	adds	r3, #240	; 0xf0
 8005188:	443b      	add	r3, r7
 800518a:	3b78      	subs	r3, #120	; 0x78
 800518c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005196:	4613      	mov	r3, r2
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	33f0      	adds	r3, #240	; 0xf0
 80051a0:	443b      	add	r3, r7
 80051a2:	3b74      	subs	r3, #116	; 0x74
 80051a4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80051ae:	4613      	mov	r3, r2
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	33f0      	adds	r3, #240	; 0xf0
 80051b8:	443b      	add	r3, r7
 80051ba:	3b70      	subs	r3, #112	; 0x70
 80051bc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80051c6:	4613      	mov	r3, r2
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	33f0      	adds	r3, #240	; 0xf0
 80051d0:	443b      	add	r3, r7
 80051d2:	3b6c      	subs	r3, #108	; 0x6c
 80051d4:	6019      	str	r1, [r3, #0]
 80051d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80051da:	4613      	mov	r3, r2
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	33f0      	adds	r3, #240	; 0xf0
 80051e4:	443b      	add	r3, r7
 80051e6:	3b68      	subs	r3, #104	; 0x68
 80051e8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80051f2:	4613      	mov	r3, r2
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	33f0      	adds	r3, #240	; 0xf0
 80051fc:	443b      	add	r3, r7
 80051fe:	3b68      	subs	r3, #104	; 0x68
 8005200:	3304      	adds	r3, #4
 8005202:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800520a:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800520e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005212:	3301      	adds	r3, #1
 8005214:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8005224:	2300      	movs	r3, #0
 8005226:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8005236:	4b0d      	ldr	r3, [pc, #52]	; (800526c <lfs_dir_traverse+0x2dc>)
 8005238:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 800523c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005240:	1e5a      	subs	r2, r3, #1
 8005242:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005246:	4613      	mov	r3, r2
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	3328      	adds	r3, #40	; 0x28
 8005250:	440b      	add	r3, r1
 8005252:	3304      	adds	r3, #4
 8005254:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8005258:	e19e      	b.n	8005598 <lfs_dir_traverse+0x608>
 800525a:	bf00      	nop
 800525c:	7ff00000 	.word	0x7ff00000
 8005260:	0800bc50 	.word	0x0800bc50
 8005264:	0800c5f4 	.word	0x0800c5f4
 8005268:	0800bb58 	.word	0x0800bb58
 800526c:	08004ed9 	.word	0x08004ed9
            }
        }

popped:
 8005270:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8005272:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8005276:	f7ff f8e1 	bl	800443c <lfs_tag_id>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8005280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff f8da 	bl	800443c <lfs_tag_id>
 8005288:	4603      	mov	r3, r0
 800528a:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800528c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8005290:	4293      	cmp	r3, r2
 8005292:	f200 817c 	bhi.w	800558e <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8005296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff f8cf 	bl	800443c <lfs_tag_id>
 800529e:	4603      	mov	r3, r0
 80052a0:	461a      	mov	r2, r3
 80052a2:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80052a6:	4293      	cmp	r3, r2
 80052a8:	f240 8171 	bls.w	800558e <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 80052ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff f89a 	bl	80043e8 <lfs_tag_type3>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f43f ae74 	beq.w	8004fa4 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80052bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff f892 	bl	80043e8 <lfs_tag_type3>
 80052c4:	4603      	mov	r3, r0
 80052c6:	461a      	mov	r2, r3
 80052c8:	f240 1301 	movw	r3, #257	; 0x101
 80052cc:	429a      	cmp	r2, r3
 80052ce:	f040 80e0 	bne.w	8005492 <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80052d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052d6:	4ab1      	ldr	r2, [pc, #708]	; (800559c <lfs_dir_traverse+0x60c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	f000 815a 	beq.w	8005592 <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80052de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	33f0      	adds	r3, #240	; 0xf0
 80052ec:	443b      	add	r3, r7
 80052ee:	3b98      	subs	r3, #152	; 0x98
 80052f0:	4618      	mov	r0, r3
 80052f2:	233c      	movs	r3, #60	; 0x3c
 80052f4:	461a      	mov	r2, r3
 80052f6:	2100      	movs	r1, #0
 80052f8:	f005 fd25 	bl	800ad46 <memset>
 80052fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005300:	4613      	mov	r3, r2
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	33f0      	adds	r3, #240	; 0xf0
 800530a:	443b      	add	r3, r7
 800530c:	3b98      	subs	r3, #152	; 0x98
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005316:	4613      	mov	r3, r2
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	33f0      	adds	r3, #240	; 0xf0
 8005320:	443b      	add	r3, r7
 8005322:	3b94      	subs	r3, #148	; 0x94
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800532c:	4613      	mov	r3, r2
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	33f0      	adds	r3, #240	; 0xf0
 8005336:	443b      	add	r3, r7
 8005338:	3b90      	subs	r3, #144	; 0x90
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005342:	4613      	mov	r3, r2
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	33f0      	adds	r3, #240	; 0xf0
 800534c:	443b      	add	r3, r7
 800534e:	3b8c      	subs	r3, #140	; 0x8c
 8005350:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800535a:	4613      	mov	r3, r2
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	33f0      	adds	r3, #240	; 0xf0
 8005364:	443b      	add	r3, r7
 8005366:	3b88      	subs	r3, #136	; 0x88
 8005368:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005372:	4613      	mov	r3, r2
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	33f0      	adds	r3, #240	; 0xf0
 800537c:	443b      	add	r3, r7
 800537e:	3b84      	subs	r3, #132	; 0x84
 8005380:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800538a:	4613      	mov	r3, r2
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	33f0      	adds	r3, #240	; 0xf0
 8005394:	443b      	add	r3, r7
 8005396:	3b80      	subs	r3, #128	; 0x80
 8005398:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053a2:	4613      	mov	r3, r2
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	33f0      	adds	r3, #240	; 0xf0
 80053ac:	443b      	add	r3, r7
 80053ae:	3b7c      	subs	r3, #124	; 0x7c
 80053b0:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053ba:	4613      	mov	r3, r2
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	1a9b      	subs	r3, r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	33f0      	adds	r3, #240	; 0xf0
 80053c4:	443b      	add	r3, r7
 80053c6:	3b7a      	subs	r3, #122	; 0x7a
 80053c8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053d2:	4613      	mov	r3, r2
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	33f0      	adds	r3, #240	; 0xf0
 80053dc:	443b      	add	r3, r7
 80053de:	3b78      	subs	r3, #120	; 0x78
 80053e0:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053ea:	4613      	mov	r3, r2
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	33f0      	adds	r3, #240	; 0xf0
 80053f4:	443b      	add	r3, r7
 80053f6:	3b74      	subs	r3, #116	; 0x74
 80053f8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005402:	4613      	mov	r3, r2
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	33f0      	adds	r3, #240	; 0xf0
 800540c:	443b      	add	r3, r7
 800540e:	3b70      	subs	r3, #112	; 0x70
 8005410:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005414:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8005416:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800541a:	3301      	adds	r3, #1
 800541c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8005420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff f81a 	bl	800445c <lfs_tag_size>
 8005428:	4603      	mov	r3, r0
 800542a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 800542e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff f803 	bl	800443c <lfs_tag_id>
 8005436:	4603      	mov	r3, r0
 8005438:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005440:	60bb      	str	r3, [r7, #8]
            off = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8005446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800544a:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8005458:	4b51      	ldr	r3, [pc, #324]	; (80055a0 <lfs_dir_traverse+0x610>)
 800545a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800545e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005462:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8005466:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800546a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 800546e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8005472:	3301      	adds	r3, #1
 8005474:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8005478:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 800547c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	b29a      	uxth	r2, r3
 8005484:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005488:	4413      	add	r3, r2
 800548a:	b29b      	uxth	r3, r3
 800548c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8005490:	e588      	b.n	8004fa4 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8005492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe ffa7 	bl	80043e8 <lfs_tag_type3>
 800549a:	4603      	mov	r3, r0
 800549c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80054a0:	d159      	bne.n	8005556 <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80054a2:	2300      	movs	r3, #0
 80054a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054a8:	e04b      	b.n	8005542 <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80054b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80054b6:	4613      	mov	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	461a      	mov	r2, r3
 80054c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054c4:	4413      	add	r3, r2
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80054cc:	051c      	lsls	r4, r3, #20
 80054ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe ffb3 	bl	800443c <lfs_tag_id>
 80054d6:	4603      	mov	r3, r0
 80054d8:	461a      	mov	r2, r3
 80054da:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80054de:	4413      	add	r3, r2
 80054e0:	029b      	lsls	r3, r3, #10
 80054e2:	ea44 0103 	orr.w	r1, r4, r3
 80054e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80054ea:	4613      	mov	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	461a      	mov	r2, r3
 80054f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054f8:	4413      	add	r3, r2
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80054fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	461a      	mov	r2, r3
 800550c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005510:	4413      	add	r3, r2
 8005512:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8005514:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005518:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800551c:	4798      	blx	r3
 800551e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8005522:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005526:	2b00      	cmp	r3, #0
 8005528:	da02      	bge.n	8005530 <lfs_dir_traverse+0x5a0>
                    return res;
 800552a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800552e:	e10b      	b.n	8005748 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8005530:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d12e      	bne.n	8005596 <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8005538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553c:	3301      	adds	r3, #1
 800553e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005544:	4618      	mov	r0, r3
 8005546:	f7fe ff89 	bl	800445c <lfs_tag_size>
 800554a:	4602      	mov	r2, r0
 800554c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005550:	4293      	cmp	r3, r2
 8005552:	d3aa      	bcc.n	80054aa <lfs_dir_traverse+0x51a>
 8005554:	e526      	b.n	8004fa4 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8005556:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800555a:	029a      	lsls	r2, r3, #10
 800555c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800555e:	18d1      	adds	r1, r2, r3
 8005560:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005564:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005568:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800556c:	4798      	blx	r3
 800556e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8005572:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005576:	2b00      	cmp	r3, #0
 8005578:	da02      	bge.n	8005580 <lfs_dir_traverse+0x5f0>
                return res;
 800557a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800557e:	e0e3      	b.n	8005748 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8005580:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10d      	bne.n	80055a4 <lfs_dir_traverse+0x614>
 8005588:	e50c      	b.n	8004fa4 <lfs_dir_traverse+0x14>
                continue;
 800558a:	bf00      	nop
 800558c:	e50a      	b.n	8004fa4 <lfs_dir_traverse+0x14>
            continue;
 800558e:	bf00      	nop
 8005590:	e508      	b.n	8004fa4 <lfs_dir_traverse+0x14>
                continue;
 8005592:	bf00      	nop
 8005594:	e506      	b.n	8004fa4 <lfs_dir_traverse+0x14>
                    break;
 8005596:	bf00      	nop
        {
 8005598:	e504      	b.n	8004fa4 <lfs_dir_traverse+0x14>
 800559a:	bf00      	nop
 800559c:	08004ed9 	.word	0x08004ed9
 80055a0:	600ffc00 	.word	0x600ffc00
                break;
 80055a4:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80055a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80ca 	beq.w	8005744 <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80055b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055b4:	1e5a      	subs	r2, r3, #1
 80055b6:	4613      	mov	r3, r2
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	33f0      	adds	r3, #240	; 0xf0
 80055c0:	443b      	add	r3, r7
 80055c2:	3b98      	subs	r3, #152	; 0x98
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80055c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055cc:	1e5a      	subs	r2, r3, #1
 80055ce:	4613      	mov	r3, r2
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	33f0      	adds	r3, #240	; 0xf0
 80055d8:	443b      	add	r3, r7
 80055da:	3b94      	subs	r3, #148	; 0x94
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80055e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055e4:	1e5a      	subs	r2, r3, #1
 80055e6:	4613      	mov	r3, r2
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	33f0      	adds	r3, #240	; 0xf0
 80055f0:	443b      	add	r3, r7
 80055f2:	3b90      	subs	r3, #144	; 0x90
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80055f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80055fc:	1e5a      	subs	r2, r3, #1
 80055fe:	4613      	mov	r3, r2
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	33f0      	adds	r3, #240	; 0xf0
 8005608:	443b      	add	r3, r7
 800560a:	3b8c      	subs	r3, #140	; 0x8c
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8005612:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005616:	1e5a      	subs	r2, r3, #1
 8005618:	4613      	mov	r3, r2
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	33f0      	adds	r3, #240	; 0xf0
 8005622:	443b      	add	r3, r7
 8005624:	3b88      	subs	r3, #136	; 0x88
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 800562c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005630:	1e5a      	subs	r2, r3, #1
 8005632:	4613      	mov	r3, r2
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	33f0      	adds	r3, #240	; 0xf0
 800563c:	443b      	add	r3, r7
 800563e:	3b84      	subs	r3, #132	; 0x84
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8005646:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800564a:	1e5a      	subs	r2, r3, #1
 800564c:	4613      	mov	r3, r2
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	33f0      	adds	r3, #240	; 0xf0
 8005656:	443b      	add	r3, r7
 8005658:	3b80      	subs	r3, #128	; 0x80
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8005660:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005664:	1e5a      	subs	r2, r3, #1
 8005666:	4613      	mov	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	33f0      	adds	r3, #240	; 0xf0
 8005670:	443b      	add	r3, r7
 8005672:	3b7c      	subs	r3, #124	; 0x7c
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800567a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800567e:	1e5a      	subs	r2, r3, #1
 8005680:	4613      	mov	r3, r2
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	33f0      	adds	r3, #240	; 0xf0
 800568a:	443b      	add	r3, r7
 800568c:	3b7a      	subs	r3, #122	; 0x7a
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8005694:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005698:	1e5a      	subs	r2, r3, #1
 800569a:	4613      	mov	r3, r2
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	1a9b      	subs	r3, r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	33f0      	adds	r3, #240	; 0xf0
 80056a4:	443b      	add	r3, r7
 80056a6:	3b78      	subs	r3, #120	; 0x78
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 80056ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056b2:	1e5a      	subs	r2, r3, #1
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	33f0      	adds	r3, #240	; 0xf0
 80056be:	443b      	add	r3, r7
 80056c0:	3b74      	subs	r3, #116	; 0x74
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 80056c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056cc:	1e5a      	subs	r2, r3, #1
 80056ce:	4613      	mov	r3, r2
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	33f0      	adds	r3, #240	; 0xf0
 80056d8:	443b      	add	r3, r7
 80056da:	3b70      	subs	r3, #112	; 0x70
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80056e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056e6:	1e5a      	subs	r2, r3, #1
 80056e8:	4613      	mov	r3, r2
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	33f0      	adds	r3, #240	; 0xf0
 80056f2:	443b      	add	r3, r7
 80056f4:	3b6c      	subs	r3, #108	; 0x6c
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80056fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056fe:	1e5a      	subs	r2, r3, #1
 8005700:	4613      	mov	r3, r2
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	33f0      	adds	r3, #240	; 0xf0
 800570a:	443b      	add	r3, r7
 800570c:	3b68      	subs	r3, #104	; 0x68
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8005714:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005718:	1e5a      	subs	r2, r3, #1
 800571a:	4613      	mov	r3, r2
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	1a9b      	subs	r3, r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	33f0      	adds	r3, #240	; 0xf0
 8005724:	443b      	add	r3, r7
 8005726:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 800572a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800572e:	3204      	adds	r2, #4
 8005730:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005734:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8005738:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800573c:	3b01      	subs	r3, #1
 800573e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8005742:	e596      	b.n	8005272 <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 8005744:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8005748:	4618      	mov	r0, r3
 800574a:	37f4      	adds	r7, #244	; 0xf4
 800574c:	46bd      	mov	sp, r7
 800574e:	bd90      	pop	{r4, r7, pc}

08005750 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8005750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005752:	b0a5      	sub	sp, #148	; 0x94
 8005754:	af04      	add	r7, sp, #16
 8005756:	6178      	str	r0, [r7, #20]
 8005758:	6139      	str	r1, [r7, #16]
 800575a:	60fa      	str	r2, [r7, #12]
 800575c:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800575e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005762:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	429a      	cmp	r2, r3
 8005770:	d207      	bcs.n	8005782 <lfs_dir_fetchmatch+0x32>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3304      	adds	r3, #4
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 8005782:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005786:	e3a4      	b.n	8005ed2 <lfs_dir_fetchmatch+0x782>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8005788:	2300      	movs	r3, #0
 800578a:	647b      	str	r3, [r7, #68]	; 0x44
 800578c:	2300      	movs	r3, #0
 800578e:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8005794:	2300      	movs	r3, #0
 8005796:	677b      	str	r3, [r7, #116]	; 0x74
 8005798:	e05a      	b.n	8005850 <lfs_dir_fetchmatch+0x100>
        int err = lfs_bd_read(lfs,
 800579a:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800579c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 80057a4:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80057a6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80057aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80057ac:	0092      	lsls	r2, r2, #2
 80057ae:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 80057b0:	2104      	movs	r1, #4
 80057b2:	9103      	str	r1, [sp, #12]
 80057b4:	9202      	str	r2, [sp, #8]
 80057b6:	2200      	movs	r2, #0
 80057b8:	9201      	str	r2, [sp, #4]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	2304      	movs	r3, #4
 80057be:	4602      	mov	r2, r0
 80057c0:	2100      	movs	r1, #0
 80057c2:	6978      	ldr	r0, [r7, #20]
 80057c4:	f7fe f9aa 	bl	8003b1c <lfs_bd_read>
 80057c8:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 80057ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	3378      	adds	r3, #120	; 0x78
 80057d0:	f107 0208 	add.w	r2, r7, #8
 80057d4:	4413      	add	r3, r2
 80057d6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe f932 	bl	8003a44 <lfs_fromle32>
 80057e0:	4602      	mov	r2, r0
 80057e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	3378      	adds	r3, #120	; 0x78
 80057e8:	f107 0108 	add.w	r1, r7, #8
 80057ec:	440b      	add	r3, r1
 80057ee:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 80057f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <lfs_dir_fetchmatch+0xb4>
 80057f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057fa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80057fe:	d001      	beq.n	8005804 <lfs_dir_fetchmatch+0xb4>
            return err;
 8005800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005802:	e366      	b.n	8005ed2 <lfs_dir_fetchmatch+0x782>
        }

        if (err != LFS_ERR_CORRUPT &&
 8005804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005806:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800580a:	d01e      	beq.n	800584a <lfs_dir_fetchmatch+0xfa>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800580c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	3378      	adds	r3, #120	; 0x78
 8005812:	f107 0208 	add.w	r2, r7, #8
 8005816:	4413      	add	r3, r2
 8005818:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800581c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800581e:	3301      	adds	r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	bfb8      	it	lt
 8005828:	425b      	neglt	r3, r3
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	3378      	adds	r3, #120	; 0x78
 800582e:	f107 0108 	add.w	r1, r7, #8
 8005832:	440b      	add	r3, r1
 8005834:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fe f8f4 	bl	8003a28 <lfs_scmp>
 8005840:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8005842:	2b00      	cmp	r3, #0
 8005844:	dd01      	ble.n	800584a <lfs_dir_fetchmatch+0xfa>
            r = i;
 8005846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005848:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 800584a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800584c:	3301      	adds	r3, #1
 800584e:	677b      	str	r3, [r7, #116]	; 0x74
 8005850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005852:	2b01      	cmp	r3, #1
 8005854:	dda1      	ble.n	800579a <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8005856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005858:	2b00      	cmp	r3, #0
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	bfb8      	it	lt
 8005860:	425b      	neglt	r3, r3
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800586e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005870:	3301      	adds	r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	bfb8      	it	lt
 800587a:	425b      	neglt	r3, r3
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8005888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800588a:	2b00      	cmp	r3, #0
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	bfb8      	it	lt
 8005892:	425b      	neglt	r3, r3
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	3378      	adds	r3, #120	; 0x78
 8005898:	f107 0208 	add.w	r2, r7, #8
 800589c:	4413      	add	r3, r2
 800589e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2200      	movs	r2, #0
 80058aa:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 80058ac:	2300      	movs	r3, #0
 80058ae:	673b      	str	r3, [r7, #112]	; 0x70
 80058b0:	e2fb      	b.n	8005eaa <lfs_dir_fetchmatch+0x75a>
        lfs_off_t off = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 80058b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058ba:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80058c2:	4aa9      	ldr	r2, [pc, #676]	; (8005b68 <lfs_dir_fetchmatch+0x418>)
 80058c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058cc:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80058d0:	2300      	movs	r3, #0
 80058d2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 80058d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058d8:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 80058da:	2300      	movs	r3, #0
 80058dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe f8b5 	bl	8003a5a <lfs_tole32>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	3308      	adds	r3, #8
 80058fa:	2204      	movs	r2, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005902:	f004 fe69 	bl	800a5d8 <lfs_crc>
 8005906:	4603      	mov	r3, r0
 8005908:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe f898 	bl	8003a44 <lfs_fromle32>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800591a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800591c:	f7fe fdab 	bl	8004476 <lfs_tag_dsize>
 8005920:	4602      	mov	r2, r0
 8005922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005924:	4413      	add	r3, r2
 8005926:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 8005928:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800592e:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2204      	movs	r2, #4
 8005936:	9203      	str	r2, [sp, #12]
 8005938:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800593c:	9202      	str	r2, [sp, #8]
 800593e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005940:	9201      	str	r2, [sp, #4]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	4603      	mov	r3, r0
 8005946:	460a      	mov	r2, r1
 8005948:	2100      	movs	r1, #0
 800594a:	6978      	ldr	r0, [r7, #20]
 800594c:	f7fe f8e6 	bl	8003b1c <lfs_bd_read>
 8005950:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8005952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005954:	2b00      	cmp	r3, #0
 8005956:	d006      	beq.n	8005966 <lfs_dir_fetchmatch+0x216>
                if (err == LFS_ERR_CORRUPT) {
 8005958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800595a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800595e:	f000 81d6 	beq.w	8005d0e <lfs_dir_fetchmatch+0x5be>
                    // can't continue?
                    break;
                }
                return err;
 8005962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005964:	e2b5      	b.n	8005ed2 <lfs_dir_fetchmatch+0x782>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800596c:	2204      	movs	r2, #4
 800596e:	4618      	mov	r0, r3
 8005970:	f004 fe32 	bl	800a5d8 <lfs_crc>
 8005974:	4603      	mov	r3, r0
 8005976:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8005978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597a:	4618      	mov	r0, r3
 800597c:	f7fe f879 	bl	8003a72 <lfs_frombe32>
 8005980:	4602      	mov	r2, r0
 8005982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005984:	4053      	eors	r3, r2
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe fceb 	bl	8004366 <lfs_tag_isvalid>
 8005990:	4603      	mov	r3, r0
 8005992:	f083 0301 	eor.w	r3, r3, #1
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <lfs_dir_fetchmatch+0x264>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 800599c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800599e:	f7fe fd13 	bl	80043c8 <lfs_tag_type2>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80059a8:	bf0c      	ite	eq
 80059aa:	2301      	moveq	r3, #1
 80059ac:	2300      	movne	r3, #0
 80059ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 80059b2:	e1bb      	b.n	8005d2c <lfs_dir_fetchmatch+0x5dc>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80059b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fd5d 	bl	8004476 <lfs_tag_dsize>
 80059bc:	4602      	mov	r2, r0
 80059be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c0:	441a      	add	r2, r3
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	f200 81a2 	bhi.w	8005d12 <lfs_dir_fetchmatch+0x5c2>
                break;
            }

            ptag = tag;
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fcf7 	bl	80043c8 <lfs_tag_type2>
 80059da:	4603      	mov	r3, r0
 80059dc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80059e0:	d15e      	bne.n	8005aa0 <lfs_dir_fetchmatch+0x350>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80059e2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e8:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059f0:	3204      	adds	r2, #4
 80059f2:	2104      	movs	r1, #4
 80059f4:	9103      	str	r1, [sp, #12]
 80059f6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80059fa:	9102      	str	r1, [sp, #8]
 80059fc:	9201      	str	r2, [sp, #4]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	4623      	mov	r3, r4
 8005a02:	4602      	mov	r2, r0
 8005a04:	2100      	movs	r1, #0
 8005a06:	6978      	ldr	r0, [r7, #20]
 8005a08:	f7fe f888 	bl	8003b1c <lfs_bd_read>
 8005a0c:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8005a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d006      	beq.n	8005a22 <lfs_dir_fetchmatch+0x2d2>
                    if (err == LFS_ERR_CORRUPT) {
 8005a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a16:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005a1a:	f000 817c 	beq.w	8005d16 <lfs_dir_fetchmatch+0x5c6>
                        break;
                    }
                    return err;
 8005a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 8005a20:	e257      	b.n	8005ed2 <lfs_dir_fetchmatch+0x782>
                }
                dcrc = lfs_fromle32(dcrc);
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe f80d 	bl	8003a44 <lfs_fromle32>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 8005a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	429a      	cmp	r2, r3
 8005a34:	f040 8171 	bne.w	8005d1a <lfs_dir_fetchmatch+0x5ca>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fce4 	bl	8004408 <lfs_tag_chunk>
 8005a40:	4603      	mov	r3, r0
 8005a42:	07db      	lsls	r3, r3, #31
 8005a44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a46:	4053      	eors	r3, r2
 8005a48:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005a52:	2204      	movs	r2, #4
 8005a54:	4618      	mov	r0, r3
 8005a56:	f004 fdbf 	bl	800a5d8 <lfs_crc>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8005a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a62:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe fd05 	bl	8004476 <lfs_tag_dsize>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a70:	441a      	add	r2, r3
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a7a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005a82:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8005a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8005a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8005a96:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8005a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a9e:	e73c      	b.n	800591a <lfs_dir_fetchmatch+0x1ca>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8005aa0:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	681c      	ldr	r4, [r3, #0]
 8005aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab0:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fcde 	bl	8004476 <lfs_tag_dsize>
 8005aba:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8005abc:	3b04      	subs	r3, #4
 8005abe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005ac2:	9203      	str	r2, [sp, #12]
 8005ac4:	9302      	str	r3, [sp, #8]
 8005ac6:	9501      	str	r5, [sp, #4]
 8005ac8:	9400      	str	r4, [sp, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4632      	mov	r2, r6
 8005ace:	2100      	movs	r1, #0
 8005ad0:	6978      	ldr	r0, [r7, #20]
 8005ad2:	f7fe f9b8 	bl	8003e46 <lfs_bd_crc>
 8005ad6:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8005ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d006      	beq.n	8005aec <lfs_dir_fetchmatch+0x39c>
                if (err == LFS_ERR_CORRUPT) {
 8005ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ae0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005ae4:	f000 811b 	beq.w	8005d1e <lfs_dir_fetchmatch+0x5ce>
                    break;
                }
                return err;
 8005ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aea:	e1f2      	b.n	8005ed2 <lfs_dir_fetchmatch+0x782>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fc5a 	bl	80043a8 <lfs_tag_type1>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d113      	bne.n	8005b22 <lfs_dir_fetchmatch+0x3d2>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fe fc9d 	bl	800443c <lfs_tag_id>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	f200 80b6 	bhi.w	8005c7c <lfs_dir_fetchmatch+0x52c>
                    tempcount = lfs_tag_id(tag) + 1;
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fc92 	bl	800443c <lfs_tag_id>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005b20:	e0ac      	b.n	8005c7c <lfs_dir_fetchmatch+0x52c>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fe fc3f 	bl	80043a8 <lfs_tag_type1>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b30:	d13a      	bne.n	8005ba8 <lfs_dir_fetchmatch+0x458>
                tempcount += lfs_tag_splice(tag);
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe fc74 	bl	8004422 <lfs_tag_splice>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b42:	4413      	add	r3, r2
 8005b44:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8005b48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b4a:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <lfs_dir_fetchmatch+0x41c>)
 8005b4c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8005b4e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8005b52:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8005b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d109      	bne.n	8005b70 <lfs_dir_fetchmatch+0x420>
                    tempbesttag |= 0x80000000;
 8005b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b62:	663b      	str	r3, [r7, #96]	; 0x60
 8005b64:	e08a      	b.n	8005c7c <lfs_dir_fetchmatch+0x52c>
 8005b66:	bf00      	nop
 8005b68:	0800bc90 	.word	0x0800bc90
 8005b6c:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8005b70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b76:	f000 8081 	beq.w	8005c7c <lfs_dir_fetchmatch+0x52c>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fc5d 	bl	800443c <lfs_tag_id>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461c      	mov	r4, r3
 8005b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe fc57 	bl	800443c <lfs_tag_id>
 8005b8e:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8005b90:	429c      	cmp	r4, r3
 8005b92:	d873      	bhi.n	8005c7c <lfs_dir_fetchmatch+0x52c>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fc43 	bl	8004422 <lfs_tag_splice>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	029a      	lsls	r2, r3, #10
 8005ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ba2:	4413      	add	r3, r2
 8005ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ba6:	e069      	b.n	8005c7c <lfs_dir_fetchmatch+0x52c>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8005ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fbfc 	bl	80043a8 <lfs_tag_type1>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bb6:	d132      	bne.n	8005c1e <lfs_dir_fetchmatch+0x4ce>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fc24 	bl	8004408 <lfs_tag_chunk>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bf14      	ite	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	2300      	moveq	r3, #0
 8005bce:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 8005bd2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd8:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005be0:	3204      	adds	r2, #4
 8005be2:	2108      	movs	r1, #8
 8005be4:	9103      	str	r1, [sp, #12]
 8005be6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005bea:	9102      	str	r1, [sp, #8]
 8005bec:	9201      	str	r2, [sp, #4]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	4623      	mov	r3, r4
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	6978      	ldr	r0, [r7, #20]
 8005bf8:	f7fd ff90 	bl	8003b1c <lfs_bd_read>
 8005bfc:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8005bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <lfs_dir_fetchmatch+0x4c2>
                    if (err == LFS_ERR_CORRUPT) {
 8005c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c06:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005c0a:	f000 808a 	beq.w	8005d22 <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return err;
 8005c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c10:	e15f      	b.n	8005ed2 <lfs_dir_fetchmatch+0x782>
                }
                lfs_pair_fromle32(temptail);
 8005c12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe fb71 	bl	80042fe <lfs_pair_fromle32>
 8005c1c:	e02e      	b.n	8005c7c <lfs_dir_fetchmatch+0x52c>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe fbe1 	bl	80043e8 <lfs_tag_type3>
 8005c26:	4603      	mov	r3, r0
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d124      	bne.n	8005c7c <lfs_dir_fetchmatch+0x52c>
                err = lfs_bd_read(lfs,
 8005c32:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c38:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c40:	3204      	adds	r2, #4
 8005c42:	2108      	movs	r1, #8
 8005c44:	9103      	str	r1, [sp, #12]
 8005c46:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005c4a:	9102      	str	r1, [sp, #8]
 8005c4c:	9201      	str	r2, [sp, #4]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	4623      	mov	r3, r4
 8005c52:	4602      	mov	r2, r0
 8005c54:	2100      	movs	r1, #0
 8005c56:	6978      	ldr	r0, [r7, #20]
 8005c58:	f7fd ff60 	bl	8003b1c <lfs_bd_read>
 8005c5c:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8005c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <lfs_dir_fetchmatch+0x51c>
                    if (err == LFS_ERR_CORRUPT) {
 8005c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c66:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005c6a:	d05c      	beq.n	8005d26 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8005c6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fe fcff 	bl	8004674 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8005c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c82:	405a      	eors	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f47f ae46 	bne.w	800591a <lfs_dir_fetchmatch+0x1ca>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005c94:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8005c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c98:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9c:	f107 0220 	add.w	r2, r7, #32
 8005ca0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ca4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8005ca8:	4798      	blx	r3
 8005caa:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8005cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	da05      	bge.n	8005cbe <lfs_dir_fetchmatch+0x56e>
                    if (res == LFS_ERR_CORRUPT) {
 8005cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005cb8:	d037      	beq.n	8005d2a <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                    return res;
 8005cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8005cbc:	e109      	b.n	8005ed2 <lfs_dir_fetchmatch+0x782>
                }

                if (res == LFS_CMP_EQ) {
 8005cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <lfs_dir_fetchmatch+0x57a>
                    // found a match
                    tempbesttag = tag;
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8005cc8:	e627      	b.n	800591a <lfs_dir_fetchmatch+0x1ca>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8005cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cce:	405a      	eors	r2, r3
 8005cd0:	4b82      	ldr	r3, [pc, #520]	; (8005edc <lfs_dir_fetchmatch+0x78c>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d103      	bne.n	8005ce0 <lfs_dir_fetchmatch+0x590>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8005cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8005cde:	e61c      	b.n	800591a <lfs_dir_fetchmatch+0x1ca>
                } else if (res == LFS_CMP_GT &&
 8005ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	f47f ae19 	bne.w	800591a <lfs_dir_fetchmatch+0x1ca>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fe fba6 	bl	800443c <lfs_tag_id>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	461c      	mov	r4, r3
 8005cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe fba0 	bl	800443c <lfs_tag_id>
 8005cfc:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8005cfe:	429c      	cmp	r4, r3
 8005d00:	f63f ae0b 	bhi.w	800591a <lfs_dir_fetchmatch+0x1ca>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d0c:	e605      	b.n	800591a <lfs_dir_fetchmatch+0x1ca>
                    break;
 8005d0e:	bf00      	nop
 8005d10:	e00c      	b.n	8005d2c <lfs_dir_fetchmatch+0x5dc>
                break;
 8005d12:	bf00      	nop
 8005d14:	e00a      	b.n	8005d2c <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005d16:	bf00      	nop
 8005d18:	e008      	b.n	8005d2c <lfs_dir_fetchmatch+0x5dc>
                    break;
 8005d1a:	bf00      	nop
 8005d1c:	e006      	b.n	8005d2c <lfs_dir_fetchmatch+0x5dc>
                    break;
 8005d1e:	bf00      	nop
 8005d20:	e004      	b.n	8005d2c <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005d22:	bf00      	nop
 8005d24:	e002      	b.n	8005d2c <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005d26:	bf00      	nop
 8005d28:	e000      	b.n	8005d2c <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005d2a:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d000      	beq.n	8005d36 <lfs_dir_fetchmatch+0x5e6>
 8005d34:	e017      	b.n	8005d66 <lfs_dir_fetchmatch+0x616>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fe fa59 	bl	80041f0 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8005d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d40:	3301      	adds	r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	bfb8      	it	lt
 8005d4a:	425b      	neglt	r3, r3
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	3378      	adds	r3, #120	; 0x78
 8005d50:	f107 0208 	add.w	r2, r7, #8
 8005d54:	4413      	add	r3, r2
 8005d56:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8005d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d60:	3301      	adds	r3, #1
 8005d62:	673b      	str	r3, [r7, #112]	; 0x70
 8005d64:	e0a1      	b.n	8005eaa <lfs_dir_fetchmatch+0x75a>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8005d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d03a      	beq.n	8005dea <lfs_dir_fetchmatch+0x69a>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d7c:	6992      	ldr	r2, [r2, #24]
 8005d7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d82:	fb01 f202 	mul.w	r2, r1, r2
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d12e      	bne.n	8005dea <lfs_dir_fetchmatch+0x69a>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8005d8c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d02a      	beq.n	8005dea <lfs_dir_fetchmatch+0x69a>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8005d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d98:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8005d9a:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da0:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	68d2      	ldr	r2, [r2, #12]
 8005daa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005dac:	f107 001c 	add.w	r0, r7, #28
 8005db0:	9003      	str	r0, [sp, #12]
 8005db2:	9102      	str	r1, [sp, #8]
 8005db4:	9201      	str	r2, [sp, #4]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	462b      	mov	r3, r5
 8005dba:	4622      	mov	r2, r4
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	6978      	ldr	r0, [r7, #20]
 8005dc0:	f7fe f841 	bl	8003e46 <lfs_bd_crc>
 8005dc4:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8005dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <lfs_dir_fetchmatch+0x688>
 8005dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dce:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005dd2:	d001      	beq.n	8005dd8 <lfs_dir_fetchmatch+0x688>
                    return err;
 8005dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd6:	e07c      	b.n	8005ed2 <lfs_dir_fetchmatch+0x782>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8005dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	bf0c      	ite	eq
 8005de0:	2301      	moveq	r3, #1
 8005de2:	2300      	movne	r3, #0
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	333c      	adds	r3, #60	; 0x3c
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4611      	mov	r1, r2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe fbde 	bl	80045b4 <lfs_gstate_hasmovehere>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d028      	beq.n	8005e50 <lfs_dir_fetchmatch+0x700>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe fb1a 	bl	800443c <lfs_tag_id>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	461c      	mov	r4, r3
 8005e0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe fb14 	bl	800443c <lfs_tag_id>
 8005e14:	4603      	mov	r3, r0
 8005e16:	429c      	cmp	r4, r3
 8005e18:	d104      	bne.n	8005e24 <lfs_dir_fetchmatch+0x6d4>
                besttag |= 0x80000000;
 8005e1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e22:	e015      	b.n	8005e50 <lfs_dir_fetchmatch+0x700>
            } else if (besttag != -1 &&
 8005e24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e2a:	d011      	beq.n	8005e50 <lfs_dir_fetchmatch+0x700>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe fb03 	bl	800443c <lfs_tag_id>
 8005e36:	4603      	mov	r3, r0
 8005e38:	461c      	mov	r4, r3
 8005e3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fe fafd 	bl	800443c <lfs_tag_id>
 8005e42:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8005e44:	429c      	cmp	r4, r3
 8005e46:	d203      	bcs.n	8005e50 <lfs_dir_fetchmatch+0x700>
                besttag -= LFS_MKTAG(0, 1, 0);
 8005e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e4a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8005e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d010      	beq.n	8005e7a <lfs_dir_fetchmatch+0x72a>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8005e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe faee 	bl	800443c <lfs_tag_id>
 8005e60:	4603      	mov	r3, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	8a9b      	ldrh	r3, [r3, #20]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f7fd fd7a 	bl	8003964 <lfs_min>
 8005e70:	4603      	mov	r3, r0
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e78:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8005e7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fe fa72 	bl	8004366 <lfs_tag_isvalid>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <lfs_dir_fetchmatch+0x73c>
            return besttag;
 8005e88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e8a:	e022      	b.n	8005ed2 <lfs_dir_fetchmatch+0x782>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8005e8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fad4 	bl	800443c <lfs_tag_id>
 8005e94:	4603      	mov	r3, r0
 8005e96:	461a      	mov	r2, r3
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	8a9b      	ldrh	r3, [r3, #20]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d202      	bcs.n	8005ea6 <lfs_dir_fetchmatch+0x756>
            return LFS_ERR_NOENT;
 8005ea0:	f06f 0301 	mvn.w	r3, #1
 8005ea4:	e015      	b.n	8005ed2 <lfs_dir_fetchmatch+0x782>
        } else {
            return 0;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e013      	b.n	8005ed2 <lfs_dir_fetchmatch+0x782>
    for (int i = 0; i < 2; i++) {
 8005eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	f77f ad00 	ble.w	80058b2 <lfs_dir_fetchmatch+0x162>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	4909      	ldr	r1, [pc, #36]	; (8005ee0 <lfs_dir_fetchmatch+0x790>)
 8005ebc:	9101      	str	r1, [sp, #4]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	f240 5235 	movw	r2, #1333	; 0x535
 8005ec6:	4907      	ldr	r1, [pc, #28]	; (8005ee4 <lfs_dir_fetchmatch+0x794>)
 8005ec8:	4807      	ldr	r0, [pc, #28]	; (8005ee8 <lfs_dir_fetchmatch+0x798>)
 8005eca:	f004 fecf 	bl	800ac6c <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8005ece:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3784      	adds	r7, #132	; 0x84
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eda:	bf00      	nop
 8005edc:	7ffffc00 	.word	0x7ffffc00
 8005ee0:	0800bc4c 	.word	0x0800bc4c
 8005ee4:	0800bb58 	.word	0x0800bb58
 8005ee8:	0800bc58 	.word	0x0800bc58

08005eec <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af04      	add	r7, sp, #16
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8005ef8:	2300      	movs	r3, #0
 8005efa:	9303      	str	r3, [sp, #12]
 8005efc:	2300      	movs	r3, #0
 8005efe:	9302      	str	r3, [sp, #8]
 8005f00:	2300      	movs	r3, #0
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff fc1c 	bl	8005750 <lfs_dir_fetchmatch>
 8005f18:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	; 0x28
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8005f30:	f107 0310 	add.w	r3, r7, #16
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <lfs_dir_getgstate+0x5c>)
 8005f38:	4a12      	ldr	r2, [pc, #72]	; (8005f84 <lfs_dir_getgstate+0x60>)
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7fe fed5 	bl	8004cec <lfs_dir_get>
 8005f42:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da05      	bge.n	8005f56 <lfs_dir_getgstate+0x32>
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f113 0f02 	cmn.w	r3, #2
 8005f50:	d001      	beq.n	8005f56 <lfs_dir_getgstate+0x32>
        return res;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	e00f      	b.n	8005f76 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	f113 0f02 	cmn.w	r3, #2
 8005f5c:	d00a      	beq.n	8005f74 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8005f5e:	f107 0310 	add.w	r3, r7, #16
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fe fb46 	bl	80045f4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8005f68:	f107 0310 	add.w	r3, r7, #16
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fe fa95 	bl	800449e <lfs_gstate_xor>
    }

    return 0;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	7ff0000c 	.word	0x7ff0000c
 8005f84:	7ff00000 	.word	0x7ff00000

08005f88 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8005f88:	b590      	push	{r4, r7, lr}
 8005f8a:	b08f      	sub	sp, #60	; 0x3c
 8005f8c:	af04      	add	r7, sp, #16
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	689c      	ldr	r4, [r3, #8]
 8005fa6:	68b8      	ldr	r0, [r7, #8]
 8005fa8:	f7fe fa58 	bl	800445c <lfs_tag_size>
 8005fac:	4603      	mov	r3, r0
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7fd fcd7 	bl	8003964 <lfs_min>
 8005fb6:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8005fb8:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8005fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fc4:	6849      	ldr	r1, [r1, #4]
 8005fc6:	69b8      	ldr	r0, [r7, #24]
 8005fc8:	9003      	str	r0, [sp, #12]
 8005fca:	9102      	str	r1, [sp, #8]
 8005fcc:	9201      	str	r2, [sp, #4]
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	4622      	mov	r2, r4
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	6a38      	ldr	r0, [r7, #32]
 8005fd8:	f7fd fee4 	bl	8003da4 <lfs_bd_cmp>
 8005fdc:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <lfs_dir_find_match+0x60>
        return res;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	e014      	b.n	8006012 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	689c      	ldr	r4, [r3, #8]
 8005fec:	68b8      	ldr	r0, [r7, #8]
 8005fee:	f7fe fa35 	bl	800445c <lfs_tag_size>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	429c      	cmp	r4, r3
 8005ff6:	d00b      	beq.n	8006010 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	689c      	ldr	r4, [r3, #8]
 8005ffc:	68b8      	ldr	r0, [r7, #8]
 8005ffe:	f7fe fa2d 	bl	800445c <lfs_tag_size>
 8006002:	4603      	mov	r3, r0
 8006004:	429c      	cmp	r4, r3
 8006006:	d201      	bcs.n	800600c <lfs_dir_find_match+0x84>
 8006008:	2301      	movs	r3, #1
 800600a:	e002      	b.n	8006012 <lfs_dir_find_match+0x8a>
 800600c:	2302      	movs	r3, #2
 800600e:	e000      	b.n	8006012 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	372c      	adds	r7, #44	; 0x2c
 8006016:	46bd      	mov	sp, r7
 8006018:	bd90      	pop	{r4, r7, pc}
	...

0800601c <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b093      	sub	sp, #76	; 0x4c
 8006020:	af04      	add	r7, sp, #16
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <lfs_dir_find+0x22>
        *id = 0x3ff;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800603c:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800603e:	4b6e      	ldr	r3, [pc, #440]	; (80061f8 <lfs_dir_find+0x1dc>)
 8006040:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1a      	ldr	r2, [r3, #32]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8006052:	496a      	ldr	r1, [pc, #424]	; (80061fc <lfs_dir_find+0x1e0>)
 8006054:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006056:	f004 fe9c 	bl	800ad92 <strspn>
 800605a:	4602      	mov	r2, r0
 800605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605e:	4413      	add	r3, r2
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8006062:	4966      	ldr	r1, [pc, #408]	; (80061fc <lfs_dir_find+0x1e0>)
 8006064:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006066:	f004 fe83 	bl	800ad70 <strcspn>
 800606a:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	2b01      	cmp	r3, #1
 8006070:	d105      	bne.n	800607e <lfs_dir_find+0x62>
 8006072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006074:	781a      	ldrb	r2, [r3, #0]
 8006076:	4b62      	ldr	r3, [pc, #392]	; (8006200 <lfs_dir_find+0x1e4>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d00a      	beq.n	8006094 <lfs_dir_find+0x78>
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	2b02      	cmp	r3, #2
 8006082:	d10c      	bne.n	800609e <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8006084:	2202      	movs	r2, #2
 8006086:	495f      	ldr	r1, [pc, #380]	; (8006204 <lfs_dir_find+0x1e8>)
 8006088:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800608a:	f004 fe4c 	bl	800ad26 <memcmp>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d104      	bne.n	800609e <lfs_dir_find+0x82>
            name += namelen;
 8006094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	4413      	add	r3, r2
 800609a:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800609c:	e7d9      	b.n	8006052 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800609e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	4413      	add	r3, r2
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 80060a6:	2301      	movs	r3, #1
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 80060aa:	4954      	ldr	r1, [pc, #336]	; (80061fc <lfs_dir_find+0x1e0>)
 80060ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060ae:	f004 fe70 	bl	800ad92 <strspn>
 80060b2:	4602      	mov	r2, r0
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	4413      	add	r3, r2
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 80060ba:	4950      	ldr	r1, [pc, #320]	; (80061fc <lfs_dir_find+0x1e0>)
 80060bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060be:	f004 fe57 	bl	800ad70 <strcspn>
 80060c2:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01d      	beq.n	8006106 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d112      	bne.n	80060f6 <lfs_dir_find+0xda>
 80060d0:	2202      	movs	r2, #2
 80060d2:	494c      	ldr	r1, [pc, #304]	; (8006204 <lfs_dir_find+0x1e8>)
 80060d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060d6:	f004 fe26 	bl	800ad26 <memcmp>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <lfs_dir_find+0xda>
                depth -= 1;
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	3b01      	subs	r3, #1
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d107      	bne.n	80060fc <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 80060ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	4413      	add	r3, r2
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 80060f4:	e7ad      	b.n	8006052 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	3301      	adds	r3, #1
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 80060fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	4413      	add	r3, r2
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8006104:	e7d1      	b.n	80060aa <lfs_dir_find+0x8e>
                break;
 8006106:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8006108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <lfs_dir_find+0xf8>
            return tag;
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	e06c      	b.n	80061ee <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006118:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe f963 	bl	80043e8 <lfs_tag_type3>
 8006122:	4603      	mov	r3, r0
 8006124:	2b02      	cmp	r3, #2
 8006126:	d002      	beq.n	800612e <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8006128:	f06f 0313 	mvn.w	r3, #19
 800612c:	e05f      	b.n	80061ee <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe f983 	bl	800443c <lfs_tag_id>
 8006136:	4603      	mov	r3, r0
 8006138:	461a      	mov	r2, r3
 800613a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800613e:	429a      	cmp	r2, r3
 8006140:	d01c      	beq.n	800617c <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe f979 	bl	800443c <lfs_tag_id>
 800614a:	4603      	mov	r3, r0
 800614c:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800614e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006152:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800615a:	9200      	str	r2, [sp, #0]
 800615c:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <lfs_dir_find+0x1ec>)
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7fe fdc3 	bl	8004cec <lfs_dir_get>
 8006166:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	da01      	bge.n	8006172 <lfs_dir_find+0x156>
                return res;
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	e03d      	b.n	80061ee <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	3318      	adds	r3, #24
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe f8c1 	bl	80042fe <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8006182:	212f      	movs	r1, #47	; 0x2f
 8006184:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006186:	f004 fde6 	bl	800ad56 <strchr>
 800618a:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <lfs_dir_find+0x178>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	e000      	b.n	8006196 <lfs_dir_find+0x17a>
 8006194:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	613a      	str	r2, [r7, #16]
 800619a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800619c:	617a      	str	r2, [r7, #20]
 800619e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a0:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80061a2:	f107 0210 	add.w	r2, r7, #16
 80061a6:	9203      	str	r2, [sp, #12]
 80061a8:	4a18      	ldr	r2, [pc, #96]	; (800620c <lfs_dir_find+0x1f0>)
 80061aa:	9202      	str	r2, [sp, #8]
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80061b6:	4622      	mov	r2, r4
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff fac8 	bl	8005750 <lfs_dir_fetchmatch>
 80061c0:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	da01      	bge.n	80061cc <lfs_dir_find+0x1b0>
                return tag;
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	e010      	b.n	80061ee <lfs_dir_find+0x1d2>
            }

            if (tag) {
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80061d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	4413      	add	r3, r2
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 80061da:	e73a      	b.n	8006052 <lfs_dir_find+0x36>
            if (!dir->split) {
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	7ddb      	ldrb	r3, [r3, #23]
 80061e0:	f083 0301 	eor.w	r3, r3, #1
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0c8      	beq.n	800617c <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80061ea:	f06f 0301 	mvn.w	r3, #1
    }
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	373c      	adds	r7, #60	; 0x3c
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd90      	pop	{r4, r7, pc}
 80061f6:	bf00      	nop
 80061f8:	002ffc00 	.word	0x002ffc00
 80061fc:	0800bc98 	.word	0x0800bc98
 8006200:	0800bc9c 	.word	0x0800bc9c
 8006204:	0800bca0 	.word	0x0800bca0
 8006208:	700ffc00 	.word	0x700ffc00
 800620c:	08005f89 	.word	0x08005f89

08006210 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b08b      	sub	sp, #44	; 0x2c
 8006214:	af04      	add	r7, sp, #16
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f103 0010 	add.w	r0, r3, #16
 8006224:	68fc      	ldr	r4, [r7, #12]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	6852      	ldr	r2, [r2, #4]
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	9103      	str	r1, [sp, #12]
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	9102      	str	r1, [sp, #8]
 8006236:	9201      	str	r2, [sp, #4]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	2300      	movs	r3, #0
 800623c:	4622      	mov	r2, r4
 800623e:	4601      	mov	r1, r0
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7fd fef7 	bl	8004034 <lfs_bd_prog>
 8006246:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <lfs_dir_commitprog+0x42>
        return err;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	e010      	b.n	8006274 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4618      	mov	r0, r3
 800625c:	f004 f9bc 	bl	800a5d8 <lfs_crc>
 8006260:	4602      	mov	r2, r0
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	441a      	add	r2, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	605a      	str	r2, [r3, #4]
    return 0;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	bd90      	pop	{r4, r7, pc}

0800627c <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800627c:	b590      	push	{r4, r7, lr}
 800627e:	b08f      	sub	sp, #60	; 0x3c
 8006280:	af04      	add	r7, sp, #16
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fe f8f3 	bl	8004476 <lfs_tag_dsize>
 8006290:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	441a      	add	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d902      	bls.n	80062a8 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80062a2:	f06f 031b 	mvn.w	r3, #27
 80062a6:	e065      	b.n	8006374 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	4053      	eors	r3, r2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fd fbe8 	bl	8003a8a <lfs_tobe32>
 80062ba:	4603      	mov	r3, r0
 80062bc:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80062be:	f107 0214 	add.w	r2, r7, #20
 80062c2:	2304      	movs	r3, #4
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff ffa2 	bl	8006210 <lfs_dir_commitprog>
 80062cc:	61f8      	str	r0, [r7, #28]
    if (err) {
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <lfs_dir_commitattr+0x5c>
        return err;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	e04d      	b.n	8006374 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	db0c      	blt.n	80062f8 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	3b04      	subs	r3, #4
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff ff92 	bl	8006210 <lfs_dir_commitprog>
 80062ec:	61f8      	str	r0, [r7, #28]
        if (err) {
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d039      	beq.n	8006368 <lfs_dir_commitattr+0xec>
            return err;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	e03d      	b.n	8006374 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80062fc:	2300      	movs	r3, #0
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006300:	e02d      	b.n	800635e <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8006302:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8006304:	6a3a      	ldr	r2, [r7, #32]
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800630a:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8006314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006316:	440a      	add	r2, r1
 8006318:	2101      	movs	r1, #1
 800631a:	9103      	str	r1, [sp, #12]
 800631c:	f107 0113 	add.w	r1, r7, #19
 8006320:	9102      	str	r1, [sp, #8]
 8006322:	9201      	str	r2, [sp, #4]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	4623      	mov	r3, r4
 8006328:	4602      	mov	r2, r0
 800632a:	2100      	movs	r1, #0
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7fd fbf5 	bl	8003b1c <lfs_bd_read>
 8006332:	61f8      	str	r0, [r7, #28]
            if (err) {
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <lfs_dir_commitattr+0xc2>
                return err;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	e01a      	b.n	8006374 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800633e:	f107 0213 	add.w	r2, r7, #19
 8006342:	2301      	movs	r3, #1
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff ff62 	bl	8006210 <lfs_dir_commitprog>
 800634c:	61f8      	str	r0, [r7, #28]
            if (err) {
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <lfs_dir_commitattr+0xdc>
                return err;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	e00d      	b.n	8006374 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	3301      	adds	r3, #1
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	3b04      	subs	r3, #4
 8006362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006364:	429a      	cmp	r2, r3
 8006366:	d3cc      	bcc.n	8006302 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	609a      	str	r2, [r3, #8]
    return 0;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	372c      	adds	r7, #44	; 0x2c
 8006378:	46bd      	mov	sp, r7
 800637a:	bd90      	pop	{r4, r7, pc}

0800637c <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800637c:	b590      	push	{r4, r7, lr}
 800637e:	b097      	sub	sp, #92	; 0x5c
 8006380:	af04      	add	r7, sp, #16
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800638a:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006392:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8006394:	4619      	mov	r1, r3
 8006396:	4610      	mov	r0, r2
 8006398:	f7fd fae4 	bl	8003964 <lfs_min>
 800639c:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a2:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f7fd fb01 	bl	80039ae <lfs_alignup>
 80063ac:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80063b6:	e0fe      	b.n	80065b6 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	3b04      	subs	r3, #4
 80063c2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fd facc 	bl	8003964 <lfs_min>
 80063cc:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	4413      	add	r3, r2
        lfs_off_t noff = (
 80063d4:	3304      	adds	r3, #4
 80063d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 80063d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	429a      	cmp	r2, r3
 80063de:	d206      	bcs.n	80063ee <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	3b14      	subs	r3, #20
 80063e4:	4619      	mov	r1, r3
 80063e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063e8:	f7fd fabc 	bl	8003964 <lfs_min>
 80063ec:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = -1;
 80063ee:	23ff      	movs	r3, #255	; 0xff
 80063f0:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80063f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d35f      	bcc.n	80064ba <lfs_dir_commitcrc+0x13e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800640a:	429a      	cmp	r2, r3
 800640c:	d855      	bhi.n	80064ba <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800640e:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006414:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2201      	movs	r2, #1
 800641c:	9203      	str	r2, [sp, #12]
 800641e:	f107 021b 	add.w	r2, r7, #27
 8006422:	9202      	str	r2, [sp, #8]
 8006424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006426:	9201      	str	r2, [sp, #4]
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	4603      	mov	r3, r0
 800642c:	460a      	mov	r2, r1
 800642e:	2100      	movs	r1, #0
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7fd fb73 	bl	8003b1c <lfs_bd_read>
 8006436:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <lfs_dir_commitcrc+0xce>
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006444:	d001      	beq.n	800644a <lfs_dir_commitcrc+0xce>
                return err;
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	e101      	b.n	800664e <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800644e:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006456:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8006458:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800645e:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	f107 0108 	add.w	r1, r7, #8
 800646a:	3104      	adds	r1, #4
 800646c:	9103      	str	r1, [sp, #12]
 800646e:	9202      	str	r2, [sp, #8]
 8006470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006472:	9201      	str	r2, [sp, #4]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	4623      	mov	r3, r4
 8006478:	4602      	mov	r2, r0
 800647a:	2100      	movs	r1, #0
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7fd fce2 	bl	8003e46 <lfs_bd_crc>
 8006482:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <lfs_dir_commitcrc+0x11a>
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006490:	d001      	beq.n	8006496 <lfs_dir_commitcrc+0x11a>
                    return err;
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	e0db      	b.n	800664e <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 8006496:	f107 0308 	add.w	r3, r7, #8
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe f902 	bl	80046a4 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 80064a0:	f107 0308 	add.w	r3, r7, #8
 80064a4:	4a6c      	ldr	r2, [pc, #432]	; (8006658 <lfs_dir_commitcrc+0x2dc>)
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff fee7 	bl	800627c <lfs_dir_commitattr>
 80064ae:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <lfs_dir_commitcrc+0x13e>
                    return err;
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	e0c9      	b.n	800664e <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 80064ba:	7efb      	ldrb	r3, [r7, #27]
 80064bc:	43db      	mvns	r3, r3
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	09db      	lsrs	r3, r3, #7
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c8:	051a      	lsls	r2, r3, #20
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064d0:	1acb      	subs	r3, r1, r3
 80064d2:	3b04      	subs	r3, #4
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 80064da:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	4053      	eors	r3, r2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fd face 	bl	8003a8a <lfs_tobe32>
 80064ee:	4603      	mov	r3, r0
 80064f0:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f107 0110 	add.w	r1, r7, #16
 80064fa:	2204      	movs	r2, #4
 80064fc:	4618      	mov	r0, r3
 80064fe:	f004 f86b 	bl	800a5d8 <lfs_crc>
 8006502:	4602      	mov	r2, r0
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	4618      	mov	r0, r3
 800650e:	f7fd faa4 	bl	8003a5a <lfs_tole32>
 8006512:	4603      	mov	r3, r0
 8006514:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f103 0010 	add.w	r0, r3, #16
 800651c:	687c      	ldr	r4, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	6852      	ldr	r2, [r2, #4]
 8006526:	2108      	movs	r1, #8
 8006528:	9103      	str	r1, [sp, #12]
 800652a:	f107 0110 	add.w	r1, r7, #16
 800652e:	9102      	str	r1, [sp, #8]
 8006530:	9201      	str	r2, [sp, #4]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	4622      	mov	r2, r4
 8006538:	4601      	mov	r1, r0
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fd fd7a 	bl	8004034 <lfs_bd_prog>
 8006540:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <lfs_dir_commitcrc+0x1d0>
            return err;
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	e080      	b.n	800664e <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800654c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	3304      	adds	r3, #4
 8006558:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006564:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8006566:	7efb      	ldrb	r3, [r7, #27]
 8006568:	43db      	mvns	r3, r3
 800656a:	061b      	lsls	r3, r3, #24
 800656c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	405a      	eors	r2, r3
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800657e:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8006580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	429a      	cmp	r2, r3
 8006586:	d208      	bcs.n	800659a <lfs_dir_commitcrc+0x21e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	4413      	add	r3, r2
 8006594:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006596:	429a      	cmp	r2, r3
 8006598:	d30d      	bcc.n	80065b6 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f103 0110 	add.w	r1, r3, #16
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	2300      	movs	r3, #0
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7fd fd11 	bl	8003fcc <lfs_bd_sync>
 80065aa:	6238      	str	r0, [r7, #32]
            if (err) {
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <lfs_dir_commitcrc+0x23a>
                return err;
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	e04b      	b.n	800664e <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065bc:	429a      	cmp	r2, r3
 80065be:	f63f aefb 	bhi.w	80063b8 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 80065c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065cc:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d2:	1d1c      	adds	r4, r3, #4
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065dc:	1a8a      	subs	r2, r1, r2
 80065de:	f107 011c 	add.w	r1, r7, #28
 80065e2:	9103      	str	r1, [sp, #12]
 80065e4:	9202      	str	r2, [sp, #8]
 80065e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065e8:	9201      	str	r2, [sp, #4]
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	4623      	mov	r3, r4
 80065ee:	4602      	mov	r2, r0
 80065f0:	2100      	movs	r1, #0
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fd fc27 	bl	8003e46 <lfs_bd_crc>
 80065f8:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <lfs_dir_commitcrc+0x288>
        return err;
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	e024      	b.n	800664e <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006608:	429a      	cmp	r2, r3
 800660a:	d002      	beq.n	8006612 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 800660c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006610:	e01d      	b.n	800664e <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f107 021c 	add.w	r2, r7, #28
 800661c:	9203      	str	r2, [sp, #12]
 800661e:	2204      	movs	r2, #4
 8006620:	9202      	str	r2, [sp, #8]
 8006622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006624:	9201      	str	r2, [sp, #4]
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	2304      	movs	r3, #4
 800662a:	460a      	mov	r2, r1
 800662c:	2100      	movs	r1, #0
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fd fc09 	bl	8003e46 <lfs_bd_crc>
 8006634:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <lfs_dir_commitcrc+0x2c4>
        return err;
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	e006      	b.n	800664e <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8006646:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800664a:	e000      	b.n	800664e <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	374c      	adds	r7, #76	; 0x4c
 8006652:	46bd      	mov	sp, r7
 8006654:	bd90      	pop	{r4, r7, pc}
 8006656:	bf00      	nop
 8006658:	5ffffc08 	.word	0x5ffffc08

0800665c <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b08a      	sub	sp, #40	; 0x28
 8006660:	af04      	add	r7, sp, #16
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	e016      	b.n	800669a <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	3301      	adds	r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	bfb8      	it	lt
 8006678:	425b      	neglt	r3, r3
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	4413      	add	r3, r2
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fe f998 	bl	80049b8 <lfs_alloc>
 8006688:	60f8      	str	r0, [r7, #12]
        if (err) {
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <lfs_dir_alloc+0x38>
            return err;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	e058      	b.n	8006746 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3301      	adds	r3, #1
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b01      	cmp	r3, #1
 800669e:	dde5      	ble.n	800666c <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2200      	movs	r2, #0
 80066a4:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80066b0:	2004      	movs	r0, #4
 80066b2:	9003      	str	r0, [sp, #12]
 80066b4:	9202      	str	r2, [sp, #8]
 80066b6:	2200      	movs	r2, #0
 80066b8:	9201      	str	r2, [sp, #4]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	2304      	movs	r3, #4
 80066be:	460a      	mov	r2, r1
 80066c0:	2100      	movs	r1, #0
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fd fa2a 	bl	8003b1c <lfs_bd_read>
 80066c8:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fd f9b8 	bl	8003a44 <lfs_fromle32>
 80066d4:	4602      	mov	r2, r0
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <lfs_dir_alloc+0x90>
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80066e6:	d001      	beq.n	80066ec <lfs_dir_alloc+0x90>
        return err;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	e02c      	b.n	8006746 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	dd0e      	ble.n	8006714 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	3301      	adds	r3, #1
 8006702:	f043 0301 	orr.w	r3, r3, #1
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fd f950 	bl	80039ae <lfs_alignup>
 800670e:	4602      	mov	r2, r0
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2204      	movs	r2, #4
 8006718:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006720:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2200      	movs	r2, #0
 8006726:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800672e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006736:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2200      	movs	r2, #0
 8006742:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800674e:	b580      	push	{r7, lr}
 8006750:	b092      	sub	sp, #72	; 0x48
 8006752:	af04      	add	r7, sp, #16
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	607a      	str	r2, [r7, #4]
 800675a:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800675c:	f107 0310 	add.w	r3, r7, #16
 8006760:	4619      	mov	r1, r3
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f7ff ff7a 	bl	800665c <lfs_dir_alloc>
 8006768:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800676a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <lfs_dir_split+0x26>
        return err;
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006772:	e03c      	b.n	80067ee <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	7ddb      	ldrb	r3, [r3, #23]
 8006778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8006788:	f107 0110 	add.w	r1, r7, #16
 800678c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006790:	9302      	str	r3, [sp, #8]
 8006792:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f879 	bl	8006898 <lfs_dir_compact>
 80067a6:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da01      	bge.n	80067b2 <lfs_dir_split+0x64>
        return res;
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	e01d      	b.n	80067ee <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2201      	movs	r2, #1
 80067c2:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3320      	adds	r3, #32
 80067ca:	4619      	mov	r1, r3
 80067cc:	4610      	mov	r0, r2
 80067ce:	f7fd fd3f 	bl	8004250 <lfs_pair_cmp>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d109      	bne.n	80067ec <lfs_dir_split+0x9e>
 80067d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d105      	bne.n	80067ec <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3738      	adds	r7, #56	; 0x38
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b086      	sub	sp, #24
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8006806:	68b8      	ldr	r0, [r7, #8]
 8006808:	f7fd fe35 	bl	8004476 <lfs_tag_dsize>
 800680c:	4602      	mov	r2, r0
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	441a      	add	r2, r3
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	601a      	str	r2, [r3, #0]
    return 0;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8006822:	b580      	push	{r7, lr}
 8006824:	b086      	sub	sp, #24
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	6859      	ldr	r1, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	f7ff fd1d 	bl	800627c <lfs_dir_commitattr>
 8006842:	4603      	mov	r3, r0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800685c:	2b00      	cmp	r3, #0
 800685e:	dd11      	ble.n	8006884 <lfs_dir_needsrelocation+0x38>
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	3301      	adds	r3, #1
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800686a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800686c:	3201      	adds	r2, #1
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	fbb3 f1f2 	udiv	r1, r3, r2
 8006876:	fb01 f202 	mul.w	r2, r1, r2
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <lfs_dir_needsrelocation+0x38>
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <lfs_dir_needsrelocation+0x3a>
 8006884:	2300      	movs	r3, #0
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	b2db      	uxtb	r3, r3
}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b0a4      	sub	sp, #144	; 0x90
 800689c:	af0a      	add	r7, sp, #40	; 0x28
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80068a6:	2300      	movs	r3, #0
 80068a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff ffcc 	bl	800684c <lfs_dir_needsrelocation>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80068c4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00e      	beq.n	80068ea <lfs_dir_compact+0x52>
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2200      	movs	r2, #0
 80068d0:	657a      	str	r2, [r7, #84]	; 0x54
 80068d2:	2201      	movs	r2, #1
 80068d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80068d6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80068da:	4611      	mov	r1, r2
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fd fcb7 	bl	8004250 <lfs_pair_cmp>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f040 8155 	bne.w	8006b94 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f0:	2300      	movs	r3, #0
 80068f2:	643b      	str	r3, [r7, #64]	; 0x40
 80068f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068f8:	647b      	str	r3, [r7, #68]	; 0x44
 80068fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006900:	2300      	movs	r3, #0
 8006902:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <lfs_dir_compact+0x80>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006914:	3b08      	subs	r3, #8
 8006916:	e003      	b.n	8006920 <lfs_dir_compact+0x88>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8006920:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4619      	mov	r1, r3
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7fd fc2f 	bl	800418c <lfs_bd_erase>
 800692e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8006930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d006      	beq.n	8006944 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8006936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006938:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800693c:	f000 812c 	beq.w	8006b98 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8006940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006942:	e188      	b.n	8006c56 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	4618      	mov	r0, r3
 800694a:	f7fd f886 	bl	8003a5a <lfs_tole32>
 800694e:	4602      	mov	r2, r0
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800695a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800695e:	2304      	movs	r3, #4
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7ff fc55 	bl	8006210 <lfs_dir_commitprog>
 8006966:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	4618      	mov	r0, r3
 800696e:	f7fd f869 	bl	8003a44 <lfs_fromle32>
 8006972:	4602      	mov	r2, r0
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	609a      	str	r2, [r3, #8]
            if (err) {
 8006978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d006      	beq.n	800698c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800697e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006980:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006984:	f000 810a 	beq.w	8006b9c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8006988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800698a:	e164      	b.n	8006c56 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800698c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006990:	425b      	negs	r3, r3
 8006992:	b29b      	uxth	r3, r3
 8006994:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	637a      	str	r2, [r7, #52]	; 0x34
 800699a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800699e:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80069a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80069a4:	9208      	str	r2, [sp, #32]
 80069a6:	4aae      	ldr	r2, [pc, #696]	; (8006c60 <lfs_dir_compact+0x3c8>)
 80069a8:	9207      	str	r2, [sp, #28]
 80069aa:	9306      	str	r3, [sp, #24]
 80069ac:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80069b0:	9305      	str	r3, [sp, #20]
 80069b2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80069b6:	9304      	str	r3, [sp, #16]
 80069b8:	2300      	movs	r3, #0
 80069ba:	9303      	str	r3, [sp, #12]
 80069bc:	4ba9      	ldr	r3, [pc, #676]	; (8006c64 <lfs_dir_compact+0x3cc>)
 80069be:	9302      	str	r3, [sp, #8]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069cc:	2200      	movs	r2, #0
 80069ce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f7fe fadd 	bl	8004f90 <lfs_dir_traverse>
 80069d6:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80069d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d006      	beq.n	80069ec <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80069de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069e0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80069e4:	f000 80dc 	beq.w	8006ba0 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80069e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ea:	e134      	b.n	8006c56 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	3318      	adds	r3, #24
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fd fc12 	bl	800421a <lfs_pair_isnull>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f083 0301 	eor.w	r3, r3, #1
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d022      	beq.n	8006a48 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	3318      	adds	r3, #24
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fd fc93 	bl	8004332 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	7ddb      	ldrb	r3, [r3, #23]
 8006a10:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006a14:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8006a16:	4a94      	ldr	r2, [pc, #592]	; (8006c68 <lfs_dir_compact+0x3d0>)
 8006a18:	431a      	orrs	r2, r3
                        dir->tail);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8006a1e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f7ff fc2a 	bl	800627c <lfs_dir_commitattr>
 8006a28:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	3318      	adds	r3, #24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fd fc65 	bl	80042fe <lfs_pair_fromle32>
                if (err) {
 8006a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d006      	beq.n	8006a48 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8006a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a3c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006a40:	f000 80b0 	beq.w	8006ba4 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8006a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a46:	e106      	b.n	8006c56 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8006a48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	605a      	str	r2, [r3, #4]
 8006a52:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8006a54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a58:	f083 0301 	eor.w	r3, r3, #1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d011      	beq.n	8006a86 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fd fd15 	bl	800449e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a7e:	4611      	mov	r1, r2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fd fd0c 	bl	800449e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006a8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fd fd03 	bl	800449e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006a9e:	f023 0303 	bic.w	r3, r3, #3
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8006aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f7ff fa39 	bl	8005f24 <lfs_dir_getgstate>
 8006ab2:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8006ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <lfs_dir_compact+0x226>
                return err;
 8006aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006abc:	e0cb      	b.n	8006c56 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8006abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fd fd10 	bl	80044e8 <lfs_gstate_iszero>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f083 0301 	eor.w	r3, r3, #1
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d016      	beq.n	8006b02 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8006ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fd fdab 	bl	8004634 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8006ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ae2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006ae6:	4a61      	ldr	r2, [pc, #388]	; (8006c6c <lfs_dir_compact+0x3d4>)
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f7ff fbc7 	bl	800627c <lfs_dir_commitattr>
 8006aee:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8006af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8006af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006af8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006afc:	d054      	beq.n	8006ba8 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8006afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b00:	e0a9      	b.n	8006c56 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8006b02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b06:	4619      	mov	r1, r3
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff fc37 	bl	800637c <lfs_dir_commitcrc>
 8006b0e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8006b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8006b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b18:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006b1c:	d046      	beq.n	8006bac <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8006b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b20:	e099      	b.n	8006c56 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8006b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b28:	6992      	ldr	r2, [r2, #24]
 8006b2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b2e:	fb01 f202 	mul.w	r2, r1, r2
 8006b32:	1a9b      	subs	r3, r3, r2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d006      	beq.n	8006b46 <lfs_dir_compact+0x2ae>
 8006b38:	4b4d      	ldr	r3, [pc, #308]	; (8006c70 <lfs_dir_compact+0x3d8>)
 8006b3a:	4a4e      	ldr	r2, [pc, #312]	; (8006c74 <lfs_dir_compact+0x3dc>)
 8006b3c:	f240 71e2 	movw	r1, #2018	; 0x7e2
 8006b40:	484d      	ldr	r0, [pc, #308]	; (8006c78 <lfs_dir_compact+0x3e0>)
 8006b42:	f003 fef7 	bl	800a934 <__assert_func>
            lfs_pair_swap(dir->pair);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fd fb51 	bl	80041f0 <lfs_pair_swap>
            dir->count = end - begin;
 8006b4e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8006b52:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8006b5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8006b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3348      	adds	r3, #72	; 0x48
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	605a      	str	r2, [r3, #4]
 8006b74:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8006b76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b7a:	f083 0301 	eor.w	r3, r3, #1
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d065      	beq.n	8006c50 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	333c      	adds	r3, #60	; 0x3c
 8006b8a:	3230      	adds	r2, #48	; 0x30
 8006b8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8006b92:	e05d      	b.n	8006c50 <lfs_dir_compact+0x3b8>
        goto relocate;
 8006b94:	bf00      	nop
 8006b96:	e00a      	b.n	8006bae <lfs_dir_compact+0x316>
                    goto relocate;
 8006b98:	bf00      	nop
 8006b9a:	e008      	b.n	8006bae <lfs_dir_compact+0x316>
                    goto relocate;
 8006b9c:	bf00      	nop
 8006b9e:	e006      	b.n	8006bae <lfs_dir_compact+0x316>
                    goto relocate;
 8006ba0:	bf00      	nop
 8006ba2:	e004      	b.n	8006bae <lfs_dir_compact+0x316>
                        goto relocate;
 8006ba4:	bf00      	nop
 8006ba6:	e002      	b.n	8006bae <lfs_dir_compact+0x316>
                        goto relocate;
 8006ba8:	bf00      	nop
 8006baa:	e000      	b.n	8006bae <lfs_dir_compact+0x316>
                    goto relocate;
 8006bac:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3310      	adds	r3, #16
 8006bb8:	4619      	mov	r1, r3
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7fc ff88 	bl	8003ad0 <lfs_cache_drop>
        if (!tired) {
 8006bc0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006bc4:	f083 0301 	eor.w	r3, r3, #1
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	4a2a      	ldr	r2, [pc, #168]	; (8006c7c <lfs_dir_compact+0x3e4>)
 8006bd4:	9200      	str	r2, [sp, #0]
 8006bd6:	f240 72f4 	movw	r2, #2036	; 0x7f4
 8006bda:	4927      	ldr	r1, [pc, #156]	; (8006c78 <lfs_dir_compact+0x3e0>)
 8006bdc:	4828      	ldr	r0, [pc, #160]	; (8006c80 <lfs_dir_compact+0x3e8>)
 8006bde:	f004 f845 	bl	800ac6c <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2200      	movs	r2, #0
 8006be6:	617a      	str	r2, [r7, #20]
 8006be8:	2201      	movs	r2, #1
 8006bea:	61ba      	str	r2, [r7, #24]
 8006bec:	f107 0214 	add.w	r2, r7, #20
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fd fb2c 	bl	8004250 <lfs_pair_cmp>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10c      	bne.n	8006c18 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	4a1e      	ldr	r2, [pc, #120]	; (8006c7c <lfs_dir_compact+0x3e4>)
 8006c04:	9200      	str	r2, [sp, #0]
 8006c06:	f240 72f9 	movw	r2, #2041	; 0x7f9
 8006c0a:	491b      	ldr	r1, [pc, #108]	; (8006c78 <lfs_dir_compact+0x3e0>)
 8006c0c:	481d      	ldr	r0, [pc, #116]	; (8006c84 <lfs_dir_compact+0x3ec>)
 8006c0e:	f004 f82d 	bl	800ac6c <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8006c12:	f06f 031b 	mvn.w	r3, #27
 8006c16:	e01e      	b.n	8006c56 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7fd feca 	bl	80049b8 <lfs_alloc>
 8006c24:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8006c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00c      	beq.n	8006c46 <lfs_dir_compact+0x3ae>
 8006c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c2e:	f113 0f1c 	cmn.w	r3, #28
 8006c32:	d106      	bne.n	8006c42 <lfs_dir_compact+0x3aa>
 8006c34:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006c38:	f083 0301 	eor.w	r3, r3, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <lfs_dir_compact+0x3ae>
            return err;
 8006c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c44:	e007      	b.n	8006c56 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 8006c4c:	bf00      	nop
    while (true) {
 8006c4e:	e64c      	b.n	80068ea <lfs_dir_compact+0x52>
        break;
 8006c50:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8006c52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3768      	adds	r7, #104	; 0x68
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	08006823 	.word	0x08006823
 8006c64:	400ffc00 	.word	0x400ffc00
 8006c68:	000ffc08 	.word	0x000ffc08
 8006c6c:	7ffffc0c 	.word	0x7ffffc0c
 8006c70:	0800bca4 	.word	0x0800bca4
 8006c74:	0800c608 	.word	0x0800c608
 8006c78:	0800bb58 	.word	0x0800bb58
 8006c7c:	0800bc4c 	.word	0x0800bc4c
 8006c80:	0800bccc 	.word	0x0800bccc
 8006c84:	0800bcf0 	.word	0x0800bcf0

08006c88 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8006c88:	b590      	push	{r4, r7, lr}
 8006c8a:	b097      	sub	sp, #92	; 0x5c
 8006c8c:	af0a      	add	r7, sp, #40	; 0x28
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8006c96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8006c9c:	e058      	b.n	8006d50 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca8:	b292      	uxth	r2, r2
 8006caa:	4252      	negs	r2, r2
 8006cac:	b292      	uxth	r2, r2
 8006cae:	b212      	sxth	r2, r2
 8006cb0:	f107 0118 	add.w	r1, r7, #24
 8006cb4:	9108      	str	r1, [sp, #32]
 8006cb6:	4979      	ldr	r1, [pc, #484]	; (8006e9c <lfs_dir_splittingcompact+0x214>)
 8006cb8:	9107      	str	r1, [sp, #28]
 8006cba:	9206      	str	r2, [sp, #24]
 8006cbc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006cc0:	9205      	str	r2, [sp, #20]
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	9303      	str	r3, [sp, #12]
 8006cc8:	4b75      	ldr	r3, [pc, #468]	; (8006ea0 <lfs_dir_splittingcompact+0x218>)
 8006cca:	9302      	str	r3, [sp, #8]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cd8:	2200      	movs	r2, #0
 8006cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7fe f957 	bl	8004f90 <lfs_dir_traverse>
 8006ce2:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <lfs_dir_splittingcompact+0x66>
                return err;
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	e0d1      	b.n	8006e92 <lfs_dir_splittingcompact+0x20a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8006cee:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2bfe      	cmp	r3, #254	; 0xfe
 8006cf8:	d822      	bhi.n	8006d40 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cfe:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8006d00:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d004      	beq.n	8006d18 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8006d14:	085b      	lsrs	r3, r3, #1
 8006d16:	e003      	b.n	8006d20 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d1c:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8006d1e:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d24:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(
 8006d26:	4611      	mov	r1, r2
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fc fe40 	bl	80039ae <lfs_alignup>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4619      	mov	r1, r3
 8006d32:	4620      	mov	r0, r4
 8006d34:	f7fc fe16 	bl	8003964 <lfs_min>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d20e      	bcs.n	8006d5e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8006d40:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	085b      	lsrs	r3, r3, #1
 8006d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d4c:	4413      	add	r3, r2
 8006d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8006d50:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d8a0      	bhi.n	8006c9e <lfs_dir_splittingcompact+0x16>
 8006d5c:	e000      	b.n	8006d60 <lfs_dir_splittingcompact+0xd8>
                break;
 8006d5e:	bf00      	nop
        }

        if (split == begin) {
 8006d60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d02d      	beq.n	8006dc6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006d72:	9202      	str	r2, [sp, #8]
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	68b9      	ldr	r1, [r7, #8]
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f7ff fce4 	bl	800674e <lfs_dir_split>
 8006d86:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d005      	beq.n	8006d9a <lfs_dir_splittingcompact+0x112>
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	f113 0f1c 	cmn.w	r3, #28
 8006d94:	d001      	beq.n	8006d9a <lfs_dir_splittingcompact+0x112>
            return err;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	e07b      	b.n	8006e92 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00e      	beq.n	8006dbe <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	493e      	ldr	r1, [pc, #248]	; (8006ea4 <lfs_dir_splittingcompact+0x21c>)
 8006daa:	9101      	str	r1, [sp, #4]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	4613      	mov	r3, r2
 8006db0:	f640 024c 	movw	r2, #2124	; 0x84c
 8006db4:	493c      	ldr	r1, [pc, #240]	; (8006ea8 <lfs_dir_splittingcompact+0x220>)
 8006db6:	483d      	ldr	r0, [pc, #244]	; (8006eac <lfs_dir_splittingcompact+0x224>)
 8006db8:	f003 ff58 	bl	800ac6c <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8006dbc:	e004      	b.n	8006dc8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8006dc4:	e767      	b.n	8006c96 <lfs_dir_splittingcompact+0xe>
            break;
 8006dc6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff fd3e 	bl	800684c <lfs_dir_needsrelocation>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d04e      	beq.n	8006e74 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	613a      	str	r2, [r7, #16]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	617a      	str	r2, [r7, #20]
 8006de0:	f107 0210 	add.w	r2, r7, #16
 8006de4:	4611      	mov	r1, r2
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fd fa32 	bl	8004250 <lfs_pair_cmp>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d140      	bne.n	8006e74 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f003 fad4 	bl	800a3a0 <lfs_fs_rawsize>
 8006df8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da01      	bge.n	8006e04 <lfs_dir_splittingcompact+0x17c>
            return size;
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	e046      	b.n	8006e92 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	085a      	lsrs	r2, r3, #1
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d930      	bls.n	8006e74 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	4a23      	ldr	r2, [pc, #140]	; (8006ea4 <lfs_dir_splittingcompact+0x21c>)
 8006e18:	9200      	str	r2, [sp, #0]
 8006e1a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006e1e:	4922      	ldr	r1, [pc, #136]	; (8006ea8 <lfs_dir_splittingcompact+0x220>)
 8006e20:	4823      	ldr	r0, [pc, #140]	; (8006eb0 <lfs_dir_splittingcompact+0x228>)
 8006e22:	f003 ff23 	bl	800ac6c <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8006e26:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e2a:	9302      	str	r3, [sp, #8]
 8006e2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f7ff fc86 	bl	800674e <lfs_dir_split>
 8006e42:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <lfs_dir_splittingcompact+0x1ce>
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f113 0f1c 	cmn.w	r3, #28
 8006e50:	d001      	beq.n	8006e56 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	e01d      	b.n	8006e92 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d007      	beq.n	8006e6c <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8006e5c:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <lfs_dir_splittingcompact+0x21c>)
 8006e5e:	f640 026a 	movw	r2, #2154	; 0x86a
 8006e62:	4911      	ldr	r1, [pc, #68]	; (8006ea8 <lfs_dir_splittingcompact+0x220>)
 8006e64:	4813      	ldr	r0, [pc, #76]	; (8006eb4 <lfs_dir_splittingcompact+0x22c>)
 8006e66:	f003 ff01 	bl	800ac6c <iprintf>
 8006e6a:	e003      	b.n	8006e74 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8006e6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e70:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8006e74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e78:	9302      	str	r3, [sp, #8]
 8006e7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff fd04 	bl	8006898 <lfs_dir_compact>
 8006e90:	4603      	mov	r3, r0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3734      	adds	r7, #52	; 0x34
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd90      	pop	{r4, r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	080067f7 	.word	0x080067f7
 8006ea0:	400ffc00 	.word	0x400ffc00
 8006ea4:	0800bc4c 	.word	0x0800bc4c
 8006ea8:	0800bb58 	.word	0x0800bb58
 8006eac:	0800bd28 	.word	0x0800bd28
 8006eb0:	0800bd58 	.word	0x0800bd58
 8006eb4:	0800bd88 	.word	0x0800bd88

08006eb8 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8006eb8:	b5b0      	push	{r4, r5, r7, lr}
 8006eba:	b0a6      	sub	sp, #152	; 0x98
 8006ebc:	af0a      	add	r7, sp, #40	; 0x28
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
    int state = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	667b      	str	r3, [r7, #100]	; 0x64
 8006ed4:	e06d      	b.n	8006fb2 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8006ed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	4413      	add	r3, r2
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fd fa81 	bl	80043e8 <lfs_tag_type3>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f240 4301 	movw	r3, #1025	; 0x401
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d106      	bne.n	8006f00 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	8a9b      	ldrh	r3, [r3, #20]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	829a      	strh	r2, [r3, #20]
 8006efe:	e055      	b.n	8006fac <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8006f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	4413      	add	r3, r2
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fd fa6c 	bl	80043e8 <lfs_tag_type3>
 8006f10:	4603      	mov	r3, r0
 8006f12:	461a      	mov	r2, r3
 8006f14:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d114      	bne.n	8006f46 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	8a9b      	ldrh	r3, [r3, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <lfs_dir_relocatingcommit+0x7a>
 8006f24:	4ba4      	ldr	r3, [pc, #656]	; (80071b8 <lfs_dir_relocatingcommit+0x300>)
 8006f26:	4aa5      	ldr	r2, [pc, #660]	; (80071bc <lfs_dir_relocatingcommit+0x304>)
 8006f28:	f640 0182 	movw	r1, #2178	; 0x882
 8006f2c:	48a4      	ldr	r0, [pc, #656]	; (80071c0 <lfs_dir_relocatingcommit+0x308>)
 8006f2e:	f003 fd01 	bl	800a934 <__assert_func>
            dir->count -= 1;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	8a9b      	ldrh	r3, [r3, #20]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8006f44:	e032      	b.n	8006fac <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8006f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fd fa29 	bl	80043a8 <lfs_tag_type1>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f5c:	d126      	bne.n	8006fac <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8006f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	4413      	add	r3, r2
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8006f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4413      	add	r3, r2
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8006f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	4413      	add	r3, r2
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fd fa3d 	bl	8004408 <lfs_tag_chunk>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	bf14      	ite	ne
 8006f98:	2301      	movne	r3, #1
 8006f9a:	2300      	moveq	r3, #0
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	3318      	adds	r3, #24
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fd f9a9 	bl	80042fe <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8006fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fae:	3301      	adds	r3, #1
 8006fb0:	667b      	str	r3, [r7, #100]	; 0x64
 8006fb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	db8c      	blt.n	8006ed6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8006fbc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d02b      	beq.n	800701c <lfs_dir_relocatingcommit+0x164>
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	8a9b      	ldrh	r3, [r3, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d127      	bne.n	800701c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8006fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d106      	bne.n	8006fe2 <lfs_dir_relocatingcommit+0x12a>
 8006fd4:	4b7b      	ldr	r3, [pc, #492]	; (80071c4 <lfs_dir_relocatingcommit+0x30c>)
 8006fd6:	4a79      	ldr	r2, [pc, #484]	; (80071bc <lfs_dir_relocatingcommit+0x304>)
 8006fd8:	f640 018f 	movw	r1, #2191	; 0x88f
 8006fdc:	4878      	ldr	r0, [pc, #480]	; (80071c0 <lfs_dir_relocatingcommit+0x308>)
 8006fde:	f003 fca9 	bl	800a934 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006fe8:	4619      	mov	r1, r3
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f002 fd32 	bl	8009a54 <lfs_fs_pred>
 8006ff0:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8006ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <lfs_dir_relocatingcommit+0x14c>
 8006ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ffa:	f113 0f02 	cmn.w	r3, #2
 8006ffe:	d001      	beq.n	8007004 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8007000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007002:	e204      	b.n	800740e <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8007004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007006:	f113 0f02 	cmn.w	r3, #2
 800700a:	d007      	beq.n	800701c <lfs_dir_relocatingcommit+0x164>
 800700c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007010:	7ddb      	ldrb	r3, [r3, #23]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8007016:	2302      	movs	r3, #2
 8007018:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 800701a:	e121      	b.n	8007260 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	7d9b      	ldrb	r3, [r3, #22]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80fb 	beq.w	800721c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800702a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8007030:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8007036:	63bb      	str	r3, [r7, #56]	; 0x38
 8007038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8007042:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800704a:	2b00      	cmp	r3, #0
 800704c:	d004      	beq.n	8007058 <lfs_dir_relocatingcommit+0x1a0>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007054:	3b08      	subs	r3, #8
 8007056:	e003      	b.n	8007060 <lfs_dir_relocatingcommit+0x1a8>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8007060:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	3318      	adds	r3, #24
 8007066:	4618      	mov	r0, r3
 8007068:	f7fd f963 	bl	8004332 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
 8007078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 800707e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007082:	9308      	str	r3, [sp, #32]
 8007084:	4b50      	ldr	r3, [pc, #320]	; (80071c8 <lfs_dir_relocatingcommit+0x310>)
 8007086:	9307      	str	r3, [sp, #28]
 8007088:	2300      	movs	r3, #0
 800708a:	9306      	str	r3, [sp, #24]
 800708c:	2300      	movs	r3, #0
 800708e:	9305      	str	r3, [sp, #20]
 8007090:	2300      	movs	r3, #0
 8007092:	9304      	str	r3, [sp, #16]
 8007094:	2300      	movs	r3, #0
 8007096:	9303      	str	r3, [sp, #12]
 8007098:	2300      	movs	r3, #0
 800709a:	9302      	str	r3, [sp, #8]
 800709c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	460b      	mov	r3, r1
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7fd ff70 	bl	8004f90 <lfs_dir_traverse>
 80070b0:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	3318      	adds	r3, #24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fd f921 	bl	80042fe <lfs_pair_fromle32>
        if (err) {
 80070bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00b      	beq.n	80070da <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80070c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070c4:	f113 0f1c 	cmn.w	r3, #28
 80070c8:	f000 80aa 	beq.w	8007220 <lfs_dir_relocatingcommit+0x368>
 80070cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ce:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80070d2:	f000 80a5 	beq.w	8007220 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 80070d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070d8:	e199      	b.n	800740e <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80070da:	f107 031c 	add.w	r3, r7, #28
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	605a      	str	r2, [r3, #4]
 80070e4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070ec:	f107 031c 	add.w	r3, r7, #28
 80070f0:	4611      	mov	r1, r2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fd f9d3 	bl	800449e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80070fe:	f107 031c 	add.w	r3, r7, #28
 8007102:	4611      	mov	r1, r2
 8007104:	4618      	mov	r0, r3
 8007106:	f7fd f9ca 	bl	800449e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007110:	f107 031c 	add.w	r3, r7, #28
 8007114:	4611      	mov	r1, r2
 8007116:	4618      	mov	r0, r3
 8007118:	f7fd f9c1 	bl	800449e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8007128:	f107 031c 	add.w	r3, r7, #28
 800712c:	4618      	mov	r0, r3
 800712e:	f7fd f9db 	bl	80044e8 <lfs_gstate_iszero>
 8007132:	4603      	mov	r3, r0
 8007134:	f083 0301 	eor.w	r3, r3, #1
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d027      	beq.n	800718e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800713e:	f107 031c 	add.w	r3, r7, #28
 8007142:	461a      	mov	r2, r3
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7fe feec 	bl	8005f24 <lfs_dir_getgstate>
 800714c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 800714e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8007154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007156:	e15a      	b.n	800740e <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8007158:	f107 031c 	add.w	r3, r7, #28
 800715c:	4618      	mov	r0, r3
 800715e:	f7fd fa69 	bl	8004634 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8007162:	f107 031c 	add.w	r3, r7, #28
 8007166:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800716a:	4a18      	ldr	r2, [pc, #96]	; (80071cc <lfs_dir_relocatingcommit+0x314>)
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f7ff f885 	bl	800627c <lfs_dir_commitattr>
 8007172:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8007174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800717a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800717c:	f113 0f1c 	cmn.w	r3, #28
 8007180:	d050      	beq.n	8007224 <lfs_dir_relocatingcommit+0x36c>
 8007182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007184:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007188:	d04c      	beq.n	8007224 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800718a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800718c:	e13f      	b.n	800740e <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800718e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007192:	4619      	mov	r1, r3
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f7ff f8f1 	bl	800637c <lfs_dir_commitcrc>
 800719a:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 800719c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d016      	beq.n	80071d0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80071a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a4:	f113 0f1c 	cmn.w	r3, #28
 80071a8:	d03e      	beq.n	8007228 <lfs_dir_relocatingcommit+0x370>
 80071aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80071b0:	d03a      	beq.n	8007228 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80071b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b4:	e12b      	b.n	800740e <lfs_dir_relocatingcommit+0x556>
 80071b6:	bf00      	nop
 80071b8:	0800bdb4 	.word	0x0800bdb4
 80071bc:	0800c618 	.word	0x0800c618
 80071c0:	0800bb58 	.word	0x0800bb58
 80071c4:	0800bdc4 	.word	0x0800bdc4
 80071c8:	08006823 	.word	0x08006823
 80071cc:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80071d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071d6:	6992      	ldr	r2, [r2, #24]
 80071d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80071dc:	fb01 f202 	mul.w	r2, r1, r2
 80071e0:	1a9b      	subs	r3, r3, r2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d006      	beq.n	80071f4 <lfs_dir_relocatingcommit+0x33c>
 80071e6:	4b8c      	ldr	r3, [pc, #560]	; (8007418 <lfs_dir_relocatingcommit+0x560>)
 80071e8:	4a8c      	ldr	r2, [pc, #560]	; (800741c <lfs_dir_relocatingcommit+0x564>)
 80071ea:	f640 01d9 	movw	r1, #2265	; 0x8d9
 80071ee:	488c      	ldr	r0, [pc, #560]	; (8007420 <lfs_dir_relocatingcommit+0x568>)
 80071f0:	f003 fba0 	bl	800a934 <__assert_func>
        dir->off = commit.off;
 80071f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80071fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	333c      	adds	r3, #60	; 0x3c
 8007206:	3230      	adds	r2, #48	; 0x30
 8007208:	ca07      	ldmia	r2, {r0, r1, r2}
 800720a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3348      	adds	r3, #72	; 0x48
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	605a      	str	r2, [r3, #4]
 8007218:	609a      	str	r2, [r3, #8]
 800721a:	e021      	b.n	8007260 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 800721c:	bf00      	nop
 800721e:	e004      	b.n	800722a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8007220:	bf00      	nop
 8007222:	e002      	b.n	800722a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8007224:	bf00      	nop
 8007226:	e000      	b.n	800722a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8007228:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3310      	adds	r3, #16
 800722e:	4619      	mov	r1, r3
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f7fc fc4d 	bl	8003ad0 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	8a9b      	ldrh	r3, [r3, #20]
 800723a:	9302      	str	r3, [sp, #8]
 800723c:	2300      	movs	r3, #0
 800723e:	9301      	str	r3, [sp, #4]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff fd1b 	bl	8006c88 <lfs_dir_splittingcompact>
 8007252:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8007254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007256:	2b00      	cmp	r3, #0
 8007258:	da01      	bge.n	800725e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800725a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800725c:	e0d7      	b.n	800740e <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 800725e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	64bb      	str	r3, [r7, #72]	; 0x48
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3304      	adds	r3, #4
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	663b      	str	r3, [r7, #96]	; 0x60
 8007274:	e0c6      	b.n	8007404 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8007276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007278:	3308      	adds	r3, #8
 800727a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800727e:	4611      	mov	r1, r2
 8007280:	4618      	mov	r0, r3
 8007282:	f7fc ffe5 	bl	8004250 <lfs_pair_cmp>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	f040 80b8 	bne.w	80073fe <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 800728e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	f103 0408 	add.w	r4, r3, #8
 8007296:	4615      	mov	r5, r2
 8007298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800729a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800729c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80072a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80072a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072a6:	3308      	adds	r3, #8
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	f000 809d 	beq.w	80073ea <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 80072b0:	2300      	movs	r3, #0
 80072b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072b4:	e07b      	b.n	80073ae <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80072b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	4413      	add	r3, r2
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fd f891 	bl	80043e8 <lfs_tag_type3>
 80072c6:	4603      	mov	r3, r0
 80072c8:	461a      	mov	r2, r3
 80072ca:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d115      	bne.n	80072fe <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80072d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072d4:	889c      	ldrh	r4, [r3, #4]
 80072d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	4413      	add	r3, r2
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fd f8ab 	bl	800443c <lfs_tag_id>
 80072e6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80072e8:	429c      	cmp	r4, r3
 80072ea:	d108      	bne.n	80072fe <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80072ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072f2:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80072f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072fa:	60da      	str	r2, [r3, #12]
 80072fc:	e054      	b.n	80073a8 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80072fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	4413      	add	r3, r2
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4618      	mov	r0, r3
 800730a:	f7fd f86d 	bl	80043e8 <lfs_tag_type3>
 800730e:	4603      	mov	r3, r0
 8007310:	461a      	mov	r2, r3
 8007312:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8007316:	429a      	cmp	r2, r3
 8007318:	d11c      	bne.n	8007354 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800731a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800731c:	889c      	ldrh	r4, [r3, #4]
 800731e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	4413      	add	r3, r2
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f7fd f887 	bl	800443c <lfs_tag_id>
 800732e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8007330:	429c      	cmp	r4, r3
 8007332:	d90f      	bls.n	8007354 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8007334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007336:	889b      	ldrh	r3, [r3, #4]
 8007338:	3b01      	subs	r3, #1
 800733a:	b29a      	uxth	r2, r3
 800733c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800733e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8007340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007342:	799b      	ldrb	r3, [r3, #6]
 8007344:	2b02      	cmp	r3, #2
 8007346:	d12f      	bne.n	80073a8 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8007348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	1e5a      	subs	r2, r3, #1
 800734e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007350:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8007352:	e029      	b.n	80073a8 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8007354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	4413      	add	r3, r2
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f7fd f842 	bl	80043e8 <lfs_tag_type3>
 8007364:	4603      	mov	r3, r0
 8007366:	461a      	mov	r2, r3
 8007368:	f240 4301 	movw	r3, #1025	; 0x401
 800736c:	429a      	cmp	r2, r3
 800736e:	d11b      	bne.n	80073a8 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8007370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007372:	889c      	ldrh	r4, [r3, #4]
 8007374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	4413      	add	r3, r2
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f7fd f85c 	bl	800443c <lfs_tag_id>
 8007384:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8007386:	429c      	cmp	r4, r3
 8007388:	d30e      	bcc.n	80073a8 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 800738a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800738c:	889b      	ldrh	r3, [r3, #4]
 800738e:	3301      	adds	r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007394:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8007396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007398:	799b      	ldrb	r3, [r3, #6]
 800739a:	2b02      	cmp	r3, #2
 800739c:	d104      	bne.n	80073a8 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 800739e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073a6:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 80073a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073aa:	3301      	adds	r3, #1
 80073ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073b4:	429a      	cmp	r2, r3
 80073b6:	f6ff af7e 	blt.w	80072b6 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80073ba:	e016      	b.n	80073ea <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 80073bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073be:	889a      	ldrh	r2, [r3, #4]
 80073c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073c2:	8b9b      	ldrh	r3, [r3, #28]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ca:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80073cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ce:	f103 0108 	add.w	r1, r3, #8
 80073d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073d4:	3320      	adds	r3, #32
 80073d6:	461a      	mov	r2, r3
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7fe fd87 	bl	8005eec <lfs_dir_fetch>
 80073de:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 80073e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <lfs_dir_relocatingcommit+0x532>
                    return err;
 80073e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e8:	e011      	b.n	800740e <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 80073ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ec:	889a      	ldrh	r2, [r3, #4]
 80073ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073f0:	8b9b      	ldrh	r3, [r3, #28]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d303      	bcc.n	80073fe <lfs_dir_relocatingcommit+0x546>
 80073f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073f8:	7fdb      	ldrb	r3, [r3, #31]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1de      	bne.n	80073bc <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80073fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	663b      	str	r3, [r7, #96]	; 0x60
 8007404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007406:	2b00      	cmp	r3, #0
 8007408:	f47f af35 	bne.w	8007276 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 800740c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800740e:	4618      	mov	r0, r3
 8007410:	3770      	adds	r7, #112	; 0x70
 8007412:	46bd      	mov	sp, r7
 8007414:	bdb0      	pop	{r4, r5, r7, pc}
 8007416:	bf00      	nop
 8007418:	0800bca4 	.word	0x0800bca4
 800741c:	0800c618 	.word	0x0800c618
 8007420:	0800bb58 	.word	0x0800bb58

08007424 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8007424:	b5b0      	push	{r4, r5, r7, lr}
 8007426:	b0bc      	sub	sp, #240	; 0xf0
 8007428:	af04      	add	r7, sp, #16
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800743a:	e045      	b.n	80074c8 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800743c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007440:	3308      	adds	r3, #8
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	429a      	cmp	r2, r3
 8007446:	d03a      	beq.n	80074be <lfs_dir_orphaningcommit+0x9a>
 8007448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800744c:	3308      	adds	r3, #8
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	4611      	mov	r1, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f7fc fefc 	bl	8004250 <lfs_pair_cmp>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d12f      	bne.n	80074be <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800745e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007462:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8007464:	2b01      	cmp	r3, #1
 8007466:	d12a      	bne.n	80074be <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800746c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d023      	beq.n	80074be <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8007476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007482:	429a      	cmp	r2, r3
 8007484:	d91b      	bls.n	80074be <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8007486:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 fff0 	bl	8008470 <lfs_file_outline>
 8007490:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8007494:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <lfs_dir_orphaningcommit+0x7e>
                return err;
 800749c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074a0:	e2ad      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80074a2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f001 f804 	bl	80084b4 <lfs_file_flush>
 80074ac:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80074b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <lfs_dir_orphaningcommit+0x9a>
                return err;
 80074b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074bc:	e29f      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80074be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1b5      	bne.n	800743c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80074e6:	461d      	mov	r5, r3
 80074e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80074f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80074fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fcd6 	bl	8006eb8 <lfs_dir_relocatingcommit>
 800750c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8007510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007514:	2b00      	cmp	r3, #0
 8007516:	da02      	bge.n	800751e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8007518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800751c:	e26f      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8007524:	4611      	mov	r1, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f7fc fe92 	bl	8004250 <lfs_pair_cmp>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	461d      	mov	r5, r3
 8007536:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800753a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800753c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800753e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007542:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8007546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800754a:	2b02      	cmp	r3, #2
 800754c:	d14a      	bne.n	80075e4 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3348      	adds	r3, #72	; 0x48
 8007552:	461a      	mov	r2, r3
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7fe fce4 	bl	8005f24 <lfs_dir_getgstate>
 800755c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8007560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8007568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800756c:	e247      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800756e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8007574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007576:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	3318      	adds	r3, #24
 800757e:	4618      	mov	r0, r3
 8007580:	f7fc fed7 	bl	8004332 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	7ddb      	ldrb	r3, [r3, #23]
 8007588:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800758c:	051a      	lsls	r2, r3, #20
 800758e:	4bc2      	ldr	r3, [pc, #776]	; (8007898 <lfs_dir_orphaningcommit+0x474>)
 8007590:	4313      	orrs	r3, r2
 8007592:	667b      	str	r3, [r7, #100]	; 0x64
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	3318      	adds	r3, #24
 8007598:	66bb      	str	r3, [r7, #104]	; 0x68
 800759a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800759e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80075a2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80075a6:	2000      	movs	r0, #0
 80075a8:	9001      	str	r0, [sp, #4]
 80075aa:	2001      	movs	r0, #1
 80075ac:	9000      	str	r0, [sp, #0]
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff fc82 	bl	8006eb8 <lfs_dir_relocatingcommit>
 80075b4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	3318      	adds	r3, #24
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fc fe9e 	bl	80042fe <lfs_pair_fromle32>
        if (state < 0) {
 80075c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da02      	bge.n	80075d0 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80075ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075ce:	e216      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80075d0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80075d4:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80075d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80075e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80075e4:	2300      	movs	r3, #0
 80075e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 80075ea:	e1fc      	b.n	80079e6 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80075ec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80075f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80075f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075fc:	4ca7      	ldr	r4, [pc, #668]	; (800789c <lfs_dir_orphaningcommit+0x478>)
 80075fe:	9403      	str	r4, [sp, #12]
 8007600:	9102      	str	r1, [sp, #8]
 8007602:	9201      	str	r2, [sp, #4]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	4603      	mov	r3, r0
 8007608:	f640 1263 	movw	r2, #2403	; 0x963
 800760c:	49a4      	ldr	r1, [pc, #656]	; (80078a0 <lfs_dir_orphaningcommit+0x47c>)
 800760e:	48a5      	ldr	r0, [pc, #660]	; (80078a4 <lfs_dir_orphaningcommit+0x480>)
 8007610:	f003 fb2c 	bl	800ac6c <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f103 0220 	add.w	r2, r3, #32
 8007620:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f7fc fe12 	bl	8004250 <lfs_pair_cmp>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d107      	bne.n	8007642 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8007632:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800763a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007646:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800764a:	e037      	b.n	80076bc <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800764c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007650:	f103 0208 	add.w	r2, r3, #8
 8007654:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f7fc fdf8 	bl	8004250 <lfs_pair_cmp>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8007666:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800766a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800766e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8007670:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007674:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007678:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800767a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800767e:	799b      	ldrb	r3, [r3, #6]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d116      	bne.n	80076b2 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8007684:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007688:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800768c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007690:	4611      	mov	r1, r2
 8007692:	4618      	mov	r0, r3
 8007694:	f7fc fddc 	bl	8004250 <lfs_pair_cmp>
 8007698:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800769e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80076a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80076a6:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80076a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80076ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80076b0:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80076b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1c3      	bne.n	800764c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80076c4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80076c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80076cc:	4619      	mov	r1, r3
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f002 fa72 	bl	8009bb8 <lfs_fs_parent>
 80076d4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80076d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80076dc:	2b00      	cmp	r3, #0
 80076de:	da07      	bge.n	80076f0 <lfs_dir_orphaningcommit+0x2cc>
 80076e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80076e4:	f113 0f02 	cmn.w	r3, #2
 80076e8:	d002      	beq.n	80076f0 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80076ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80076ee:	e186      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80076f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80076f4:	f113 0f02 	cmn.w	r3, #2
 80076f8:	bf14      	ite	ne
 80076fa:	2301      	movne	r3, #1
 80076fc:	2300      	moveq	r3, #0
 80076fe:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8007702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007706:	f113 0f02 	cmn.w	r3, #2
 800770a:	f000 809e 	beq.w	800784a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800770e:	2101      	movs	r1, #1
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f002 fae9 	bl	8009ce8 <lfs_fs_preporphans>
 8007716:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 800771a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <lfs_dir_orphaningcommit+0x304>
                return err;
 8007722:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007726:	e16a      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8007728:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800772c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3330      	adds	r3, #48	; 0x30
 8007734:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007738:	4611      	mov	r1, r2
 800773a:	4618      	mov	r0, r3
 800773c:	f7fc ff3a 	bl	80045b4 <lfs_gstate_hasmovehere>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d02d      	beq.n	80077a2 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	4618      	mov	r0, r3
 800774c:	f7fc fe76 	bl	800443c <lfs_tag_id>
 8007750:	4603      	mov	r3, r0
 8007752:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8007756:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800775a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800775e:	484f      	ldr	r0, [pc, #316]	; (800789c <lfs_dir_orphaningcommit+0x478>)
 8007760:	9002      	str	r0, [sp, #8]
 8007762:	9201      	str	r2, [sp, #4]
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	460b      	mov	r3, r1
 8007768:	f44f 6219 	mov.w	r2, #2448	; 0x990
 800776c:	494c      	ldr	r1, [pc, #304]	; (80078a0 <lfs_dir_orphaningcommit+0x47c>)
 800776e:	484e      	ldr	r0, [pc, #312]	; (80078a8 <lfs_dir_orphaningcommit+0x484>)
 8007770:	f003 fa7c 	bl	800ac6c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007774:	2200      	movs	r2, #0
 8007776:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f002 fb04 	bl	8009d88 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8007780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007784:	4618      	mov	r0, r3
 8007786:	f7fc fe59 	bl	800443c <lfs_tag_id>
 800778a:	4603      	mov	r3, r0
 800778c:	461a      	mov	r2, r3
 800778e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007792:	4293      	cmp	r3, r2
 8007794:	d205      	bcs.n	80077a2 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8007796:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800779a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800779e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80077a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a4:	657b      	str	r3, [r7, #84]	; 0x54
 80077a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077a8:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80077aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fc fdbf 	bl	8004332 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80077b4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80077b8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80077bc:	4293      	cmp	r3, r2
 80077be:	d007      	beq.n	80077d0 <lfs_dir_orphaningcommit+0x3ac>
 80077c0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80077c4:	029b      	lsls	r3, r3, #10
 80077c6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80077ca:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80077ce:	e000      	b.n	80077d2 <lfs_dir_orphaningcommit+0x3ae>
 80077d0:	2300      	movs	r3, #0
 80077d2:	647b      	str	r3, [r7, #68]	; 0x44
 80077d4:	2300      	movs	r3, #0
 80077d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80077d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80077dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80077e2:	653b      	str	r3, [r7, #80]	; 0x50
 80077e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80077e8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80077ec:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80077f0:	2000      	movs	r0, #0
 80077f2:	9001      	str	r0, [sp, #4]
 80077f4:	2002      	movs	r0, #2
 80077f6:	9000      	str	r0, [sp, #0]
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f7ff fb5d 	bl	8006eb8 <lfs_dir_relocatingcommit>
 80077fe:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8007802:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007806:	4618      	mov	r0, r3
 8007808:	f7fc fd79 	bl	80042fe <lfs_pair_fromle32>
            if (state < 0) {
 800780c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007810:	2b00      	cmp	r3, #0
 8007812:	da02      	bge.n	800781a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8007814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007818:	e0f1      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800781a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800781e:	2b01      	cmp	r3, #1
 8007820:	d113      	bne.n	800784a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8007822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8007828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800782a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 800782e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8007832:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8007836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800783a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800783e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8007842:	2301      	movs	r3, #1
 8007844:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007848:	e0cd      	b.n	80079e6 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800784a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800784e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007852:	4619      	mov	r1, r3
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f002 f8fd 	bl	8009a54 <lfs_fs_pred>
 800785a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800785e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <lfs_dir_orphaningcommit+0x452>
 8007866:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800786a:	f113 0f02 	cmn.w	r3, #2
 800786e:	d002      	beq.n	8007876 <lfs_dir_orphaningcommit+0x452>
            return err;
 8007870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007874:	e0c3      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8007876:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d01a      	beq.n	80078b4 <lfs_dir_orphaningcommit+0x490>
 800787e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007882:	f113 0f02 	cmn.w	r3, #2
 8007886:	d115      	bne.n	80078b4 <lfs_dir_orphaningcommit+0x490>
 8007888:	4b08      	ldr	r3, [pc, #32]	; (80078ac <lfs_dir_orphaningcommit+0x488>)
 800788a:	4a09      	ldr	r2, [pc, #36]	; (80078b0 <lfs_dir_orphaningcommit+0x48c>)
 800788c:	f640 11b3 	movw	r1, #2483	; 0x9b3
 8007890:	4803      	ldr	r0, [pc, #12]	; (80078a0 <lfs_dir_orphaningcommit+0x47c>)
 8007892:	f003 f84f 	bl	800a934 <__assert_func>
 8007896:	bf00      	nop
 8007898:	000ffc08 	.word	0x000ffc08
 800789c:	0800bc4c 	.word	0x0800bc4c
 80078a0:	0800bb58 	.word	0x0800bb58
 80078a4:	0800bdcc 	.word	0x0800bdcc
 80078a8:	0800be08 	.word	0x0800be08
 80078ac:	0800be4c 	.word	0x0800be4c
 80078b0:	0800c634 	.word	0x0800c634

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80078b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078b8:	f113 0f02 	cmn.w	r3, #2
 80078bc:	f000 8093 	beq.w	80079e6 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3330      	adds	r3, #48	; 0x30
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fc fe2c 	bl	8004522 <lfs_gstate_hasorphans>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d011      	beq.n	80078f4 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80078d0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80078d4:	425b      	negs	r3, r3
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	b25b      	sxtb	r3, r3
 80078da:	4619      	mov	r1, r3
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f002 fa03 	bl	8009ce8 <lfs_fs_preporphans>
 80078e2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80078e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80078ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078f2:	e084      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80078f4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80078f8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3330      	adds	r3, #48	; 0x30
 8007900:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007904:	4611      	mov	r1, r2
 8007906:	4618      	mov	r0, r3
 8007908:	f7fc fe54 	bl	80045b4 <lfs_gstate_hasmovehere>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d01c      	beq.n	800794c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007916:	4618      	mov	r0, r3
 8007918:	f7fc fd90 	bl	800443c <lfs_tag_id>
 800791c:	4603      	mov	r3, r0
 800791e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8007922:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007924:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007926:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 800792a:	4837      	ldr	r0, [pc, #220]	; (8007a08 <lfs_dir_orphaningcommit+0x5e4>)
 800792c:	9002      	str	r0, [sp, #8]
 800792e:	9201      	str	r2, [sp, #4]
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	460b      	mov	r3, r1
 8007934:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007938:	4934      	ldr	r1, [pc, #208]	; (8007a0c <lfs_dir_orphaningcommit+0x5e8>)
 800793a:	4835      	ldr	r0, [pc, #212]	; (8007a10 <lfs_dir_orphaningcommit+0x5ec>)
 800793c:	f003 f996 	bl	800ac6c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007940:	2200      	movs	r2, #0
 8007942:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f002 fa1e 	bl	8009d88 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800794c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800794e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8007952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8007958:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800795c:	4618      	mov	r0, r3
 800795e:	f7fc fce8 	bl	8004332 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8007962:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8007966:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800796a:	4293      	cmp	r3, r2
 800796c:	d007      	beq.n	800797e <lfs_dir_orphaningcommit+0x55a>
 800796e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8007972:	029b      	lsls	r3, r3, #10
 8007974:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8007978:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800797c:	e000      	b.n	8007980 <lfs_dir_orphaningcommit+0x55c>
 800797e:	2300      	movs	r3, #0
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
 8007982:	2300      	movs	r3, #0
 8007984:	62bb      	str	r3, [r7, #40]	; 0x28
 8007986:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800798a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800798e:	051a      	lsls	r2, r3, #20
 8007990:	4b20      	ldr	r3, [pc, #128]	; (8007a14 <lfs_dir_orphaningcommit+0x5f0>)
 8007992:	4313      	orrs	r3, r2
 8007994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007996:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800799a:	633b      	str	r3, [r7, #48]	; 0x30
 800799c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079a0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80079a4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80079a8:	2000      	movs	r0, #0
 80079aa:	9001      	str	r0, [sp, #4]
 80079ac:	2002      	movs	r0, #2
 80079ae:	9000      	str	r0, [sp, #0]
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f7ff fa81 	bl	8006eb8 <lfs_dir_relocatingcommit>
 80079b6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80079ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fc fc9d 	bl	80042fe <lfs_pair_fromle32>
            if (state < 0) {
 80079c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	da02      	bge.n	80079d2 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80079cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079d0:	e015      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80079d2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80079d6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80079da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80079e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80079e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	f43f adfe 	beq.w	80075ec <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80079f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <lfs_dir_orphaningcommit+0x5d8>
 80079f8:	2303      	movs	r3, #3
 80079fa:	e000      	b.n	80079fe <lfs_dir_orphaningcommit+0x5da>
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	37e0      	adds	r7, #224	; 0xe0
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bdb0      	pop	{r4, r5, r7, pc}
 8007a06:	bf00      	nop
 8007a08:	0800bc4c 	.word	0x0800bc4c
 8007a0c:	0800bb58 	.word	0x0800bb58
 8007a10:	0800be08 	.word	0x0800be08
 8007a14:	000ffc08 	.word	0x000ffc08

08007a18 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f7ff fcf9 	bl	8007424 <lfs_dir_orphaningcommit>
 8007a32:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	da01      	bge.n	8007a3e <lfs_dir_commit+0x26>
        return orphans;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	e00d      	b.n	8007a5a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d009      	beq.n	8007a58 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8007a44:	2100      	movs	r1, #0
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f002 fac2 	bl	8009fd0 <lfs_fs_deorphan>
 8007a4c:	6138      	str	r0, [r7, #16]
        if (err) {
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <lfs_dir_commit+0x40>
            return err;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	e000      	b.n	8007a5a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8007a62:	b590      	push	{r4, r7, lr}
 8007a64:	b087      	sub	sp, #28
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	3b08      	subs	r3, #8
 8007a7a:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a84:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <lfs_ctz_index+0x2e>
        return 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	e01c      	b.n	8007aca <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fb ffbb 	bl	8003a10 <lfs_popc>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	3302      	adds	r3, #2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	1ad2      	subs	r2, r2, r3
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aaa:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	fb02 f303 	mul.w	r3, r2, r3
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	1ad4      	subs	r4, r2, r3
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f7fb ffa9 	bl	8003a10 <lfs_popc>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	1ae2      	subs	r2, r4, r3
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	601a      	str	r2, [r3, #0]
    return i;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	371c      	adds	r7, #28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd90      	pop	{r4, r7, pc}

08007ad2 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8007ad2:	b590      	push	{r4, r7, lr}
 8007ad4:	b08f      	sub	sp, #60	; 0x3c
 8007ad6:	af04      	add	r7, sp, #16
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
 8007ade:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d108      	bne.n	8007af8 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8007ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aec:	601a      	str	r2, [r3, #0]
        *off = 0;
 8007aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
        return 0;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e053      	b.n	8007ba0 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	3b01      	subs	r3, #1
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	f107 0314 	add.w	r3, r7, #20
 8007b02:	4619      	mov	r1, r3
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff ffac 	bl	8007a62 <lfs_ctz_index>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8007b0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007b12:	4619      	mov	r1, r3
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f7ff ffa4 	bl	8007a62 <lfs_ctz_index>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8007b1e:	e034      	b.n	8007b8a <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8007b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	3301      	adds	r3, #1
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fb ff52 	bl	80039d2 <lfs_npw2>
 8007b2e:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8007b30:	1e5c      	subs	r4, r3, #1
 8007b32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b34:	f7fb ff5d 	bl	80039f2 <lfs_ctz>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f7fb ff11 	bl	8003964 <lfs_min>
 8007b42:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	0092      	lsls	r2, r2, #2
 8007b4a:	2104      	movs	r1, #4
 8007b4c:	9103      	str	r1, [sp, #12]
 8007b4e:	4639      	mov	r1, r7
 8007b50:	9102      	str	r1, [sp, #8]
 8007b52:	9201      	str	r2, [sp, #4]
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	2304      	movs	r3, #4
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f7fb ffdd 	bl	8003b1c <lfs_bd_read>
 8007b62:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fb ff6c 	bl	8003a44 <lfs_fromle32>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	603b      	str	r3, [r7, #0]
        if (err) {
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <lfs_ctz_find+0xa8>
            return err;
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	e012      	b.n	8007ba0 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	1a9b      	subs	r3, r3, r2
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8007b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d8c6      	bhi.n	8007b20 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b96:	601a      	str	r2, [r3, #0]
    *off = pos;
 8007b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b9c:	601a      	str	r2, [r3, #0]
    return 0;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	372c      	adds	r7, #44	; 0x2c
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd90      	pop	{r4, r7, pc}

08007ba8 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b092      	sub	sp, #72	; 0x48
 8007bac:	af04      	add	r7, sp, #16
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8007bb6:	f107 0320 	add.w	r3, r7, #32
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7fc fefb 	bl	80049b8 <lfs_alloc>
 8007bc2:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <lfs_ctz_extend+0x26>
            return err;
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	e0e9      	b.n	8007da2 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7fc fada 	bl	800418c <lfs_bd_erase>
 8007bd8:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d006      	beq.n	8007bee <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007be6:	f000 80cb 	beq.w	8007d80 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	e0d9      	b.n	8007da2 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8007bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d107      	bne.n	8007c04 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8007bf4:	6a3a      	ldr	r2, [r7, #32]
 8007bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf8:	601a      	str	r2, [r3, #0]
                *off = 0;
 8007bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]
                return 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	e0ce      	b.n	8007da2 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8007c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c06:	3b01      	subs	r3, #1
 8007c08:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8007c0a:	f107 031c 	add.w	r3, r7, #28
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff ff26 	bl	8007a62 <lfs_ctz_index>
 8007c16:	4603      	mov	r3, r0
 8007c18:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c24:	69da      	ldr	r2, [r3, #28]
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d044      	beq.n	8007cb6 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c30:	e035      	b.n	8007c9e <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8007c32:	69fa      	ldr	r2, [r7, #28]
 8007c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c36:	1ad2      	subs	r2, r2, r3
 8007c38:	2301      	movs	r3, #1
 8007c3a:	9303      	str	r3, [sp, #12]
 8007c3c:	f107 0317 	add.w	r3, r7, #23
 8007c40:	9302      	str	r3, [sp, #8]
 8007c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	2100      	movs	r1, #0
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f7fb ff63 	bl	8003b1c <lfs_bd_read>
 8007c56:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <lfs_ctz_extend+0xba>
                        return err;
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	e09f      	b.n	8007da2 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	2201      	movs	r2, #1
 8007c66:	9203      	str	r2, [sp, #12]
 8007c68:	f107 0217 	add.w	r2, r7, #23
 8007c6c:	9202      	str	r2, [sp, #8]
 8007c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c70:	9201      	str	r2, [sp, #4]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	2301      	movs	r3, #1
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	68b9      	ldr	r1, [r7, #8]
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f7fc f9da 	bl	8004034 <lfs_bd_prog>
 8007c80:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d007      	beq.n	8007c98 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007c8e:	d101      	bne.n	8007c94 <lfs_ctz_extend+0xec>
                            goto relocate;
 8007c90:	bf00      	nop
                    goto relocate;
 8007c92:	e075      	b.n	8007d80 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8007c96:	e084      	b.n	8007da2 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8007c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d3c5      	bcc.n	8007c32 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8007ca6:	6a3a      	ldr	r2, [r7, #32]
 8007ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007caa:	601a      	str	r2, [r3, #0]
                *off = noff;
 8007cac:	69fa      	ldr	r2, [r7, #28]
 8007cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb0:	601a      	str	r2, [r3, #0]
                return 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e075      	b.n	8007da2 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	3301      	adds	r3, #1
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8007cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cbe:	f7fb fe98 	bl	80039f2 <lfs_ctz>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8007ccc:	2300      	movs	r3, #0
 8007cce:	633b      	str	r3, [r7, #48]	; 0x30
 8007cd0:	e049      	b.n	8007d66 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fb fec0 	bl	8003a5a <lfs_tole32>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce2:	0092      	lsls	r2, r2, #2
 8007ce4:	2104      	movs	r1, #4
 8007ce6:	9103      	str	r1, [sp, #12]
 8007ce8:	f107 0118 	add.w	r1, r7, #24
 8007cec:	9102      	str	r1, [sp, #8]
 8007cee:	9201      	str	r2, [sp, #4]
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	68b9      	ldr	r1, [r7, #8]
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7fc f99b 	bl	8004034 <lfs_bd_prog>
 8007cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fb fe9e 	bl	8003a44 <lfs_fromle32>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	61bb      	str	r3, [r7, #24]
                if (err) {
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d005      	beq.n	8007d1e <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007d18:	d034      	beq.n	8007d84 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	e041      	b.n	8007da2 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	3b01      	subs	r3, #1
 8007d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d01b      	beq.n	8007d60 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d2c:	0092      	lsls	r2, r2, #2
 8007d2e:	2104      	movs	r1, #4
 8007d30:	9103      	str	r1, [sp, #12]
 8007d32:	f107 0118 	add.w	r1, r7, #24
 8007d36:	9102      	str	r1, [sp, #8]
 8007d38:	9201      	str	r2, [sp, #4]
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	2304      	movs	r3, #4
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	2100      	movs	r1, #0
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f7fb feea 	bl	8003b1c <lfs_bd_read>
 8007d48:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fb fe79 	bl	8003a44 <lfs_fromle32>
 8007d52:	4603      	mov	r3, r0
 8007d54:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <lfs_ctz_extend+0x1b8>
                        return err;
 8007d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5e:	e020      	b.n	8007da2 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	3301      	adds	r3, #1
 8007d64:	633b      	str	r3, [r7, #48]	; 0x30
 8007d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d3b1      	bcc.n	8007cd2 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8007d6e:	6a3a      	ldr	r2, [r7, #32]
 8007d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d72:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	009a      	lsls	r2, r3, #2
 8007d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d7a:	601a      	str	r2, [r3, #0]
            return 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e010      	b.n	8007da2 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8007d80:	bf00      	nop
 8007d82:	e000      	b.n	8007d86 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8007d84:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	4a08      	ldr	r2, [pc, #32]	; (8007dac <lfs_ctz_extend+0x204>)
 8007d8a:	9200      	str	r2, [sp, #0]
 8007d8c:	f640 327d 	movw	r2, #2941	; 0xb7d
 8007d90:	4907      	ldr	r1, [pc, #28]	; (8007db0 <lfs_ctz_extend+0x208>)
 8007d92:	4808      	ldr	r0, [pc, #32]	; (8007db4 <lfs_ctz_extend+0x20c>)
 8007d94:	f002 ff6a 	bl	800ac6c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f7fb fe98 	bl	8003ad0 <lfs_cache_drop>
    while (true) {
 8007da0:	e709      	b.n	8007bb6 <lfs_ctz_extend+0xe>
    }
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3738      	adds	r7, #56	; 0x38
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	0800bc4c 	.word	0x0800bc4c
 8007db0:	0800bb58 	.word	0x0800bb58
 8007db4:	0800bccc 	.word	0x0800bccc

08007db8 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b090      	sub	sp, #64	; 0x40
 8007dbc:	af04      	add	r7, sp, #16
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <lfs_ctz_traverse+0x18>
        return 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e06b      	b.n	8007ea8 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	61fb      	str	r3, [r7, #28]
 8007dd6:	f107 031c 	add.w	r3, r7, #28
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f7ff fe40 	bl	8007a62 <lfs_ctz_index>
 8007de2:	4603      	mov	r3, r0
 8007de4:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8007de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007dec:	4798      	blx	r3
 8007dee:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <lfs_ctz_traverse+0x42>
            return err;
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	e056      	b.n	8007ea8 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <lfs_ctz_traverse+0x4c>
            return 0;
 8007e00:	2300      	movs	r3, #0
 8007e02:	e051      	b.n	8007ea8 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	f1c3 0302 	rsb	r3, r3, #2
 8007e0e:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8007e10:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8007e12:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8007e14:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8007e16:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8007e18:	9303      	str	r3, [sp, #12]
 8007e1a:	f107 0314 	add.w	r3, r7, #20
 8007e1e:	9302      	str	r3, [sp, #8]
 8007e20:	2300      	movs	r3, #0
 8007e22:	9301      	str	r3, [sp, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7fb fe74 	bl	8003b1c <lfs_bd_read>
 8007e34:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fb fe03 	bl	8003a44 <lfs_fromle32>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fb fdfd 	bl	8003a44 <lfs_fromle32>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	61bb      	str	r3, [r7, #24]
        if (err) {
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <lfs_ctz_traverse+0xa0>
            return err;
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	e027      	b.n	8007ea8 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8007e58:	2300      	movs	r3, #0
 8007e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e5c:	e012      	b.n	8007e84 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	3330      	adds	r3, #48	; 0x30
 8007e64:	443b      	add	r3, r7
 8007e66:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8007e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007e70:	4798      	blx	r3
 8007e72:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <lfs_ctz_traverse+0xc6>
                return err;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	e014      	b.n	8007ea8 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	3301      	adds	r3, #1
 8007e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	dbe7      	blt.n	8007e5e <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	3330      	adds	r3, #48	; 0x30
 8007e96:	443b      	add	r3, r7
 8007e98:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8007e9c:	603b      	str	r3, [r7, #0]
        index -= count;
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8007ea6:	e79e      	b.n	8007de6 <lfs_ctz_traverse+0x2e>
    }
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3730      	adds	r7, #48	; 0x30
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8007eb0:	b5b0      	push	{r4, r5, r7, lr}
 8007eb2:	b09a      	sub	sp, #104	; 0x68
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f002 fa31 	bl	800a330 <lfs_fs_forceconsistency>
 8007ece:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8007ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <lfs_file_rawopencfg+0x2a>
            return err;
 8007ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ed8:	e1b0      	b.n	800823c <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ede:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f103 0108 	add.w	r1, r3, #8
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	3304      	adds	r3, #4
 8007f02:	1d3a      	adds	r2, r7, #4
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7fe f889 	bl	800601c <lfs_dir_find>
 8007f0a:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8007f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	da0c      	bge.n	8007f2c <lfs_file_rawopencfg+0x7c>
 8007f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f14:	f113 0f02 	cmn.w	r3, #2
 8007f18:	d105      	bne.n	8007f26 <lfs_file_rawopencfg+0x76>
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	889b      	ldrh	r3, [r3, #4]
 8007f1e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d102      	bne.n	8007f2c <lfs_file_rawopencfg+0x7c>
        err = tag;
 8007f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f28:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8007f2a:	e17c      	b.n	8008226 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8007f32:	68b9      	ldr	r1, [r7, #8]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f7fc fcac 	bl	8004892 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8007f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f3c:	f113 0f02 	cmn.w	r3, #2
 8007f40:	d14e      	bne.n	8007fe0 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d103      	bne.n	8007f54 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8007f4c:	f06f 0301 	mvn.w	r3, #1
 8007f50:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007f52:	e168      	b.n	8008226 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7f8 f942 	bl	80001e0 <strlen>
 8007f5c:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d903      	bls.n	8007f70 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8007f68:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8007f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8007f6e:	e15a      	b.n	8008226 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f103 0108 	add.w	r1, r3, #8
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	889b      	ldrh	r3, [r3, #4]
 8007f7a:	029b      	lsls	r3, r3, #10
 8007f7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f86:	2300      	movs	r3, #0
 8007f88:	633b      	str	r3, [r7, #48]	; 0x30
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	889b      	ldrh	r3, [r3, #4]
 8007f8e:	029a      	lsls	r2, r3, #10
 8007f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f98:	637b      	str	r3, [r7, #52]	; 0x34
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	889b      	ldrh	r3, [r3, #4]
 8007fa2:	029b      	lsls	r3, r3, #10
 8007fa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fae:	2300      	movs	r3, #0
 8007fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8007fb2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7ff fd2d 	bl	8007a18 <lfs_dir_commit>
 8007fbe:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8007fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fc2:	f113 0f1c 	cmn.w	r3, #28
 8007fc6:	d001      	beq.n	8007fcc <lfs_file_rawopencfg+0x11c>
 8007fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fca:	e001      	b.n	8007fd0 <lfs_file_rawopencfg+0x120>
 8007fcc:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8007fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8007fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f040 8125 	bne.w	8008224 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8007fda:	4b9a      	ldr	r3, [pc, #616]	; (8008244 <lfs_file_rawopencfg+0x394>)
 8007fdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fde:	e044      	b.n	800806a <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8007fea:	f06f 0310 	mvn.w	r3, #16
 8007fee:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8007ff0:	e119      	b.n	8008226 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8007ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fc f9f7 	bl	80043e8 <lfs_tag_type3>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d003      	beq.n	8008008 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8008000:	f06f 0314 	mvn.w	r3, #20
 8008004:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8008006:	e10e      	b.n	8008226 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00e      	beq.n	8008030 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	889b      	ldrh	r3, [r3, #4]
 8008016:	029b      	lsls	r3, r3, #10
 8008018:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800801c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008020:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008026:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	631a      	str	r2, [r3, #48]	; 0x30
 800802e:	e01c      	b.n	800806a <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	889b      	ldrh	r3, [r3, #4]
 800803a:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800803c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008040:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008048:	9200      	str	r2, [sp, #0]
 800804a:	4a7f      	ldr	r2, [pc, #508]	; (8008248 <lfs_file_rawopencfg+0x398>)
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7fc fe4d 	bl	8004cec <lfs_dir_get>
 8008052:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8008054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008056:	2b00      	cmp	r3, #0
 8008058:	da02      	bge.n	8008060 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 800805a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800805c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800805e:	e0e2      	b.n	8008226 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	3328      	adds	r3, #40	; 0x28
 8008064:	4618      	mov	r0, r3
 8008066:	f7fc fb35 	bl	80046d4 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800806a:	2300      	movs	r3, #0
 800806c:	657b      	str	r3, [r7, #84]	; 0x54
 800806e:	e063      	b.n	8008138 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d03c      	beq.n	80080f6 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008086:	6859      	ldr	r1, [r3, #4]
 8008088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800808a:	4613      	mov	r3, r2
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	4413      	add	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	440b      	add	r3, r1
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800809a:	051a      	lsls	r2, r3, #20
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	889b      	ldrh	r3, [r3, #4]
 80080a0:	029b      	lsls	r3, r3, #10
 80080a2:	ea42 0103 	orr.w	r1, r2, r3
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080aa:	6858      	ldr	r0, [r3, #4]
 80080ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080ae:	4613      	mov	r3, r2
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4403      	add	r3, r0
 80080b8:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80080ba:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c2:	6859      	ldr	r1, [r3, #4]
 80080c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080c6:	4613      	mov	r3, r2
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	4603      	mov	r3, r0
 80080d6:	4a5d      	ldr	r2, [pc, #372]	; (800824c <lfs_file_rawopencfg+0x39c>)
 80080d8:	4621      	mov	r1, r4
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f7fc fe06 	bl	8004cec <lfs_dir_get>
 80080e0:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 80080e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da06      	bge.n	80080f6 <lfs_file_rawopencfg+0x246>
 80080e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ea:	f113 0f02 	cmn.w	r3, #2
 80080ee:	d002      	beq.n	80080f6 <lfs_file_rawopencfg+0x246>
                err = res;
 80080f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080f2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80080f4:	e097      	b.n	8008226 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d017      	beq.n	8008132 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008106:	6859      	ldr	r1, [r3, #4]
 8008108:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800810a:	4613      	mov	r3, r2
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	689a      	ldr	r2, [r3, #8]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800811a:	429a      	cmp	r2, r3
 800811c:	d903      	bls.n	8008126 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 800811e:	f06f 031b 	mvn.w	r3, #27
 8008122:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8008124:	e07f      	b.n	8008226 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8008132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008134:	3301      	adds	r3, #1
 8008136:	657b      	str	r3, [r7, #84]	; 0x54
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008140:	429a      	cmp	r2, r3
 8008142:	d395      	bcc.n	8008070 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	64da      	str	r2, [r3, #76]	; 0x4c
 8008158:	e010      	b.n	800817c <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	4618      	mov	r0, r3
 8008162:	f7fb fc9e 	bl	8003aa2 <lfs_malloc>
 8008166:	4602      	mov	r2, r0
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d103      	bne.n	800817c <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8008174:	f06f 030b 	mvn.w	r3, #11
 8008178:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800817a:	e054      	b.n	8008226 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	3340      	adds	r3, #64	; 0x40
 8008180:	4619      	mov	r1, r3
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7fb fcb3 	bl	8003aee <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8008188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800818a:	4618      	mov	r0, r3
 800818c:	f7fc f92c 	bl	80043e8 <lfs_tag_type3>
 8008190:	4603      	mov	r3, r0
 8008192:	461a      	mov	r2, r3
 8008194:	f240 2301 	movw	r3, #513	; 0x201
 8008198:	429a      	cmp	r2, r3
 800819a:	d141      	bne.n	8008220 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f06f 0201 	mvn.w	r2, #1
 80081a2:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80081a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fc f958 	bl	800445c <lfs_tag_size>
 80081ac:	4602      	mov	r2, r0
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2200      	movs	r2, #0
 80081ca:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d020      	beq.n	8008220 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	889b      	ldrh	r3, [r3, #4]
 80081e8:	029c      	lsls	r4, r3, #10
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ee:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fb fbb6 	bl	8003964 <lfs_min>
 80081f8:	4603      	mov	r3, r0
 80081fa:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80081fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	4613      	mov	r3, r2
 8008208:	4a0f      	ldr	r2, [pc, #60]	; (8008248 <lfs_file_rawopencfg+0x398>)
 800820a:	4629      	mov	r1, r5
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7fc fd6d 	bl	8004cec <lfs_dir_get>
 8008212:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8008214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008216:	2b00      	cmp	r3, #0
 8008218:	da02      	bge.n	8008220 <lfs_file_rawopencfg+0x370>
                err = res;
 800821a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800821c:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800821e:	e002      	b.n	8008226 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8008220:	2300      	movs	r3, #0
 8008222:	e00b      	b.n	800823c <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8008224:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8008232:	68b9      	ldr	r1, [r7, #8]
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 f823 	bl	8008280 <lfs_file_rawclose>
    return err;
 800823a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800823c:	4618      	mov	r0, r3
 800823e:	3760      	adds	r7, #96	; 0x60
 8008240:	46bd      	mov	sp, r7
 8008242:	bdb0      	pop	{r4, r5, r7, pc}
 8008244:	20100000 	.word	0x20100000
 8008248:	700ffc00 	.word	0x700ffc00
 800824c:	7ffffc00 	.word	0x7ffffc00

08008250 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af02      	add	r7, sp, #8
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <lfs_file_rawopen+0x2c>)
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f7ff fe21 	bl	8007eb0 <lfs_file_rawopencfg>
 800826e:	6178      	str	r0, [r7, #20]
    return err;
 8008270:	697b      	ldr	r3, [r7, #20]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	0800c64c 	.word	0x0800c64c

08008280 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f9e5 	bl	800865c <lfs_file_rawsync>
 8008292:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7fc fad9 	bl	800484e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fb fc05 	bl	8003aba <lfs_free>
    }

    return err;
 80082b0:	68fb      	ldr	r3, [r7, #12]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b08d      	sub	sp, #52	; 0x34
 80082c0:	af06      	add	r7, sp, #24
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80082c6:	f107 030c 	add.w	r3, r7, #12
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7fc fb73 	bl	80049b8 <lfs_alloc>
 80082d2:	6138      	str	r0, [r7, #16]
        if (err) {
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <lfs_file_relocate+0x22>
            return err;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	e0bb      	b.n	8008456 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7fb ff52 	bl	800418c <lfs_bd_erase>
 80082e8:	6138      	str	r0, [r7, #16]
        if (err) {
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d006      	beq.n	80082fe <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80082f6:	f000 809b 	beq.w	8008430 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	e0ab      	b.n	8008456 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	e069      	b.n	80083d8 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d027      	beq.n	8008360 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	f103 0008 	add.w	r0, r3, #8
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	889b      	ldrh	r3, [r3, #4]
 8008328:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800832a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800832e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008332:	2101      	movs	r1, #1
 8008334:	9105      	str	r1, [sp, #20]
 8008336:	f107 010b 	add.w	r1, r7, #11
 800833a:	9104      	str	r1, [sp, #16]
 800833c:	6979      	ldr	r1, [r7, #20]
 800833e:	9103      	str	r1, [sp, #12]
 8008340:	9302      	str	r3, [sp, #8]
 8008342:	4b47      	ldr	r3, [pc, #284]	; (8008460 <lfs_file_relocate+0x1a4>)
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	9200      	str	r2, [sp, #0]
 8008348:	4623      	mov	r3, r4
 800834a:	2200      	movs	r2, #0
 800834c:	4601      	mov	r1, r0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7fc fce7 	bl	8004d22 <lfs_dir_getread>
 8008354:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01e      	beq.n	800839a <lfs_file_relocate+0xde>
                    return err;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	e07a      	b.n	8008456 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8008366:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	1ad4      	subs	r4, r2, r3
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	2201      	movs	r2, #1
 8008376:	9203      	str	r2, [sp, #12]
 8008378:	f107 020b 	add.w	r2, r7, #11
 800837c:	9202      	str	r2, [sp, #8]
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	9201      	str	r2, [sp, #4]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	4623      	mov	r3, r4
 8008386:	4602      	mov	r2, r0
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7fb fbc7 	bl	8003b1c <lfs_bd_read>
 800838e:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <lfs_file_relocate+0xde>
                    return err;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	e05d      	b.n	8008456 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f103 0110 	add.w	r1, r3, #16
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	9203      	str	r2, [sp, #12]
 80083a8:	f107 020b 	add.w	r2, r7, #11
 80083ac:	9202      	str	r2, [sp, #8]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	9201      	str	r2, [sp, #4]
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	2301      	movs	r3, #1
 80083b6:	4602      	mov	r2, r0
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7fb fe3b 	bl	8004034 <lfs_bd_prog>
 80083be:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80083cc:	d032      	beq.n	8008434 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	e041      	b.n	8008456 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	3301      	adds	r3, #1
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d390      	bcc.n	8008304 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	69d9      	ldr	r1, [r3, #28]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	461a      	mov	r2, r3
 80083f2:	f002 fd61 	bl	800aeb8 <memcpy>
        file->cache.block = lfs->pcache.block;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691a      	ldr	r2, [r3, #16]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	695a      	ldr	r2, [r3, #20]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3310      	adds	r3, #16
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7fb fb6a 	bl	8003aee <lfs_cache_zero>

        file->block = nblock;
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008424:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800842c:	2300      	movs	r3, #0
 800842e:	e012      	b.n	8008456 <lfs_file_relocate+0x19a>
                goto relocate;
 8008430:	bf00      	nop
 8008432:	e000      	b.n	8008436 <lfs_file_relocate+0x17a>
                    goto relocate;
 8008434:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4a0a      	ldr	r2, [pc, #40]	; (8008464 <lfs_file_relocate+0x1a8>)
 800843a:	9200      	str	r2, [sp, #0]
 800843c:	f640 42b3 	movw	r2, #3251	; 0xcb3
 8008440:	4909      	ldr	r1, [pc, #36]	; (8008468 <lfs_file_relocate+0x1ac>)
 8008442:	480a      	ldr	r0, [pc, #40]	; (800846c <lfs_file_relocate+0x1b0>)
 8008444:	f002 fc12 	bl	800ac6c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	3310      	adds	r3, #16
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fb fb3e 	bl	8003ad0 <lfs_cache_drop>
    while (true) {
 8008454:	e737      	b.n	80082c6 <lfs_file_relocate+0xa>
    }
}
 8008456:	4618      	mov	r0, r3
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	bd90      	pop	{r4, r7, pc}
 800845e:	bf00      	nop
 8008460:	fff7fc00 	.word	0xfff7fc00
 8008464:	0800bc4c 	.word	0x0800bc4c
 8008468:	0800bb58 	.word	0x0800bb58
 800846c:	0800bccc 	.word	0x0800bccc

08008470 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7fc fa78 	bl	8004978 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff ff16 	bl	80082bc <lfs_file_relocate>
 8008490:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <lfs_file_outline+0x2c>
        return err;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	e006      	b.n	80084aa <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b09f      	sub	sp, #124	; 0x7c
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d011      	beq.n	80084ee <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d105      	bne.n	80084e2 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	3340      	adds	r3, #64	; 0x40
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7fb faf7 	bl	8003ad0 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 80a4 	beq.w	8008644 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008500:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d176      	bne.n	80085fc <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800850e:	f107 030c 	add.w	r3, r7, #12
 8008512:	2254      	movs	r2, #84	; 0x54
 8008514:	2100      	movs	r1, #0
 8008516:	4618      	mov	r0, r3
 8008518:	f002 fc15 	bl	800ad46 <memset>
                .ctz.head = file->ctz.head,
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8008520:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8008526:	63bb      	str	r3, [r7, #56]	; 0x38
 8008528:	2301      	movs	r3, #1
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8008530:	643b      	str	r3, [r7, #64]	; 0x40
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8008538:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800853a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7fb fac4 	bl	8003ad0 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8008548:	e02b      	b.n	80085a2 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800854a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800854e:	f107 010c 	add.w	r1, r7, #12
 8008552:	2301      	movs	r3, #1
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f90d 	bl	8008774 <lfs_file_flushedread>
 800855a:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800855c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800855e:	2b00      	cmp	r3, #0
 8008560:	da01      	bge.n	8008566 <lfs_file_flush+0xb2>
                    return res;
 8008562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008564:	e06f      	b.n	8008646 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8008566:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800856a:	2301      	movs	r3, #1
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa08 	bl	8008984 <lfs_file_flushedwrite>
 8008574:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8008576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008578:	2b00      	cmp	r3, #0
 800857a:	da01      	bge.n	8008580 <lfs_file_flush+0xcc>
                    return res;
 800857c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800857e:	e062      	b.n	8008646 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008588:	d00b      	beq.n	80085a2 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800858a:	f107 030c 	add.w	r3, r7, #12
 800858e:	3340      	adds	r3, #64	; 0x40
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7fb fa9c 	bl	8003ad0 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7fb fa97 	bl	8003ad0 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d3cd      	bcc.n	800854a <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	2301      	movs	r3, #1
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7fb fc8b 	bl	8003ed4 <lfs_bd_flush>
 80085be:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80085c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d026      	beq.n	8008614 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80085c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085c8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80085cc:	d001      	beq.n	80085d2 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80085ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085d0:	e039      	b.n	8008646 <lfs_file_flush+0x192>
                        goto relocate;
 80085d2:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	4a1d      	ldr	r2, [pc, #116]	; (8008650 <lfs_file_flush+0x19c>)
 80085da:	9200      	str	r2, [sp, #0]
 80085dc:	f640 5202 	movw	r2, #3330	; 0xd02
 80085e0:	491c      	ldr	r1, [pc, #112]	; (8008654 <lfs_file_flush+0x1a0>)
 80085e2:	481d      	ldr	r0, [pc, #116]	; (8008658 <lfs_file_flush+0x1a4>)
 80085e4:	f002 fb42 	bl	800ac6c <iprintf>
                err = lfs_file_relocate(lfs, file);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff fe66 	bl	80082bc <lfs_file_relocate>
 80085f0:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80085f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d0da      	beq.n	80085ae <lfs_file_flush+0xfa>
                    return err;
 80085f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085fa:	e024      	b.n	8008646 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	4619      	mov	r1, r3
 8008606:	4610      	mov	r0, r2
 8008608:	f7fb f99c 	bl	8003944 <lfs_max>
 800860c:	4602      	mov	r2, r0
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	635a      	str	r2, [r3, #52]	; 0x34
 8008612:	e000      	b.n	8008616 <lfs_file_flush+0x162>
                break;
 8008614:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008636:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008642:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3774      	adds	r7, #116	; 0x74
 800864a:	46bd      	mov	sp, r7
 800864c:	bd90      	pop	{r4, r7, pc}
 800864e:	bf00      	nop
 8008650:	0800bc4c 	.word	0x0800bc4c
 8008654:	0800bb58 	.word	0x0800bb58
 8008658:	0800bccc 	.word	0x0800bccc

0800865c <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800865c:	b580      	push	{r7, lr}
 800865e:	b090      	sub	sp, #64	; 0x40
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8008672:	2300      	movs	r3, #0
 8008674:	e07a      	b.n	800876c <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8008676:	6839      	ldr	r1, [r7, #0]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff ff1b 	bl	80084b4 <lfs_file_flush>
 800867e:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	2b00      	cmp	r3, #0
 8008684:	d007      	beq.n	8008696 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	e06a      	b.n	800876c <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d063      	beq.n	800876a <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fb fdb7 	bl	800421a <lfs_pair_isnull>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f083 0301 	eor.w	r3, r3, #1
 80086b2:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d058      	beq.n	800876a <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d009      	beq.n	80086d8 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 80086c4:	f240 2301 	movw	r3, #513	; 0x201
 80086c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ce:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	637b      	str	r3, [r7, #52]	; 0x34
 80086d6:	e014      	b.n	8008702 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80086d8:	f240 2302 	movw	r3, #514	; 0x202
 80086dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086e4:	3228      	adds	r2, #40	; 0x28
 80086e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80086ea:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80086ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fc f806 	bl	8004704 <lfs_ctz_tole32>
            buffer = &ctz;
 80086f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086fc:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 80086fe:	2308      	movs	r3, #8
 8008700:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	f103 0108 	add.w	r1, r3, #8
 8008708:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800870a:	051a      	lsls	r2, r3, #20
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	889b      	ldrh	r3, [r3, #4]
 8008710:	029b      	lsls	r3, r3, #10
 8008712:	431a      	orrs	r2, r3
 8008714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008716:	4313      	orrs	r3, r2
 8008718:	61bb      	str	r3, [r7, #24]
 800871a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871c:	61fb      	str	r3, [r7, #28]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	889b      	ldrh	r3, [r3, #4]
 8008722:	029a      	lsls	r2, r3, #10
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	4313      	orrs	r3, r2
 800872c:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8008730:	623b      	str	r3, [r7, #32]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
 800873a:	f107 0218 	add.w	r2, r7, #24
 800873e:	2302      	movs	r3, #2
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff f969 	bl	8007a18 <lfs_dir_commit>
 8008746:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	2b00      	cmp	r3, #0
 800874c:	d007      	beq.n	800875e <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008752:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	e006      	b.n	800876c <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008762:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3740      	adds	r7, #64	; 0x40
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008774:	b5b0      	push	{r4, r5, r7, lr}
 8008776:	b090      	sub	sp, #64	; 0x40
 8008778:	af06      	add	r7, sp, #24
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	429a      	cmp	r2, r3
 8008794:	d301      	bcc.n	800879a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8008796:	2300      	movs	r3, #0
 8008798:	e0b7      	b.n	800890a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	4619      	mov	r1, r3
 80087a6:	6838      	ldr	r0, [r7, #0]
 80087a8:	f7fb f8dc 	bl	8003964 <lfs_min>
 80087ac:	6038      	str	r0, [r7, #0]
    nsize = size;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80087b2:	e0a5      	b.n	8008900 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d006      	beq.n	80087ce <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087c8:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d130      	bne.n	8008830 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d11c      	bne.n	8008814 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80087ec:	68b9      	ldr	r1, [r7, #8]
 80087ee:	3138      	adds	r1, #56	; 0x38
 80087f0:	68b8      	ldr	r0, [r7, #8]
 80087f2:	303c      	adds	r0, #60	; 0x3c
 80087f4:	9003      	str	r0, [sp, #12]
 80087f6:	9102      	str	r1, [sp, #8]
 80087f8:	9201      	str	r2, [sp, #4]
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	462b      	mov	r3, r5
 80087fe:	4622      	mov	r2, r4
 8008800:	2100      	movs	r1, #0
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff f965 	bl	8007ad2 <lfs_ctz_find>
 8008808:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <lfs_file_flushedread+0xb0>
                    return err;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	e07a      	b.n	800890a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f06f 0201 	mvn.w	r2, #1
 800881a:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008828:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008834:	69da      	ldr	r2, [r3, #28]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	4619      	mov	r1, r3
 800883e:	6a38      	ldr	r0, [r7, #32]
 8008840:	f7fb f890 	bl	8003964 <lfs_min>
 8008844:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d026      	beq.n	80088a0 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f103 0408 	add.w	r4, r3, #8
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008862:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	889b      	ldrh	r3, [r3, #4]
 8008868:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800886a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800886e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8008876:	69b8      	ldr	r0, [r7, #24]
 8008878:	9005      	str	r0, [sp, #20]
 800887a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800887c:	9004      	str	r0, [sp, #16]
 800887e:	9103      	str	r1, [sp, #12]
 8008880:	9302      	str	r3, [sp, #8]
 8008882:	4b24      	ldr	r3, [pc, #144]	; (8008914 <lfs_file_flushedread+0x1a0>)
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	9200      	str	r2, [sp, #0]
 8008888:	462b      	mov	r3, r5
 800888a:	2200      	movs	r2, #0
 800888c:	4621      	mov	r1, r4
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f7fc fa47 	bl	8004d22 <lfs_dir_getread>
 8008894:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01d      	beq.n	80088d8 <lfs_file_flushedread+0x164>
                return err;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	e034      	b.n	800890a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088aa:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80088b4:	69b9      	ldr	r1, [r7, #24]
 80088b6:	9103      	str	r1, [sp, #12]
 80088b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088ba:	9102      	str	r1, [sp, #8]
 80088bc:	9201      	str	r2, [sp, #4]
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	4623      	mov	r3, r4
 80088c2:	4602      	mov	r2, r0
 80088c4:	2100      	movs	r1, #0
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7fb f928 	bl	8003b1c <lfs_bd_read>
 80088cc:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <lfs_file_flushedread+0x164>
                return err;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	e018      	b.n	800890a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	441a      	add	r2, r3
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	441a      	add	r2, r3
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80088f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	4413      	add	r3, r2
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 80088f8:	6a3a      	ldr	r2, [r7, #32]
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f47f af56 	bne.w	80087b4 <lfs_file_flushedread+0x40>
    }

    return size;
 8008908:	683b      	ldr	r3, [r7, #0]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3728      	adds	r7, #40	; 0x28
 800890e:	46bd      	mov	sp, r7
 8008910:	bdb0      	pop	{r4, r5, r7, pc}
 8008912:	bf00      	nop
 8008914:	fff7fc00 	.word	0xfff7fc00

08008918 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	d106      	bne.n	8008940 <lfs_file_rawread+0x28>
 8008932:	4b11      	ldr	r3, [pc, #68]	; (8008978 <lfs_file_rawread+0x60>)
 8008934:	4a11      	ldr	r2, [pc, #68]	; (800897c <lfs_file_rawread+0x64>)
 8008936:	f640 518d 	movw	r1, #3469	; 0xd8d
 800893a:	4811      	ldr	r0, [pc, #68]	; (8008980 <lfs_file_rawread+0x68>)
 800893c:	f001 fffa 	bl	800a934 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800894c:	68b9      	ldr	r1, [r7, #8]
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f7ff fdb0 	bl	80084b4 <lfs_file_flush>
 8008954:	6178      	str	r0, [r7, #20]
        if (err) {
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <lfs_file_rawread+0x48>
            return err;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	e006      	b.n	800896e <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f7ff ff04 	bl	8008774 <lfs_file_flushedread>
 800896c:	4603      	mov	r3, r0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	0800be74 	.word	0x0800be74
 800897c:	0800c658 	.word	0x0800c658
 8008980:	0800bb58 	.word	0x0800bb58

08008984 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008984:	b5b0      	push	{r4, r5, r7, lr}
 8008986:	b090      	sub	sp, #64	; 0x40
 8008988:	af04      	add	r7, sp, #16
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 810e 	beq.w	8008bc4 <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	441a      	add	r2, r3
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	4619      	mov	r1, r3
 80089b6:	4610      	mov	r0, r2
 80089b8:	f7fa ffc4 	bl	8003944 <lfs_max>
 80089bc:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d004      	beq.n	80089d8 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80089d4:	08db      	lsrs	r3, r3, #3
 80089d6:	e003      	b.n	80089e0 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089dc:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80089de:	08db      	lsrs	r3, r3, #3
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f7fa ffbe 	bl	8003964 <lfs_min>
 80089e8:	4603      	mov	r3, r0
 80089ea:	4619      	mov	r1, r3
 80089ec:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80089f0:	f7fa ffb8 	bl	8003964 <lfs_min>
 80089f4:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80089f6:	429c      	cmp	r4, r3
 80089f8:	f240 80e4 	bls.w	8008bc4 <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7ff fd36 	bl	8008470 <lfs_file_outline>
 8008a04:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 80db 	beq.w	8008bc4 <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	e0d7      	b.n	8008bce <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d006      	beq.n	8008a38 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a32:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d16d      	bne.n	8008b14 <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d159      	bne.n	8008af8 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d12f      	bne.n	8008ab0 <lfs_file_flushedwrite+0x12c>
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d02b      	beq.n	8008ab0 <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008a6a:	3a01      	subs	r2, #1
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8008a70:	2000      	movs	r0, #0
 8008a72:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008a74:	f107 0010 	add.w	r0, r7, #16
 8008a78:	9003      	str	r0, [sp, #12]
 8008a7a:	9102      	str	r1, [sp, #8]
 8008a7c:	9201      	str	r2, [sp, #4]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	462b      	mov	r3, r5
 8008a82:	4622      	mov	r2, r4
 8008a84:	2100      	movs	r1, #0
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff f823 	bl	8007ad2 <lfs_ctz_find>
 8008a8c:	6238      	str	r0, [r7, #32]
                    if (err) {
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d007      	beq.n	8008aa4 <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a98:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	e094      	b.n	8008bce <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	3340      	adds	r3, #64	; 0x40
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f7fb f81f 	bl	8003aee <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f7fb ff61 	bl	8004978 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008abc:	68fc      	ldr	r4, [r7, #12]
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	3238      	adds	r2, #56	; 0x38
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	313c      	adds	r1, #60	; 0x3c
 8008ace:	9102      	str	r1, [sp, #8]
 8008ad0:	9201      	str	r2, [sp, #4]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	462b      	mov	r3, r5
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	4601      	mov	r1, r0
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff f864 	bl	8007ba8 <lfs_ctz_extend>
 8008ae0:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00f      	beq.n	8008b08 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	e06a      	b.n	8008bce <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f06f 0201 	mvn.w	r2, #1
 8008afe:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b18:	69da      	ldr	r2, [r3, #28]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	4619      	mov	r1, r3
 8008b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b24:	f7fa ff1e 	bl	8003964 <lfs_min>
 8008b28:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008b30:	68fc      	ldr	r4, [r7, #12]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008b3a:	69b9      	ldr	r1, [r7, #24]
 8008b3c:	9103      	str	r1, [sp, #12]
 8008b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b40:	9102      	str	r1, [sp, #8]
 8008b42:	9201      	str	r2, [sp, #4]
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	2301      	movs	r3, #1
 8008b48:	4622      	mov	r2, r4
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f7fb fa71 	bl	8004034 <lfs_bd_prog>
 8008b52:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d01c      	beq.n	8008b94 <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008b60:	d007      	beq.n	8008b72 <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	e02d      	b.n	8008bce <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 8008b72:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f7ff fba0 	bl	80082bc <lfs_file_relocate>
 8008b7c:	6178      	str	r0, [r7, #20]
            if (err) {
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0d2      	beq.n	8008b2a <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b88:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	e01c      	b.n	8008bce <lfs_file_flushedwrite+0x24a>
            break;
 8008b94:	bf00      	nop
            }
        }

        file->pos += diff;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	441a      	add	r2, r3
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	441a      	add	r2, r3
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8008bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8008bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7fb feda 	bl	8004978 <lfs_alloc_ack>
    while (nsize > 0) {
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f47f af29 	bne.w	8008a1e <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8008bcc:	683b      	ldr	r3, [r7, #0]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3730      	adds	r7, #48	; 0x30
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008bd8 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b08a      	sub	sp, #40	; 0x28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d106      	bne.n	8008c00 <lfs_file_rawwrite+0x28>
 8008bf2:	4b38      	ldr	r3, [pc, #224]	; (8008cd4 <lfs_file_rawwrite+0xfc>)
 8008bf4:	4a38      	ldr	r2, [pc, #224]	; (8008cd8 <lfs_file_rawwrite+0x100>)
 8008bf6:	f640 51f8 	movw	r1, #3576	; 0xdf8
 8008bfa:	4838      	ldr	r0, [pc, #224]	; (8008cdc <lfs_file_rawwrite+0x104>)
 8008bfc:	f001 fe9a 	bl	800a934 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d009      	beq.n	8008c20 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8008c0c:	68b9      	ldr	r1, [r7, #8]
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f7ff fc50 	bl	80084b4 <lfs_file_flush>
 8008c14:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <lfs_file_rawwrite+0x48>
            return err;
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	e055      	b.n	8008ccc <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d009      	beq.n	8008c40 <lfs_file_rawwrite+0x68>
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d203      	bcs.n	8008c40 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	441a      	add	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d902      	bls.n	8008c56 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8008c50:	f06f 031a 	mvn.w	r3, #26
 8008c54:	e03a      	b.n	8008ccc <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d121      	bne.n	8008ca6 <lfs_file_rawwrite+0xce>
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d91b      	bls.n	8008ca6 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c72:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8008c7c:	e00e      	b.n	8008c9c <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8008c7e:	2300      	movs	r3, #0
 8008c80:	75fb      	strb	r3, [r7, #23]
 8008c82:	f107 0217 	add.w	r2, r7, #23
 8008c86:	2301      	movs	r3, #1
 8008c88:	68b9      	ldr	r1, [r7, #8]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7ff fe7a 	bl	8008984 <lfs_file_flushedwrite>
 8008c90:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	da01      	bge.n	8008c9c <lfs_file_rawwrite+0xc4>
                return res;
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	e017      	b.n	8008ccc <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca0:	6a3a      	ldr	r2, [r7, #32]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d8eb      	bhi.n	8008c7e <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	68b9      	ldr	r1, [r7, #8]
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f7ff fe69 	bl	8008984 <lfs_file_flushedwrite>
 8008cb2:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	da01      	bge.n	8008cbe <lfs_file_rawwrite+0xe6>
        return nsize;
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	e006      	b.n	8008ccc <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8008cca:	69bb      	ldr	r3, [r7, #24]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3728      	adds	r7, #40	; 0x28
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	0800bea4 	.word	0x0800bea4
 8008cd8:	0800c66c 	.word	0x0800c66c
 8008cdc:	0800bb58 	.word	0x0800bb58

08008ce0 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08c      	sub	sp, #48	; 0x30
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d102      	bne.n	8008d00 <lfs_file_rawseek+0x20>
        npos = off;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cfe:	e025      	b.n	8008d4c <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d10f      	bne.n	8008d26 <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4413      	add	r3, r2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	da02      	bge.n	8008d1a <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8008d14:	f06f 0315 	mvn.w	r3, #21
 8008d18:	e067      	b.n	8008dea <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4413      	add	r3, r2
 8008d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d24:	e012      	b.n	8008d4c <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d10f      	bne.n	8008d4c <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8008d2c:	68b9      	ldr	r1, [r7, #8]
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 f875 	bl	8008e1e <lfs_file_rawsize>
 8008d34:	4602      	mov	r2, r0
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4413      	add	r3, r2
 8008d3a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8008d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	da02      	bge.n	8008d48 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8008d42:	f06f 0315 	mvn.w	r3, #21
 8008d46:	e050      	b.n	8008dea <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d902      	bls.n	8008d5c <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8008d56:	f06f 0315 	mvn.w	r3, #21
 8008d5a:	e046      	b.n	8008dea <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d101      	bne.n	8008d6a <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	e03f      	b.n	8008dea <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d12b      	bne.n	8008dce <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	f107 0318 	add.w	r3, r7, #24
 8008d80:	4619      	mov	r1, r3
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f7fe fe6d 	bl	8007a62 <lfs_ctz_index>
 8008d88:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8008d8e:	f107 0314 	add.w	r3, r7, #20
 8008d92:	4619      	mov	r1, r3
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f7fe fe64 	bl	8007a62 <lfs_ctz_index>
 8008d9a:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8008d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d114      	bne.n	8008dce <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d80f      	bhi.n	8008dce <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008db6:	441a      	add	r2, r3
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d907      	bls.n	8008dce <lfs_file_rawseek+0xee>
            file->pos = npos;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dc2:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8008dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dcc:	e00d      	b.n	8008dea <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7ff fb6f 	bl	80084b4 <lfs_file_flush>
 8008dd6:	61f8      	str	r0, [r7, #28]
    if (err) {
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <lfs_file_rawseek+0x102>
        return err;
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	e003      	b.n	8008dea <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008de6:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8008de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3730      	adds	r7, #48	; 0x30
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <lfs_file_rawrewind>:
static lfs_soff_t lfs_file_rawtell(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	2200      	movs	r2, #0
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff ff6c 	bl	8008ce0 <lfs_file_rawseek>
 8008e08:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	da01      	bge.n	8008e14 <lfs_file_rawrewind+0x22>
        return (int)res;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	e000      	b.n	8008e16 <lfs_file_rawrewind+0x24>
    }

    return 0;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d009      	beq.n	8008e48 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f7fa fd80 	bl	8003944 <lfs_max>
 8008e44:	4603      	mov	r3, r0
 8008e46:	e001      	b.n	8008e4c <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08c      	sub	sp, #48	; 0x30
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d106      	bne.n	8008e80 <lfs_init+0x2c>
 8008e72:	4b98      	ldr	r3, [pc, #608]	; (80090d4 <lfs_init+0x280>)
 8008e74:	4a98      	ldr	r2, [pc, #608]	; (80090d8 <lfs_init+0x284>)
 8008e76:	f241 0115 	movw	r1, #4117	; 0x1015
 8008e7a:	4898      	ldr	r0, [pc, #608]	; (80090dc <lfs_init+0x288>)
 8008e7c:	f001 fd5a 	bl	800a934 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d106      	bne.n	8008e98 <lfs_init+0x44>
 8008e8a:	4b95      	ldr	r3, [pc, #596]	; (80090e0 <lfs_init+0x28c>)
 8008e8c:	4a92      	ldr	r2, [pc, #584]	; (80090d8 <lfs_init+0x284>)
 8008e8e:	f241 0116 	movw	r1, #4118	; 0x1016
 8008e92:	4892      	ldr	r0, [pc, #584]	; (80090dc <lfs_init+0x288>)
 8008e94:	f001 fd4e 	bl	800a934 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <lfs_init+0x5c>
 8008ea2:	4b90      	ldr	r3, [pc, #576]	; (80090e4 <lfs_init+0x290>)
 8008ea4:	4a8c      	ldr	r2, [pc, #560]	; (80090d8 <lfs_init+0x284>)
 8008ea6:	f241 0117 	movw	r1, #4119	; 0x1017
 8008eaa:	488c      	ldr	r0, [pc, #560]	; (80090dc <lfs_init+0x288>)
 8008eac:	f001 fd42 	bl	800a934 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008eba:	6952      	ldr	r2, [r2, #20]
 8008ebc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ec0:	fb01 f202 	mul.w	r2, r1, r2
 8008ec4:	1a9b      	subs	r3, r3, r2
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d006      	beq.n	8008ed8 <lfs_init+0x84>
 8008eca:	4b87      	ldr	r3, [pc, #540]	; (80090e8 <lfs_init+0x294>)
 8008ecc:	4a82      	ldr	r2, [pc, #520]	; (80090d8 <lfs_init+0x284>)
 8008ece:	f241 011b 	movw	r1, #4123	; 0x101b
 8008ed2:	4882      	ldr	r0, [pc, #520]	; (80090dc <lfs_init+0x288>)
 8008ed4:	f001 fd2e 	bl	800a934 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008ee2:	6992      	ldr	r2, [r2, #24]
 8008ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ee8:	fb01 f202 	mul.w	r2, r1, r2
 8008eec:	1a9b      	subs	r3, r3, r2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d006      	beq.n	8008f00 <lfs_init+0xac>
 8008ef2:	4b7e      	ldr	r3, [pc, #504]	; (80090ec <lfs_init+0x298>)
 8008ef4:	4a78      	ldr	r2, [pc, #480]	; (80090d8 <lfs_init+0x284>)
 8008ef6:	f241 011c 	movw	r1, #4124	; 0x101c
 8008efa:	4878      	ldr	r0, [pc, #480]	; (80090dc <lfs_init+0x288>)
 8008efc:	f001 fd1a 	bl	800a934 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008f0a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f10:	fb01 f202 	mul.w	r2, r1, r2
 8008f14:	1a9b      	subs	r3, r3, r2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d006      	beq.n	8008f28 <lfs_init+0xd4>
 8008f1a:	4b75      	ldr	r3, [pc, #468]	; (80090f0 <lfs_init+0x29c>)
 8008f1c:	4a6e      	ldr	r2, [pc, #440]	; (80090d8 <lfs_init+0x284>)
 8008f1e:	f241 011d 	movw	r1, #4125	; 0x101d
 8008f22:	486e      	ldr	r0, [pc, #440]	; (80090dc <lfs_init+0x288>)
 8008f24:	f001 fd06 	bl	800a934 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8008f30:	d806      	bhi.n	8008f40 <lfs_init+0xec>
 8008f32:	4b70      	ldr	r3, [pc, #448]	; (80090f4 <lfs_init+0x2a0>)
 8008f34:	4a68      	ldr	r2, [pc, #416]	; (80090d8 <lfs_init+0x284>)
 8008f36:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8008f3a:	4868      	ldr	r0, [pc, #416]	; (80090dc <lfs_init+0x288>)
 8008f3c:	f001 fcfa 	bl	800a934 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	3b08      	subs	r3, #8
 8008f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fa fd3e 	bl	80039d2 <lfs_npw2>
 8008f56:	4603      	mov	r3, r0
 8008f58:	009a      	lsls	r2, r3, #2
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d906      	bls.n	8008f72 <lfs_init+0x11e>
 8008f64:	4b64      	ldr	r3, [pc, #400]	; (80090f8 <lfs_init+0x2a4>)
 8008f66:	4a5c      	ldr	r2, [pc, #368]	; (80090d8 <lfs_init+0x284>)
 8008f68:	f241 0123 	movw	r1, #4131	; 0x1023
 8008f6c:	485b      	ldr	r0, [pc, #364]	; (80090dc <lfs_init+0x288>)
 8008f6e:	f001 fce1 	bl	800a934 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d106      	bne.n	8008f8a <lfs_init+0x136>
 8008f7c:	4b5f      	ldr	r3, [pc, #380]	; (80090fc <lfs_init+0x2a8>)
 8008f7e:	4a56      	ldr	r2, [pc, #344]	; (80090d8 <lfs_init+0x284>)
 8008f80:	f241 012c 	movw	r1, #4140	; 0x102c
 8008f84:	4855      	ldr	r0, [pc, #340]	; (80090dc <lfs_init+0x288>)
 8008f86:	f001 fcd5 	bl	800a934 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d005      	beq.n	8008fa0 <lfs_init+0x14c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	60da      	str	r2, [r3, #12]
 8008f9e:	e010      	b.n	8008fc2 <lfs_init+0x16e>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fa fd7b 	bl	8003aa2 <lfs_malloc>
 8008fac:	4602      	mov	r2, r0
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d103      	bne.n	8008fc2 <lfs_init+0x16e>
            err = LFS_ERR_NOMEM;
 8008fba:	f06f 030b 	mvn.w	r3, #11
 8008fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8008fc0:	e0ff      	b.n	80091c2 <lfs_init+0x36e>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d005      	beq.n	8008fd8 <lfs_init+0x184>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	61da      	str	r2, [r3, #28]
 8008fd6:	e010      	b.n	8008ffa <lfs_init+0x1a6>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fa fd5f 	bl	8003aa2 <lfs_malloc>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d103      	bne.n	8008ffa <lfs_init+0x1a6>
            err = LFS_ERR_NOMEM;
 8008ff2:	f06f 030b 	mvn.w	r3, #11
 8008ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8008ff8:	e0e3      	b.n	80091c2 <lfs_init+0x36e>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7fa fd75 	bl	8003aee <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3310      	adds	r3, #16
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fa fd6f 	bl	8003aee <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	2b00      	cmp	r3, #0
 8009018:	d106      	bne.n	8009028 <lfs_init+0x1d4>
 800901a:	4b39      	ldr	r3, [pc, #228]	; (8009100 <lfs_init+0x2ac>)
 800901c:	4a2e      	ldr	r2, [pc, #184]	; (80090d8 <lfs_init+0x284>)
 800901e:	f241 014a 	movw	r1, #4170	; 0x104a
 8009022:	482e      	ldr	r0, [pc, #184]	; (80090dc <lfs_init+0x288>)
 8009024:	f001 fc86 	bl	800a934 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	2b00      	cmp	r3, #0
 8009034:	d106      	bne.n	8009044 <lfs_init+0x1f0>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800903a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903c:	f003 0303 	and.w	r3, r3, #3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d006      	beq.n	8009052 <lfs_init+0x1fe>
 8009044:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <lfs_init+0x2b0>)
 8009046:	4a24      	ldr	r2, [pc, #144]	; (80090d8 <lfs_init+0x284>)
 8009048:	f241 014b 	movw	r1, #4171	; 0x104b
 800904c:	4823      	ldr	r0, [pc, #140]	; (80090dc <lfs_init+0x288>)
 800904e:	f001 fc71 	bl	800a934 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <lfs_init+0x214>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	665a      	str	r2, [r3, #100]	; 0x64
 8009066:	e010      	b.n	800908a <lfs_init+0x236>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800906c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906e:	4618      	mov	r0, r3
 8009070:	f7fa fd17 	bl	8003aa2 <lfs_malloc>
 8009074:	4602      	mov	r2, r0
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800907e:	2b00      	cmp	r3, #0
 8009080:	d103      	bne.n	800908a <lfs_init+0x236>
            err = LFS_ERR_NOMEM;
 8009082:	f06f 030b 	mvn.w	r3, #11
 8009086:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8009088:	e09b      	b.n	80091c2 <lfs_init+0x36e>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800908e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009090:	2bff      	cmp	r3, #255	; 0xff
 8009092:	d906      	bls.n	80090a2 <lfs_init+0x24e>
 8009094:	4b1c      	ldr	r3, [pc, #112]	; (8009108 <lfs_init+0x2b4>)
 8009096:	4a10      	ldr	r2, [pc, #64]	; (80090d8 <lfs_init+0x284>)
 8009098:	f241 0158 	movw	r1, #4184	; 0x1058
 800909c:	480f      	ldr	r0, [pc, #60]	; (80090dc <lfs_init+0x288>)
 800909e:	f001 fc49 	bl	800a934 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d102      	bne.n	80090ba <lfs_init+0x266>
        lfs->name_max = LFS_NAME_MAX;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	22ff      	movs	r2, #255	; 0xff
 80090b8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	da25      	bge.n	8009110 <lfs_init+0x2bc>
 80090c4:	4b11      	ldr	r3, [pc, #68]	; (800910c <lfs_init+0x2b8>)
 80090c6:	4a04      	ldr	r2, [pc, #16]	; (80090d8 <lfs_init+0x284>)
 80090c8:	f241 015e 	movw	r1, #4190	; 0x105e
 80090cc:	4803      	ldr	r0, [pc, #12]	; (80090dc <lfs_init+0x288>)
 80090ce:	f001 fc31 	bl	800a934 <__assert_func>
 80090d2:	bf00      	nop
 80090d4:	0800bed4 	.word	0x0800bed4
 80090d8:	0800c680 	.word	0x0800c680
 80090dc:	0800bb58 	.word	0x0800bb58
 80090e0:	0800bef0 	.word	0x0800bef0
 80090e4:	0800bf0c 	.word	0x0800bf0c
 80090e8:	0800bf28 	.word	0x0800bf28
 80090ec:	0800bf58 	.word	0x0800bf58
 80090f0:	0800bf88 	.word	0x0800bf88
 80090f4:	0800bfbc 	.word	0x0800bfbc
 80090f8:	0800bfd8 	.word	0x0800bfd8
 80090fc:	0800c024 	.word	0x0800c024
 8009100:	0800c040 	.word	0x0800c040
 8009104:	0800c060 	.word	0x0800c060
 8009108:	0800c0b4 	.word	0x0800c0b4
 800910c:	0800c0d0 	.word	0x0800c0d0
    lfs->file_max = lfs->cfg->file_max;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	2b00      	cmp	r3, #0
 8009120:	d103      	bne.n	800912a <lfs_init+0x2d6>
        lfs->file_max = LFS_FILE_MAX;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009128:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800912e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009130:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8009134:	4293      	cmp	r3, r2
 8009136:	d906      	bls.n	8009146 <lfs_init+0x2f2>
 8009138:	4b26      	ldr	r3, [pc, #152]	; (80091d4 <lfs_init+0x380>)
 800913a:	4a27      	ldr	r2, [pc, #156]	; (80091d8 <lfs_init+0x384>)
 800913c:	f241 0164 	movw	r1, #4196	; 0x1064
 8009140:	4826      	ldr	r0, [pc, #152]	; (80091dc <lfs_init+0x388>)
 8009142:	f001 fbf7 	bl	800a934 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800914a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009154:	2b00      	cmp	r3, #0
 8009156:	d103      	bne.n	8009160 <lfs_init+0x30c>
        lfs->attr_max = LFS_ATTR_MAX;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800915e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009164:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	429a      	cmp	r2, r3
 800916e:	d906      	bls.n	800917e <lfs_init+0x32a>
 8009170:	4b1b      	ldr	r3, [pc, #108]	; (80091e0 <lfs_init+0x38c>)
 8009172:	4a19      	ldr	r2, [pc, #100]	; (80091d8 <lfs_init+0x384>)
 8009174:	f241 016a 	movw	r1, #4202	; 0x106a
 8009178:	4818      	ldr	r0, [pc, #96]	; (80091dc <lfs_init+0x388>)
 800917a:	f001 fbdb 	bl	800a934 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009184:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800918c:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	333c      	adds	r3, #60	; 0x3c
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	605a      	str	r2, [r3, #4]
 80091a4:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	3330      	adds	r3, #48	; 0x30
 80091aa:	2200      	movs	r2, #0
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	605a      	str	r2, [r3, #4]
 80091b0:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	3348      	adds	r3, #72	; 0x48
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	605a      	str	r2, [r3, #4]
 80091bc:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	e003      	b.n	80091ca <lfs_init+0x376>

cleanup:
    lfs_deinit(lfs);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f80e 	bl	80091e4 <lfs_deinit>
    return err;
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3730      	adds	r7, #48	; 0x30
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	0800c0f4 	.word	0x0800c0f4
 80091d8:	0800c680 	.word	0x0800c680
 80091dc:	0800bb58 	.word	0x0800bb58
 80091e0:	0800c110 	.word	0x0800c110

080091e4 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d104      	bne.n	8009200 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fa fc5d 	bl	8003aba <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009206:	2b00      	cmp	r3, #0
 8009208:	d104      	bne.n	8009214 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	4618      	mov	r0, r3
 8009210:	f7fa fc53 	bl	8003aba <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921a:	2b00      	cmp	r3, #0
 800921c:	d104      	bne.n	8009228 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009222:	4618      	mov	r0, r3
 8009224:	f7fa fc49 	bl	8003aba <lfs_free>
    }

    return 0;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
	...

08009234 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8009234:	b580      	push	{r7, lr}
 8009236:	b0a0      	sub	sp, #128	; 0x80
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
    int err = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff fe05 	bl	8008e54 <lfs_init>
 800924a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800924c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <lfs_rawformat+0x22>
            return err;
 8009252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009254:	e084      	b.n	8009360 <lfs_rawformat+0x12c>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	461a      	mov	r2, r3
 8009262:	2100      	movs	r1, #0
 8009264:	f001 fd6f 	bl	800ad46 <memset>
        lfs->free.off = 0;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800927a:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800927c:	4619      	mov	r1, r3
 800927e:	4610      	mov	r0, r2
 8009280:	f7fa fb70 	bl	8003964 <lfs_min>
 8009284:	4602      	mov	r2, r0
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7fb fb71 	bl	8004978 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8009296:	f107 030c 	add.w	r3, r7, #12
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7fd f9dd 	bl	800665c <lfs_dir_alloc>
 80092a2:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80092a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d151      	bne.n	800934e <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7fb fb04 	bl	80048b8 <lfs_fs_disk_version>
 80092b0:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 80092b2:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092b8:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80092ba:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092c0:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 80092c2:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 80092c8:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 80092ce:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 80092d4:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 80092d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fb fa62 	bl	80047a4 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80092e0:	4b21      	ldr	r3, [pc, #132]	; (8009368 <lfs_rawformat+0x134>)
 80092e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092e4:	2300      	movs	r3, #0
 80092e6:	653b      	str	r3, [r7, #80]	; 0x50
 80092e8:	4b20      	ldr	r3, [pc, #128]	; (800936c <lfs_rawformat+0x138>)
 80092ea:	657b      	str	r3, [r7, #84]	; 0x54
 80092ec:	4b20      	ldr	r3, [pc, #128]	; (8009370 <lfs_rawformat+0x13c>)
 80092ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80092f0:	4b20      	ldr	r3, [pc, #128]	; (8009374 <lfs_rawformat+0x140>)
 80092f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80092f8:	663b      	str	r3, [r7, #96]	; 0x60
 80092fa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80092fe:	f107 010c 	add.w	r1, r7, #12
 8009302:	2303      	movs	r3, #3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7fe fb87 	bl	8007a18 <lfs_dir_commit>
 800930a:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800930c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d11f      	bne.n	8009352 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8009312:	2300      	movs	r3, #0
 8009314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8009318:	f107 010c 	add.w	r1, r7, #12
 800931c:	2300      	movs	r3, #0
 800931e:	2200      	movs	r2, #0
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7fe fb79 	bl	8007a18 <lfs_dir_commit>
 8009326:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800932a:	2b00      	cmp	r3, #0
 800932c:	d113      	bne.n	8009356 <lfs_rawformat+0x122>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800932e:	2300      	movs	r3, #0
 8009330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009332:	2301      	movs	r3, #1
 8009334:	633b      	str	r3, [r7, #48]	; 0x30
 8009336:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800933a:	f107 030c 	add.w	r3, r7, #12
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7fc fdd3 	bl	8005eec <lfs_dir_fetch>
 8009346:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009348:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800934a:	2b00      	cmp	r3, #0
 800934c:	e004      	b.n	8009358 <lfs_rawformat+0x124>
            goto cleanup;
 800934e:	bf00      	nop
 8009350:	e002      	b.n	8009358 <lfs_rawformat+0x124>
            goto cleanup;
 8009352:	bf00      	nop
 8009354:	e000      	b.n	8009358 <lfs_rawformat+0x124>
            goto cleanup;
 8009356:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff ff43 	bl	80091e4 <lfs_deinit>
    return err;
 800935e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8009360:	4618      	mov	r0, r3
 8009362:	3780      	adds	r7, #128	; 0x80
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	40100000 	.word	0x40100000
 800936c:	0ff00008 	.word	0x0ff00008
 8009370:	0800c140 	.word	0x0800c140
 8009374:	20100018 	.word	0x20100018

08009378 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8009378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800937a:	b09f      	sub	sp, #124	; 0x7c
 800937c:	af04      	add	r7, sp, #16
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7ff fd65 	bl	8008e54 <lfs_init>
 800938a:	6678      	str	r0, [r7, #100]	; 0x64
    if (err) {
 800938c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <lfs_rawmount+0x1e>
        return err;
 8009392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009394:	e1f5      	b.n	8009782 <lfs_rawmount+0x40a>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009396:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800939a:	2220      	movs	r2, #32
 800939c:	2100      	movs	r1, #0
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 fcd1 	bl	800ad46 <memset>
 80093a4:	2301      	movs	r3, #1
 80093a6:	653b      	str	r3, [r7, #80]	; 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80093a8:	4aa3      	ldr	r2, [pc, #652]	; (8009638 <lfs_rawmount+0x2c0>)
 80093aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093b2:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80093b6:	2301      	movs	r3, #1
 80093b8:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 80093ba:	2301      	movs	r3, #1
 80093bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80093be:	e17f      	b.n	80096c0 <lfs_rawmount+0x348>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80093c0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80093c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80093c8:	3318      	adds	r3, #24
 80093ca:	4611      	mov	r1, r2
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fa ff69 	bl	80042a4 <lfs_pair_issync>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00a      	beq.n	80093ee <lfs_rawmount+0x76>
            LFS_WARN("Cycle detected in tail list");
 80093d8:	4b98      	ldr	r3, [pc, #608]	; (800963c <lfs_rawmount+0x2c4>)
 80093da:	f44f 5287 	mov.w	r2, #4320	; 0x10e0
 80093de:	4998      	ldr	r1, [pc, #608]	; (8009640 <lfs_rawmount+0x2c8>)
 80093e0:	4898      	ldr	r0, [pc, #608]	; (8009644 <lfs_rawmount+0x2cc>)
 80093e2:	f001 fc43 	bl	800ac6c <iprintf>
            err = LFS_ERR_CORRUPT;
 80093e6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80093ea:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 80093ec:	e1c5      	b.n	800977a <lfs_rawmount+0x402>
        }
        if (tortoise_i == tortoise_period) {
 80093ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d108      	bne.n	8009408 <lfs_rawmount+0x90>
            tortoise[0] = dir.tail[0];
 80093f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise[1] = dir.tail[1];
 80093fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093fc:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise_i = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 8009402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 8009408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800940a:	3301      	adds	r3, #1
 800940c:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	623b      	str	r3, [r7, #32]
 8009412:	4b8d      	ldr	r3, [pc, #564]	; (8009648 <lfs_rawmount+0x2d0>)
 8009414:	627b      	str	r3, [r7, #36]	; 0x24
 8009416:	2308      	movs	r3, #8
 8009418:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800941a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800941e:	f103 0218 	add.w	r2, r3, #24
 8009422:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009426:	f107 0320 	add.w	r3, r7, #32
 800942a:	9303      	str	r3, [sp, #12]
 800942c:	4b87      	ldr	r3, [pc, #540]	; (800964c <lfs_rawmount+0x2d4>)
 800942e:	9302      	str	r3, [sp, #8]
 8009430:	2300      	movs	r3, #0
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	4b86      	ldr	r3, [pc, #536]	; (8009650 <lfs_rawmount+0x2d8>)
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	4b86      	ldr	r3, [pc, #536]	; (8009654 <lfs_rawmount+0x2dc>)
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7fc f988 	bl	8005750 <lfs_dir_fetchmatch>
 8009440:	65b8      	str	r0, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8009442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009444:	2b00      	cmp	r3, #0
 8009446:	da02      	bge.n	800944e <lfs_rawmount+0xd6>
            err = tag;
 8009448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800944a:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 800944c:	e195      	b.n	800977a <lfs_rawmount+0x402>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800944e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8128 	beq.w	80096a6 <lfs_rawmount+0x32e>
 8009456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009458:	4618      	mov	r0, r3
 800945a:	f7fa ff92 	bl	8004382 <lfs_tag_isdelete>
 800945e:	4603      	mov	r3, r0
 8009460:	f083 0301 	eor.w	r3, r3, #1
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 811d 	beq.w	80096a6 <lfs_rawmount+0x32e>
            // update root
            lfs->root[0] = dir.pair[0];
 800946c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8009472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8009478:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800947c:	f107 0308 	add.w	r3, r7, #8
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	4b75      	ldr	r3, [pc, #468]	; (8009658 <lfs_rawmount+0x2e0>)
 8009484:	4a73      	ldr	r2, [pc, #460]	; (8009654 <lfs_rawmount+0x2dc>)
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7fb fc30 	bl	8004cec <lfs_dir_get>
 800948c:	65b8      	str	r0, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800948e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009490:	2b00      	cmp	r3, #0
 8009492:	da02      	bge.n	800949a <lfs_rawmount+0x122>
                err = tag;
 8009494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009496:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8009498:	e16f      	b.n	800977a <lfs_rawmount+0x402>
            }
            lfs_superblock_fromle32(&superblock);
 800949a:	f107 0308 	add.w	r3, r7, #8
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fb f948 	bl	8004734 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	0c1b      	lsrs	r3, r3, #16
 80094a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7fb fa0e 	bl	80048d4 <lfs_fs_disk_version_major>
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d108      	bne.n	80094d6 <lfs_rawmount+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7fb fa13 	bl	80048f0 <lfs_fs_disk_version_minor>
 80094ca:	4603      	mov	r3, r0
 80094cc:	461a      	mov	r2, r3
 80094ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d91d      	bls.n	8009512 <lfs_rawmount+0x19a>
                LFS_ERROR("Invalid version "
 80094d6:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 80094da:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7fb f9f8 	bl	80048d4 <lfs_fs_disk_version_major>
 80094e4:	4603      	mov	r3, r0
 80094e6:	461e      	mov	r6, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7fb fa01 	bl	80048f0 <lfs_fs_disk_version_minor>
 80094ee:	4603      	mov	r3, r0
 80094f0:	461a      	mov	r2, r3
 80094f2:	4b52      	ldr	r3, [pc, #328]	; (800963c <lfs_rawmount+0x2c4>)
 80094f4:	9303      	str	r3, [sp, #12]
 80094f6:	9202      	str	r2, [sp, #8]
 80094f8:	9601      	str	r6, [sp, #4]
 80094fa:	9400      	str	r4, [sp, #0]
 80094fc:	462b      	mov	r3, r5
 80094fe:	f241 120e 	movw	r2, #4366	; 0x110e
 8009502:	494f      	ldr	r1, [pc, #316]	; (8009640 <lfs_rawmount+0x2c8>)
 8009504:	4855      	ldr	r0, [pc, #340]	; (800965c <lfs_rawmount+0x2e4>)
 8009506:	f001 fbb1 	bl	800ac6c <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 800950a:	f06f 0315 	mvn.w	r3, #21
 800950e:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8009510:	e0c8      	b.n	80096a4 <lfs_rawmount+0x32c>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7fb f9ec 	bl	80048f0 <lfs_fs_disk_version_minor>
 8009518:	4603      	mov	r3, r0
 800951a:	461a      	mov	r2, r3
 800951c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009520:	4293      	cmp	r3, r2
 8009522:	d21d      	bcs.n	8009560 <lfs_rawmount+0x1e8>
                LFS_DEBUG("Found older minor version "
 8009524:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 8009528:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7fb f9d1 	bl	80048d4 <lfs_fs_disk_version_major>
 8009532:	4603      	mov	r3, r0
 8009534:	461e      	mov	r6, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7fb f9da 	bl	80048f0 <lfs_fs_disk_version_minor>
 800953c:	4603      	mov	r3, r0
 800953e:	461a      	mov	r2, r3
 8009540:	4b3e      	ldr	r3, [pc, #248]	; (800963c <lfs_rawmount+0x2c4>)
 8009542:	9303      	str	r3, [sp, #12]
 8009544:	9202      	str	r2, [sp, #8]
 8009546:	9601      	str	r6, [sp, #4]
 8009548:	9400      	str	r4, [sp, #0]
 800954a:	462b      	mov	r3, r5
 800954c:	f241 121c 	movw	r2, #4380	; 0x111c
 8009550:	493b      	ldr	r1, [pc, #236]	; (8009640 <lfs_rawmount+0x2c8>)
 8009552:	4843      	ldr	r0, [pc, #268]	; (8009660 <lfs_rawmount+0x2e8>)
 8009554:	f001 fb8a 	bl	800ac6c <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 8009558:	2101      	movs	r1, #1
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fbae 	bl	8009cbc <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d018      	beq.n	8009598 <lfs_rawmount+0x220>
                if (superblock.name_max > lfs->name_max) {
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956c:	429a      	cmp	r2, r3
 800956e:	d910      	bls.n	8009592 <lfs_rawmount+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009576:	4931      	ldr	r1, [pc, #196]	; (800963c <lfs_rawmount+0x2c4>)
 8009578:	9101      	str	r1, [sp, #4]
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	4613      	mov	r3, r2
 800957e:	f241 122a 	movw	r2, #4394	; 0x112a
 8009582:	492f      	ldr	r1, [pc, #188]	; (8009640 <lfs_rawmount+0x2c8>)
 8009584:	4837      	ldr	r0, [pc, #220]	; (8009664 <lfs_rawmount+0x2ec>)
 8009586:	f001 fb71 	bl	800ac6c <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800958a:	f06f 0315 	mvn.w	r3, #21
 800958e:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8009590:	e088      	b.n	80096a4 <lfs_rawmount+0x32c>
                }

                lfs->name_max = superblock.name_max;
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d018      	beq.n	80095d0 <lfs_rawmount+0x258>
                if (superblock.file_max > lfs->file_max) {
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d910      	bls.n	80095ca <lfs_rawmount+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ae:	4923      	ldr	r1, [pc, #140]	; (800963c <lfs_rawmount+0x2c4>)
 80095b0:	9101      	str	r1, [sp, #4]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	4613      	mov	r3, r2
 80095b6:	f241 1235 	movw	r2, #4405	; 0x1135
 80095ba:	4921      	ldr	r1, [pc, #132]	; (8009640 <lfs_rawmount+0x2c8>)
 80095bc:	482a      	ldr	r0, [pc, #168]	; (8009668 <lfs_rawmount+0x2f0>)
 80095be:	f001 fb55 	bl	800ac6c <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80095c2:	f06f 0315 	mvn.w	r3, #21
 80095c6:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 80095c8:	e06c      	b.n	80096a4 <lfs_rawmount+0x32c>
                }

                lfs->file_max = superblock.file_max;
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d018      	beq.n	8009608 <lfs_rawmount+0x290>
                if (superblock.attr_max > lfs->attr_max) {
 80095d6:	69fa      	ldr	r2, [r7, #28]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095dc:	429a      	cmp	r2, r3
 80095de:	d910      	bls.n	8009602 <lfs_rawmount+0x28a>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095e6:	4915      	ldr	r1, [pc, #84]	; (800963c <lfs_rawmount+0x2c4>)
 80095e8:	9101      	str	r1, [sp, #4]
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	4613      	mov	r3, r2
 80095ee:	f44f 528a 	mov.w	r2, #4416	; 0x1140
 80095f2:	4913      	ldr	r1, [pc, #76]	; (8009640 <lfs_rawmount+0x2c8>)
 80095f4:	481d      	ldr	r0, [pc, #116]	; (800966c <lfs_rawmount+0x2f4>)
 80095f6:	f001 fb39 	bl	800ac6c <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80095fa:	f06f 0315 	mvn.w	r3, #21
 80095fe:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8009600:	e050      	b.n	80096a4 <lfs_rawmount+0x32c>
                }

                lfs->attr_max = superblock.attr_max;
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	429a      	cmp	r2, r3
 8009612:	d02f      	beq.n	8009674 <lfs_rawmount+0x2fc>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	4907      	ldr	r1, [pc, #28]	; (800963c <lfs_rawmount+0x2c4>)
 800961e:	9101      	str	r1, [sp, #4]
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	4613      	mov	r3, r2
 8009624:	f241 124a 	movw	r2, #4426	; 0x114a
 8009628:	4905      	ldr	r1, [pc, #20]	; (8009640 <lfs_rawmount+0x2c8>)
 800962a:	4811      	ldr	r0, [pc, #68]	; (8009670 <lfs_rawmount+0x2f8>)
 800962c:	f001 fb1e 	bl	800ac6c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8009630:	f06f 0315 	mvn.w	r3, #21
 8009634:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8009636:	e035      	b.n	80096a4 <lfs_rawmount+0x32c>
 8009638:	0800bc90 	.word	0x0800bc90
 800963c:	0800bc4c 	.word	0x0800bc4c
 8009640:	0800bb58 	.word	0x0800bb58
 8009644:	0800c14c 	.word	0x0800c14c
 8009648:	0800c140 	.word	0x0800c140
 800964c:	08005f89 	.word	0x08005f89
 8009650:	0ff00008 	.word	0x0ff00008
 8009654:	7ffffc00 	.word	0x7ffffc00
 8009658:	20100018 	.word	0x20100018
 800965c:	0800c178 	.word	0x0800c178
 8009660:	0800c1b0 	.word	0x0800c1b0
 8009664:	0800c1f0 	.word	0x0800c1f0
 8009668:	0800c224 	.word	0x0800c224
 800966c:	0800c258 	.word	0x0800c258
 8009670:	0800c28c 	.word	0x0800c28c
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	429a      	cmp	r2, r3
 800967e:	d012      	beq.n	80096a6 <lfs_rawmount+0x32e>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	4940      	ldr	r1, [pc, #256]	; (800978c <lfs_rawmount+0x414>)
 800968a:	9101      	str	r1, [sp, #4]
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	4613      	mov	r3, r2
 8009690:	f241 1251 	movw	r2, #4433	; 0x1151
 8009694:	493e      	ldr	r1, [pc, #248]	; (8009790 <lfs_rawmount+0x418>)
 8009696:	483f      	ldr	r0, [pc, #252]	; (8009794 <lfs_rawmount+0x41c>)
 8009698:	f001 fae8 	bl	800ac6c <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 800969c:	f06f 0315 	mvn.w	r3, #21
 80096a0:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80096a2:	bf00      	nop
            goto cleanup;
 80096a4:	e069      	b.n	800977a <lfs_rawmount+0x402>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7fc fc36 	bl	8005f24 <lfs_dir_getgstate>
 80096b8:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 80096ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d15b      	bne.n	8009778 <lfs_rawmount+0x400>
    while (!lfs_pair_isnull(dir.tail)) {
 80096c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80096c4:	3318      	adds	r3, #24
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fa fda7 	bl	800421a <lfs_pair_isnull>
 80096cc:	4603      	mov	r3, r0
 80096ce:	f083 0301 	eor.w	r3, r3, #1
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f47f ae73 	bne.w	80093c0 <lfs_rawmount+0x48>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	3320      	adds	r3, #32
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fa fd9b 	bl	800421a <lfs_pair_isnull>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <lfs_rawmount+0x37a>
        err = LFS_ERR_INVAL;
 80096ea:	f06f 0315 	mvn.w	r3, #21
 80096ee:	667b      	str	r3, [r7, #100]	; 0x64
        goto cleanup;
 80096f0:	e043      	b.n	800977a <lfs_rawmount+0x402>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3330      	adds	r3, #48	; 0x30
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fa fef6 	bl	80044e8 <lfs_gstate_iszero>
 80096fc:	4603      	mov	r3, r0
 80096fe:	f083 0301 	eor.w	r3, r3, #1
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	d010      	beq.n	800972a <lfs_rawmount+0x3b2>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009714:	481d      	ldr	r0, [pc, #116]	; (800978c <lfs_rawmount+0x414>)
 8009716:	9002      	str	r0, [sp, #8]
 8009718:	9201      	str	r2, [sp, #4]
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	460b      	mov	r3, r1
 800971e:	f241 1267 	movw	r2, #4455	; 0x1167
 8009722:	491b      	ldr	r1, [pc, #108]	; (8009790 <lfs_rawmount+0x418>)
 8009724:	481c      	ldr	r0, [pc, #112]	; (8009798 <lfs_rawmount+0x420>)
 8009726:	f001 faa1 	bl	800ac6c <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972e:	4618      	mov	r0, r3
 8009730:	f7fa fe19 	bl	8004366 <lfs_tag_isvalid>
 8009734:	4603      	mov	r3, r0
 8009736:	f083 0301 	eor.w	r3, r3, #1
 800973a:	b2db      	uxtb	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009742:	441a      	add	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	333c      	adds	r3, #60	; 0x3c
 800974e:	3230      	adds	r2, #48	; 0x30
 8009750:	ca07      	ldmia	r2, {r0, r1, r2}
 8009752:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800975e:	6a12      	ldr	r2, [r2, #32]
 8009760:	fbb3 f1f2 	udiv	r1, r3, r2
 8009764:	fb01 f202 	mul.w	r2, r1, r2
 8009768:	1a9a      	subs	r2, r3, r2
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fb f911 	bl	8004996 <lfs_alloc_drop>

    return 0;
 8009774:	2300      	movs	r3, #0
 8009776:	e004      	b.n	8009782 <lfs_rawmount+0x40a>
            goto cleanup;
 8009778:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f80e 	bl	800979c <lfs_rawunmount>
    return err;
 8009780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8009782:	4618      	mov	r0, r3
 8009784:	376c      	adds	r7, #108	; 0x6c
 8009786:	46bd      	mov	sp, r7
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978a:	bf00      	nop
 800978c:	0800bc4c 	.word	0x0800bc4c
 8009790:	0800bb58 	.word	0x0800bb58
 8009794:	0800c2c0 	.word	0x0800c2c0
 8009798:	0800c2f0 	.word	0x0800c2f0

0800979c <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7ff fd1d 	bl	80091e4 <lfs_deinit>
 80097aa:	4603      	mov	r3, r0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80097b4:	b590      	push	{r4, r7, lr}
 80097b6:	b0a1      	sub	sp, #132	; 0x84
 80097b8:	af04      	add	r7, sp, #16
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80097c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097c6:	2220      	movs	r2, #32
 80097c8:	2100      	movs	r1, #0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f001 fabb 	bl	800ad46 <memset>
 80097d0:	2301      	movs	r3, #1
 80097d2:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80097d4:	4a9a      	ldr	r2, [pc, #616]	; (8009a40 <lfs_fs_rawtraverse+0x28c>)
 80097d6:	f107 031c 	add.w	r3, r7, #28
 80097da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80097de:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80097e2:	2301      	movs	r3, #1
 80097e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 80097e6:	2301      	movs	r3, #1
 80097e8:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 80097ea:	e0c0      	b.n	800996e <lfs_fs_rawtraverse+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80097ec:	f107 021c 	add.w	r2, r7, #28
 80097f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097f4:	3318      	adds	r3, #24
 80097f6:	4611      	mov	r1, r2
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fa fd53 	bl	80042a4 <lfs_pair_issync>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d009      	beq.n	8009818 <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 8009804:	4b8f      	ldr	r3, [pc, #572]	; (8009a44 <lfs_fs_rawtraverse+0x290>)
 8009806:	f241 12be 	movw	r2, #4542	; 0x11be
 800980a:	498f      	ldr	r1, [pc, #572]	; (8009a48 <lfs_fs_rawtraverse+0x294>)
 800980c:	488f      	ldr	r0, [pc, #572]	; (8009a4c <lfs_fs_rawtraverse+0x298>)
 800980e:	f001 fa2d 	bl	800ac6c <iprintf>
            return LFS_ERR_CORRUPT;
 8009812:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009816:	e10f      	b.n	8009a38 <lfs_fs_rawtraverse+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8009818:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800981a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800981c:	429a      	cmp	r2, r3
 800981e:	d108      	bne.n	8009832 <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 8009820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009822:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8009824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009826:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 800982c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 8009832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009834:	3301      	adds	r3, #1
 8009836:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 8009838:	2300      	movs	r3, #0
 800983a:	667b      	str	r3, [r7, #100]	; 0x64
 800983c:	e013      	b.n	8009866 <lfs_fs_rawtraverse+0xb2>
            int err = cb(data, dir.tail[i]);
 800983e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009840:	3306      	adds	r3, #6
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	3370      	adds	r3, #112	; 0x70
 8009846:	443b      	add	r3, r7
 8009848:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	4611      	mov	r1, r2
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	4798      	blx	r3
 8009854:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 8009856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <lfs_fs_rawtraverse+0xac>
                return err;
 800985c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800985e:	e0eb      	b.n	8009a38 <lfs_fs_rawtraverse+0x284>
        for (int i = 0; i < 2; i++) {
 8009860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009862:	3301      	adds	r3, #1
 8009864:	667b      	str	r3, [r7, #100]	; 0x64
 8009866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009868:	2b01      	cmp	r3, #1
 800986a:	dde8      	ble.n	800983e <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800986c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009870:	f103 0218 	add.w	r2, r3, #24
 8009874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009878:	4619      	mov	r1, r3
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7fc fb36 	bl	8005eec <lfs_dir_fetch>
 8009880:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8009882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <lfs_fs_rawtraverse+0xd8>
            return err;
 8009888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800988a:	e0d5      	b.n	8009a38 <lfs_fs_rawtraverse+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800988c:	2300      	movs	r3, #0
 800988e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009892:	e067      	b.n	8009964 <lfs_fs_rawtraverse+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8009894:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009898:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800989a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800989e:	f043 0308 	orr.w	r3, r3, #8
 80098a2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80098a6:	f107 0214 	add.w	r2, r7, #20
 80098aa:	9200      	str	r2, [sp, #0]
 80098ac:	4a68      	ldr	r2, [pc, #416]	; (8009a50 <lfs_fs_rawtraverse+0x29c>)
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7fb fa1c 	bl	8004cec <lfs_dir_get>
 80098b4:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 80098b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	da05      	bge.n	80098c8 <lfs_fs_rawtraverse+0x114>
                if (tag == LFS_ERR_NOENT) {
 80098bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098be:	f113 0f02 	cmn.w	r3, #2
 80098c2:	d049      	beq.n	8009958 <lfs_fs_rawtraverse+0x1a4>
                    continue;
                }
                return tag;
 80098c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c6:	e0b7      	b.n	8009a38 <lfs_fs_rawtraverse+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 80098c8:	f107 0314 	add.w	r3, r7, #20
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fa ff01 	bl	80046d4 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80098d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fa fd87 	bl	80043e8 <lfs_tag_type3>
 80098da:	4603      	mov	r3, r0
 80098dc:	461a      	mov	r2, r3
 80098de:	f240 2302 	movw	r3, #514	; 0x202
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d113      	bne.n	800990e <lfs_fs_rawtraverse+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	6978      	ldr	r0, [r7, #20]
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	9202      	str	r2, [sp, #8]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	9201      	str	r2, [sp, #4]
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	4603      	mov	r3, r0
 80098f8:	460a      	mov	r2, r1
 80098fa:	2100      	movs	r1, #0
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f7fe fa5b 	bl	8007db8 <lfs_ctz_traverse>
 8009902:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8009904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d027      	beq.n	800995a <lfs_fs_rawtraverse+0x1a6>
                    return err;
 800990a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800990c:	e094      	b.n	8009a38 <lfs_fs_rawtraverse+0x284>
                }
            } else if (includeorphans &&
 800990e:	78fb      	ldrb	r3, [r7, #3]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d022      	beq.n	800995a <lfs_fs_rawtraverse+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8009914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009916:	4618      	mov	r0, r3
 8009918:	f7fa fd66 	bl	80043e8 <lfs_tag_type3>
 800991c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800991e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009922:	d11a      	bne.n	800995a <lfs_fs_rawtraverse+0x1a6>
                for (int i = 0; i < 2; i++) {
 8009924:	2300      	movs	r3, #0
 8009926:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009928:	e012      	b.n	8009950 <lfs_fs_rawtraverse+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 800992a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	f107 0214 	add.w	r2, r7, #20
 8009932:	4413      	add	r3, r2
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	4611      	mov	r1, r2
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	4798      	blx	r3
 800993e:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 8009940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <lfs_fs_rawtraverse+0x196>
                        return err;
 8009946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009948:	e076      	b.n	8009a38 <lfs_fs_rawtraverse+0x284>
                for (int i = 0; i < 2; i++) {
 800994a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800994c:	3301      	adds	r3, #1
 800994e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009952:	2b01      	cmp	r3, #1
 8009954:	dde9      	ble.n	800992a <lfs_fs_rawtraverse+0x176>
 8009956:	e000      	b.n	800995a <lfs_fs_rawtraverse+0x1a6>
                    continue;
 8009958:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800995a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800995e:	3301      	adds	r3, #1
 8009960:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009964:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009966:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800996a:	429a      	cmp	r2, r3
 800996c:	d392      	bcc.n	8009894 <lfs_fs_rawtraverse+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 800996e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009972:	3318      	adds	r3, #24
 8009974:	4618      	mov	r0, r3
 8009976:	f7fa fc50 	bl	800421a <lfs_pair_isnull>
 800997a:	4603      	mov	r3, r0
 800997c:	f083 0301 	eor.w	r3, r3, #1
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	f47f af32 	bne.w	80097ec <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998c:	65bb      	str	r3, [r7, #88]	; 0x58
 800998e:	e04f      	b.n	8009a30 <lfs_fs_rawtraverse+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8009990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009992:	799b      	ldrb	r3, [r3, #6]
 8009994:	2b01      	cmp	r3, #1
 8009996:	d147      	bne.n	8009a28 <lfs_fs_rawtraverse+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8009998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800999a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d01d      	beq.n	80099e0 <lfs_fs_rawtraverse+0x22c>
 80099a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d117      	bne.n	80099e0 <lfs_fs_rawtraverse+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80099b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099b2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099ba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80099bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	9202      	str	r2, [sp, #8]
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	9201      	str	r2, [sp, #4]
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	4623      	mov	r3, r4
 80099cc:	4602      	mov	r2, r0
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f7fe f9f2 	bl	8007db8 <lfs_ctz_traverse>
 80099d4:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80099d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <lfs_fs_rawtraverse+0x22c>
                return err;
 80099dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099de:	e02b      	b.n	8009a38 <lfs_fs_rawtraverse+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80099e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d01e      	beq.n	8009a2a <lfs_fs_rawtraverse+0x276>
 80099ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d118      	bne.n	8009a2a <lfs_fs_rawtraverse+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80099f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099fa:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a02:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	9202      	str	r2, [sp, #8]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	9201      	str	r2, [sp, #4]
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	4623      	mov	r3, r4
 8009a14:	4602      	mov	r2, r0
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7fe f9ce 	bl	8007db8 <lfs_ctz_traverse>
 8009a1c:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8009a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <lfs_fs_rawtraverse+0x276>
                return err;
 8009a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a26:	e007      	b.n	8009a38 <lfs_fs_rawtraverse+0x284>
            continue;
 8009a28:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1ac      	bne.n	8009990 <lfs_fs_rawtraverse+0x1dc>
            }
        }
    }
#endif

    return 0;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3774      	adds	r7, #116	; 0x74
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd90      	pop	{r4, r7, pc}
 8009a40:	0800bc90 	.word	0x0800bc90
 8009a44:	0800bc4c 	.word	0x0800bc4c
 8009a48:	0800bb58 	.word	0x0800bb58
 8009a4c:	0800c14c 	.word	0x0800c14c
 8009a50:	700ffc00 	.word	0x700ffc00

08009a54 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08a      	sub	sp, #40	; 0x28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009a6c:	4a2d      	ldr	r2, [pc, #180]	; (8009b24 <lfs_fs_pred+0xd0>)
 8009a6e:	f107 0314 	add.w	r3, r7, #20
 8009a72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a76:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8009a82:	e03e      	b.n	8009b02 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3318      	adds	r3, #24
 8009a88:	f107 0214 	add.w	r2, r7, #20
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fa fc08 	bl	80042a4 <lfs_pair_issync>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d009      	beq.n	8009aae <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8009a9a:	4b23      	ldr	r3, [pc, #140]	; (8009b28 <lfs_fs_pred+0xd4>)
 8009a9c:	f241 221c 	movw	r2, #4636	; 0x121c
 8009aa0:	4922      	ldr	r1, [pc, #136]	; (8009b2c <lfs_fs_pred+0xd8>)
 8009aa2:	4823      	ldr	r0, [pc, #140]	; (8009b30 <lfs_fs_pred+0xdc>)
 8009aa4:	f001 f8e2 	bl	800ac6c <iprintf>
            return LFS_ERR_CORRUPT;
 8009aa8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009aac:	e036      	b.n	8009b1c <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8009aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d10a      	bne.n	8009acc <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	005b      	lsls	r3, r3, #1
 8009aca:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	3301      	adds	r3, #1
 8009ad0:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3318      	adds	r3, #24
 8009ad6:	68b9      	ldr	r1, [r7, #8]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fa fbb9 	bl	8004250 <lfs_pair_cmp>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <lfs_fs_pred+0x94>
            return 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	e019      	b.n	8009b1c <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3318      	adds	r3, #24
 8009aec:	461a      	mov	r2, r3
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f7fc f9fb 	bl	8005eec <lfs_dir_fetch>
 8009af6:	61f8      	str	r0, [r7, #28]
        if (err) {
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <lfs_fs_pred+0xae>
            return err;
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	e00c      	b.n	8009b1c <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3318      	adds	r3, #24
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fa fb87 	bl	800421a <lfs_pair_isnull>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	f083 0301 	eor.w	r3, r3, #1
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1b5      	bne.n	8009a84 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8009b18:	f06f 0301 	mvn.w	r3, #1
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3728      	adds	r7, #40	; 0x28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	0800bc90 	.word	0x0800bc90
 8009b28:	0800bc4c 	.word	0x0800bc4c
 8009b2c:	0800bb58 	.word	0x0800bb58
 8009b30:	0800c14c 	.word	0x0800c14c

08009b34 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8009b34:	b5b0      	push	{r4, r5, r7, lr}
 8009b36:	b08e      	sub	sp, #56	; 0x38
 8009b38:	af04      	add	r7, sp, #16
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8009b54:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b5a:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	69fa      	ldr	r2, [r7, #28]
 8009b62:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8009b64:	2108      	movs	r1, #8
 8009b66:	9103      	str	r1, [sp, #12]
 8009b68:	f107 0110 	add.w	r1, r7, #16
 8009b6c:	9102      	str	r1, [sp, #8]
 8009b6e:	9201      	str	r2, [sp, #4]
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	462b      	mov	r3, r5
 8009b74:	4622      	mov	r2, r4
 8009b76:	4601      	mov	r1, r0
 8009b78:	6a38      	ldr	r0, [r7, #32]
 8009b7a:	f7f9 ffcf 	bl	8003b1c <lfs_bd_read>
 8009b7e:	61b8      	str	r0, [r7, #24]
    if (err) {
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <lfs_fs_parent_match+0x56>
        return err;
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	e012      	b.n	8009bb0 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8009b8a:	f107 0310 	add.w	r3, r7, #16
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fa fbb5 	bl	80042fe <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	1d1a      	adds	r2, r3, #4
 8009b98:	f107 0310 	add.w	r3, r7, #16
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fa fb56 	bl	8004250 <lfs_pair_cmp>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bf14      	ite	ne
 8009baa:	2301      	movne	r3, #1
 8009bac:	2300      	moveq	r3, #0
 8009bae:	b2db      	uxtb	r3, r3
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3728      	adds	r7, #40	; 0x28
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bdb0      	pop	{r4, r5, r7, pc}

08009bb8 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b090      	sub	sp, #64	; 0x40
 8009bbc:	af04      	add	r7, sp, #16
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009bd0:	4a33      	ldr	r2, [pc, #204]	; (8009ca0 <lfs_fs_parent+0xe8>)
 8009bd2:	f107 031c 	add.w	r3, r7, #28
 8009bd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bda:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009bde:	2301      	movs	r3, #1
 8009be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8009be2:	2301      	movs	r3, #1
 8009be4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8009be6:	e04a      	b.n	8009c7e <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	3318      	adds	r3, #24
 8009bec:	f107 021c 	add.w	r2, r7, #28
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fa fb56 	bl	80042a4 <lfs_pair_issync>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d009      	beq.n	8009c12 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8009bfe:	4b29      	ldr	r3, [pc, #164]	; (8009ca4 <lfs_fs_parent+0xec>)
 8009c00:	f241 225d 	movw	r2, #4701	; 0x125d
 8009c04:	4928      	ldr	r1, [pc, #160]	; (8009ca8 <lfs_fs_parent+0xf0>)
 8009c06:	4829      	ldr	r0, [pc, #164]	; (8009cac <lfs_fs_parent+0xf4>)
 8009c08:	f001 f830 	bl	800ac6c <iprintf>
            return LFS_ERR_CORRUPT;
 8009c0c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009c10:	e042      	b.n	8009c98 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8009c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d10a      	bne.n	8009c30 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 8009c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2c:	005b      	lsls	r3, r3, #1
 8009c2e:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 8009c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c32:	3301      	adds	r3, #1
 8009c34:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009c44:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009c4c:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8009c4e:	f107 0310 	add.w	r3, r7, #16
 8009c52:	9303      	str	r3, [sp, #12]
 8009c54:	4b16      	ldr	r3, [pc, #88]	; (8009cb0 <lfs_fs_parent+0xf8>)
 8009c56:	9302      	str	r3, [sp, #8]
 8009c58:	2300      	movs	r3, #0
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	4b15      	ldr	r3, [pc, #84]	; (8009cb4 <lfs_fs_parent+0xfc>)
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	4b15      	ldr	r3, [pc, #84]	; (8009cb8 <lfs_fs_parent+0x100>)
 8009c62:	6879      	ldr	r1, [r7, #4]
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7fb fd73 	bl	8005750 <lfs_dir_fetchmatch>
 8009c6a:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d005      	beq.n	8009c7e <lfs_fs_parent+0xc6>
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	f113 0f02 	cmn.w	r3, #2
 8009c78:	d001      	beq.n	8009c7e <lfs_fs_parent+0xc6>
            return tag;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	e00c      	b.n	8009c98 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	3318      	adds	r3, #24
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fa fac9 	bl	800421a <lfs_pair_isnull>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	f083 0301 	eor.w	r3, r3, #1
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1a9      	bne.n	8009be8 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8009c94:	f06f 0301 	mvn.w	r3, #1
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3730      	adds	r7, #48	; 0x30
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	0800bc90 	.word	0x0800bc90
 8009ca4:	0800bc4c 	.word	0x0800bc4c
 8009ca8:	0800bb58 	.word	0x0800bb58
 8009cac:	0800c14c 	.word	0x0800c14c
 8009cb0:	08009b35 	.word	0x08009b35
 8009cb4:	20000008 	.word	0x20000008
 8009cb8:	7ff003ff 	.word	0x7ff003ff

08009cbc <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ccc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	025b      	lsls	r3, r3, #9
 8009cd4:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009cda:	bf00      	nop
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
	...

08009ce8 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8009ce8:	b590      	push	{r4, r7, lr}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fa fbaf 	bl	800445c <lfs_tag_size>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10a      	bne.n	8009d1a <lfs_fs_preporphans+0x32>
 8009d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	da06      	bge.n	8009d1a <lfs_fs_preporphans+0x32>
 8009d0c:	4b1a      	ldr	r3, [pc, #104]	; (8009d78 <lfs_fs_preporphans+0x90>)
 8009d0e:	4a1b      	ldr	r2, [pc, #108]	; (8009d7c <lfs_fs_preporphans+0x94>)
 8009d10:	f241 217e 	movw	r1, #4734	; 0x127e
 8009d14:	481a      	ldr	r0, [pc, #104]	; (8009d80 <lfs_fs_preporphans+0x98>)
 8009d16:	f000 fe0d 	bl	800a934 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fa fb9c 	bl	800445c <lfs_tag_size>
 8009d24:	4603      	mov	r3, r0
 8009d26:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009d2a:	d90a      	bls.n	8009d42 <lfs_fs_preporphans+0x5a>
 8009d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	dd06      	ble.n	8009d42 <lfs_fs_preporphans+0x5a>
 8009d34:	4b13      	ldr	r3, [pc, #76]	; (8009d84 <lfs_fs_preporphans+0x9c>)
 8009d36:	4a11      	ldr	r2, [pc, #68]	; (8009d7c <lfs_fs_preporphans+0x94>)
 8009d38:	f241 217f 	movw	r1, #4735	; 0x127f
 8009d3c:	4810      	ldr	r0, [pc, #64]	; (8009d80 <lfs_fs_preporphans+0x98>)
 8009d3e:	f000 fdf9 	bl	800a934 <__assert_func>
    lfs->gstate.tag += orphans;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d4a:	441a      	add	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d54:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	3330      	adds	r3, #48	; 0x30
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fa fbe0 	bl	8004522 <lfs_gstate_hasorphans>
 8009d62:	4603      	mov	r3, r0
 8009d64:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8009d66:	ea44 0203 	orr.w	r2, r4, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd90      	pop	{r4, r7, pc}
 8009d78:	0800c328 	.word	0x0800c328
 8009d7c:	0800c68c 	.word	0x0800c68c
 8009d80:	0800bb58 	.word	0x0800bb58
 8009d84:	0800c360 	.word	0x0800c360

08009d88 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	460b      	mov	r3, r1
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9a:	4a17      	ldr	r2, [pc, #92]	; (8009df8 <lfs_fs_prepmove+0x70>)
 8009d9c:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8009d9e:	897b      	ldrh	r3, [r7, #10]
 8009da0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009da4:	428b      	cmp	r3, r1
 8009da6:	d006      	beq.n	8009db6 <lfs_fs_prepmove+0x2e>
 8009da8:	897b      	ldrh	r3, [r7, #10]
 8009daa:	029b      	lsls	r3, r3, #10
 8009dac:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8009db0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8009db4:	e000      	b.n	8009db8 <lfs_fs_prepmove+0x30>
 8009db6:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8009db8:	431a      	orrs	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8009dbe:	897b      	ldrh	r3, [r7, #10]
 8009dc0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d002      	beq.n	8009dce <lfs_fs_prepmove+0x46>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	e000      	b.n	8009dd0 <lfs_fs_prepmove+0x48>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8009dd4:	897b      	ldrh	r3, [r7, #10]
 8009dd6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d003      	beq.n	8009de6 <lfs_fs_prepmove+0x5e>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	3304      	adds	r3, #4
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	e000      	b.n	8009de8 <lfs_fs_prepmove+0x60>
 8009de6:	2300      	movs	r3, #0
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009dec:	bf00      	nop
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	800003ff 	.word	0x800003ff

08009dfc <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b098      	sub	sp, #96	; 0x60
 8009e00:	af02      	add	r7, sp, #8
 8009e02:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3330      	adds	r3, #48	; 0x30
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fa fbbf 	bl	800458c <lfs_gstate_needssuperblock>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	f083 0301 	eor.w	r3, r3, #1
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <lfs_fs_desuperblock+0x22>
        return 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e04f      	b.n	8009ebe <lfs_fs_desuperblock+0xc2>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1a      	ldr	r2, [r3, #32]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e26:	4928      	ldr	r1, [pc, #160]	; (8009ec8 <lfs_fs_desuperblock+0xcc>)
 8009e28:	9101      	str	r1, [sp, #4]
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	f241 2298 	movw	r2, #4760	; 0x1298
 8009e32:	4926      	ldr	r1, [pc, #152]	; (8009ecc <lfs_fs_desuperblock+0xd0>)
 8009e34:	4826      	ldr	r0, [pc, #152]	; (8009ed0 <lfs_fs_desuperblock+0xd4>)
 8009e36:	f000 ff19 	bl	800ac6c <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f103 0220 	add.w	r2, r3, #32
 8009e40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7fc f850 	bl	8005eec <lfs_dir_fetch>
 8009e4c:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8009e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <lfs_fs_desuperblock+0x5c>
        return err;
 8009e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e56:	e032      	b.n	8009ebe <lfs_fs_desuperblock+0xc2>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7fa fd2d 	bl	80048b8 <lfs_fs_disk_version>
 8009e5e:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8009e60:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e66:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8009e68:	623b      	str	r3, [r7, #32]
        .block_count = lfs->cfg->block_count,
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
    lfs_superblock_t superblock = {
 8009e70:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8009e76:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 8009e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8009e82:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 8009e84:	f107 031c 	add.w	r3, r7, #28
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fa fc8b 	bl	80047a4 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8009e8e:	4b11      	ldr	r3, [pc, #68]	; (8009ed4 <lfs_fs_desuperblock+0xd8>)
 8009e90:	617b      	str	r3, [r7, #20]
 8009e92:	f107 031c 	add.w	r3, r7, #28
 8009e96:	61bb      	str	r3, [r7, #24]
 8009e98:	f107 0214 	add.w	r2, r7, #20
 8009e9c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7fd fdb8 	bl	8007a18 <lfs_dir_commit>
 8009ea8:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8009eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <lfs_fs_desuperblock+0xb8>
        return err;
 8009eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eb2:	e004      	b.n	8009ebe <lfs_fs_desuperblock+0xc2>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff ff00 	bl	8009cbc <lfs_fs_prepsuperblock>
    return 0;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3758      	adds	r7, #88	; 0x58
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	0800bc4c 	.word	0x0800bc4c
 8009ecc:	0800bb58 	.word	0x0800bb58
 8009ed0:	0800c398 	.word	0x0800c398
 8009ed4:	20100018 	.word	0x20100018

08009ed8 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8009ed8:	b5b0      	push	{r4, r5, r7, lr}
 8009eda:	b094      	sub	sp, #80	; 0x50
 8009edc:	af04      	add	r7, sp, #16
 8009ede:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	333c      	adds	r3, #60	; 0x3c
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fa fb3e 	bl	8004566 <lfs_gstate_hasmove>
 8009eea:	4603      	mov	r3, r0
 8009eec:	f083 0301 	eor.w	r3, r3, #1
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <lfs_fs_demove+0x22>
        return 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e05b      	b.n	8009fb2 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fa fa98 	bl	800443c <lfs_tag_id>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	461a      	mov	r2, r3
 8009f10:	4b2a      	ldr	r3, [pc, #168]	; (8009fbc <lfs_fs_demove+0xe4>)
 8009f12:	9302      	str	r3, [sp, #8]
 8009f14:	9201      	str	r2, [sp, #4]
 8009f16:	9400      	str	r4, [sp, #0]
 8009f18:	462b      	mov	r3, r5
 8009f1a:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8009f1e:	4928      	ldr	r1, [pc, #160]	; (8009fc0 <lfs_fs_demove+0xe8>)
 8009f20:	4828      	ldr	r0, [pc, #160]	; (8009fc4 <lfs_fs_demove+0xec>)
 8009f22:	f000 fea3 	bl	800ac6c <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fa fa5c 	bl	80043e8 <lfs_tag_type3>
 8009f30:	4603      	mov	r3, r0
 8009f32:	461a      	mov	r2, r3
 8009f34:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d006      	beq.n	8009f4a <lfs_fs_demove+0x72>
 8009f3c:	4b22      	ldr	r3, [pc, #136]	; (8009fc8 <lfs_fs_demove+0xf0>)
 8009f3e:	4a23      	ldr	r2, [pc, #140]	; (8009fcc <lfs_fs_demove+0xf4>)
 8009f40:	f241 21c7 	movw	r1, #4807	; 0x12c7
 8009f44:	481e      	ldr	r0, [pc, #120]	; (8009fc0 <lfs_fs_demove+0xe8>)
 8009f46:	f000 fcf5 	bl	800a934 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009f50:	f107 0318 	add.w	r3, r7, #24
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7fb ffc8 	bl	8005eec <lfs_dir_fetch>
 8009f5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8009f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <lfs_fs_demove+0x90>
        return err;
 8009f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f66:	e024      	b.n	8009fb2 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7fa fa65 	bl	800443c <lfs_tag_id>
 8009f72:	4603      	mov	r3, r0
 8009f74:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8009f76:	2200      	movs	r2, #0
 8009f78:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7ff ff03 	bl	8009d88 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8009f82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009f84:	029b      	lsls	r3, r3, #10
 8009f86:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8009f8a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8009f8e:	613b      	str	r3, [r7, #16]
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
 8009f94:	f107 0210 	add.w	r2, r7, #16
 8009f98:	f107 0118 	add.w	r1, r7, #24
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7fd fd3a 	bl	8007a18 <lfs_dir_commit>
 8009fa4:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8009fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <lfs_fs_demove+0xd8>
        return err;
 8009fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fae:	e000      	b.n	8009fb2 <lfs_fs_demove+0xda>
    }

    return 0;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3740      	adds	r7, #64	; 0x40
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	0800bc4c 	.word	0x0800bc4c
 8009fc0:	0800bb58 	.word	0x0800bb58
 8009fc4:	0800c3cc 	.word	0x0800c3cc
 8009fc8:	0800c400 	.word	0x0800c400
 8009fcc:	0800c6a0 	.word	0x0800c6a0

08009fd0 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8009fd0:	b5b0      	push	{r4, r5, r7, lr}
 8009fd2:	b0b2      	sub	sp, #200	; 0xc8
 8009fd4:	af04      	add	r7, sp, #16
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	3330      	adds	r3, #48	; 0x30
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fa fa9e 	bl	8004522 <lfs_gstate_hasorphans>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	f083 0301 	eor.w	r3, r3, #1
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <lfs_fs_deorphan+0x26>
        return 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e187      	b.n	800a306 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8009ffc:	e170      	b.n	800a2e0 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8009ffe:	f107 0308 	add.w	r3, r7, #8
 800a002:	2220      	movs	r2, #32
 800a004:	2100      	movs	r1, #0
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fe9d 	bl	800ad46 <memset>
 800a00c:	2301      	movs	r3, #1
 800a00e:	77fb      	strb	r3, [r7, #31]
 800a010:	2301      	movs	r3, #1
 800a012:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 800a014:	2300      	movs	r3, #0
 800a016:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800a01a:	e149      	b.n	800a2b0 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800a01c:	f107 0308 	add.w	r3, r7, #8
 800a020:	f103 0218 	add.w	r2, r3, #24
 800a024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7fb ff5e 	bl	8005eec <lfs_dir_fetch>
 800a030:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 800a034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <lfs_fs_deorphan+0x72>
                return err;
 800a03c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a040:	e161      	b.n	800a306 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800a042:	7ffb      	ldrb	r3, [r7, #31]
 800a044:	f083 0301 	eor.w	r3, r3, #1
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 8126 	beq.w	800a29c <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800a050:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a054:	f107 0308 	add.w	r3, r7, #8
 800a058:	3318      	adds	r3, #24
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff fdab 	bl	8009bb8 <lfs_fs_parent>
 800a062:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800a066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	da07      	bge.n	800a07e <lfs_fs_deorphan+0xae>
 800a06e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a072:	f113 0f02 	cmn.w	r3, #2
 800a076:	d002      	beq.n	800a07e <lfs_fs_deorphan+0xae>
                    return tag;
 800a078:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a07c:	e143      	b.n	800a306 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 800a07e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a082:	2b00      	cmp	r3, #0
 800a084:	f040 80ac 	bne.w	800a1e0 <lfs_fs_deorphan+0x210>
 800a088:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a08c:	f113 0f02 	cmn.w	r3, #2
 800a090:	f000 80a6 	beq.w	800a1e0 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800a094:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a098:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a09c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	4a9a      	ldr	r2, [pc, #616]	; (800a310 <lfs_fs_deorphan+0x340>)
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7fa fe20 	bl	8004cec <lfs_dir_get>
 800a0ac:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800a0b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	da02      	bge.n	800a0be <lfs_fs_deorphan+0xee>
                        return state;
 800a0b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0bc:	e0eb      	b.n	800a296 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 800a0be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fa f91b 	bl	80042fe <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 800a0c8:	f107 0308 	add.w	r3, r7, #8
 800a0cc:	f103 0218 	add.w	r2, r3, #24
 800a0d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fa f8e4 	bl	80042a4 <lfs_pair_issync>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f083 0301 	eor.w	r3, r3, #1
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d07b      	beq.n	800a1e0 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800a0e8:	6a38      	ldr	r0, [r7, #32]
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a0f0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a0f4:	4c87      	ldr	r4, [pc, #540]	; (800a314 <lfs_fs_deorphan+0x344>)
 800a0f6:	9403      	str	r4, [sp, #12]
 800a0f8:	9102      	str	r1, [sp, #8]
 800a0fa:	9201      	str	r2, [sp, #4]
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	4603      	mov	r3, r0
 800a100:	f241 320d 	movw	r2, #4877	; 0x130d
 800a104:	4984      	ldr	r1, [pc, #528]	; (800a318 <lfs_fs_deorphan+0x348>)
 800a106:	4885      	ldr	r0, [pc, #532]	; (800a31c <lfs_fs_deorphan+0x34c>)
 800a108:	f000 fdb0 	bl	800ac6c <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800a10c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a110:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3330      	adds	r3, #48	; 0x30
 800a118:	f107 0208 	add.w	r2, r7, #8
 800a11c:	4611      	mov	r1, r2
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fa fa48 	bl	80045b4 <lfs_gstate_hasmovehere>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d01c      	beq.n	800a164 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fa f984 	bl	800443c <lfs_tag_id>
 800a134:	4603      	mov	r3, r0
 800a136:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 800a142:	4874      	ldr	r0, [pc, #464]	; (800a314 <lfs_fs_deorphan+0x344>)
 800a144:	9002      	str	r0, [sp, #8]
 800a146:	9201      	str	r2, [sp, #4]
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	460b      	mov	r3, r1
 800a14c:	f241 3218 	movw	r2, #4888	; 0x1318
 800a150:	4971      	ldr	r1, [pc, #452]	; (800a318 <lfs_fs_deorphan+0x348>)
 800a152:	4873      	ldr	r0, [pc, #460]	; (800a320 <lfs_fs_deorphan+0x350>)
 800a154:	f000 fd8a 	bl	800ac6c <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800a158:	2200      	movs	r2, #0
 800a15a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff fe12 	bl	8009d88 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800a164:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fa f8e2 	bl	8004332 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800a16e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800a172:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a176:	4293      	cmp	r3, r2
 800a178:	d007      	beq.n	800a18a <lfs_fs_deorphan+0x1ba>
 800a17a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800a17e:	029b      	lsls	r3, r3, #10
 800a180:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a184:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a188:	e000      	b.n	800a18c <lfs_fs_deorphan+0x1bc>
 800a18a:	2300      	movs	r3, #0
 800a18c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a190:	2300      	movs	r3, #0
 800a192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a196:	4b63      	ldr	r3, [pc, #396]	; (800a324 <lfs_fs_deorphan+0x354>)
 800a198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a19c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a1a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a1a4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800a1a8:	f107 0108 	add.w	r1, r7, #8
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7fd f938 	bl	8007424 <lfs_dir_orphaningcommit>
 800a1b4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 800a1b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fa f89e 	bl	80042fe <lfs_pair_fromle32>
                        if (state < 0) {
 800a1c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	da02      	bge.n	800a1d0 <lfs_fs_deorphan+0x200>
                            return state;
 800a1ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 800a1ce:	e062      	b.n	800a296 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800a1d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d16b      	bne.n	800a2b0 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800a1de:	e067      	b.n	800a2b0 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 800a1e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d159      	bne.n	800a29c <lfs_fs_deorphan+0x2cc>
 800a1e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a1ec:	f113 0f02 	cmn.w	r3, #2
 800a1f0:	d154      	bne.n	800a29c <lfs_fs_deorphan+0x2cc>
 800a1f2:	78fb      	ldrb	r3, [r7, #3]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d051      	beq.n	800a29c <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800a1f8:	6a3a      	ldr	r2, [r7, #32]
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	4945      	ldr	r1, [pc, #276]	; (800a314 <lfs_fs_deorphan+0x344>)
 800a1fe:	9101      	str	r1, [sp, #4]
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	4613      	mov	r3, r2
 800a204:	f241 3238 	movw	r2, #4920	; 0x1338
 800a208:	4943      	ldr	r1, [pc, #268]	; (800a318 <lfs_fs_deorphan+0x348>)
 800a20a:	4847      	ldr	r0, [pc, #284]	; (800a328 <lfs_fs_deorphan+0x358>)
 800a20c:	f000 fd2e 	bl	800ac6c <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7fb fe81 	bl	8005f24 <lfs_dir_getgstate>
 800a222:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 800a226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <lfs_fs_deorphan+0x264>
                        return err;
 800a22e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a232:	e030      	b.n	800a296 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800a234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a238:	3318      	adds	r3, #24
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fa f879 	bl	8004332 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800a240:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a244:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800a248:	051a      	lsls	r2, r3, #20
 800a24a:	4b38      	ldr	r3, [pc, #224]	; (800a32c <lfs_fs_deorphan+0x35c>)
 800a24c:	4313      	orrs	r3, r2
 800a24e:	673b      	str	r3, [r7, #112]	; 0x70
 800a250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a254:	3318      	adds	r3, #24
 800a256:	677b      	str	r3, [r7, #116]	; 0x74
 800a258:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a25c:	f107 0108 	add.w	r1, r7, #8
 800a260:	2301      	movs	r3, #1
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7fd f8de 	bl	8007424 <lfs_dir_orphaningcommit>
 800a268:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800a26c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a270:	3318      	adds	r3, #24
 800a272:	4618      	mov	r0, r3
 800a274:	f7fa f843 	bl	80042fe <lfs_pair_fromle32>
                    if (state < 0) {
 800a278:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	da02      	bge.n	800a286 <lfs_fs_deorphan+0x2b6>
                        return state;
 800a280:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 800a284:	e03f      	b.n	800a306 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800a286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d104      	bne.n	800a298 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 800a28e:	2301      	movs	r3, #1
 800a290:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800a294:	e00c      	b.n	800a2b0 <lfs_fs_deorphan+0x2e0>
                return err;
 800a296:	e036      	b.n	800a306 <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 800a298:	bf00      	nop
 800a29a:	e009      	b.n	800a2b0 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 800a29c:	f107 0408 	add.w	r4, r7, #8
 800a2a0:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800a2a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a2ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 800a2b0:	f107 0308 	add.w	r3, r7, #8
 800a2b4:	3318      	adds	r3, #24
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7f9 ffaf 	bl	800421a <lfs_pair_isnull>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	f083 0301 	eor.w	r3, r3, #1
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f47f aea9 	bne.w	800a01c <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 800a2ca:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <lfs_fs_deorphan+0x306>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e002      	b.n	800a2dc <lfs_fs_deorphan+0x30c>
 800a2d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2da:	3301      	adds	r3, #1
 800a2dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 800a2e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	f77f ae8a 	ble.w	8009ffe <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3330      	adds	r3, #48	; 0x30
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fa f92a 	bl	8004548 <lfs_gstate_getorphans>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	425b      	negs	r3, r3
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	b25b      	sxtb	r3, r3
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7ff fcf2 	bl	8009ce8 <lfs_fs_preporphans>
 800a304:	4603      	mov	r3, r0
}
 800a306:	4618      	mov	r0, r3
 800a308:	37b8      	adds	r7, #184	; 0xb8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bdb0      	pop	{r4, r5, r7, pc}
 800a30e:	bf00      	nop
 800a310:	7ffffc00 	.word	0x7ffffc00
 800a314:	0800bc4c 	.word	0x0800bc4c
 800a318:	0800bb58 	.word	0x0800bb58
 800a31c:	0800c434 	.word	0x0800c434
 800a320:	0800c478 	.word	0x0800c478
 800a324:	600ffc08 	.word	0x600ffc08
 800a328:	0800c4c0 	.word	0x0800c4c0
 800a32c:	000ffc08 	.word	0x000ffc08

0800a330 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff fd5f 	bl	8009dfc <lfs_fs_desuperblock>
 800a33e:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <lfs_fs_forceconsistency+0x1a>
        return err;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	e013      	b.n	800a372 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7ff fdc4 	bl	8009ed8 <lfs_fs_demove>
 800a350:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <lfs_fs_forceconsistency+0x2c>
        return err;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	e00a      	b.n	800a372 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 800a35c:	2101      	movs	r1, #1
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff fe36 	bl	8009fd0 <lfs_fs_deorphan>
 800a364:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <lfs_fs_forceconsistency+0x40>
        return err;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	e000      	b.n	800a372 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800a37a:	b480      	push	{r7}
 800a37c:	b085      	sub	sp, #20
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	601a      	str	r2, [r3, #0]
    return 0;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800a3ac:	f107 0208 	add.w	r2, r7, #8
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4907      	ldr	r1, [pc, #28]	; (800a3d0 <lfs_fs_rawsize+0x30>)
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff f9fd 	bl	80097b4 <lfs_fs_rawtraverse>
 800a3ba:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <lfs_fs_rawsize+0x26>
        return err;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	e000      	b.n	800a3c8 <lfs_fs_rawsize+0x28>
    }

    return size;
 800a3c6:	68bb      	ldr	r3, [r7, #8]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	0800a37b 	.word	0x0800a37b

0800a3d4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <lfs_format+0x18>
        return err;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	e005      	b.n	800a3f8 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800a3ec:	6839      	ldr	r1, [r7, #0]
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7fe ff20 	bl	8009234 <lfs_rawformat>
 800a3f4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a40a:	2300      	movs	r3, #0
 800a40c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <lfs_mount+0x18>
        return err;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	e005      	b.n	800a424 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7fe ffac 	bl	8009378 <lfs_rawmount>
 800a420:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a422:	68fb      	ldr	r3, [r7, #12]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b086      	sub	sp, #24
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a43a:	2300      	movs	r3, #0
 800a43c:	617b      	str	r3, [r7, #20]
    if (err) {
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <lfs_file_open+0x1c>
        return err;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	e01a      	b.n	800a47e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44c:	68b9      	ldr	r1, [r7, #8]
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fa f9e0 	bl	8004814 <lfs_mlist_isopen>
 800a454:	4603      	mov	r3, r0
 800a456:	f083 0301 	eor.w	r3, r3, #1
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d106      	bne.n	800a46e <lfs_file_open+0x42>
 800a460:	4b09      	ldr	r3, [pc, #36]	; (800a488 <lfs_file_open+0x5c>)
 800a462:	4a0a      	ldr	r2, [pc, #40]	; (800a48c <lfs_file_open+0x60>)
 800a464:	f241 61ec 	movw	r1, #5868	; 0x16ec
 800a468:	4809      	ldr	r0, [pc, #36]	; (800a490 <lfs_file_open+0x64>)
 800a46a:	f000 fa63 	bl	800a934 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	68b9      	ldr	r1, [r7, #8]
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f7fd feeb 	bl	8008250 <lfs_file_rawopen>
 800a47a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a47c:	697b      	ldr	r3, [r7, #20]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3718      	adds	r7, #24
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	0800c4f0 	.word	0x0800c4f0
 800a48c:	0800c6b0 	.word	0x0800c6b0
 800a490:	0800bb58 	.word	0x0800bb58

0800a494 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <lfs_file_close+0x18>
        return err;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	e015      	b.n	800a4d8 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fa f9ae 	bl	8004814 <lfs_mlist_isopen>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d106      	bne.n	800a4cc <lfs_file_close+0x38>
 800a4be:	4b08      	ldr	r3, [pc, #32]	; (800a4e0 <lfs_file_close+0x4c>)
 800a4c0:	4a08      	ldr	r2, [pc, #32]	; (800a4e4 <lfs_file_close+0x50>)
 800a4c2:	f241 7110 	movw	r1, #5904	; 0x1710
 800a4c6:	4808      	ldr	r0, [pc, #32]	; (800a4e8 <lfs_file_close+0x54>)
 800a4c8:	f000 fa34 	bl	800a934 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7fd fed6 	bl	8008280 <lfs_file_rawclose>
 800a4d4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	0800c528 	.word	0x0800c528
 800a4e4:	0800c6c0 	.word	0x0800c6c0
 800a4e8:	0800bb58 	.word	0x0800bb58

0800a4ec <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	617b      	str	r3, [r7, #20]
    if (err) {
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <lfs_file_read+0x1c>
        return err;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	e017      	b.n	800a538 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50c:	68b9      	ldr	r1, [r7, #8]
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fa f980 	bl	8004814 <lfs_mlist_isopen>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <lfs_file_read+0x3c>
 800a51a:	4b09      	ldr	r3, [pc, #36]	; (800a540 <lfs_file_read+0x54>)
 800a51c:	4a09      	ldr	r2, [pc, #36]	; (800a544 <lfs_file_read+0x58>)
 800a51e:	f241 7132 	movw	r1, #5938	; 0x1732
 800a522:	4809      	ldr	r0, [pc, #36]	; (800a548 <lfs_file_read+0x5c>)
 800a524:	f000 fa06 	bl	800a934 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	68b9      	ldr	r1, [r7, #8]
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f7fe f9f2 	bl	8008918 <lfs_file_rawread>
 800a534:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a536:	693b      	ldr	r3, [r7, #16]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	0800c528 	.word	0x0800c528
 800a544:	0800c6d0 	.word	0x0800c6d0
 800a548:	0800bb58 	.word	0x0800bb58

0800a54c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a55a:	2300      	movs	r3, #0
 800a55c:	617b      	str	r3, [r7, #20]
    if (err) {
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <lfs_file_write+0x1c>
        return err;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	e017      	b.n	800a598 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56c:	68b9      	ldr	r1, [r7, #8]
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fa f950 	bl	8004814 <lfs_mlist_isopen>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d106      	bne.n	800a588 <lfs_file_write+0x3c>
 800a57a:	4b09      	ldr	r3, [pc, #36]	; (800a5a0 <lfs_file_write+0x54>)
 800a57c:	4a09      	ldr	r2, [pc, #36]	; (800a5a4 <lfs_file_write+0x58>)
 800a57e:	f241 7144 	movw	r1, #5956	; 0x1744
 800a582:	4809      	ldr	r0, [pc, #36]	; (800a5a8 <lfs_file_write+0x5c>)
 800a584:	f000 f9d6 	bl	800a934 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	68b9      	ldr	r1, [r7, #8]
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7fe fb22 	bl	8008bd8 <lfs_file_rawwrite>
 800a594:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a596:	693b      	ldr	r3, [r7, #16]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	0800c528 	.word	0x0800c528
 800a5a4:	0800c6e0 	.word	0x0800c6e0
 800a5a8:	0800bb58 	.word	0x0800bb58

0800a5ac <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <lfs_file_rewind+0x18>
        return err;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	e005      	b.n	800a5d0 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7fe fc13 	bl	8008df2 <lfs_file_rawrewind>
 800a5cc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800a5d8:	b480      	push	{r7}
 800a5da:	b087      	sub	sp, #28
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	617b      	str	r3, [r7, #20]
 800a5ec:	e024      	b.n	800a638 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	091a      	lsrs	r2, r3, #4
 800a5f2:	6939      	ldr	r1, [r7, #16]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	440b      	add	r3, r1
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	404b      	eors	r3, r1
 800a600:	f003 030f 	and.w	r3, r3, #15
 800a604:	4912      	ldr	r1, [pc, #72]	; (800a650 <lfs_crc+0x78>)
 800a606:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a60a:	4053      	eors	r3, r2
 800a60c:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	091a      	lsrs	r2, r3, #4
 800a612:	6939      	ldr	r1, [r7, #16]
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	440b      	add	r3, r1
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	091b      	lsrs	r3, r3, #4
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	4619      	mov	r1, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	404b      	eors	r3, r1
 800a624:	f003 030f 	and.w	r3, r3, #15
 800a628:	4909      	ldr	r1, [pc, #36]	; (800a650 <lfs_crc+0x78>)
 800a62a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a62e:	4053      	eors	r3, r2
 800a630:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	3301      	adds	r3, #1
 800a636:	617b      	str	r3, [r7, #20]
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d3d6      	bcc.n	800a5ee <lfs_crc+0x16>
    }

    return crc;
 800a640:	68fb      	ldr	r3, [r7, #12]
}
 800a642:	4618      	mov	r0, r3
 800a644:	371c      	adds	r7, #28
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	0800c6f0 	.word	0x0800c6f0

0800a654 <m24cxx_init>:

#include "m24cxx.h"

/* Public functions */

M24CXX_StatusTypeDef m24cxx_init(M24CXX_HandleTypeDef *m24cxx, I2C_HandleTypeDef *i2c, uint8_t i2c_address) {
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	4613      	mov	r3, r2
 800a660:	71fb      	strb	r3, [r7, #7]

    M24CXXDBG("M24CXX Init type = %s size = %d ", M24CXX_TYPE, M24CXX_SIZE);

    m24cxx->i2c = i2c;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	601a      	str	r2, [r3, #0]
    m24cxx->i2c_address = i2c_address;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	79fa      	ldrb	r2, [r7, #7]
 800a66c:	711a      	strb	r2, [r3, #4]

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
#endif

    if (m24cxx_isconnected(m24cxx) != M24CXX_Ok)
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 f80a 	bl	800a688 <m24cxx_isconnected>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <m24cxx_init+0x2a>
        return M24CXX_Err;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <m24cxx_init+0x2c>

    return M24CXX_Ok;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <m24cxx_isconnected>:

M24CXX_StatusTypeDef m24cxx_isconnected(M24CXX_HandleTypeDef *m24cxx) {
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]

    if (HAL_I2C_IsDeviceReady(m24cxx->i2c, m24cxx->i2c_address << 1, 2, HAL_MAX_DELAY) != HAL_OK) {
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6818      	ldr	r0, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	791b      	ldrb	r3, [r3, #4]
 800a698:	b29b      	uxth	r3, r3
 800a69a:	005b      	lsls	r3, r3, #1
 800a69c:	b299      	uxth	r1, r3
 800a69e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	f7f7 fcaa 	bl	8001ffc <HAL_I2C_IsDeviceReady>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <m24cxx_isconnected+0x2a>
        return M24CXX_Err;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e000      	b.n	800a6b4 <m24cxx_isconnected+0x2c>
    }

    return M24CXX_Ok;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <m24cxx_wait>:

M24CXX_StatusTypeDef m24cxx_wait(M24CXX_HandleTypeDef *m24cxx) {
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();
 800a6c4:	f7f6 fd24 	bl	8001110 <HAL_GetTick>
 800a6c8:	60f8      	str	r0, [r7, #12]
    while (m24cxx_isconnected(m24cxx) != M24CXX_Ok) {
 800a6ca:	e008      	b.n	800a6de <m24cxx_wait+0x22>
        if (HAL_GetTick() - start_time >= M24CXX_WRITE_TIMEOUT)
 800a6cc:	f7f6 fd20 	bl	8001110 <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	2b63      	cmp	r3, #99	; 0x63
 800a6d8:	d901      	bls.n	800a6de <m24cxx_wait+0x22>
            return M24CXX_Err;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e006      	b.n	800a6ec <m24cxx_wait+0x30>
    while (m24cxx_isconnected(m24cxx) != M24CXX_Ok) {
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff ffd2 	bl	800a688 <m24cxx_isconnected>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1f0      	bne.n	800a6cc <m24cxx_wait+0x10>
    }
    return M24CXX_Ok;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <m24cxx_read>:

M24CXX_StatusTypeDef m24cxx_read(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 800a6f4:	b5b0      	push	{r4, r5, r7, lr}
 800a6f6:	b090      	sub	sp, #64	; 0x40
 800a6f8:	af04      	add	r7, sp, #16
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX read - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_READ_PAGE_SIZE;
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	0a1b      	lsrs	r3, r3, #8
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t page_end = ((address + len - 1) / M24CXX_READ_PAGE_SIZE);
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	4413      	add	r3, r2
 800a70e:	3b01      	subs	r3, #1
 800a710:	0a1b      	lsrs	r3, r3, #8
 800a712:	623b      	str	r3, [r7, #32]
    uint32_t data_offset = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	62fb      	str	r3, [r7, #44]	; 0x2c

    M24CXXDBG("Reading %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);

    for (uint32_t page = page_start; page <= page_end; ++page) {
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a71c:	e04a      	b.n	800a7b4 <m24cxx_read+0xc0>

        uint32_t i2c_address, start_address, read_len;

        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 800a71e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	429a      	cmp	r2, r3
 800a724:	d002      	beq.n	800a72c <m24cxx_read+0x38>
 800a726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a728:	021b      	lsls	r3, r3, #8
 800a72a:	e000      	b.n	800a72e <m24cxx_read+0x3a>
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	61fb      	str	r3, [r7, #28]
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 800a730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	429a      	cmp	r2, r3
 800a736:	d103      	bne.n	800a740 <m24cxx_read+0x4c>
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	e00b      	b.n	800a758 <m24cxx_read+0x64>
 800a740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	429a      	cmp	r2, r3
 800a746:	d105      	bne.n	800a754 <m24cxx_read+0x60>
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	3301      	adds	r3, #1
 800a74c:	021a      	lsls	r2, r3, #8
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	e001      	b.n	800a758 <m24cxx_read+0x64>
 800a754:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a758:	61bb      	str	r3, [r7, #24]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	791b      	ldrb	r3, [r3, #4]
 800a75e:	461a      	mov	r2, r3
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	0a1b      	lsrs	r3, r3, #8
 800a764:	4413      	add	r3, r2
 800a766:	617b      	str	r3, [r7, #20]

        M24CXXDBG("Reading page %lu, i2c address = 0x%02lx start = 0x%04lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address & M24CXX_ADDRESS_MASK, read_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Read(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, read_len, HAL_MAX_DELAY);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6818      	ldr	r0, [r3, #0]
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	b29b      	uxth	r3, r3
 800a770:	005b      	lsls	r3, r3, #1
 800a772:	b299      	uxth	r1, r3
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	b29b      	uxth	r3, r3
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	b29c      	uxth	r4, r3
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a780:	4413      	add	r3, r2
 800a782:	69ba      	ldr	r2, [r7, #24]
 800a784:	b292      	uxth	r2, r2
 800a786:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a78a:	9502      	str	r5, [sp, #8]
 800a78c:	9201      	str	r2, [sp, #4]
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	2301      	movs	r3, #1
 800a792:	4622      	mov	r2, r4
 800a794:	f7f7 fa0c 	bl	8001bb0 <HAL_I2C_Mem_Read>
 800a798:	4603      	mov	r3, r0
 800a79a:	74fb      	strb	r3, [r7, #19]

        if (result != HAL_OK) {
 800a79c:	7cfb      	ldrb	r3, [r7, #19]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <m24cxx_read+0xb2>
            M24CXXDBG("Failed to read memory");
            return M24CXX_Err;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e00b      	b.n	800a7be <m24cxx_read+0xca>
        }

        data_offset += read_len;
 800a7a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t page = page_start; page <= page_end; ++page) {
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d9b0      	bls.n	800a71e <m24cxx_read+0x2a>

    }

    return M24CXX_Ok;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3730      	adds	r7, #48	; 0x30
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bdb0      	pop	{r4, r5, r7, pc}

0800a7c6 <m24cxx_write>:

M24CXX_StatusTypeDef m24cxx_write(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 800a7c6:	b5b0      	push	{r4, r5, r7, lr}
 800a7c8:	b090      	sub	sp, #64	; 0x40
 800a7ca:	af04      	add	r7, sp, #16
 800a7cc:	60f8      	str	r0, [r7, #12]
 800a7ce:	60b9      	str	r1, [r7, #8]
 800a7d0:	607a      	str	r2, [r7, #4]
 800a7d2:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX write - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_WRITE_PAGE_SIZE;
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	091b      	lsrs	r3, r3, #4
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t page_end = ((address + len - 1) / M24CXX_WRITE_PAGE_SIZE);
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	4413      	add	r3, r2
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	091b      	lsrs	r3, r3, #4
 800a7e4:	623b      	str	r3, [r7, #32]
    uint32_t data_offset = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_RESET);
#endif

    for (uint32_t page = page_start; page <= page_end; ++page) {
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7ee:	e051      	b.n	800a894 <m24cxx_write+0xce>

        uint32_t i2c_address, start_address, write_len;

        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 800a7f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d002      	beq.n	800a7fe <m24cxx_write+0x38>
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	011b      	lsls	r3, r3, #4
 800a7fc:	e000      	b.n	800a800 <m24cxx_write+0x3a>
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	61fb      	str	r3, [r7, #28]
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 800a802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	429a      	cmp	r2, r3
 800a808:	d103      	bne.n	800a812 <m24cxx_write+0x4c>
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	e00a      	b.n	800a828 <m24cxx_write+0x62>
 800a812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	429a      	cmp	r2, r3
 800a818:	d105      	bne.n	800a826 <m24cxx_write+0x60>
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	3301      	adds	r3, #1
 800a81e:	011a      	lsls	r2, r3, #4
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	e000      	b.n	800a828 <m24cxx_write+0x62>
 800a826:	2310      	movs	r3, #16
 800a828:	61bb      	str	r3, [r7, #24]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	791b      	ldrb	r3, [r3, #4]
 800a82e:	461a      	mov	r2, r3
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	0a1b      	lsrs	r3, r3, #8
 800a834:	4413      	add	r3, r2
 800a836:	617b      	str	r3, [r7, #20]

        M24CXXDBG("Writing page %lu, i2c address = 0x%02lx start = 0x%04lx len masked = 0x%04lx = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address, start_address & M24CXX_ADDRESS_MASK, write_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Write(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, write_len, HAL_MAX_DELAY);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6818      	ldr	r0, [r3, #0]
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	b29b      	uxth	r3, r3
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	b299      	uxth	r1, r3
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	b29b      	uxth	r3, r3
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	b29c      	uxth	r4, r3
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a850:	4413      	add	r3, r2
 800a852:	69ba      	ldr	r2, [r7, #24]
 800a854:	b292      	uxth	r2, r2
 800a856:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a85a:	9502      	str	r5, [sp, #8]
 800a85c:	9201      	str	r2, [sp, #4]
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	2301      	movs	r3, #1
 800a862:	4622      	mov	r2, r4
 800a864:	f7f7 f8aa 	bl	80019bc <HAL_I2C_Mem_Write>
 800a868:	4603      	mov	r3, r0
 800a86a:	74fb      	strb	r3, [r7, #19]

        if (result != HAL_OK) {
 800a86c:	7cfb      	ldrb	r3, [r7, #19]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <m24cxx_write+0xb0>
            M24CXXDBG("Failed to write memory");
            return M24CXX_Err;
 800a872:	2301      	movs	r3, #1
 800a874:	e013      	b.n	800a89e <m24cxx_write+0xd8>
        }

        data_offset += write_len;
 800a876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	4413      	add	r3, r2
 800a87c:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (m24cxx_wait(m24cxx) != M24CXX_Ok) {
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f7ff ff1c 	bl	800a6bc <m24cxx_wait>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <m24cxx_write+0xc8>
            M24CXXDBG("M24Cxx Device never got ready");
            return M24CXX_Err;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e007      	b.n	800a89e <m24cxx_write+0xd8>
    for (uint32_t page = page_start; page <= page_end; ++page) {
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	3301      	adds	r3, #1
 800a892:	62bb      	str	r3, [r7, #40]	; 0x28
 800a894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a896:	6a3b      	ldr	r3, [r7, #32]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d9a9      	bls.n	800a7f0 <m24cxx_write+0x2a>

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
#endif

    return M24CXX_Ok;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3730      	adds	r7, #48	; 0x30
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bdb0      	pop	{r4, r5, r7, pc}

0800a8a6 <m24cxx_erase>:

M24CXX_StatusTypeDef m24cxx_erase(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint32_t len) {
 800a8a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8aa:	b089      	sub	sp, #36	; 0x24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	466b      	mov	r3, sp
 800a8b6:	461e      	mov	r6, r3

    M24CXXDBG("M24CXX erase - address = 0x%04lx len = 0x%04lx", address, len);

    uint8_t buf[len];
 800a8b8:	6879      	ldr	r1, [r7, #4]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	61fb      	str	r3, [r7, #28]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	4688      	mov	r8, r1
 800a8c4:	4699      	mov	r9, r3
 800a8c6:	f04f 0200 	mov.w	r2, #0
 800a8ca:	f04f 0300 	mov.w	r3, #0
 800a8ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a8d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8da:	2300      	movs	r3, #0
 800a8dc:	460c      	mov	r4, r1
 800a8de:	461d      	mov	r5, r3
 800a8e0:	f04f 0200 	mov.w	r2, #0
 800a8e4:	f04f 0300 	mov.w	r3, #0
 800a8e8:	00eb      	lsls	r3, r5, #3
 800a8ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8ee:	00e2      	lsls	r2, r4, #3
 800a8f0:	1dcb      	adds	r3, r1, #7
 800a8f2:	08db      	lsrs	r3, r3, #3
 800a8f4:	00db      	lsls	r3, r3, #3
 800a8f6:	ebad 0d03 	sub.w	sp, sp, r3
 800a8fa:	466b      	mov	r3, sp
 800a8fc:	3300      	adds	r3, #0
 800a8fe:	61bb      	str	r3, [r7, #24]

    memset(buf, 0xff, len);
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	21ff      	movs	r1, #255	; 0xff
 800a904:	69b8      	ldr	r0, [r7, #24]
 800a906:	f000 fa1e 	bl	800ad46 <memset>

    M24CXX_StatusTypeDef result = m24cxx_write(m24cxx, address, (uint8_t*) &buf, len);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	68b9      	ldr	r1, [r7, #8]
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f7ff ff58 	bl	800a7c6 <m24cxx_write>
 800a916:	4603      	mov	r3, r0
 800a918:	75fb      	strb	r3, [r7, #23]
    if (result != M24CXX_Ok)
 800a91a:	7dfb      	ldrb	r3, [r7, #23]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <m24cxx_erase+0x7e>
        return result;
 800a920:	7dfb      	ldrb	r3, [r7, #23]
 800a922:	e000      	b.n	800a926 <m24cxx_erase+0x80>

    return M24CXX_Ok;
 800a924:	2300      	movs	r3, #0
 800a926:	46b5      	mov	sp, r6
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3724      	adds	r7, #36	; 0x24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a934 <__assert_func>:
 800a934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a936:	4614      	mov	r4, r2
 800a938:	461a      	mov	r2, r3
 800a93a:	4b09      	ldr	r3, [pc, #36]	; (800a960 <__assert_func+0x2c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4605      	mov	r5, r0
 800a940:	68d8      	ldr	r0, [r3, #12]
 800a942:	b14c      	cbz	r4, 800a958 <__assert_func+0x24>
 800a944:	4b07      	ldr	r3, [pc, #28]	; (800a964 <__assert_func+0x30>)
 800a946:	9100      	str	r1, [sp, #0]
 800a948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a94c:	4906      	ldr	r1, [pc, #24]	; (800a968 <__assert_func+0x34>)
 800a94e:	462b      	mov	r3, r5
 800a950:	f000 f95c 	bl	800ac0c <fiprintf>
 800a954:	f000 fabe 	bl	800aed4 <abort>
 800a958:	4b04      	ldr	r3, [pc, #16]	; (800a96c <__assert_func+0x38>)
 800a95a:	461c      	mov	r4, r3
 800a95c:	e7f3      	b.n	800a946 <__assert_func+0x12>
 800a95e:	bf00      	nop
 800a960:	200000b0 	.word	0x200000b0
 800a964:	0800c730 	.word	0x0800c730
 800a968:	0800c73d 	.word	0x0800c73d
 800a96c:	0800c76b 	.word	0x0800c76b

0800a970 <malloc>:
 800a970:	4b02      	ldr	r3, [pc, #8]	; (800a97c <malloc+0xc>)
 800a972:	4601      	mov	r1, r0
 800a974:	6818      	ldr	r0, [r3, #0]
 800a976:	f000 b82b 	b.w	800a9d0 <_malloc_r>
 800a97a:	bf00      	nop
 800a97c:	200000b0 	.word	0x200000b0

0800a980 <free>:
 800a980:	4b02      	ldr	r3, [pc, #8]	; (800a98c <free+0xc>)
 800a982:	4601      	mov	r1, r0
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	f000 baad 	b.w	800aee4 <_free_r>
 800a98a:	bf00      	nop
 800a98c:	200000b0 	.word	0x200000b0

0800a990 <sbrk_aligned>:
 800a990:	b570      	push	{r4, r5, r6, lr}
 800a992:	4e0e      	ldr	r6, [pc, #56]	; (800a9cc <sbrk_aligned+0x3c>)
 800a994:	460c      	mov	r4, r1
 800a996:	6831      	ldr	r1, [r6, #0]
 800a998:	4605      	mov	r5, r0
 800a99a:	b911      	cbnz	r1, 800a9a2 <sbrk_aligned+0x12>
 800a99c:	f000 fa3e 	bl	800ae1c <_sbrk_r>
 800a9a0:	6030      	str	r0, [r6, #0]
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f000 fa39 	bl	800ae1c <_sbrk_r>
 800a9aa:	1c43      	adds	r3, r0, #1
 800a9ac:	d00a      	beq.n	800a9c4 <sbrk_aligned+0x34>
 800a9ae:	1cc4      	adds	r4, r0, #3
 800a9b0:	f024 0403 	bic.w	r4, r4, #3
 800a9b4:	42a0      	cmp	r0, r4
 800a9b6:	d007      	beq.n	800a9c8 <sbrk_aligned+0x38>
 800a9b8:	1a21      	subs	r1, r4, r0
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f000 fa2e 	bl	800ae1c <_sbrk_r>
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	d101      	bne.n	800a9c8 <sbrk_aligned+0x38>
 800a9c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
 800a9cc:	20000250 	.word	0x20000250

0800a9d0 <_malloc_r>:
 800a9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d4:	1ccd      	adds	r5, r1, #3
 800a9d6:	f025 0503 	bic.w	r5, r5, #3
 800a9da:	3508      	adds	r5, #8
 800a9dc:	2d0c      	cmp	r5, #12
 800a9de:	bf38      	it	cc
 800a9e0:	250c      	movcc	r5, #12
 800a9e2:	2d00      	cmp	r5, #0
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	db01      	blt.n	800a9ec <_malloc_r+0x1c>
 800a9e8:	42a9      	cmp	r1, r5
 800a9ea:	d905      	bls.n	800a9f8 <_malloc_r+0x28>
 800a9ec:	230c      	movs	r3, #12
 800a9ee:	603b      	str	r3, [r7, #0]
 800a9f0:	2600      	movs	r6, #0
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aacc <_malloc_r+0xfc>
 800a9fc:	f000 f868 	bl	800aad0 <__malloc_lock>
 800aa00:	f8d8 3000 	ldr.w	r3, [r8]
 800aa04:	461c      	mov	r4, r3
 800aa06:	bb5c      	cbnz	r4, 800aa60 <_malloc_r+0x90>
 800aa08:	4629      	mov	r1, r5
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	f7ff ffc0 	bl	800a990 <sbrk_aligned>
 800aa10:	1c43      	adds	r3, r0, #1
 800aa12:	4604      	mov	r4, r0
 800aa14:	d155      	bne.n	800aac2 <_malloc_r+0xf2>
 800aa16:	f8d8 4000 	ldr.w	r4, [r8]
 800aa1a:	4626      	mov	r6, r4
 800aa1c:	2e00      	cmp	r6, #0
 800aa1e:	d145      	bne.n	800aaac <_malloc_r+0xdc>
 800aa20:	2c00      	cmp	r4, #0
 800aa22:	d048      	beq.n	800aab6 <_malloc_r+0xe6>
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	4631      	mov	r1, r6
 800aa28:	4638      	mov	r0, r7
 800aa2a:	eb04 0903 	add.w	r9, r4, r3
 800aa2e:	f000 f9f5 	bl	800ae1c <_sbrk_r>
 800aa32:	4581      	cmp	r9, r0
 800aa34:	d13f      	bne.n	800aab6 <_malloc_r+0xe6>
 800aa36:	6821      	ldr	r1, [r4, #0]
 800aa38:	1a6d      	subs	r5, r5, r1
 800aa3a:	4629      	mov	r1, r5
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	f7ff ffa7 	bl	800a990 <sbrk_aligned>
 800aa42:	3001      	adds	r0, #1
 800aa44:	d037      	beq.n	800aab6 <_malloc_r+0xe6>
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	442b      	add	r3, r5
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d038      	beq.n	800aac6 <_malloc_r+0xf6>
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	42a2      	cmp	r2, r4
 800aa58:	d12b      	bne.n	800aab2 <_malloc_r+0xe2>
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	605a      	str	r2, [r3, #4]
 800aa5e:	e00f      	b.n	800aa80 <_malloc_r+0xb0>
 800aa60:	6822      	ldr	r2, [r4, #0]
 800aa62:	1b52      	subs	r2, r2, r5
 800aa64:	d41f      	bmi.n	800aaa6 <_malloc_r+0xd6>
 800aa66:	2a0b      	cmp	r2, #11
 800aa68:	d917      	bls.n	800aa9a <_malloc_r+0xca>
 800aa6a:	1961      	adds	r1, r4, r5
 800aa6c:	42a3      	cmp	r3, r4
 800aa6e:	6025      	str	r5, [r4, #0]
 800aa70:	bf18      	it	ne
 800aa72:	6059      	strne	r1, [r3, #4]
 800aa74:	6863      	ldr	r3, [r4, #4]
 800aa76:	bf08      	it	eq
 800aa78:	f8c8 1000 	streq.w	r1, [r8]
 800aa7c:	5162      	str	r2, [r4, r5]
 800aa7e:	604b      	str	r3, [r1, #4]
 800aa80:	4638      	mov	r0, r7
 800aa82:	f104 060b 	add.w	r6, r4, #11
 800aa86:	f000 f829 	bl	800aadc <__malloc_unlock>
 800aa8a:	f026 0607 	bic.w	r6, r6, #7
 800aa8e:	1d23      	adds	r3, r4, #4
 800aa90:	1af2      	subs	r2, r6, r3
 800aa92:	d0ae      	beq.n	800a9f2 <_malloc_r+0x22>
 800aa94:	1b9b      	subs	r3, r3, r6
 800aa96:	50a3      	str	r3, [r4, r2]
 800aa98:	e7ab      	b.n	800a9f2 <_malloc_r+0x22>
 800aa9a:	42a3      	cmp	r3, r4
 800aa9c:	6862      	ldr	r2, [r4, #4]
 800aa9e:	d1dd      	bne.n	800aa5c <_malloc_r+0x8c>
 800aaa0:	f8c8 2000 	str.w	r2, [r8]
 800aaa4:	e7ec      	b.n	800aa80 <_malloc_r+0xb0>
 800aaa6:	4623      	mov	r3, r4
 800aaa8:	6864      	ldr	r4, [r4, #4]
 800aaaa:	e7ac      	b.n	800aa06 <_malloc_r+0x36>
 800aaac:	4634      	mov	r4, r6
 800aaae:	6876      	ldr	r6, [r6, #4]
 800aab0:	e7b4      	b.n	800aa1c <_malloc_r+0x4c>
 800aab2:	4613      	mov	r3, r2
 800aab4:	e7cc      	b.n	800aa50 <_malloc_r+0x80>
 800aab6:	230c      	movs	r3, #12
 800aab8:	603b      	str	r3, [r7, #0]
 800aaba:	4638      	mov	r0, r7
 800aabc:	f000 f80e 	bl	800aadc <__malloc_unlock>
 800aac0:	e797      	b.n	800a9f2 <_malloc_r+0x22>
 800aac2:	6025      	str	r5, [r4, #0]
 800aac4:	e7dc      	b.n	800aa80 <_malloc_r+0xb0>
 800aac6:	605b      	str	r3, [r3, #4]
 800aac8:	deff      	udf	#255	; 0xff
 800aaca:	bf00      	nop
 800aacc:	2000024c 	.word	0x2000024c

0800aad0 <__malloc_lock>:
 800aad0:	4801      	ldr	r0, [pc, #4]	; (800aad8 <__malloc_lock+0x8>)
 800aad2:	f000 b9ef 	b.w	800aeb4 <__retarget_lock_acquire_recursive>
 800aad6:	bf00      	nop
 800aad8:	20000394 	.word	0x20000394

0800aadc <__malloc_unlock>:
 800aadc:	4801      	ldr	r0, [pc, #4]	; (800aae4 <__malloc_unlock+0x8>)
 800aade:	f000 b9ea 	b.w	800aeb6 <__retarget_lock_release_recursive>
 800aae2:	bf00      	nop
 800aae4:	20000394 	.word	0x20000394

0800aae8 <std>:
 800aae8:	2300      	movs	r3, #0
 800aaea:	b510      	push	{r4, lr}
 800aaec:	4604      	mov	r4, r0
 800aaee:	e9c0 3300 	strd	r3, r3, [r0]
 800aaf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaf6:	6083      	str	r3, [r0, #8]
 800aaf8:	8181      	strh	r1, [r0, #12]
 800aafa:	6643      	str	r3, [r0, #100]	; 0x64
 800aafc:	81c2      	strh	r2, [r0, #14]
 800aafe:	6183      	str	r3, [r0, #24]
 800ab00:	4619      	mov	r1, r3
 800ab02:	2208      	movs	r2, #8
 800ab04:	305c      	adds	r0, #92	; 0x5c
 800ab06:	f000 f91e 	bl	800ad46 <memset>
 800ab0a:	4b05      	ldr	r3, [pc, #20]	; (800ab20 <std+0x38>)
 800ab0c:	6263      	str	r3, [r4, #36]	; 0x24
 800ab0e:	4b05      	ldr	r3, [pc, #20]	; (800ab24 <std+0x3c>)
 800ab10:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab12:	4b05      	ldr	r3, [pc, #20]	; (800ab28 <std+0x40>)
 800ab14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab16:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <std+0x44>)
 800ab18:	6224      	str	r4, [r4, #32]
 800ab1a:	6323      	str	r3, [r4, #48]	; 0x30
 800ab1c:	bd10      	pop	{r4, pc}
 800ab1e:	bf00      	nop
 800ab20:	0800aca1 	.word	0x0800aca1
 800ab24:	0800acc3 	.word	0x0800acc3
 800ab28:	0800acfb 	.word	0x0800acfb
 800ab2c:	0800ad1f 	.word	0x0800ad1f

0800ab30 <stdio_exit_handler>:
 800ab30:	4a02      	ldr	r2, [pc, #8]	; (800ab3c <stdio_exit_handler+0xc>)
 800ab32:	4903      	ldr	r1, [pc, #12]	; (800ab40 <stdio_exit_handler+0x10>)
 800ab34:	4803      	ldr	r0, [pc, #12]	; (800ab44 <stdio_exit_handler+0x14>)
 800ab36:	f000 b87b 	b.w	800ac30 <_fwalk_sglue>
 800ab3a:	bf00      	nop
 800ab3c:	20000058 	.word	0x20000058
 800ab40:	0800b631 	.word	0x0800b631
 800ab44:	20000064 	.word	0x20000064

0800ab48 <cleanup_stdio>:
 800ab48:	6841      	ldr	r1, [r0, #4]
 800ab4a:	4b0c      	ldr	r3, [pc, #48]	; (800ab7c <cleanup_stdio+0x34>)
 800ab4c:	4299      	cmp	r1, r3
 800ab4e:	b510      	push	{r4, lr}
 800ab50:	4604      	mov	r4, r0
 800ab52:	d001      	beq.n	800ab58 <cleanup_stdio+0x10>
 800ab54:	f000 fd6c 	bl	800b630 <_fflush_r>
 800ab58:	68a1      	ldr	r1, [r4, #8]
 800ab5a:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <cleanup_stdio+0x38>)
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	d002      	beq.n	800ab66 <cleanup_stdio+0x1e>
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 fd65 	bl	800b630 <_fflush_r>
 800ab66:	68e1      	ldr	r1, [r4, #12]
 800ab68:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <cleanup_stdio+0x3c>)
 800ab6a:	4299      	cmp	r1, r3
 800ab6c:	d004      	beq.n	800ab78 <cleanup_stdio+0x30>
 800ab6e:	4620      	mov	r0, r4
 800ab70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab74:	f000 bd5c 	b.w	800b630 <_fflush_r>
 800ab78:	bd10      	pop	{r4, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20000254 	.word	0x20000254
 800ab80:	200002bc 	.word	0x200002bc
 800ab84:	20000324 	.word	0x20000324

0800ab88 <global_stdio_init.part.0>:
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	4b0b      	ldr	r3, [pc, #44]	; (800abb8 <global_stdio_init.part.0+0x30>)
 800ab8c:	4c0b      	ldr	r4, [pc, #44]	; (800abbc <global_stdio_init.part.0+0x34>)
 800ab8e:	4a0c      	ldr	r2, [pc, #48]	; (800abc0 <global_stdio_init.part.0+0x38>)
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	4620      	mov	r0, r4
 800ab94:	2200      	movs	r2, #0
 800ab96:	2104      	movs	r1, #4
 800ab98:	f7ff ffa6 	bl	800aae8 <std>
 800ab9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aba0:	2201      	movs	r2, #1
 800aba2:	2109      	movs	r1, #9
 800aba4:	f7ff ffa0 	bl	800aae8 <std>
 800aba8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800abac:	2202      	movs	r2, #2
 800abae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb2:	2112      	movs	r1, #18
 800abb4:	f7ff bf98 	b.w	800aae8 <std>
 800abb8:	2000038c 	.word	0x2000038c
 800abbc:	20000254 	.word	0x20000254
 800abc0:	0800ab31 	.word	0x0800ab31

0800abc4 <__sfp_lock_acquire>:
 800abc4:	4801      	ldr	r0, [pc, #4]	; (800abcc <__sfp_lock_acquire+0x8>)
 800abc6:	f000 b975 	b.w	800aeb4 <__retarget_lock_acquire_recursive>
 800abca:	bf00      	nop
 800abcc:	20000395 	.word	0x20000395

0800abd0 <__sfp_lock_release>:
 800abd0:	4801      	ldr	r0, [pc, #4]	; (800abd8 <__sfp_lock_release+0x8>)
 800abd2:	f000 b970 	b.w	800aeb6 <__retarget_lock_release_recursive>
 800abd6:	bf00      	nop
 800abd8:	20000395 	.word	0x20000395

0800abdc <__sinit>:
 800abdc:	b510      	push	{r4, lr}
 800abde:	4604      	mov	r4, r0
 800abe0:	f7ff fff0 	bl	800abc4 <__sfp_lock_acquire>
 800abe4:	6a23      	ldr	r3, [r4, #32]
 800abe6:	b11b      	cbz	r3, 800abf0 <__sinit+0x14>
 800abe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abec:	f7ff bff0 	b.w	800abd0 <__sfp_lock_release>
 800abf0:	4b04      	ldr	r3, [pc, #16]	; (800ac04 <__sinit+0x28>)
 800abf2:	6223      	str	r3, [r4, #32]
 800abf4:	4b04      	ldr	r3, [pc, #16]	; (800ac08 <__sinit+0x2c>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1f5      	bne.n	800abe8 <__sinit+0xc>
 800abfc:	f7ff ffc4 	bl	800ab88 <global_stdio_init.part.0>
 800ac00:	e7f2      	b.n	800abe8 <__sinit+0xc>
 800ac02:	bf00      	nop
 800ac04:	0800ab49 	.word	0x0800ab49
 800ac08:	2000038c 	.word	0x2000038c

0800ac0c <fiprintf>:
 800ac0c:	b40e      	push	{r1, r2, r3}
 800ac0e:	b503      	push	{r0, r1, lr}
 800ac10:	4601      	mov	r1, r0
 800ac12:	ab03      	add	r3, sp, #12
 800ac14:	4805      	ldr	r0, [pc, #20]	; (800ac2c <fiprintf+0x20>)
 800ac16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac1a:	6800      	ldr	r0, [r0, #0]
 800ac1c:	9301      	str	r3, [sp, #4]
 800ac1e:	f000 f9d7 	bl	800afd0 <_vfiprintf_r>
 800ac22:	b002      	add	sp, #8
 800ac24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac28:	b003      	add	sp, #12
 800ac2a:	4770      	bx	lr
 800ac2c:	200000b0 	.word	0x200000b0

0800ac30 <_fwalk_sglue>:
 800ac30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac34:	4607      	mov	r7, r0
 800ac36:	4688      	mov	r8, r1
 800ac38:	4614      	mov	r4, r2
 800ac3a:	2600      	movs	r6, #0
 800ac3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac40:	f1b9 0901 	subs.w	r9, r9, #1
 800ac44:	d505      	bpl.n	800ac52 <_fwalk_sglue+0x22>
 800ac46:	6824      	ldr	r4, [r4, #0]
 800ac48:	2c00      	cmp	r4, #0
 800ac4a:	d1f7      	bne.n	800ac3c <_fwalk_sglue+0xc>
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac52:	89ab      	ldrh	r3, [r5, #12]
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d907      	bls.n	800ac68 <_fwalk_sglue+0x38>
 800ac58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	d003      	beq.n	800ac68 <_fwalk_sglue+0x38>
 800ac60:	4629      	mov	r1, r5
 800ac62:	4638      	mov	r0, r7
 800ac64:	47c0      	blx	r8
 800ac66:	4306      	orrs	r6, r0
 800ac68:	3568      	adds	r5, #104	; 0x68
 800ac6a:	e7e9      	b.n	800ac40 <_fwalk_sglue+0x10>

0800ac6c <iprintf>:
 800ac6c:	b40f      	push	{r0, r1, r2, r3}
 800ac6e:	b507      	push	{r0, r1, r2, lr}
 800ac70:	4906      	ldr	r1, [pc, #24]	; (800ac8c <iprintf+0x20>)
 800ac72:	ab04      	add	r3, sp, #16
 800ac74:	6808      	ldr	r0, [r1, #0]
 800ac76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac7a:	6881      	ldr	r1, [r0, #8]
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	f000 f9a7 	bl	800afd0 <_vfiprintf_r>
 800ac82:	b003      	add	sp, #12
 800ac84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac88:	b004      	add	sp, #16
 800ac8a:	4770      	bx	lr
 800ac8c:	200000b0 	.word	0x200000b0

0800ac90 <putchar>:
 800ac90:	4b02      	ldr	r3, [pc, #8]	; (800ac9c <putchar+0xc>)
 800ac92:	4601      	mov	r1, r0
 800ac94:	6818      	ldr	r0, [r3, #0]
 800ac96:	6882      	ldr	r2, [r0, #8]
 800ac98:	f000 bcf2 	b.w	800b680 <_putc_r>
 800ac9c:	200000b0 	.word	0x200000b0

0800aca0 <__sread>:
 800aca0:	b510      	push	{r4, lr}
 800aca2:	460c      	mov	r4, r1
 800aca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca8:	f000 f8a6 	bl	800adf8 <_read_r>
 800acac:	2800      	cmp	r0, #0
 800acae:	bfab      	itete	ge
 800acb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acb2:	89a3      	ldrhlt	r3, [r4, #12]
 800acb4:	181b      	addge	r3, r3, r0
 800acb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acba:	bfac      	ite	ge
 800acbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800acbe:	81a3      	strhlt	r3, [r4, #12]
 800acc0:	bd10      	pop	{r4, pc}

0800acc2 <__swrite>:
 800acc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc6:	461f      	mov	r7, r3
 800acc8:	898b      	ldrh	r3, [r1, #12]
 800acca:	05db      	lsls	r3, r3, #23
 800accc:	4605      	mov	r5, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	4616      	mov	r6, r2
 800acd2:	d505      	bpl.n	800ace0 <__swrite+0x1e>
 800acd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd8:	2302      	movs	r3, #2
 800acda:	2200      	movs	r2, #0
 800acdc:	f000 f87a 	bl	800add4 <_lseek_r>
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acea:	81a3      	strh	r3, [r4, #12]
 800acec:	4632      	mov	r2, r6
 800acee:	463b      	mov	r3, r7
 800acf0:	4628      	mov	r0, r5
 800acf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acf6:	f000 b8a1 	b.w	800ae3c <_write_r>

0800acfa <__sseek>:
 800acfa:	b510      	push	{r4, lr}
 800acfc:	460c      	mov	r4, r1
 800acfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad02:	f000 f867 	bl	800add4 <_lseek_r>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	bf15      	itete	ne
 800ad0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad16:	81a3      	strheq	r3, [r4, #12]
 800ad18:	bf18      	it	ne
 800ad1a:	81a3      	strhne	r3, [r4, #12]
 800ad1c:	bd10      	pop	{r4, pc}

0800ad1e <__sclose>:
 800ad1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad22:	f000 b847 	b.w	800adb4 <_close_r>

0800ad26 <memcmp>:
 800ad26:	b510      	push	{r4, lr}
 800ad28:	3901      	subs	r1, #1
 800ad2a:	4402      	add	r2, r0
 800ad2c:	4290      	cmp	r0, r2
 800ad2e:	d101      	bne.n	800ad34 <memcmp+0xe>
 800ad30:	2000      	movs	r0, #0
 800ad32:	e005      	b.n	800ad40 <memcmp+0x1a>
 800ad34:	7803      	ldrb	r3, [r0, #0]
 800ad36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad3a:	42a3      	cmp	r3, r4
 800ad3c:	d001      	beq.n	800ad42 <memcmp+0x1c>
 800ad3e:	1b18      	subs	r0, r3, r4
 800ad40:	bd10      	pop	{r4, pc}
 800ad42:	3001      	adds	r0, #1
 800ad44:	e7f2      	b.n	800ad2c <memcmp+0x6>

0800ad46 <memset>:
 800ad46:	4402      	add	r2, r0
 800ad48:	4603      	mov	r3, r0
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d100      	bne.n	800ad50 <memset+0xa>
 800ad4e:	4770      	bx	lr
 800ad50:	f803 1b01 	strb.w	r1, [r3], #1
 800ad54:	e7f9      	b.n	800ad4a <memset+0x4>

0800ad56 <strchr>:
 800ad56:	b2c9      	uxtb	r1, r1
 800ad58:	4603      	mov	r3, r0
 800ad5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad5e:	b11a      	cbz	r2, 800ad68 <strchr+0x12>
 800ad60:	428a      	cmp	r2, r1
 800ad62:	d1f9      	bne.n	800ad58 <strchr+0x2>
 800ad64:	4618      	mov	r0, r3
 800ad66:	4770      	bx	lr
 800ad68:	2900      	cmp	r1, #0
 800ad6a:	bf18      	it	ne
 800ad6c:	2300      	movne	r3, #0
 800ad6e:	e7f9      	b.n	800ad64 <strchr+0xe>

0800ad70 <strcspn>:
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	4603      	mov	r3, r0
 800ad74:	461e      	mov	r6, r3
 800ad76:	f813 4b01 	ldrb.w	r4, [r3], #1
 800ad7a:	b144      	cbz	r4, 800ad8e <strcspn+0x1e>
 800ad7c:	1e4a      	subs	r2, r1, #1
 800ad7e:	e001      	b.n	800ad84 <strcspn+0x14>
 800ad80:	42a5      	cmp	r5, r4
 800ad82:	d004      	beq.n	800ad8e <strcspn+0x1e>
 800ad84:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800ad88:	2d00      	cmp	r5, #0
 800ad8a:	d1f9      	bne.n	800ad80 <strcspn+0x10>
 800ad8c:	e7f2      	b.n	800ad74 <strcspn+0x4>
 800ad8e:	1a30      	subs	r0, r6, r0
 800ad90:	bd70      	pop	{r4, r5, r6, pc}

0800ad92 <strspn>:
 800ad92:	b570      	push	{r4, r5, r6, lr}
 800ad94:	4603      	mov	r3, r0
 800ad96:	461e      	mov	r6, r3
 800ad98:	f813 4b01 	ldrb.w	r4, [r3], #1
 800ad9c:	b13c      	cbz	r4, 800adae <strspn+0x1c>
 800ad9e:	1e4a      	subs	r2, r1, #1
 800ada0:	e001      	b.n	800ada6 <strspn+0x14>
 800ada2:	42a5      	cmp	r5, r4
 800ada4:	d0f7      	beq.n	800ad96 <strspn+0x4>
 800ada6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800adaa:	2d00      	cmp	r5, #0
 800adac:	d1f9      	bne.n	800ada2 <strspn+0x10>
 800adae:	1a30      	subs	r0, r6, r0
 800adb0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800adb4 <_close_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4d06      	ldr	r5, [pc, #24]	; (800add0 <_close_r+0x1c>)
 800adb8:	2300      	movs	r3, #0
 800adba:	4604      	mov	r4, r0
 800adbc:	4608      	mov	r0, r1
 800adbe:	602b      	str	r3, [r5, #0]
 800adc0:	f7f6 f89a 	bl	8000ef8 <_close>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_close_r+0x1a>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_close_r+0x1a>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20000390 	.word	0x20000390

0800add4 <_lseek_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4d07      	ldr	r5, [pc, #28]	; (800adf4 <_lseek_r+0x20>)
 800add8:	4604      	mov	r4, r0
 800adda:	4608      	mov	r0, r1
 800addc:	4611      	mov	r1, r2
 800adde:	2200      	movs	r2, #0
 800ade0:	602a      	str	r2, [r5, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	f7f6 f8af 	bl	8000f46 <_lseek>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d102      	bne.n	800adf2 <_lseek_r+0x1e>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	b103      	cbz	r3, 800adf2 <_lseek_r+0x1e>
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	20000390 	.word	0x20000390

0800adf8 <_read_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d07      	ldr	r5, [pc, #28]	; (800ae18 <_read_r+0x20>)
 800adfc:	4604      	mov	r4, r0
 800adfe:	4608      	mov	r0, r1
 800ae00:	4611      	mov	r1, r2
 800ae02:	2200      	movs	r2, #0
 800ae04:	602a      	str	r2, [r5, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	f7f6 f859 	bl	8000ebe <_read>
 800ae0c:	1c43      	adds	r3, r0, #1
 800ae0e:	d102      	bne.n	800ae16 <_read_r+0x1e>
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	b103      	cbz	r3, 800ae16 <_read_r+0x1e>
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	bd38      	pop	{r3, r4, r5, pc}
 800ae18:	20000390 	.word	0x20000390

0800ae1c <_sbrk_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	4d06      	ldr	r5, [pc, #24]	; (800ae38 <_sbrk_r+0x1c>)
 800ae20:	2300      	movs	r3, #0
 800ae22:	4604      	mov	r4, r0
 800ae24:	4608      	mov	r0, r1
 800ae26:	602b      	str	r3, [r5, #0]
 800ae28:	f7f6 f89a 	bl	8000f60 <_sbrk>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	d102      	bne.n	800ae36 <_sbrk_r+0x1a>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	b103      	cbz	r3, 800ae36 <_sbrk_r+0x1a>
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	20000390 	.word	0x20000390

0800ae3c <_write_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4d07      	ldr	r5, [pc, #28]	; (800ae5c <_write_r+0x20>)
 800ae40:	4604      	mov	r4, r0
 800ae42:	4608      	mov	r0, r1
 800ae44:	4611      	mov	r1, r2
 800ae46:	2200      	movs	r2, #0
 800ae48:	602a      	str	r2, [r5, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	f7f5 fc74 	bl	8000738 <_write>
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	d102      	bne.n	800ae5a <_write_r+0x1e>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	b103      	cbz	r3, 800ae5a <_write_r+0x1e>
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	20000390 	.word	0x20000390

0800ae60 <__errno>:
 800ae60:	4b01      	ldr	r3, [pc, #4]	; (800ae68 <__errno+0x8>)
 800ae62:	6818      	ldr	r0, [r3, #0]
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	200000b0 	.word	0x200000b0

0800ae6c <__libc_init_array>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	4d0d      	ldr	r5, [pc, #52]	; (800aea4 <__libc_init_array+0x38>)
 800ae70:	4c0d      	ldr	r4, [pc, #52]	; (800aea8 <__libc_init_array+0x3c>)
 800ae72:	1b64      	subs	r4, r4, r5
 800ae74:	10a4      	asrs	r4, r4, #2
 800ae76:	2600      	movs	r6, #0
 800ae78:	42a6      	cmp	r6, r4
 800ae7a:	d109      	bne.n	800ae90 <__libc_init_array+0x24>
 800ae7c:	4d0b      	ldr	r5, [pc, #44]	; (800aeac <__libc_init_array+0x40>)
 800ae7e:	4c0c      	ldr	r4, [pc, #48]	; (800aeb0 <__libc_init_array+0x44>)
 800ae80:	f000 fd90 	bl	800b9a4 <_init>
 800ae84:	1b64      	subs	r4, r4, r5
 800ae86:	10a4      	asrs	r4, r4, #2
 800ae88:	2600      	movs	r6, #0
 800ae8a:	42a6      	cmp	r6, r4
 800ae8c:	d105      	bne.n	800ae9a <__libc_init_array+0x2e>
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae94:	4798      	blx	r3
 800ae96:	3601      	adds	r6, #1
 800ae98:	e7ee      	b.n	800ae78 <__libc_init_array+0xc>
 800ae9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae9e:	4798      	blx	r3
 800aea0:	3601      	adds	r6, #1
 800aea2:	e7f2      	b.n	800ae8a <__libc_init_array+0x1e>
 800aea4:	0800c7a8 	.word	0x0800c7a8
 800aea8:	0800c7a8 	.word	0x0800c7a8
 800aeac:	0800c7a8 	.word	0x0800c7a8
 800aeb0:	0800c7ac 	.word	0x0800c7ac

0800aeb4 <__retarget_lock_acquire_recursive>:
 800aeb4:	4770      	bx	lr

0800aeb6 <__retarget_lock_release_recursive>:
 800aeb6:	4770      	bx	lr

0800aeb8 <memcpy>:
 800aeb8:	440a      	add	r2, r1
 800aeba:	4291      	cmp	r1, r2
 800aebc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aec0:	d100      	bne.n	800aec4 <memcpy+0xc>
 800aec2:	4770      	bx	lr
 800aec4:	b510      	push	{r4, lr}
 800aec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aece:	4291      	cmp	r1, r2
 800aed0:	d1f9      	bne.n	800aec6 <memcpy+0xe>
 800aed2:	bd10      	pop	{r4, pc}

0800aed4 <abort>:
 800aed4:	b508      	push	{r3, lr}
 800aed6:	2006      	movs	r0, #6
 800aed8:	f000 fcc4 	bl	800b864 <raise>
 800aedc:	2001      	movs	r0, #1
 800aede:	f7f5 ffe4 	bl	8000eaa <_exit>
	...

0800aee4 <_free_r>:
 800aee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aee6:	2900      	cmp	r1, #0
 800aee8:	d044      	beq.n	800af74 <_free_r+0x90>
 800aeea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeee:	9001      	str	r0, [sp, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f1a1 0404 	sub.w	r4, r1, #4
 800aef6:	bfb8      	it	lt
 800aef8:	18e4      	addlt	r4, r4, r3
 800aefa:	f7ff fde9 	bl	800aad0 <__malloc_lock>
 800aefe:	4a1e      	ldr	r2, [pc, #120]	; (800af78 <_free_r+0x94>)
 800af00:	9801      	ldr	r0, [sp, #4]
 800af02:	6813      	ldr	r3, [r2, #0]
 800af04:	b933      	cbnz	r3, 800af14 <_free_r+0x30>
 800af06:	6063      	str	r3, [r4, #4]
 800af08:	6014      	str	r4, [r2, #0]
 800af0a:	b003      	add	sp, #12
 800af0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af10:	f7ff bde4 	b.w	800aadc <__malloc_unlock>
 800af14:	42a3      	cmp	r3, r4
 800af16:	d908      	bls.n	800af2a <_free_r+0x46>
 800af18:	6825      	ldr	r5, [r4, #0]
 800af1a:	1961      	adds	r1, r4, r5
 800af1c:	428b      	cmp	r3, r1
 800af1e:	bf01      	itttt	eq
 800af20:	6819      	ldreq	r1, [r3, #0]
 800af22:	685b      	ldreq	r3, [r3, #4]
 800af24:	1949      	addeq	r1, r1, r5
 800af26:	6021      	streq	r1, [r4, #0]
 800af28:	e7ed      	b.n	800af06 <_free_r+0x22>
 800af2a:	461a      	mov	r2, r3
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	b10b      	cbz	r3, 800af34 <_free_r+0x50>
 800af30:	42a3      	cmp	r3, r4
 800af32:	d9fa      	bls.n	800af2a <_free_r+0x46>
 800af34:	6811      	ldr	r1, [r2, #0]
 800af36:	1855      	adds	r5, r2, r1
 800af38:	42a5      	cmp	r5, r4
 800af3a:	d10b      	bne.n	800af54 <_free_r+0x70>
 800af3c:	6824      	ldr	r4, [r4, #0]
 800af3e:	4421      	add	r1, r4
 800af40:	1854      	adds	r4, r2, r1
 800af42:	42a3      	cmp	r3, r4
 800af44:	6011      	str	r1, [r2, #0]
 800af46:	d1e0      	bne.n	800af0a <_free_r+0x26>
 800af48:	681c      	ldr	r4, [r3, #0]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	6053      	str	r3, [r2, #4]
 800af4e:	440c      	add	r4, r1
 800af50:	6014      	str	r4, [r2, #0]
 800af52:	e7da      	b.n	800af0a <_free_r+0x26>
 800af54:	d902      	bls.n	800af5c <_free_r+0x78>
 800af56:	230c      	movs	r3, #12
 800af58:	6003      	str	r3, [r0, #0]
 800af5a:	e7d6      	b.n	800af0a <_free_r+0x26>
 800af5c:	6825      	ldr	r5, [r4, #0]
 800af5e:	1961      	adds	r1, r4, r5
 800af60:	428b      	cmp	r3, r1
 800af62:	bf04      	itt	eq
 800af64:	6819      	ldreq	r1, [r3, #0]
 800af66:	685b      	ldreq	r3, [r3, #4]
 800af68:	6063      	str	r3, [r4, #4]
 800af6a:	bf04      	itt	eq
 800af6c:	1949      	addeq	r1, r1, r5
 800af6e:	6021      	streq	r1, [r4, #0]
 800af70:	6054      	str	r4, [r2, #4]
 800af72:	e7ca      	b.n	800af0a <_free_r+0x26>
 800af74:	b003      	add	sp, #12
 800af76:	bd30      	pop	{r4, r5, pc}
 800af78:	2000024c 	.word	0x2000024c

0800af7c <__sfputc_r>:
 800af7c:	6893      	ldr	r3, [r2, #8]
 800af7e:	3b01      	subs	r3, #1
 800af80:	2b00      	cmp	r3, #0
 800af82:	b410      	push	{r4}
 800af84:	6093      	str	r3, [r2, #8]
 800af86:	da08      	bge.n	800af9a <__sfputc_r+0x1e>
 800af88:	6994      	ldr	r4, [r2, #24]
 800af8a:	42a3      	cmp	r3, r4
 800af8c:	db01      	blt.n	800af92 <__sfputc_r+0x16>
 800af8e:	290a      	cmp	r1, #10
 800af90:	d103      	bne.n	800af9a <__sfputc_r+0x1e>
 800af92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af96:	f000 bba7 	b.w	800b6e8 <__swbuf_r>
 800af9a:	6813      	ldr	r3, [r2, #0]
 800af9c:	1c58      	adds	r0, r3, #1
 800af9e:	6010      	str	r0, [r2, #0]
 800afa0:	7019      	strb	r1, [r3, #0]
 800afa2:	4608      	mov	r0, r1
 800afa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <__sfputs_r>:
 800afaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afac:	4606      	mov	r6, r0
 800afae:	460f      	mov	r7, r1
 800afb0:	4614      	mov	r4, r2
 800afb2:	18d5      	adds	r5, r2, r3
 800afb4:	42ac      	cmp	r4, r5
 800afb6:	d101      	bne.n	800afbc <__sfputs_r+0x12>
 800afb8:	2000      	movs	r0, #0
 800afba:	e007      	b.n	800afcc <__sfputs_r+0x22>
 800afbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc0:	463a      	mov	r2, r7
 800afc2:	4630      	mov	r0, r6
 800afc4:	f7ff ffda 	bl	800af7c <__sfputc_r>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d1f3      	bne.n	800afb4 <__sfputs_r+0xa>
 800afcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afd0 <_vfiprintf_r>:
 800afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd4:	460d      	mov	r5, r1
 800afd6:	b09d      	sub	sp, #116	; 0x74
 800afd8:	4614      	mov	r4, r2
 800afda:	4698      	mov	r8, r3
 800afdc:	4606      	mov	r6, r0
 800afde:	b118      	cbz	r0, 800afe8 <_vfiprintf_r+0x18>
 800afe0:	6a03      	ldr	r3, [r0, #32]
 800afe2:	b90b      	cbnz	r3, 800afe8 <_vfiprintf_r+0x18>
 800afe4:	f7ff fdfa 	bl	800abdc <__sinit>
 800afe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afea:	07d9      	lsls	r1, r3, #31
 800afec:	d405      	bmi.n	800affa <_vfiprintf_r+0x2a>
 800afee:	89ab      	ldrh	r3, [r5, #12]
 800aff0:	059a      	lsls	r2, r3, #22
 800aff2:	d402      	bmi.n	800affa <_vfiprintf_r+0x2a>
 800aff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aff6:	f7ff ff5d 	bl	800aeb4 <__retarget_lock_acquire_recursive>
 800affa:	89ab      	ldrh	r3, [r5, #12]
 800affc:	071b      	lsls	r3, r3, #28
 800affe:	d501      	bpl.n	800b004 <_vfiprintf_r+0x34>
 800b000:	692b      	ldr	r3, [r5, #16]
 800b002:	b99b      	cbnz	r3, 800b02c <_vfiprintf_r+0x5c>
 800b004:	4629      	mov	r1, r5
 800b006:	4630      	mov	r0, r6
 800b008:	f000 fbac 	bl	800b764 <__swsetup_r>
 800b00c:	b170      	cbz	r0, 800b02c <_vfiprintf_r+0x5c>
 800b00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b010:	07dc      	lsls	r4, r3, #31
 800b012:	d504      	bpl.n	800b01e <_vfiprintf_r+0x4e>
 800b014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b018:	b01d      	add	sp, #116	; 0x74
 800b01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01e:	89ab      	ldrh	r3, [r5, #12]
 800b020:	0598      	lsls	r0, r3, #22
 800b022:	d4f7      	bmi.n	800b014 <_vfiprintf_r+0x44>
 800b024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b026:	f7ff ff46 	bl	800aeb6 <__retarget_lock_release_recursive>
 800b02a:	e7f3      	b.n	800b014 <_vfiprintf_r+0x44>
 800b02c:	2300      	movs	r3, #0
 800b02e:	9309      	str	r3, [sp, #36]	; 0x24
 800b030:	2320      	movs	r3, #32
 800b032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b036:	f8cd 800c 	str.w	r8, [sp, #12]
 800b03a:	2330      	movs	r3, #48	; 0x30
 800b03c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b1f0 <_vfiprintf_r+0x220>
 800b040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b044:	f04f 0901 	mov.w	r9, #1
 800b048:	4623      	mov	r3, r4
 800b04a:	469a      	mov	sl, r3
 800b04c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b050:	b10a      	cbz	r2, 800b056 <_vfiprintf_r+0x86>
 800b052:	2a25      	cmp	r2, #37	; 0x25
 800b054:	d1f9      	bne.n	800b04a <_vfiprintf_r+0x7a>
 800b056:	ebba 0b04 	subs.w	fp, sl, r4
 800b05a:	d00b      	beq.n	800b074 <_vfiprintf_r+0xa4>
 800b05c:	465b      	mov	r3, fp
 800b05e:	4622      	mov	r2, r4
 800b060:	4629      	mov	r1, r5
 800b062:	4630      	mov	r0, r6
 800b064:	f7ff ffa1 	bl	800afaa <__sfputs_r>
 800b068:	3001      	adds	r0, #1
 800b06a:	f000 80a9 	beq.w	800b1c0 <_vfiprintf_r+0x1f0>
 800b06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b070:	445a      	add	r2, fp
 800b072:	9209      	str	r2, [sp, #36]	; 0x24
 800b074:	f89a 3000 	ldrb.w	r3, [sl]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 80a1 	beq.w	800b1c0 <_vfiprintf_r+0x1f0>
 800b07e:	2300      	movs	r3, #0
 800b080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b088:	f10a 0a01 	add.w	sl, sl, #1
 800b08c:	9304      	str	r3, [sp, #16]
 800b08e:	9307      	str	r3, [sp, #28]
 800b090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b094:	931a      	str	r3, [sp, #104]	; 0x68
 800b096:	4654      	mov	r4, sl
 800b098:	2205      	movs	r2, #5
 800b09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b09e:	4854      	ldr	r0, [pc, #336]	; (800b1f0 <_vfiprintf_r+0x220>)
 800b0a0:	f7f5 f8a6 	bl	80001f0 <memchr>
 800b0a4:	9a04      	ldr	r2, [sp, #16]
 800b0a6:	b9d8      	cbnz	r0, 800b0e0 <_vfiprintf_r+0x110>
 800b0a8:	06d1      	lsls	r1, r2, #27
 800b0aa:	bf44      	itt	mi
 800b0ac:	2320      	movmi	r3, #32
 800b0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0b2:	0713      	lsls	r3, r2, #28
 800b0b4:	bf44      	itt	mi
 800b0b6:	232b      	movmi	r3, #43	; 0x2b
 800b0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c2:	d015      	beq.n	800b0f0 <_vfiprintf_r+0x120>
 800b0c4:	9a07      	ldr	r2, [sp, #28]
 800b0c6:	4654      	mov	r4, sl
 800b0c8:	2000      	movs	r0, #0
 800b0ca:	f04f 0c0a 	mov.w	ip, #10
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0d4:	3b30      	subs	r3, #48	; 0x30
 800b0d6:	2b09      	cmp	r3, #9
 800b0d8:	d94d      	bls.n	800b176 <_vfiprintf_r+0x1a6>
 800b0da:	b1b0      	cbz	r0, 800b10a <_vfiprintf_r+0x13a>
 800b0dc:	9207      	str	r2, [sp, #28]
 800b0de:	e014      	b.n	800b10a <_vfiprintf_r+0x13a>
 800b0e0:	eba0 0308 	sub.w	r3, r0, r8
 800b0e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	9304      	str	r3, [sp, #16]
 800b0ec:	46a2      	mov	sl, r4
 800b0ee:	e7d2      	b.n	800b096 <_vfiprintf_r+0xc6>
 800b0f0:	9b03      	ldr	r3, [sp, #12]
 800b0f2:	1d19      	adds	r1, r3, #4
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	9103      	str	r1, [sp, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	bfbb      	ittet	lt
 800b0fc:	425b      	neglt	r3, r3
 800b0fe:	f042 0202 	orrlt.w	r2, r2, #2
 800b102:	9307      	strge	r3, [sp, #28]
 800b104:	9307      	strlt	r3, [sp, #28]
 800b106:	bfb8      	it	lt
 800b108:	9204      	strlt	r2, [sp, #16]
 800b10a:	7823      	ldrb	r3, [r4, #0]
 800b10c:	2b2e      	cmp	r3, #46	; 0x2e
 800b10e:	d10c      	bne.n	800b12a <_vfiprintf_r+0x15a>
 800b110:	7863      	ldrb	r3, [r4, #1]
 800b112:	2b2a      	cmp	r3, #42	; 0x2a
 800b114:	d134      	bne.n	800b180 <_vfiprintf_r+0x1b0>
 800b116:	9b03      	ldr	r3, [sp, #12]
 800b118:	1d1a      	adds	r2, r3, #4
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	9203      	str	r2, [sp, #12]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	bfb8      	it	lt
 800b122:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b126:	3402      	adds	r4, #2
 800b128:	9305      	str	r3, [sp, #20]
 800b12a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b200 <_vfiprintf_r+0x230>
 800b12e:	7821      	ldrb	r1, [r4, #0]
 800b130:	2203      	movs	r2, #3
 800b132:	4650      	mov	r0, sl
 800b134:	f7f5 f85c 	bl	80001f0 <memchr>
 800b138:	b138      	cbz	r0, 800b14a <_vfiprintf_r+0x17a>
 800b13a:	9b04      	ldr	r3, [sp, #16]
 800b13c:	eba0 000a 	sub.w	r0, r0, sl
 800b140:	2240      	movs	r2, #64	; 0x40
 800b142:	4082      	lsls	r2, r0
 800b144:	4313      	orrs	r3, r2
 800b146:	3401      	adds	r4, #1
 800b148:	9304      	str	r3, [sp, #16]
 800b14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b14e:	4829      	ldr	r0, [pc, #164]	; (800b1f4 <_vfiprintf_r+0x224>)
 800b150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b154:	2206      	movs	r2, #6
 800b156:	f7f5 f84b 	bl	80001f0 <memchr>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d03f      	beq.n	800b1de <_vfiprintf_r+0x20e>
 800b15e:	4b26      	ldr	r3, [pc, #152]	; (800b1f8 <_vfiprintf_r+0x228>)
 800b160:	bb1b      	cbnz	r3, 800b1aa <_vfiprintf_r+0x1da>
 800b162:	9b03      	ldr	r3, [sp, #12]
 800b164:	3307      	adds	r3, #7
 800b166:	f023 0307 	bic.w	r3, r3, #7
 800b16a:	3308      	adds	r3, #8
 800b16c:	9303      	str	r3, [sp, #12]
 800b16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b170:	443b      	add	r3, r7
 800b172:	9309      	str	r3, [sp, #36]	; 0x24
 800b174:	e768      	b.n	800b048 <_vfiprintf_r+0x78>
 800b176:	fb0c 3202 	mla	r2, ip, r2, r3
 800b17a:	460c      	mov	r4, r1
 800b17c:	2001      	movs	r0, #1
 800b17e:	e7a6      	b.n	800b0ce <_vfiprintf_r+0xfe>
 800b180:	2300      	movs	r3, #0
 800b182:	3401      	adds	r4, #1
 800b184:	9305      	str	r3, [sp, #20]
 800b186:	4619      	mov	r1, r3
 800b188:	f04f 0c0a 	mov.w	ip, #10
 800b18c:	4620      	mov	r0, r4
 800b18e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b192:	3a30      	subs	r2, #48	; 0x30
 800b194:	2a09      	cmp	r2, #9
 800b196:	d903      	bls.n	800b1a0 <_vfiprintf_r+0x1d0>
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0c6      	beq.n	800b12a <_vfiprintf_r+0x15a>
 800b19c:	9105      	str	r1, [sp, #20]
 800b19e:	e7c4      	b.n	800b12a <_vfiprintf_r+0x15a>
 800b1a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e7f0      	b.n	800b18c <_vfiprintf_r+0x1bc>
 800b1aa:	ab03      	add	r3, sp, #12
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	462a      	mov	r2, r5
 800b1b0:	4b12      	ldr	r3, [pc, #72]	; (800b1fc <_vfiprintf_r+0x22c>)
 800b1b2:	a904      	add	r1, sp, #16
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f3af 8000 	nop.w
 800b1ba:	4607      	mov	r7, r0
 800b1bc:	1c78      	adds	r0, r7, #1
 800b1be:	d1d6      	bne.n	800b16e <_vfiprintf_r+0x19e>
 800b1c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1c2:	07d9      	lsls	r1, r3, #31
 800b1c4:	d405      	bmi.n	800b1d2 <_vfiprintf_r+0x202>
 800b1c6:	89ab      	ldrh	r3, [r5, #12]
 800b1c8:	059a      	lsls	r2, r3, #22
 800b1ca:	d402      	bmi.n	800b1d2 <_vfiprintf_r+0x202>
 800b1cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ce:	f7ff fe72 	bl	800aeb6 <__retarget_lock_release_recursive>
 800b1d2:	89ab      	ldrh	r3, [r5, #12]
 800b1d4:	065b      	lsls	r3, r3, #25
 800b1d6:	f53f af1d 	bmi.w	800b014 <_vfiprintf_r+0x44>
 800b1da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1dc:	e71c      	b.n	800b018 <_vfiprintf_r+0x48>
 800b1de:	ab03      	add	r3, sp, #12
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	462a      	mov	r2, r5
 800b1e4:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <_vfiprintf_r+0x22c>)
 800b1e6:	a904      	add	r1, sp, #16
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f000 f879 	bl	800b2e0 <_printf_i>
 800b1ee:	e7e4      	b.n	800b1ba <_vfiprintf_r+0x1ea>
 800b1f0:	0800c76c 	.word	0x0800c76c
 800b1f4:	0800c776 	.word	0x0800c776
 800b1f8:	00000000 	.word	0x00000000
 800b1fc:	0800afab 	.word	0x0800afab
 800b200:	0800c772 	.word	0x0800c772

0800b204 <_printf_common>:
 800b204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b208:	4616      	mov	r6, r2
 800b20a:	4699      	mov	r9, r3
 800b20c:	688a      	ldr	r2, [r1, #8]
 800b20e:	690b      	ldr	r3, [r1, #16]
 800b210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b214:	4293      	cmp	r3, r2
 800b216:	bfb8      	it	lt
 800b218:	4613      	movlt	r3, r2
 800b21a:	6033      	str	r3, [r6, #0]
 800b21c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b220:	4607      	mov	r7, r0
 800b222:	460c      	mov	r4, r1
 800b224:	b10a      	cbz	r2, 800b22a <_printf_common+0x26>
 800b226:	3301      	adds	r3, #1
 800b228:	6033      	str	r3, [r6, #0]
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	0699      	lsls	r1, r3, #26
 800b22e:	bf42      	ittt	mi
 800b230:	6833      	ldrmi	r3, [r6, #0]
 800b232:	3302      	addmi	r3, #2
 800b234:	6033      	strmi	r3, [r6, #0]
 800b236:	6825      	ldr	r5, [r4, #0]
 800b238:	f015 0506 	ands.w	r5, r5, #6
 800b23c:	d106      	bne.n	800b24c <_printf_common+0x48>
 800b23e:	f104 0a19 	add.w	sl, r4, #25
 800b242:	68e3      	ldr	r3, [r4, #12]
 800b244:	6832      	ldr	r2, [r6, #0]
 800b246:	1a9b      	subs	r3, r3, r2
 800b248:	42ab      	cmp	r3, r5
 800b24a:	dc26      	bgt.n	800b29a <_printf_common+0x96>
 800b24c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b250:	1e13      	subs	r3, r2, #0
 800b252:	6822      	ldr	r2, [r4, #0]
 800b254:	bf18      	it	ne
 800b256:	2301      	movne	r3, #1
 800b258:	0692      	lsls	r2, r2, #26
 800b25a:	d42b      	bmi.n	800b2b4 <_printf_common+0xb0>
 800b25c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b260:	4649      	mov	r1, r9
 800b262:	4638      	mov	r0, r7
 800b264:	47c0      	blx	r8
 800b266:	3001      	adds	r0, #1
 800b268:	d01e      	beq.n	800b2a8 <_printf_common+0xa4>
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	6922      	ldr	r2, [r4, #16]
 800b26e:	f003 0306 	and.w	r3, r3, #6
 800b272:	2b04      	cmp	r3, #4
 800b274:	bf02      	ittt	eq
 800b276:	68e5      	ldreq	r5, [r4, #12]
 800b278:	6833      	ldreq	r3, [r6, #0]
 800b27a:	1aed      	subeq	r5, r5, r3
 800b27c:	68a3      	ldr	r3, [r4, #8]
 800b27e:	bf0c      	ite	eq
 800b280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b284:	2500      	movne	r5, #0
 800b286:	4293      	cmp	r3, r2
 800b288:	bfc4      	itt	gt
 800b28a:	1a9b      	subgt	r3, r3, r2
 800b28c:	18ed      	addgt	r5, r5, r3
 800b28e:	2600      	movs	r6, #0
 800b290:	341a      	adds	r4, #26
 800b292:	42b5      	cmp	r5, r6
 800b294:	d11a      	bne.n	800b2cc <_printf_common+0xc8>
 800b296:	2000      	movs	r0, #0
 800b298:	e008      	b.n	800b2ac <_printf_common+0xa8>
 800b29a:	2301      	movs	r3, #1
 800b29c:	4652      	mov	r2, sl
 800b29e:	4649      	mov	r1, r9
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	47c0      	blx	r8
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d103      	bne.n	800b2b0 <_printf_common+0xac>
 800b2a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b0:	3501      	adds	r5, #1
 800b2b2:	e7c6      	b.n	800b242 <_printf_common+0x3e>
 800b2b4:	18e1      	adds	r1, r4, r3
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	2030      	movs	r0, #48	; 0x30
 800b2ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2be:	4422      	add	r2, r4
 800b2c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2c8:	3302      	adds	r3, #2
 800b2ca:	e7c7      	b.n	800b25c <_printf_common+0x58>
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	4622      	mov	r2, r4
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	47c0      	blx	r8
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	d0e6      	beq.n	800b2a8 <_printf_common+0xa4>
 800b2da:	3601      	adds	r6, #1
 800b2dc:	e7d9      	b.n	800b292 <_printf_common+0x8e>
	...

0800b2e0 <_printf_i>:
 800b2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e4:	7e0f      	ldrb	r7, [r1, #24]
 800b2e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2e8:	2f78      	cmp	r7, #120	; 0x78
 800b2ea:	4691      	mov	r9, r2
 800b2ec:	4680      	mov	r8, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	469a      	mov	sl, r3
 800b2f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2f6:	d807      	bhi.n	800b308 <_printf_i+0x28>
 800b2f8:	2f62      	cmp	r7, #98	; 0x62
 800b2fa:	d80a      	bhi.n	800b312 <_printf_i+0x32>
 800b2fc:	2f00      	cmp	r7, #0
 800b2fe:	f000 80d4 	beq.w	800b4aa <_printf_i+0x1ca>
 800b302:	2f58      	cmp	r7, #88	; 0x58
 800b304:	f000 80c0 	beq.w	800b488 <_printf_i+0x1a8>
 800b308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b30c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b310:	e03a      	b.n	800b388 <_printf_i+0xa8>
 800b312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b316:	2b15      	cmp	r3, #21
 800b318:	d8f6      	bhi.n	800b308 <_printf_i+0x28>
 800b31a:	a101      	add	r1, pc, #4	; (adr r1, 800b320 <_printf_i+0x40>)
 800b31c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b320:	0800b379 	.word	0x0800b379
 800b324:	0800b38d 	.word	0x0800b38d
 800b328:	0800b309 	.word	0x0800b309
 800b32c:	0800b309 	.word	0x0800b309
 800b330:	0800b309 	.word	0x0800b309
 800b334:	0800b309 	.word	0x0800b309
 800b338:	0800b38d 	.word	0x0800b38d
 800b33c:	0800b309 	.word	0x0800b309
 800b340:	0800b309 	.word	0x0800b309
 800b344:	0800b309 	.word	0x0800b309
 800b348:	0800b309 	.word	0x0800b309
 800b34c:	0800b491 	.word	0x0800b491
 800b350:	0800b3b9 	.word	0x0800b3b9
 800b354:	0800b44b 	.word	0x0800b44b
 800b358:	0800b309 	.word	0x0800b309
 800b35c:	0800b309 	.word	0x0800b309
 800b360:	0800b4b3 	.word	0x0800b4b3
 800b364:	0800b309 	.word	0x0800b309
 800b368:	0800b3b9 	.word	0x0800b3b9
 800b36c:	0800b309 	.word	0x0800b309
 800b370:	0800b309 	.word	0x0800b309
 800b374:	0800b453 	.word	0x0800b453
 800b378:	682b      	ldr	r3, [r5, #0]
 800b37a:	1d1a      	adds	r2, r3, #4
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	602a      	str	r2, [r5, #0]
 800b380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b388:	2301      	movs	r3, #1
 800b38a:	e09f      	b.n	800b4cc <_printf_i+0x1ec>
 800b38c:	6820      	ldr	r0, [r4, #0]
 800b38e:	682b      	ldr	r3, [r5, #0]
 800b390:	0607      	lsls	r7, r0, #24
 800b392:	f103 0104 	add.w	r1, r3, #4
 800b396:	6029      	str	r1, [r5, #0]
 800b398:	d501      	bpl.n	800b39e <_printf_i+0xbe>
 800b39a:	681e      	ldr	r6, [r3, #0]
 800b39c:	e003      	b.n	800b3a6 <_printf_i+0xc6>
 800b39e:	0646      	lsls	r6, r0, #25
 800b3a0:	d5fb      	bpl.n	800b39a <_printf_i+0xba>
 800b3a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b3a6:	2e00      	cmp	r6, #0
 800b3a8:	da03      	bge.n	800b3b2 <_printf_i+0xd2>
 800b3aa:	232d      	movs	r3, #45	; 0x2d
 800b3ac:	4276      	negs	r6, r6
 800b3ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3b2:	485a      	ldr	r0, [pc, #360]	; (800b51c <_printf_i+0x23c>)
 800b3b4:	230a      	movs	r3, #10
 800b3b6:	e012      	b.n	800b3de <_printf_i+0xfe>
 800b3b8:	682b      	ldr	r3, [r5, #0]
 800b3ba:	6820      	ldr	r0, [r4, #0]
 800b3bc:	1d19      	adds	r1, r3, #4
 800b3be:	6029      	str	r1, [r5, #0]
 800b3c0:	0605      	lsls	r5, r0, #24
 800b3c2:	d501      	bpl.n	800b3c8 <_printf_i+0xe8>
 800b3c4:	681e      	ldr	r6, [r3, #0]
 800b3c6:	e002      	b.n	800b3ce <_printf_i+0xee>
 800b3c8:	0641      	lsls	r1, r0, #25
 800b3ca:	d5fb      	bpl.n	800b3c4 <_printf_i+0xe4>
 800b3cc:	881e      	ldrh	r6, [r3, #0]
 800b3ce:	4853      	ldr	r0, [pc, #332]	; (800b51c <_printf_i+0x23c>)
 800b3d0:	2f6f      	cmp	r7, #111	; 0x6f
 800b3d2:	bf0c      	ite	eq
 800b3d4:	2308      	moveq	r3, #8
 800b3d6:	230a      	movne	r3, #10
 800b3d8:	2100      	movs	r1, #0
 800b3da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3de:	6865      	ldr	r5, [r4, #4]
 800b3e0:	60a5      	str	r5, [r4, #8]
 800b3e2:	2d00      	cmp	r5, #0
 800b3e4:	bfa2      	ittt	ge
 800b3e6:	6821      	ldrge	r1, [r4, #0]
 800b3e8:	f021 0104 	bicge.w	r1, r1, #4
 800b3ec:	6021      	strge	r1, [r4, #0]
 800b3ee:	b90e      	cbnz	r6, 800b3f4 <_printf_i+0x114>
 800b3f0:	2d00      	cmp	r5, #0
 800b3f2:	d04b      	beq.n	800b48c <_printf_i+0x1ac>
 800b3f4:	4615      	mov	r5, r2
 800b3f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3fa:	fb03 6711 	mls	r7, r3, r1, r6
 800b3fe:	5dc7      	ldrb	r7, [r0, r7]
 800b400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b404:	4637      	mov	r7, r6
 800b406:	42bb      	cmp	r3, r7
 800b408:	460e      	mov	r6, r1
 800b40a:	d9f4      	bls.n	800b3f6 <_printf_i+0x116>
 800b40c:	2b08      	cmp	r3, #8
 800b40e:	d10b      	bne.n	800b428 <_printf_i+0x148>
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	07de      	lsls	r6, r3, #31
 800b414:	d508      	bpl.n	800b428 <_printf_i+0x148>
 800b416:	6923      	ldr	r3, [r4, #16]
 800b418:	6861      	ldr	r1, [r4, #4]
 800b41a:	4299      	cmp	r1, r3
 800b41c:	bfde      	ittt	le
 800b41e:	2330      	movle	r3, #48	; 0x30
 800b420:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b424:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b428:	1b52      	subs	r2, r2, r5
 800b42a:	6122      	str	r2, [r4, #16]
 800b42c:	f8cd a000 	str.w	sl, [sp]
 800b430:	464b      	mov	r3, r9
 800b432:	aa03      	add	r2, sp, #12
 800b434:	4621      	mov	r1, r4
 800b436:	4640      	mov	r0, r8
 800b438:	f7ff fee4 	bl	800b204 <_printf_common>
 800b43c:	3001      	adds	r0, #1
 800b43e:	d14a      	bne.n	800b4d6 <_printf_i+0x1f6>
 800b440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b444:	b004      	add	sp, #16
 800b446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	f043 0320 	orr.w	r3, r3, #32
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	4833      	ldr	r0, [pc, #204]	; (800b520 <_printf_i+0x240>)
 800b454:	2778      	movs	r7, #120	; 0x78
 800b456:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	6829      	ldr	r1, [r5, #0]
 800b45e:	061f      	lsls	r7, r3, #24
 800b460:	f851 6b04 	ldr.w	r6, [r1], #4
 800b464:	d402      	bmi.n	800b46c <_printf_i+0x18c>
 800b466:	065f      	lsls	r7, r3, #25
 800b468:	bf48      	it	mi
 800b46a:	b2b6      	uxthmi	r6, r6
 800b46c:	07df      	lsls	r7, r3, #31
 800b46e:	bf48      	it	mi
 800b470:	f043 0320 	orrmi.w	r3, r3, #32
 800b474:	6029      	str	r1, [r5, #0]
 800b476:	bf48      	it	mi
 800b478:	6023      	strmi	r3, [r4, #0]
 800b47a:	b91e      	cbnz	r6, 800b484 <_printf_i+0x1a4>
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	f023 0320 	bic.w	r3, r3, #32
 800b482:	6023      	str	r3, [r4, #0]
 800b484:	2310      	movs	r3, #16
 800b486:	e7a7      	b.n	800b3d8 <_printf_i+0xf8>
 800b488:	4824      	ldr	r0, [pc, #144]	; (800b51c <_printf_i+0x23c>)
 800b48a:	e7e4      	b.n	800b456 <_printf_i+0x176>
 800b48c:	4615      	mov	r5, r2
 800b48e:	e7bd      	b.n	800b40c <_printf_i+0x12c>
 800b490:	682b      	ldr	r3, [r5, #0]
 800b492:	6826      	ldr	r6, [r4, #0]
 800b494:	6961      	ldr	r1, [r4, #20]
 800b496:	1d18      	adds	r0, r3, #4
 800b498:	6028      	str	r0, [r5, #0]
 800b49a:	0635      	lsls	r5, r6, #24
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	d501      	bpl.n	800b4a4 <_printf_i+0x1c4>
 800b4a0:	6019      	str	r1, [r3, #0]
 800b4a2:	e002      	b.n	800b4aa <_printf_i+0x1ca>
 800b4a4:	0670      	lsls	r0, r6, #25
 800b4a6:	d5fb      	bpl.n	800b4a0 <_printf_i+0x1c0>
 800b4a8:	8019      	strh	r1, [r3, #0]
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	6123      	str	r3, [r4, #16]
 800b4ae:	4615      	mov	r5, r2
 800b4b0:	e7bc      	b.n	800b42c <_printf_i+0x14c>
 800b4b2:	682b      	ldr	r3, [r5, #0]
 800b4b4:	1d1a      	adds	r2, r3, #4
 800b4b6:	602a      	str	r2, [r5, #0]
 800b4b8:	681d      	ldr	r5, [r3, #0]
 800b4ba:	6862      	ldr	r2, [r4, #4]
 800b4bc:	2100      	movs	r1, #0
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f7f4 fe96 	bl	80001f0 <memchr>
 800b4c4:	b108      	cbz	r0, 800b4ca <_printf_i+0x1ea>
 800b4c6:	1b40      	subs	r0, r0, r5
 800b4c8:	6060      	str	r0, [r4, #4]
 800b4ca:	6863      	ldr	r3, [r4, #4]
 800b4cc:	6123      	str	r3, [r4, #16]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4d4:	e7aa      	b.n	800b42c <_printf_i+0x14c>
 800b4d6:	6923      	ldr	r3, [r4, #16]
 800b4d8:	462a      	mov	r2, r5
 800b4da:	4649      	mov	r1, r9
 800b4dc:	4640      	mov	r0, r8
 800b4de:	47d0      	blx	sl
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	d0ad      	beq.n	800b440 <_printf_i+0x160>
 800b4e4:	6823      	ldr	r3, [r4, #0]
 800b4e6:	079b      	lsls	r3, r3, #30
 800b4e8:	d413      	bmi.n	800b512 <_printf_i+0x232>
 800b4ea:	68e0      	ldr	r0, [r4, #12]
 800b4ec:	9b03      	ldr	r3, [sp, #12]
 800b4ee:	4298      	cmp	r0, r3
 800b4f0:	bfb8      	it	lt
 800b4f2:	4618      	movlt	r0, r3
 800b4f4:	e7a6      	b.n	800b444 <_printf_i+0x164>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	4632      	mov	r2, r6
 800b4fa:	4649      	mov	r1, r9
 800b4fc:	4640      	mov	r0, r8
 800b4fe:	47d0      	blx	sl
 800b500:	3001      	adds	r0, #1
 800b502:	d09d      	beq.n	800b440 <_printf_i+0x160>
 800b504:	3501      	adds	r5, #1
 800b506:	68e3      	ldr	r3, [r4, #12]
 800b508:	9903      	ldr	r1, [sp, #12]
 800b50a:	1a5b      	subs	r3, r3, r1
 800b50c:	42ab      	cmp	r3, r5
 800b50e:	dcf2      	bgt.n	800b4f6 <_printf_i+0x216>
 800b510:	e7eb      	b.n	800b4ea <_printf_i+0x20a>
 800b512:	2500      	movs	r5, #0
 800b514:	f104 0619 	add.w	r6, r4, #25
 800b518:	e7f5      	b.n	800b506 <_printf_i+0x226>
 800b51a:	bf00      	nop
 800b51c:	0800c77d 	.word	0x0800c77d
 800b520:	0800c78e 	.word	0x0800c78e

0800b524 <__sflush_r>:
 800b524:	898a      	ldrh	r2, [r1, #12]
 800b526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b52a:	4605      	mov	r5, r0
 800b52c:	0710      	lsls	r0, r2, #28
 800b52e:	460c      	mov	r4, r1
 800b530:	d458      	bmi.n	800b5e4 <__sflush_r+0xc0>
 800b532:	684b      	ldr	r3, [r1, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	dc05      	bgt.n	800b544 <__sflush_r+0x20>
 800b538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	dc02      	bgt.n	800b544 <__sflush_r+0x20>
 800b53e:	2000      	movs	r0, #0
 800b540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b546:	2e00      	cmp	r6, #0
 800b548:	d0f9      	beq.n	800b53e <__sflush_r+0x1a>
 800b54a:	2300      	movs	r3, #0
 800b54c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b550:	682f      	ldr	r7, [r5, #0]
 800b552:	6a21      	ldr	r1, [r4, #32]
 800b554:	602b      	str	r3, [r5, #0]
 800b556:	d032      	beq.n	800b5be <__sflush_r+0x9a>
 800b558:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	075a      	lsls	r2, r3, #29
 800b55e:	d505      	bpl.n	800b56c <__sflush_r+0x48>
 800b560:	6863      	ldr	r3, [r4, #4]
 800b562:	1ac0      	subs	r0, r0, r3
 800b564:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b566:	b10b      	cbz	r3, 800b56c <__sflush_r+0x48>
 800b568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b56a:	1ac0      	subs	r0, r0, r3
 800b56c:	2300      	movs	r3, #0
 800b56e:	4602      	mov	r2, r0
 800b570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b572:	6a21      	ldr	r1, [r4, #32]
 800b574:	4628      	mov	r0, r5
 800b576:	47b0      	blx	r6
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	d106      	bne.n	800b58c <__sflush_r+0x68>
 800b57e:	6829      	ldr	r1, [r5, #0]
 800b580:	291d      	cmp	r1, #29
 800b582:	d82b      	bhi.n	800b5dc <__sflush_r+0xb8>
 800b584:	4a29      	ldr	r2, [pc, #164]	; (800b62c <__sflush_r+0x108>)
 800b586:	410a      	asrs	r2, r1
 800b588:	07d6      	lsls	r6, r2, #31
 800b58a:	d427      	bmi.n	800b5dc <__sflush_r+0xb8>
 800b58c:	2200      	movs	r2, #0
 800b58e:	6062      	str	r2, [r4, #4]
 800b590:	04d9      	lsls	r1, r3, #19
 800b592:	6922      	ldr	r2, [r4, #16]
 800b594:	6022      	str	r2, [r4, #0]
 800b596:	d504      	bpl.n	800b5a2 <__sflush_r+0x7e>
 800b598:	1c42      	adds	r2, r0, #1
 800b59a:	d101      	bne.n	800b5a0 <__sflush_r+0x7c>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	b903      	cbnz	r3, 800b5a2 <__sflush_r+0x7e>
 800b5a0:	6560      	str	r0, [r4, #84]	; 0x54
 800b5a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5a4:	602f      	str	r7, [r5, #0]
 800b5a6:	2900      	cmp	r1, #0
 800b5a8:	d0c9      	beq.n	800b53e <__sflush_r+0x1a>
 800b5aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5ae:	4299      	cmp	r1, r3
 800b5b0:	d002      	beq.n	800b5b8 <__sflush_r+0x94>
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f7ff fc96 	bl	800aee4 <_free_r>
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	6360      	str	r0, [r4, #52]	; 0x34
 800b5bc:	e7c0      	b.n	800b540 <__sflush_r+0x1c>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	47b0      	blx	r6
 800b5c4:	1c41      	adds	r1, r0, #1
 800b5c6:	d1c8      	bne.n	800b55a <__sflush_r+0x36>
 800b5c8:	682b      	ldr	r3, [r5, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0c5      	beq.n	800b55a <__sflush_r+0x36>
 800b5ce:	2b1d      	cmp	r3, #29
 800b5d0:	d001      	beq.n	800b5d6 <__sflush_r+0xb2>
 800b5d2:	2b16      	cmp	r3, #22
 800b5d4:	d101      	bne.n	800b5da <__sflush_r+0xb6>
 800b5d6:	602f      	str	r7, [r5, #0]
 800b5d8:	e7b1      	b.n	800b53e <__sflush_r+0x1a>
 800b5da:	89a3      	ldrh	r3, [r4, #12]
 800b5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e0:	81a3      	strh	r3, [r4, #12]
 800b5e2:	e7ad      	b.n	800b540 <__sflush_r+0x1c>
 800b5e4:	690f      	ldr	r7, [r1, #16]
 800b5e6:	2f00      	cmp	r7, #0
 800b5e8:	d0a9      	beq.n	800b53e <__sflush_r+0x1a>
 800b5ea:	0793      	lsls	r3, r2, #30
 800b5ec:	680e      	ldr	r6, [r1, #0]
 800b5ee:	bf08      	it	eq
 800b5f0:	694b      	ldreq	r3, [r1, #20]
 800b5f2:	600f      	str	r7, [r1, #0]
 800b5f4:	bf18      	it	ne
 800b5f6:	2300      	movne	r3, #0
 800b5f8:	eba6 0807 	sub.w	r8, r6, r7
 800b5fc:	608b      	str	r3, [r1, #8]
 800b5fe:	f1b8 0f00 	cmp.w	r8, #0
 800b602:	dd9c      	ble.n	800b53e <__sflush_r+0x1a>
 800b604:	6a21      	ldr	r1, [r4, #32]
 800b606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b608:	4643      	mov	r3, r8
 800b60a:	463a      	mov	r2, r7
 800b60c:	4628      	mov	r0, r5
 800b60e:	47b0      	blx	r6
 800b610:	2800      	cmp	r0, #0
 800b612:	dc06      	bgt.n	800b622 <__sflush_r+0xfe>
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b61a:	81a3      	strh	r3, [r4, #12]
 800b61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b620:	e78e      	b.n	800b540 <__sflush_r+0x1c>
 800b622:	4407      	add	r7, r0
 800b624:	eba8 0800 	sub.w	r8, r8, r0
 800b628:	e7e9      	b.n	800b5fe <__sflush_r+0xda>
 800b62a:	bf00      	nop
 800b62c:	dfbffffe 	.word	0xdfbffffe

0800b630 <_fflush_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	690b      	ldr	r3, [r1, #16]
 800b634:	4605      	mov	r5, r0
 800b636:	460c      	mov	r4, r1
 800b638:	b913      	cbnz	r3, 800b640 <_fflush_r+0x10>
 800b63a:	2500      	movs	r5, #0
 800b63c:	4628      	mov	r0, r5
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	b118      	cbz	r0, 800b64a <_fflush_r+0x1a>
 800b642:	6a03      	ldr	r3, [r0, #32]
 800b644:	b90b      	cbnz	r3, 800b64a <_fflush_r+0x1a>
 800b646:	f7ff fac9 	bl	800abdc <__sinit>
 800b64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d0f3      	beq.n	800b63a <_fflush_r+0xa>
 800b652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b654:	07d0      	lsls	r0, r2, #31
 800b656:	d404      	bmi.n	800b662 <_fflush_r+0x32>
 800b658:	0599      	lsls	r1, r3, #22
 800b65a:	d402      	bmi.n	800b662 <_fflush_r+0x32>
 800b65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b65e:	f7ff fc29 	bl	800aeb4 <__retarget_lock_acquire_recursive>
 800b662:	4628      	mov	r0, r5
 800b664:	4621      	mov	r1, r4
 800b666:	f7ff ff5d 	bl	800b524 <__sflush_r>
 800b66a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b66c:	07da      	lsls	r2, r3, #31
 800b66e:	4605      	mov	r5, r0
 800b670:	d4e4      	bmi.n	800b63c <_fflush_r+0xc>
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	059b      	lsls	r3, r3, #22
 800b676:	d4e1      	bmi.n	800b63c <_fflush_r+0xc>
 800b678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b67a:	f7ff fc1c 	bl	800aeb6 <__retarget_lock_release_recursive>
 800b67e:	e7dd      	b.n	800b63c <_fflush_r+0xc>

0800b680 <_putc_r>:
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	460d      	mov	r5, r1
 800b684:	4614      	mov	r4, r2
 800b686:	4606      	mov	r6, r0
 800b688:	b118      	cbz	r0, 800b692 <_putc_r+0x12>
 800b68a:	6a03      	ldr	r3, [r0, #32]
 800b68c:	b90b      	cbnz	r3, 800b692 <_putc_r+0x12>
 800b68e:	f7ff faa5 	bl	800abdc <__sinit>
 800b692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b694:	07d8      	lsls	r0, r3, #31
 800b696:	d405      	bmi.n	800b6a4 <_putc_r+0x24>
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	0599      	lsls	r1, r3, #22
 800b69c:	d402      	bmi.n	800b6a4 <_putc_r+0x24>
 800b69e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6a0:	f7ff fc08 	bl	800aeb4 <__retarget_lock_acquire_recursive>
 800b6a4:	68a3      	ldr	r3, [r4, #8]
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	60a3      	str	r3, [r4, #8]
 800b6ac:	da05      	bge.n	800b6ba <_putc_r+0x3a>
 800b6ae:	69a2      	ldr	r2, [r4, #24]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	db12      	blt.n	800b6da <_putc_r+0x5a>
 800b6b4:	b2eb      	uxtb	r3, r5
 800b6b6:	2b0a      	cmp	r3, #10
 800b6b8:	d00f      	beq.n	800b6da <_putc_r+0x5a>
 800b6ba:	6823      	ldr	r3, [r4, #0]
 800b6bc:	1c5a      	adds	r2, r3, #1
 800b6be:	6022      	str	r2, [r4, #0]
 800b6c0:	701d      	strb	r5, [r3, #0]
 800b6c2:	b2ed      	uxtb	r5, r5
 800b6c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6c6:	07da      	lsls	r2, r3, #31
 800b6c8:	d405      	bmi.n	800b6d6 <_putc_r+0x56>
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	059b      	lsls	r3, r3, #22
 800b6ce:	d402      	bmi.n	800b6d6 <_putc_r+0x56>
 800b6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6d2:	f7ff fbf0 	bl	800aeb6 <__retarget_lock_release_recursive>
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	bd70      	pop	{r4, r5, r6, pc}
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4622      	mov	r2, r4
 800b6de:	4630      	mov	r0, r6
 800b6e0:	f000 f802 	bl	800b6e8 <__swbuf_r>
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	e7ed      	b.n	800b6c4 <_putc_r+0x44>

0800b6e8 <__swbuf_r>:
 800b6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ea:	460e      	mov	r6, r1
 800b6ec:	4614      	mov	r4, r2
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	b118      	cbz	r0, 800b6fa <__swbuf_r+0x12>
 800b6f2:	6a03      	ldr	r3, [r0, #32]
 800b6f4:	b90b      	cbnz	r3, 800b6fa <__swbuf_r+0x12>
 800b6f6:	f7ff fa71 	bl	800abdc <__sinit>
 800b6fa:	69a3      	ldr	r3, [r4, #24]
 800b6fc:	60a3      	str	r3, [r4, #8]
 800b6fe:	89a3      	ldrh	r3, [r4, #12]
 800b700:	071a      	lsls	r2, r3, #28
 800b702:	d525      	bpl.n	800b750 <__swbuf_r+0x68>
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	b31b      	cbz	r3, 800b750 <__swbuf_r+0x68>
 800b708:	6823      	ldr	r3, [r4, #0]
 800b70a:	6922      	ldr	r2, [r4, #16]
 800b70c:	1a98      	subs	r0, r3, r2
 800b70e:	6963      	ldr	r3, [r4, #20]
 800b710:	b2f6      	uxtb	r6, r6
 800b712:	4283      	cmp	r3, r0
 800b714:	4637      	mov	r7, r6
 800b716:	dc04      	bgt.n	800b722 <__swbuf_r+0x3a>
 800b718:	4621      	mov	r1, r4
 800b71a:	4628      	mov	r0, r5
 800b71c:	f7ff ff88 	bl	800b630 <_fflush_r>
 800b720:	b9e0      	cbnz	r0, 800b75c <__swbuf_r+0x74>
 800b722:	68a3      	ldr	r3, [r4, #8]
 800b724:	3b01      	subs	r3, #1
 800b726:	60a3      	str	r3, [r4, #8]
 800b728:	6823      	ldr	r3, [r4, #0]
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	6022      	str	r2, [r4, #0]
 800b72e:	701e      	strb	r6, [r3, #0]
 800b730:	6962      	ldr	r2, [r4, #20]
 800b732:	1c43      	adds	r3, r0, #1
 800b734:	429a      	cmp	r2, r3
 800b736:	d004      	beq.n	800b742 <__swbuf_r+0x5a>
 800b738:	89a3      	ldrh	r3, [r4, #12]
 800b73a:	07db      	lsls	r3, r3, #31
 800b73c:	d506      	bpl.n	800b74c <__swbuf_r+0x64>
 800b73e:	2e0a      	cmp	r6, #10
 800b740:	d104      	bne.n	800b74c <__swbuf_r+0x64>
 800b742:	4621      	mov	r1, r4
 800b744:	4628      	mov	r0, r5
 800b746:	f7ff ff73 	bl	800b630 <_fflush_r>
 800b74a:	b938      	cbnz	r0, 800b75c <__swbuf_r+0x74>
 800b74c:	4638      	mov	r0, r7
 800b74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b750:	4621      	mov	r1, r4
 800b752:	4628      	mov	r0, r5
 800b754:	f000 f806 	bl	800b764 <__swsetup_r>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d0d5      	beq.n	800b708 <__swbuf_r+0x20>
 800b75c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b760:	e7f4      	b.n	800b74c <__swbuf_r+0x64>
	...

0800b764 <__swsetup_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4b2a      	ldr	r3, [pc, #168]	; (800b810 <__swsetup_r+0xac>)
 800b768:	4605      	mov	r5, r0
 800b76a:	6818      	ldr	r0, [r3, #0]
 800b76c:	460c      	mov	r4, r1
 800b76e:	b118      	cbz	r0, 800b778 <__swsetup_r+0x14>
 800b770:	6a03      	ldr	r3, [r0, #32]
 800b772:	b90b      	cbnz	r3, 800b778 <__swsetup_r+0x14>
 800b774:	f7ff fa32 	bl	800abdc <__sinit>
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b77e:	0718      	lsls	r0, r3, #28
 800b780:	d422      	bmi.n	800b7c8 <__swsetup_r+0x64>
 800b782:	06d9      	lsls	r1, r3, #27
 800b784:	d407      	bmi.n	800b796 <__swsetup_r+0x32>
 800b786:	2309      	movs	r3, #9
 800b788:	602b      	str	r3, [r5, #0]
 800b78a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b794:	e034      	b.n	800b800 <__swsetup_r+0x9c>
 800b796:	0758      	lsls	r0, r3, #29
 800b798:	d512      	bpl.n	800b7c0 <__swsetup_r+0x5c>
 800b79a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b79c:	b141      	cbz	r1, 800b7b0 <__swsetup_r+0x4c>
 800b79e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a2:	4299      	cmp	r1, r3
 800b7a4:	d002      	beq.n	800b7ac <__swsetup_r+0x48>
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	f7ff fb9c 	bl	800aee4 <_free_r>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	6363      	str	r3, [r4, #52]	; 0x34
 800b7b0:	89a3      	ldrh	r3, [r4, #12]
 800b7b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7b6:	81a3      	strh	r3, [r4, #12]
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	6063      	str	r3, [r4, #4]
 800b7bc:	6923      	ldr	r3, [r4, #16]
 800b7be:	6023      	str	r3, [r4, #0]
 800b7c0:	89a3      	ldrh	r3, [r4, #12]
 800b7c2:	f043 0308 	orr.w	r3, r3, #8
 800b7c6:	81a3      	strh	r3, [r4, #12]
 800b7c8:	6923      	ldr	r3, [r4, #16]
 800b7ca:	b94b      	cbnz	r3, 800b7e0 <__swsetup_r+0x7c>
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7d6:	d003      	beq.n	800b7e0 <__swsetup_r+0x7c>
 800b7d8:	4621      	mov	r1, r4
 800b7da:	4628      	mov	r0, r5
 800b7dc:	f000 f884 	bl	800b8e8 <__smakebuf_r>
 800b7e0:	89a0      	ldrh	r0, [r4, #12]
 800b7e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7e6:	f010 0301 	ands.w	r3, r0, #1
 800b7ea:	d00a      	beq.n	800b802 <__swsetup_r+0x9e>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	60a3      	str	r3, [r4, #8]
 800b7f0:	6963      	ldr	r3, [r4, #20]
 800b7f2:	425b      	negs	r3, r3
 800b7f4:	61a3      	str	r3, [r4, #24]
 800b7f6:	6923      	ldr	r3, [r4, #16]
 800b7f8:	b943      	cbnz	r3, 800b80c <__swsetup_r+0xa8>
 800b7fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7fe:	d1c4      	bne.n	800b78a <__swsetup_r+0x26>
 800b800:	bd38      	pop	{r3, r4, r5, pc}
 800b802:	0781      	lsls	r1, r0, #30
 800b804:	bf58      	it	pl
 800b806:	6963      	ldrpl	r3, [r4, #20]
 800b808:	60a3      	str	r3, [r4, #8]
 800b80a:	e7f4      	b.n	800b7f6 <__swsetup_r+0x92>
 800b80c:	2000      	movs	r0, #0
 800b80e:	e7f7      	b.n	800b800 <__swsetup_r+0x9c>
 800b810:	200000b0 	.word	0x200000b0

0800b814 <_raise_r>:
 800b814:	291f      	cmp	r1, #31
 800b816:	b538      	push	{r3, r4, r5, lr}
 800b818:	4604      	mov	r4, r0
 800b81a:	460d      	mov	r5, r1
 800b81c:	d904      	bls.n	800b828 <_raise_r+0x14>
 800b81e:	2316      	movs	r3, #22
 800b820:	6003      	str	r3, [r0, #0]
 800b822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b826:	bd38      	pop	{r3, r4, r5, pc}
 800b828:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b82a:	b112      	cbz	r2, 800b832 <_raise_r+0x1e>
 800b82c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b830:	b94b      	cbnz	r3, 800b846 <_raise_r+0x32>
 800b832:	4620      	mov	r0, r4
 800b834:	f000 f830 	bl	800b898 <_getpid_r>
 800b838:	462a      	mov	r2, r5
 800b83a:	4601      	mov	r1, r0
 800b83c:	4620      	mov	r0, r4
 800b83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b842:	f000 b817 	b.w	800b874 <_kill_r>
 800b846:	2b01      	cmp	r3, #1
 800b848:	d00a      	beq.n	800b860 <_raise_r+0x4c>
 800b84a:	1c59      	adds	r1, r3, #1
 800b84c:	d103      	bne.n	800b856 <_raise_r+0x42>
 800b84e:	2316      	movs	r3, #22
 800b850:	6003      	str	r3, [r0, #0]
 800b852:	2001      	movs	r0, #1
 800b854:	e7e7      	b.n	800b826 <_raise_r+0x12>
 800b856:	2400      	movs	r4, #0
 800b858:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b85c:	4628      	mov	r0, r5
 800b85e:	4798      	blx	r3
 800b860:	2000      	movs	r0, #0
 800b862:	e7e0      	b.n	800b826 <_raise_r+0x12>

0800b864 <raise>:
 800b864:	4b02      	ldr	r3, [pc, #8]	; (800b870 <raise+0xc>)
 800b866:	4601      	mov	r1, r0
 800b868:	6818      	ldr	r0, [r3, #0]
 800b86a:	f7ff bfd3 	b.w	800b814 <_raise_r>
 800b86e:	bf00      	nop
 800b870:	200000b0 	.word	0x200000b0

0800b874 <_kill_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d07      	ldr	r5, [pc, #28]	; (800b894 <_kill_r+0x20>)
 800b878:	2300      	movs	r3, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	4611      	mov	r1, r2
 800b880:	602b      	str	r3, [r5, #0]
 800b882:	f7f5 fb02 	bl	8000e8a <_kill>
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	d102      	bne.n	800b890 <_kill_r+0x1c>
 800b88a:	682b      	ldr	r3, [r5, #0]
 800b88c:	b103      	cbz	r3, 800b890 <_kill_r+0x1c>
 800b88e:	6023      	str	r3, [r4, #0]
 800b890:	bd38      	pop	{r3, r4, r5, pc}
 800b892:	bf00      	nop
 800b894:	20000390 	.word	0x20000390

0800b898 <_getpid_r>:
 800b898:	f7f5 baef 	b.w	8000e7a <_getpid>

0800b89c <__swhatbuf_r>:
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	460c      	mov	r4, r1
 800b8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a4:	2900      	cmp	r1, #0
 800b8a6:	b096      	sub	sp, #88	; 0x58
 800b8a8:	4615      	mov	r5, r2
 800b8aa:	461e      	mov	r6, r3
 800b8ac:	da0d      	bge.n	800b8ca <__swhatbuf_r+0x2e>
 800b8ae:	89a3      	ldrh	r3, [r4, #12]
 800b8b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b8b4:	f04f 0100 	mov.w	r1, #0
 800b8b8:	bf0c      	ite	eq
 800b8ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8be:	2340      	movne	r3, #64	; 0x40
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	6031      	str	r1, [r6, #0]
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	b016      	add	sp, #88	; 0x58
 800b8c8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ca:	466a      	mov	r2, sp
 800b8cc:	f000 f848 	bl	800b960 <_fstat_r>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	dbec      	blt.n	800b8ae <__swhatbuf_r+0x12>
 800b8d4:	9901      	ldr	r1, [sp, #4]
 800b8d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b8da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b8de:	4259      	negs	r1, r3
 800b8e0:	4159      	adcs	r1, r3
 800b8e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8e6:	e7eb      	b.n	800b8c0 <__swhatbuf_r+0x24>

0800b8e8 <__smakebuf_r>:
 800b8e8:	898b      	ldrh	r3, [r1, #12]
 800b8ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8ec:	079d      	lsls	r5, r3, #30
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	d507      	bpl.n	800b904 <__smakebuf_r+0x1c>
 800b8f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	6123      	str	r3, [r4, #16]
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	6163      	str	r3, [r4, #20]
 800b900:	b002      	add	sp, #8
 800b902:	bd70      	pop	{r4, r5, r6, pc}
 800b904:	ab01      	add	r3, sp, #4
 800b906:	466a      	mov	r2, sp
 800b908:	f7ff ffc8 	bl	800b89c <__swhatbuf_r>
 800b90c:	9900      	ldr	r1, [sp, #0]
 800b90e:	4605      	mov	r5, r0
 800b910:	4630      	mov	r0, r6
 800b912:	f7ff f85d 	bl	800a9d0 <_malloc_r>
 800b916:	b948      	cbnz	r0, 800b92c <__smakebuf_r+0x44>
 800b918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b91c:	059a      	lsls	r2, r3, #22
 800b91e:	d4ef      	bmi.n	800b900 <__smakebuf_r+0x18>
 800b920:	f023 0303 	bic.w	r3, r3, #3
 800b924:	f043 0302 	orr.w	r3, r3, #2
 800b928:	81a3      	strh	r3, [r4, #12]
 800b92a:	e7e3      	b.n	800b8f4 <__smakebuf_r+0xc>
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	6020      	str	r0, [r4, #0]
 800b930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b934:	81a3      	strh	r3, [r4, #12]
 800b936:	9b00      	ldr	r3, [sp, #0]
 800b938:	6163      	str	r3, [r4, #20]
 800b93a:	9b01      	ldr	r3, [sp, #4]
 800b93c:	6120      	str	r0, [r4, #16]
 800b93e:	b15b      	cbz	r3, 800b958 <__smakebuf_r+0x70>
 800b940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b944:	4630      	mov	r0, r6
 800b946:	f000 f81d 	bl	800b984 <_isatty_r>
 800b94a:	b128      	cbz	r0, 800b958 <__smakebuf_r+0x70>
 800b94c:	89a3      	ldrh	r3, [r4, #12]
 800b94e:	f023 0303 	bic.w	r3, r3, #3
 800b952:	f043 0301 	orr.w	r3, r3, #1
 800b956:	81a3      	strh	r3, [r4, #12]
 800b958:	89a3      	ldrh	r3, [r4, #12]
 800b95a:	431d      	orrs	r5, r3
 800b95c:	81a5      	strh	r5, [r4, #12]
 800b95e:	e7cf      	b.n	800b900 <__smakebuf_r+0x18>

0800b960 <_fstat_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4d07      	ldr	r5, [pc, #28]	; (800b980 <_fstat_r+0x20>)
 800b964:	2300      	movs	r3, #0
 800b966:	4604      	mov	r4, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	4611      	mov	r1, r2
 800b96c:	602b      	str	r3, [r5, #0]
 800b96e:	f7f5 facf 	bl	8000f10 <_fstat>
 800b972:	1c43      	adds	r3, r0, #1
 800b974:	d102      	bne.n	800b97c <_fstat_r+0x1c>
 800b976:	682b      	ldr	r3, [r5, #0]
 800b978:	b103      	cbz	r3, 800b97c <_fstat_r+0x1c>
 800b97a:	6023      	str	r3, [r4, #0]
 800b97c:	bd38      	pop	{r3, r4, r5, pc}
 800b97e:	bf00      	nop
 800b980:	20000390 	.word	0x20000390

0800b984 <_isatty_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	4d06      	ldr	r5, [pc, #24]	; (800b9a0 <_isatty_r+0x1c>)
 800b988:	2300      	movs	r3, #0
 800b98a:	4604      	mov	r4, r0
 800b98c:	4608      	mov	r0, r1
 800b98e:	602b      	str	r3, [r5, #0]
 800b990:	f7f5 face 	bl	8000f30 <_isatty>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d102      	bne.n	800b99e <_isatty_r+0x1a>
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	b103      	cbz	r3, 800b99e <_isatty_r+0x1a>
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	bd38      	pop	{r3, r4, r5, pc}
 800b9a0:	20000390 	.word	0x20000390

0800b9a4 <_init>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	bf00      	nop
 800b9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9aa:	bc08      	pop	{r3}
 800b9ac:	469e      	mov	lr, r3
 800b9ae:	4770      	bx	lr

0800b9b0 <_fini>:
 800b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b2:	bf00      	nop
 800b9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b6:	bc08      	pop	{r3}
 800b9b8:	469e      	mov	lr, r3
 800b9ba:	4770      	bx	lr
