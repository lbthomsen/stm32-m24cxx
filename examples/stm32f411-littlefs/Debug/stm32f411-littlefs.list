
stm32f411-littlefs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007904  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cec  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008790  08008790  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08008790  08008790  00018790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008798  08008798  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800879c  0800879c  0001879c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080087a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200000b4  08008854  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08008854  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cc2b  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002619  00000000  00000000  0003cd52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000d50b  00000000  00000000  0003f36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000df0  00000000  00000000  0004c878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010a7  00000000  00000000  0004d668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017c2a  00000000  00000000  0004e70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000194da  00000000  00000000  00066339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008ccfa  00000000  00000000  0007f813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003628  00000000  00000000  0010c510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0010fb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a8c 	.word	0x08007a8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	08007a8c 	.word	0x08007a8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b984 	b.w	80005b0 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f81a 	bl	80002e8 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__popcountsi2>:
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	0883      	lsrs	r3, r0, #2
 80002ca:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002ce:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002d2:	4418      	add	r0, r3
 80002d4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002d8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002dc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002e0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002e4:	0e00      	lsrs	r0, r0, #24
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9e08      	ldr	r6, [sp, #32]
 80002ee:	460d      	mov	r5, r1
 80002f0:	4604      	mov	r4, r0
 80002f2:	460f      	mov	r7, r1
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d14a      	bne.n	800038e <__udivmoddi4+0xa6>
 80002f8:	428a      	cmp	r2, r1
 80002fa:	4694      	mov	ip, r2
 80002fc:	d965      	bls.n	80003ca <__udivmoddi4+0xe2>
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	b143      	cbz	r3, 8000316 <__udivmoddi4+0x2e>
 8000304:	fa02 fc03 	lsl.w	ip, r2, r3
 8000308:	f1c3 0220 	rsb	r2, r3, #32
 800030c:	409f      	lsls	r7, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	409c      	lsls	r4, r3
 8000316:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800031a:	fa1f f58c 	uxth.w	r5, ip
 800031e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000322:	0c22      	lsrs	r2, r4, #16
 8000324:	fb0e 7711 	mls	r7, lr, r1, r7
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	fb01 f005 	mul.w	r0, r1, r5
 8000330:	4290      	cmp	r0, r2
 8000332:	d90a      	bls.n	800034a <__udivmoddi4+0x62>
 8000334:	eb1c 0202 	adds.w	r2, ip, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800033c:	f080 811c 	bcs.w	8000578 <__udivmoddi4+0x290>
 8000340:	4290      	cmp	r0, r2
 8000342:	f240 8119 	bls.w	8000578 <__udivmoddi4+0x290>
 8000346:	3902      	subs	r1, #2
 8000348:	4462      	add	r2, ip
 800034a:	1a12      	subs	r2, r2, r0
 800034c:	b2a4      	uxth	r4, r4
 800034e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000352:	fb0e 2210 	mls	r2, lr, r0, r2
 8000356:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800035a:	fb00 f505 	mul.w	r5, r0, r5
 800035e:	42a5      	cmp	r5, r4
 8000360:	d90a      	bls.n	8000378 <__udivmoddi4+0x90>
 8000362:	eb1c 0404 	adds.w	r4, ip, r4
 8000366:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800036a:	f080 8107 	bcs.w	800057c <__udivmoddi4+0x294>
 800036e:	42a5      	cmp	r5, r4
 8000370:	f240 8104 	bls.w	800057c <__udivmoddi4+0x294>
 8000374:	4464      	add	r4, ip
 8000376:	3802      	subs	r0, #2
 8000378:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	2100      	movs	r1, #0
 8000380:	b11e      	cbz	r6, 800038a <__udivmoddi4+0xa2>
 8000382:	40dc      	lsrs	r4, r3
 8000384:	2300      	movs	r3, #0
 8000386:	e9c6 4300 	strd	r4, r3, [r6]
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	428b      	cmp	r3, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0xbc>
 8000392:	2e00      	cmp	r6, #0
 8000394:	f000 80ed 	beq.w	8000572 <__udivmoddi4+0x28a>
 8000398:	2100      	movs	r1, #0
 800039a:	e9c6 0500 	strd	r0, r5, [r6]
 800039e:	4608      	mov	r0, r1
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	fab3 f183 	clz	r1, r3
 80003a8:	2900      	cmp	r1, #0
 80003aa:	d149      	bne.n	8000440 <__udivmoddi4+0x158>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d302      	bcc.n	80003b6 <__udivmoddi4+0xce>
 80003b0:	4282      	cmp	r2, r0
 80003b2:	f200 80f8 	bhi.w	80005a6 <__udivmoddi4+0x2be>
 80003b6:	1a84      	subs	r4, r0, r2
 80003b8:	eb65 0203 	sbc.w	r2, r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	4617      	mov	r7, r2
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d0e2      	beq.n	800038a <__udivmoddi4+0xa2>
 80003c4:	e9c6 4700 	strd	r4, r7, [r6]
 80003c8:	e7df      	b.n	800038a <__udivmoddi4+0xa2>
 80003ca:	b902      	cbnz	r2, 80003ce <__udivmoddi4+0xe6>
 80003cc:	deff      	udf	#255	; 0xff
 80003ce:	fab2 f382 	clz	r3, r2
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	f040 8090 	bne.w	80004f8 <__udivmoddi4+0x210>
 80003d8:	1a8a      	subs	r2, r1, r2
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2101      	movs	r1, #1
 80003e4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e8:	fb07 2015 	mls	r0, r7, r5, r2
 80003ec:	0c22      	lsrs	r2, r4, #16
 80003ee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003f2:	fb0e f005 	mul.w	r0, lr, r5
 80003f6:	4290      	cmp	r0, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x124>
 80003fa:	eb1c 0202 	adds.w	r2, ip, r2
 80003fe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x122>
 8000404:	4290      	cmp	r0, r2
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2b8>
 800040a:	4645      	mov	r5, r8
 800040c:	1a12      	subs	r2, r2, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x14e>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x14c>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c2>
 8000434:	4610      	mov	r0, r2
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800043e:	e79f      	b.n	8000380 <__udivmoddi4+0x98>
 8000440:	f1c1 0720 	rsb	r7, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa05 f401 	lsl.w	r4, r5, r1
 8000452:	fa20 f307 	lsr.w	r3, r0, r7
 8000456:	40fd      	lsrs	r5, r7
 8000458:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045c:	4323      	orrs	r3, r4
 800045e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000462:	fa1f fe8c 	uxth.w	lr, ip
 8000466:	fb09 5518 	mls	r5, r9, r8, r5
 800046a:	0c1c      	lsrs	r4, r3, #16
 800046c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000470:	fb08 f50e 	mul.w	r5, r8, lr
 8000474:	42a5      	cmp	r5, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	fa00 f001 	lsl.w	r0, r0, r1
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b0>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2b4>
 800048c:	42a5      	cmp	r5, r4
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2b4>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4464      	add	r4, ip
 8000498:	1b64      	subs	r4, r4, r5
 800049a:	b29d      	uxth	r5, r3
 800049c:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a0:	fb09 4413 	mls	r4, r9, r3, r4
 80004a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004ac:	45a6      	cmp	lr, r4
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1da>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2ac>
 80004ba:	45a6      	cmp	lr, r4
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2ac>
 80004be:	3b02      	subs	r3, #2
 80004c0:	4464      	add	r4, ip
 80004c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ca:	eba4 040e 	sub.w	r4, r4, lr
 80004ce:	42ac      	cmp	r4, r5
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46ae      	mov	lr, r5
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x29c>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x298>
 80004d8:	b156      	cbz	r6, 80004f0 <__udivmoddi4+0x208>
 80004da:	ebb0 0208 	subs.w	r2, r0, r8
 80004de:	eb64 040e 	sbc.w	r4, r4, lr
 80004e2:	fa04 f707 	lsl.w	r7, r4, r7
 80004e6:	40ca      	lsrs	r2, r1
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	4317      	orrs	r7, r2
 80004ec:	e9c6 7400 	strd	r7, r4, [r6]
 80004f0:	4618      	mov	r0, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f8:	f1c3 0120 	rsb	r1, r3, #32
 80004fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000500:	fa20 f201 	lsr.w	r2, r0, r1
 8000504:	fa25 f101 	lsr.w	r1, r5, r1
 8000508:	409d      	lsls	r5, r3
 800050a:	432a      	orrs	r2, r5
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb1 f0f7 	udiv	r0, r1, r7
 8000518:	fb07 1510 	mls	r5, r7, r0, r1
 800051c:	0c11      	lsrs	r1, r2, #16
 800051e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000522:	fb00 f50e 	mul.w	r5, r0, lr
 8000526:	428d      	cmp	r5, r1
 8000528:	fa04 f403 	lsl.w	r4, r4, r3
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x258>
 800052e:	eb1c 0101 	adds.w	r1, ip, r1
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b0>
 8000538:	428d      	cmp	r5, r1
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b0>
 800053c:	3802      	subs	r0, #2
 800053e:	4461      	add	r1, ip
 8000540:	1b49      	subs	r1, r1, r5
 8000542:	b292      	uxth	r2, r2
 8000544:	fbb1 f5f7 	udiv	r5, r1, r7
 8000548:	fb07 1115 	mls	r1, r7, r5, r1
 800054c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000550:	fb05 f10e 	mul.w	r1, r5, lr
 8000554:	4291      	cmp	r1, r2
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x282>
 8000558:	eb1c 0202 	adds.w	r2, ip, r2
 800055c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2a8>
 8000562:	4291      	cmp	r1, r2
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2a8>
 8000566:	3d02      	subs	r5, #2
 8000568:	4462      	add	r2, ip
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0xfc>
 8000572:	4631      	mov	r1, r6
 8000574:	4630      	mov	r0, r6
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xa2>
 8000578:	4639      	mov	r1, r7
 800057a:	e6e6      	b.n	800034a <__udivmoddi4+0x62>
 800057c:	4610      	mov	r0, r2
 800057e:	e6fb      	b.n	8000378 <__udivmoddi4+0x90>
 8000580:	4548      	cmp	r0, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f0>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb65 0e0c 	sbc.w	lr, r5, ip
 800058c:	3b01      	subs	r3, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f0>
 8000590:	4645      	mov	r5, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x282>
 8000594:	462b      	mov	r3, r5
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1da>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x258>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b0>
 80005a0:	3d02      	subs	r5, #2
 80005a2:	4462      	add	r2, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x124>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e70a      	b.n	80003c0 <__udivmoddi4+0xd8>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x14e>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <littlefs_sync>:
}

int littlefs_sync(const struct lfs_config *c) {
    LFS_DBG("LittleFS Sync");
    return 0;
}
 80005b4:	2000      	movs	r0, #0
 80005b6:	4770      	bx	lr

080005b8 <littlefs_read>:
int littlefs_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 80005b8:	b510      	push	{r4, lr}
 80005ba:	4610      	mov	r0, r2
 80005bc:	461a      	mov	r2, r3
    if (m24cxx_read(m24cxx_handle, block * littlefs_config.block_size + off, buffer, size) != M24CXX_Ok)
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <littlefs_read+0x24>)
 80005c0:	69dc      	ldr	r4, [r3, #28]
 80005c2:	9b02      	ldr	r3, [sp, #8]
 80005c4:	fb01 0104 	mla	r1, r1, r4, r0
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <littlefs_read+0x28>)
 80005ca:	6800      	ldr	r0, [r0, #0]
 80005cc:	f006 f98a 	bl	80068e4 <m24cxx_read>
 80005d0:	b900      	cbnz	r0, 80005d4 <littlefs_read+0x1c>
}
 80005d2:	bd10      	pop	{r4, pc}
        return -1;
 80005d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005d8:	e7fb      	b.n	80005d2 <littlefs_read+0x1a>
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000148 	.word	0x20000148

080005e4 <littlefs_prog>:
int littlefs_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 80005e4:	b510      	push	{r4, lr}
 80005e6:	4610      	mov	r0, r2
 80005e8:	461a      	mov	r2, r3
    if (m24cxx_write(m24cxx_handle, block * littlefs_config.block_size + off, (void*) buffer, size) != M24CXX_Ok)
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <littlefs_prog+0x24>)
 80005ec:	69dc      	ldr	r4, [r3, #28]
 80005ee:	9b02      	ldr	r3, [sp, #8]
 80005f0:	fb01 0104 	mla	r1, r1, r4, r0
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <littlefs_prog+0x28>)
 80005f6:	6800      	ldr	r0, [r0, #0]
 80005f8:	f006 f9b4 	bl	8006964 <m24cxx_write>
 80005fc:	b900      	cbnz	r0, 8000600 <littlefs_prog+0x1c>
}
 80005fe:	bd10      	pop	{r4, pc}
        return -1;
 8000600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000604:	e7fb      	b.n	80005fe <littlefs_prog+0x1a>
 8000606:	bf00      	nop
 8000608:	20000000 	.word	0x20000000
 800060c:	20000148 	.word	0x20000148

08000610 <littlefs_erase>:
int littlefs_erase(const struct lfs_config *c, lfs_block_t block) {
 8000610:	b508      	push	{r3, lr}
    if (m24cxx_erase(m24cxx_handle, block * littlefs_config.block_size, littlefs_config.block_size) != M24CXX_Ok)
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <littlefs_erase+0x1c>)
 8000614:	69da      	ldr	r2, [r3, #28]
 8000616:	fb02 f101 	mul.w	r1, r2, r1
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <littlefs_erase+0x20>)
 800061c:	6818      	ldr	r0, [r3, #0]
 800061e:	f006 f9e7 	bl	80069f0 <m24cxx_erase>
 8000622:	b900      	cbnz	r0, 8000626 <littlefs_erase+0x16>
}
 8000624:	bd08      	pop	{r3, pc}
        return -1;
 8000626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800062a:	e7fb      	b.n	8000624 <littlefs_erase+0x14>
 800062c:	20000000 	.word	0x20000000
 8000630:	20000148 	.word	0x20000148

08000634 <m24cxx_littlefs_init>:
int m24cxx_littlefs_init(M24CXX_HandleTypeDef *m24cxx_init) {
 8000634:	b538      	push	{r3, r4, r5, lr}
    m24cxx_handle = m24cxx_init;
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <m24cxx_littlefs_init+0x2c>)
 8000638:	6018      	str	r0, [r3, #0]
    int err = lfs_mount(&littlefs, &littlefs_config);
 800063a:	490a      	ldr	r1, [pc, #40]	; (8000664 <m24cxx_littlefs_init+0x30>)
 800063c:	480a      	ldr	r0, [pc, #40]	; (8000668 <m24cxx_littlefs_init+0x34>)
 800063e:	f006 f88d 	bl	800675c <lfs_mount>
    if (err) {
 8000642:	b908      	cbnz	r0, 8000648 <m24cxx_littlefs_init+0x14>
}
 8000644:	2000      	movs	r0, #0
 8000646:	bd38      	pop	{r3, r4, r5, pc}
        lfs_format(&littlefs, &littlefs_config);
 8000648:	4d06      	ldr	r5, [pc, #24]	; (8000664 <m24cxx_littlefs_init+0x30>)
 800064a:	4c07      	ldr	r4, [pc, #28]	; (8000668 <m24cxx_littlefs_init+0x34>)
 800064c:	4629      	mov	r1, r5
 800064e:	4620      	mov	r0, r4
 8000650:	f006 f880 	bl	8006754 <lfs_format>
        lfs_mount(&littlefs, &littlefs_config);
 8000654:	4629      	mov	r1, r5
 8000656:	4620      	mov	r0, r4
 8000658:	f006 f880 	bl	800675c <lfs_mount>
 800065c:	e7f2      	b.n	8000644 <m24cxx_littlefs_init+0x10>
 800065e:	bf00      	nop
 8000660:	20000148 	.word	0x20000148
 8000664:	20000000 	.word	0x20000000
 8000668:	200000d0 	.word	0x200000d0

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	2400      	movs	r4, #0
 8000672:	9405      	str	r4, [sp, #20]
 8000674:	9406      	str	r4, [sp, #24]
 8000676:	9407      	str	r4, [sp, #28]
 8000678:	9408      	str	r4, [sp, #32]
 800067a:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067c:	9401      	str	r4, [sp, #4]
 800067e:	4b2f      	ldr	r3, [pc, #188]	; (800073c <MX_GPIO_Init+0xd0>)
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000682:	f042 0204 	orr.w	r2, r2, #4
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
 8000688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068a:	f002 0204 	and.w	r2, r2, #4
 800068e:	9201      	str	r2, [sp, #4]
 8000690:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	9402      	str	r4, [sp, #8]
 8000694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000696:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800069a:	631a      	str	r2, [r3, #48]	; 0x30
 800069c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80006a2:	9202      	str	r2, [sp, #8]
 80006a4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	9403      	str	r4, [sp, #12]
 80006a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006aa:	f042 0201 	orr.w	r2, r2, #1
 80006ae:	631a      	str	r2, [r3, #48]	; 0x30
 80006b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b2:	f002 0201 	and.w	r2, r2, #1
 80006b6:	9203      	str	r2, [sp, #12]
 80006b8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	9404      	str	r4, [sp, #16]
 80006bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006be:	f042 0202 	orr.w	r2, r2, #2
 80006c2:	631a      	str	r2, [r3, #48]	; 0x30
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	9304      	str	r3, [sp, #16]
 80006cc:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80006ce:	4d1c      	ldr	r5, [pc, #112]	; (8000740 <MX_GPIO_Init+0xd4>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d6:	4628      	mov	r0, r5
 80006d8:	f000 fcd4 	bl	8001084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POW_GPIO_Port, POW_Pin, GPIO_PIN_RESET);
 80006dc:	4e19      	ldr	r6, [pc, #100]	; (8000744 <MX_GPIO_Init+0xd8>)
 80006de:	4622      	mov	r2, r4
 80006e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e4:	4630      	mov	r0, r6
 80006e6:	f000 fccd 	bl	8001084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006f0:	2311      	movs	r3, #17
 80006f2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006f8:	a905      	add	r1, sp, #20
 80006fa:	4628      	mov	r0, r5
 80006fc:	f000 fbde 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000700:	2501      	movs	r5, #1
 8000702:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000704:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000708:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800070c:	a905      	add	r1, sp, #20
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_GPIO_Init+0xdc>)
 8000710:	f000 fbd4 	bl	8000ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : POW_Pin */
  GPIO_InitStruct.Pin = POW_Pin;
 8000714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000718:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(POW_GPIO_Port, &GPIO_InitStruct);
 8000720:	a905      	add	r1, sp, #20
 8000722:	4630      	mov	r0, r6
 8000724:	f000 fbca 	bl	8000ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000728:	4622      	mov	r2, r4
 800072a:	4621      	mov	r1, r4
 800072c:	2006      	movs	r0, #6
 800072e:	f000 fb6b 	bl	8000e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000732:	2006      	movs	r0, #6
 8000734:	f000 fba0 	bl	8000e78 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000738:	b00a      	add	sp, #40	; 0x28
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020800 	.word	0x40020800
 8000744:	40020400 	.word	0x40020400
 8000748:	40020000 	.word	0x40020000

0800074c <_write>:
    if (fd == 1 || fd == 2) {
 800074c:	3801      	subs	r0, #1
 800074e:	2801      	cmp	r0, #1
 8000750:	d80a      	bhi.n	8000768 <_write+0x1c>
int _write(int fd, char *ptr, int len) {
 8000752:	b510      	push	{r4, lr}
 8000754:	4614      	mov	r4, r2
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800075a:	b292      	uxth	r2, r2
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <_write+0x28>)
 800075e:	f001 fee6 	bl	800252e <HAL_UART_Transmit>
        if (hstatus == HAL_OK)
 8000762:	b920      	cbnz	r0, 800076e <_write+0x22>
            return len;
 8000764:	4620      	mov	r0, r4
}
 8000766:	bd10      	pop	{r4, pc}
    return -1;
 8000768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800076c:	4770      	bx	lr
            return -1;
 800076e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000772:	e7f8      	b.n	8000766 <_write+0x1a>
 8000774:	200001f8 	.word	0x200001f8

08000778 <HAL_GPIO_EXTI_Callback>:
    if (GPIO_Pin == BTN_Pin) // If the button
 8000778:	2801      	cmp	r0, #1
 800077a:	d000      	beq.n	800077e <HAL_GPIO_EXTI_Callback+0x6>
}
 800077c:	4770      	bx	lr
        do_action = 1;
 800077e:	4b02      	ldr	r3, [pc, #8]	; (8000788 <HAL_GPIO_EXTI_Callback+0x10>)
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
}
 8000784:	e7fa      	b.n	800077c <HAL_GPIO_EXTI_Callback+0x4>
 8000786:	bf00      	nop
 8000788:	2000014c 	.word	0x2000014c

0800078c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800078e:	e7fe      	b.n	800078e <Error_Handler+0x2>

08000790 <MX_I2C1_Init>:
{
 8000790:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000792:	480a      	ldr	r0, [pc, #40]	; (80007bc <MX_I2C1_Init+0x2c>)
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_I2C1_Init+0x30>)
 8000796:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C1_Init+0x34>)
 800079a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	2300      	movs	r3, #0
 800079e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ae:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b0:	f000 fed2 	bl	8001558 <HAL_I2C_Init>
 80007b4:	b900      	cbnz	r0, 80007b8 <MX_I2C1_Init+0x28>
}
 80007b6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007b8:	f7ff ffe8 	bl	800078c <Error_Handler>
 80007bc:	200001a4 	.word	0x200001a4
 80007c0:	40005400 	.word	0x40005400
 80007c4:	00061a80 	.word	0x00061a80

080007c8 <MX_USART1_UART_Init>:
{
 80007c8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <MX_USART1_UART_Init+0x2c>)
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_USART1_UART_Init+0x30>)
 80007ce:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 80007d0:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80007d4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	2300      	movs	r3, #0
 80007d8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007da:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007dc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007de:	220c      	movs	r2, #12
 80007e0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	f001 fe73 	bl	80024d0 <HAL_UART_Init>
 80007ea:	b900      	cbnz	r0, 80007ee <MX_USART1_UART_Init+0x26>
}
 80007ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007ee:	f7ff ffcd 	bl	800078c <Error_Handler>
 80007f2:	bf00      	nop
 80007f4:	200001f8 	.word	0x200001f8
 80007f8:	40011000 	.word	0x40011000

080007fc <SystemClock_Config>:
{
 80007fc:	b500      	push	{lr}
 80007fe:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000800:	2230      	movs	r2, #48	; 0x30
 8000802:	2100      	movs	r1, #0
 8000804:	a808      	add	r0, sp, #32
 8000806:	f006 fb12 	bl	8006e2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080a:	2300      	movs	r3, #0
 800080c:	9303      	str	r3, [sp, #12]
 800080e:	9304      	str	r3, [sp, #16]
 8000810:	9305      	str	r3, [sp, #20]
 8000812:	9306      	str	r3, [sp, #24]
 8000814:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <SystemClock_Config+0x9c>)
 800081a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800081c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000820:	6411      	str	r1, [r2, #64]	; 0x40
 8000822:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000824:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000828:	9201      	str	r2, [sp, #4]
 800082a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <SystemClock_Config+0xa0>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000842:	2301      	movs	r3, #1
 8000844:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800084a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2302      	movs	r3, #2
 800084e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000850:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000854:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000856:	220c      	movs	r2, #12
 8000858:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800085a:	2260      	movs	r2, #96	; 0x60
 800085c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	a808      	add	r0, sp, #32
 8000866:	f001 fa43 	bl	8001cf0 <HAL_RCC_OscConfig>
 800086a:	b988      	cbnz	r0, 8000890 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800087c:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000880:	2103      	movs	r1, #3
 8000882:	a803      	add	r0, sp, #12
 8000884:	f001 fc84 	bl	8002190 <HAL_RCC_ClockConfig>
 8000888:	b920      	cbnz	r0, 8000894 <SystemClock_Config+0x98>
}
 800088a:	b015      	add	sp, #84	; 0x54
 800088c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000890:	f7ff ff7c 	bl	800078c <Error_Handler>
    Error_Handler();
 8000894:	f7ff ff7a 	bl	800078c <Error_Handler>
 8000898:	40023800 	.word	0x40023800
 800089c:	40007000 	.word	0x40007000

080008a0 <main>:
{
 80008a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008a4:	b084      	sub	sp, #16
  HAL_Init();
 80008a6:	f000 fa5d 	bl	8000d64 <HAL_Init>
  SystemClock_Config();
 80008aa:	f7ff ffa7 	bl	80007fc <SystemClock_Config>
  MX_GPIO_Init();
 80008ae:	f7ff fedd 	bl	800066c <MX_GPIO_Init>
  MX_I2C1_Init();
 80008b2:	f7ff ff6d 	bl	8000790 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008b6:	f7ff ff87 	bl	80007c8 <MX_USART1_UART_Init>
    DBG("\n\n\n\n--------\nStarting");
 80008ba:	4870      	ldr	r0, [pc, #448]	; (8000a7c <main+0x1dc>)
 80008bc:	f006 fa4a 	bl	8006d54 <iprintf>
 80008c0:	200a      	movs	r0, #10
 80008c2:	f006 fa59 	bl	8006d78 <putchar>
    DBG("Powering up memory");
 80008c6:	486e      	ldr	r0, [pc, #440]	; (8000a80 <main+0x1e0>)
 80008c8:	f006 fa44 	bl	8006d54 <iprintf>
 80008cc:	200a      	movs	r0, #10
 80008ce:	f006 fa53 	bl	8006d78 <putchar>
    HAL_GPIO_WritePin(POW_GPIO_Port, POW_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d8:	486a      	ldr	r0, [pc, #424]	; (8000a84 <main+0x1e4>)
 80008da:	f000 fbd3 	bl	8001084 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80008de:	200a      	movs	r0, #10
 80008e0:	f000 fa6c 	bl	8000dbc <HAL_Delay>
    DBG("Scanning I2C bus:");
 80008e4:	4868      	ldr	r0, [pc, #416]	; (8000a88 <main+0x1e8>)
 80008e6:	f006 fa35 	bl	8006d54 <iprintf>
 80008ea:	200a      	movs	r0, #10
 80008ec:	f006 fa44 	bl	8006d78 <putchar>
    for (uint8_t i = 0; i < 128; i++) {
 80008f0:	2400      	movs	r4, #0
 80008f2:	e005      	b.n	8000900 <main+0x60>
            printf("-- ");
 80008f4:	4865      	ldr	r0, [pc, #404]	; (8000a8c <main+0x1ec>)
 80008f6:	f006 fa2d 	bl	8006d54 <iprintf>
 80008fa:	e010      	b.n	800091e <main+0x7e>
    for (uint8_t i = 0; i < 128; i++) {
 80008fc:	3401      	adds	r4, #1
 80008fe:	b2e4      	uxtb	r4, r4
 8000900:	f014 0f80 	tst.w	r4, #128	; 0x80
 8000904:	d115      	bne.n	8000932 <main+0x92>
        if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 3, 100) == HAL_OK) {
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	2203      	movs	r2, #3
 800090a:	0061      	lsls	r1, r4, #1
 800090c:	4860      	ldr	r0, [pc, #384]	; (8000a90 <main+0x1f0>)
 800090e:	f001 f925 	bl	8001b5c <HAL_I2C_IsDeviceReady>
 8000912:	2800      	cmp	r0, #0
 8000914:	d1ee      	bne.n	80008f4 <main+0x54>
            printf("%2x ", i);
 8000916:	4621      	mov	r1, r4
 8000918:	485e      	ldr	r0, [pc, #376]	; (8000a94 <main+0x1f4>)
 800091a:	f006 fa1b 	bl	8006d54 <iprintf>
        if (i > 0 && (i + 1) % 16 == 0)
 800091e:	2c00      	cmp	r4, #0
 8000920:	d0ec      	beq.n	80008fc <main+0x5c>
 8000922:	1c63      	adds	r3, r4, #1
 8000924:	f013 0f0f 	tst.w	r3, #15
 8000928:	d1e8      	bne.n	80008fc <main+0x5c>
            printf("\n");
 800092a:	200a      	movs	r0, #10
 800092c:	f006 fa24 	bl	8006d78 <putchar>
 8000930:	e7e4      	b.n	80008fc <main+0x5c>
    printf("\n");
 8000932:	200a      	movs	r0, #10
 8000934:	f006 fa20 	bl	8006d78 <putchar>
    if (m24cxx_init(&m24cxx, &hi2c1, 0x50) != M24CXX_Ok) {
 8000938:	2250      	movs	r2, #80	; 0x50
 800093a:	4955      	ldr	r1, [pc, #340]	; (8000a90 <main+0x1f0>)
 800093c:	4856      	ldr	r0, [pc, #344]	; (8000a98 <main+0x1f8>)
 800093e:	f005 ffb6 	bl	80068ae <m24cxx_init>
 8000942:	b138      	cbz	r0, 8000954 <main+0xb4>
        DBG("M24CXX Failed to initialize");
 8000944:	4855      	ldr	r0, [pc, #340]	; (8000a9c <main+0x1fc>)
 8000946:	f006 fa05 	bl	8006d54 <iprintf>
 800094a:	200a      	movs	r0, #10
 800094c:	f006 fa14 	bl	8006d78 <putchar>
        Error_Handler();
 8000950:	f7ff ff1c 	bl	800078c <Error_Handler>
    m24cxx_littlefs_init(&m24cxx);
 8000954:	4850      	ldr	r0, [pc, #320]	; (8000a98 <main+0x1f8>)
 8000956:	f7ff fe6d 	bl	8000634 <m24cxx_littlefs_init>
    uint32_t boot_count = 0;
 800095a:	2600      	movs	r6, #0
 800095c:	9603      	str	r6, [sp, #12]
    lfs_file_open(&littlefs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 800095e:	4d50      	ldr	r5, [pc, #320]	; (8000aa0 <main+0x200>)
 8000960:	4c50      	ldr	r4, [pc, #320]	; (8000aa4 <main+0x204>)
 8000962:	f240 1303 	movw	r3, #259	; 0x103
 8000966:	4a50      	ldr	r2, [pc, #320]	; (8000aa8 <main+0x208>)
 8000968:	4629      	mov	r1, r5
 800096a:	4620      	mov	r0, r4
 800096c:	f005 fefa 	bl	8006764 <lfs_file_open>
    lfs_file_read(&littlefs, &file, &boot_count, sizeof(boot_count));
 8000970:	2304      	movs	r3, #4
 8000972:	aa03      	add	r2, sp, #12
 8000974:	4629      	mov	r1, r5
 8000976:	4620      	mov	r0, r4
 8000978:	f005 ff2c 	bl	80067d4 <lfs_file_read>
    boot_count += 1;
 800097c:	9b03      	ldr	r3, [sp, #12]
 800097e:	3301      	adds	r3, #1
 8000980:	9303      	str	r3, [sp, #12]
    lfs_file_rewind(&littlefs, &file);
 8000982:	4629      	mov	r1, r5
 8000984:	4620      	mov	r0, r4
 8000986:	f005 ff61 	bl	800684c <lfs_file_rewind>
    lfs_file_write(&littlefs, &file, &boot_count, sizeof(boot_count));
 800098a:	2304      	movs	r3, #4
 800098c:	aa03      	add	r2, sp, #12
 800098e:	4629      	mov	r1, r5
 8000990:	4620      	mov	r0, r4
 8000992:	f005 ff3d 	bl	8006810 <lfs_file_write>
    lfs_file_close(&littlefs, &file);
 8000996:	4629      	mov	r1, r5
 8000998:	4620      	mov	r0, r4
 800099a:	f005 ff01 	bl	80067a0 <lfs_file_close>
    uint32_t start_uptime = 0;
 800099e:	9602      	str	r6, [sp, #8]
    lfs_file_open(&littlefs, &file, "uptime", LFS_O_RDWR | LFS_O_CREAT);
 80009a0:	f240 1303 	movw	r3, #259	; 0x103
 80009a4:	4a41      	ldr	r2, [pc, #260]	; (8000aac <main+0x20c>)
 80009a6:	4629      	mov	r1, r5
 80009a8:	4620      	mov	r0, r4
 80009aa:	f005 fedb 	bl	8006764 <lfs_file_open>
    lfs_file_read(&littlefs, &file, &start_uptime, sizeof(start_uptime));
 80009ae:	2304      	movs	r3, #4
 80009b0:	aa02      	add	r2, sp, #8
 80009b2:	4629      	mov	r1, r5
 80009b4:	4620      	mov	r0, r4
 80009b6:	f005 ff0d 	bl	80067d4 <lfs_file_read>
    lfs_file_close(&littlefs, &file);
 80009ba:	4629      	mov	r1, r5
 80009bc:	4620      	mov	r0, r4
 80009be:	f005 feef 	bl	80067a0 <lfs_file_close>
    DBG("Boot count = %lu start uptime = %lu s", boot_count, start_uptime);
 80009c2:	9a02      	ldr	r2, [sp, #8]
 80009c4:	9903      	ldr	r1, [sp, #12]
 80009c6:	483a      	ldr	r0, [pc, #232]	; (8000ab0 <main+0x210>)
 80009c8:	f006 f9c4 	bl	8006d54 <iprintf>
 80009cc:	200a      	movs	r0, #10
 80009ce:	f006 f9d3 	bl	8006d78 <putchar>
    uint32_t now = 0, last_blink = 0, last_update = 0;
 80009d2:	4635      	mov	r5, r6
        now = HAL_GetTick();
 80009d4:	f000 f9ec 	bl	8000db0 <HAL_GetTick>
 80009d8:	4604      	mov	r4, r0
        if (now - last_blink >= 500) {
 80009da:	1b83      	subs	r3, r0, r6
 80009dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009e0:	d211      	bcs.n	8000a06 <main+0x166>
        if (now - last_update >= 1000) {
 80009e2:	1b63      	subs	r3, r4, r5
 80009e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009e8:	d214      	bcs.n	8000a14 <main+0x174>
        if (do_action) {
 80009ea:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <main+0x214>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0f0      	beq.n	80009d4 <main+0x134>
            do_action = 0;
 80009f2:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <main+0x214>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
            DBG("Do action!");
 80009f8:	482f      	ldr	r0, [pc, #188]	; (8000ab8 <main+0x218>)
 80009fa:	f006 f9ab 	bl	8006d54 <iprintf>
 80009fe:	200a      	movs	r0, #10
 8000a00:	f006 f9ba 	bl	8006d78 <putchar>
 8000a04:	e7e6      	b.n	80009d4 <main+0x134>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0a:	482c      	ldr	r0, [pc, #176]	; (8000abc <main+0x21c>)
 8000a0c:	f000 fb40 	bl	8001090 <HAL_GPIO_TogglePin>
            last_blink = now;
 8000a10:	4626      	mov	r6, r4
 8000a12:	e7e6      	b.n	80009e2 <main+0x142>
            uint32_t total_uptime = start_uptime + now / 1000;
 8000a14:	4a2a      	ldr	r2, [pc, #168]	; (8000ac0 <main+0x220>)
 8000a16:	fba2 3204 	umull	r3, r2, r2, r4
 8000a1a:	9b02      	ldr	r3, [sp, #8]
 8000a1c:	eb03 1392 	add.w	r3, r3, r2, lsr #6
 8000a20:	9301      	str	r3, [sp, #4]
            uint32_t start = HAL_GetTick();
 8000a22:	f000 f9c5 	bl	8000db0 <HAL_GetTick>
 8000a26:	4680      	mov	r8, r0
            lfs_file_open(&littlefs, &file, "uptime", LFS_O_RDWR);
 8000a28:	4f1d      	ldr	r7, [pc, #116]	; (8000aa0 <main+0x200>)
 8000a2a:	4d1e      	ldr	r5, [pc, #120]	; (8000aa4 <main+0x204>)
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <main+0x20c>)
 8000a30:	4639      	mov	r1, r7
 8000a32:	4628      	mov	r0, r5
 8000a34:	f005 fe96 	bl	8006764 <lfs_file_open>
            lfs_file_rewind(&littlefs, &file);
 8000a38:	4639      	mov	r1, r7
 8000a3a:	4628      	mov	r0, r5
 8000a3c:	f005 ff06 	bl	800684c <lfs_file_rewind>
            lfs_file_write(&littlefs, &file, &total_uptime, sizeof(total_uptime));
 8000a40:	2304      	movs	r3, #4
 8000a42:	eb0d 0203 	add.w	r2, sp, r3
 8000a46:	4639      	mov	r1, r7
 8000a48:	4628      	mov	r0, r5
 8000a4a:	f005 fee1 	bl	8006810 <lfs_file_write>
            lfs_file_close(&littlefs, &file);
 8000a4e:	4639      	mov	r1, r7
 8000a50:	4628      	mov	r0, r5
 8000a52:	f005 fea5 	bl	80067a0 <lfs_file_close>
            DBG("File update took %lu ms", HAL_GetTick() - start);
 8000a56:	f000 f9ab 	bl	8000db0 <HAL_GetTick>
 8000a5a:	eba0 0108 	sub.w	r1, r0, r8
 8000a5e:	4819      	ldr	r0, [pc, #100]	; (8000ac4 <main+0x224>)
 8000a60:	f006 f978 	bl	8006d54 <iprintf>
 8000a64:	200a      	movs	r0, #10
 8000a66:	f006 f987 	bl	8006d78 <putchar>
            DBG("Total uptime = %lu s", total_uptime);
 8000a6a:	9901      	ldr	r1, [sp, #4]
 8000a6c:	4816      	ldr	r0, [pc, #88]	; (8000ac8 <main+0x228>)
 8000a6e:	f006 f971 	bl	8006d54 <iprintf>
 8000a72:	200a      	movs	r0, #10
 8000a74:	f006 f980 	bl	8006d78 <putchar>
            last_update = now;
 8000a78:	4625      	mov	r5, r4
 8000a7a:	e7b6      	b.n	80009ea <main+0x14a>
 8000a7c:	08007aac 	.word	0x08007aac
 8000a80:	08007ac4 	.word	0x08007ac4
 8000a84:	40020400 	.word	0x40020400
 8000a88:	08007ad8 	.word	0x08007ad8
 8000a8c:	08007af4 	.word	0x08007af4
 8000a90:	200001a4 	.word	0x200001a4
 8000a94:	08007aec 	.word	0x08007aec
 8000a98:	2000023c 	.word	0x2000023c
 8000a9c:	08007af8 	.word	0x08007af8
 8000aa0:	20000150 	.word	0x20000150
 8000aa4:	200000d0 	.word	0x200000d0
 8000aa8:	08007b14 	.word	0x08007b14
 8000aac:	08007b20 	.word	0x08007b20
 8000ab0:	08007b28 	.word	0x08007b28
 8000ab4:	2000014c 	.word	0x2000014c
 8000ab8:	08007b80 	.word	0x08007b80
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	10624dd3 	.word	0x10624dd3
 8000ac4:	08007b50 	.word	0x08007b50
 8000ac8:	08007b68 	.word	0x08007b68

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2100      	movs	r1, #0
 8000ad0:	9100      	str	r1, [sp, #0]
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_MspInit+0x34>)
 8000ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ada:	645a      	str	r2, [r3, #68]	; 0x44
 8000adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ade:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ae2:	9200      	str	r2, [sp, #0]
 8000ae4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	9101      	str	r1, [sp, #4]
 8000ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000aee:	641a      	str	r2, [r3, #64]	; 0x40
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	b002      	add	sp, #8
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b04:	b530      	push	{r4, r5, lr}
 8000b06:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9303      	str	r3, [sp, #12]
 8000b0c:	9304      	str	r3, [sp, #16]
 8000b0e:	9305      	str	r3, [sp, #20]
 8000b10:	9306      	str	r3, [sp, #24]
 8000b12:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000b14:	6802      	ldr	r2, [r0, #0]
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_I2C_MspInit+0x68>)
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d001      	beq.n	8000b20 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b1c:	b009      	add	sp, #36	; 0x24
 8000b1e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	2500      	movs	r5, #0
 8000b22:	9501      	str	r5, [sp, #4]
 8000b24:	4c12      	ldr	r4, [pc, #72]	; (8000b70 <HAL_I2C_MspInit+0x6c>)
 8000b26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6323      	str	r3, [r4, #48]	; 0x30
 8000b2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b38:	23c0      	movs	r3, #192	; 0xc0
 8000b3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3c:	2312      	movs	r3, #18
 8000b3e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	a903      	add	r1, sp, #12
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <HAL_I2C_MspInit+0x70>)
 8000b50:	f000 f9b4 	bl	8000ebc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b54:	9502      	str	r5, [sp, #8]
 8000b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b5c:	6423      	str	r3, [r4, #64]	; 0x40
 8000b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	9b02      	ldr	r3, [sp, #8]
}
 8000b68:	e7d8      	b.n	8000b1c <HAL_I2C_MspInit+0x18>
 8000b6a:	bf00      	nop
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020400 	.word	0x40020400

08000b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b500      	push	{lr}
 8000b7a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	9303      	str	r3, [sp, #12]
 8000b80:	9304      	str	r3, [sp, #16]
 8000b82:	9305      	str	r3, [sp, #20]
 8000b84:	9306      	str	r3, [sp, #24]
 8000b86:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000b88:	6802      	ldr	r2, [r0, #0]
 8000b8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b8e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d002      	beq.n	8000b9c <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b96:	b009      	add	sp, #36	; 0x24
 8000b98:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	9101      	str	r1, [sp, #4]
 8000ba0:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ba6:	f042 0210 	orr.w	r2, r2, #16
 8000baa:	645a      	str	r2, [r3, #68]	; 0x44
 8000bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bae:	f002 0210 	and.w	r2, r2, #16
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	9102      	str	r1, [sp, #8]
 8000bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bba:	f042 0201 	orr.w	r2, r2, #1
 8000bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	9302      	str	r3, [sp, #8]
 8000bc8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	a903      	add	r1, sp, #12
 8000bde:	4802      	ldr	r0, [pc, #8]	; (8000be8 <HAL_UART_MspInit+0x70>)
 8000be0:	f000 f96c 	bl	8000ebc <HAL_GPIO_Init>
}
 8000be4:	e7d7      	b.n	8000b96 <HAL_UART_MspInit+0x1e>
 8000be6:	bf00      	nop
 8000be8:	40020000 	.word	0x40020000

08000bec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler>

08000bee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler>

08000bf0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler>

08000bf2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler>

08000bf4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler>

08000bf6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfe:	f000 f8cb 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c02:	bd08      	pop	{r3, pc}

08000c04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 fa4c 	bl	80010a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c0c:	bd08      	pop	{r3, pc}

08000c0e <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8000c0e:	2001      	movs	r0, #1
 8000c10:	4770      	bx	lr

08000c12 <_kill>:

int _kill(int pid, int sig)
{
 8000c12:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c14:	f006 f998 	bl	8006f48 <__errno>
 8000c18:	2316      	movs	r3, #22
 8000c1a:	6003      	str	r3, [r0, #0]
  return -1;
}
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	bd08      	pop	{r3, pc}

08000c22 <_exit>:

void _exit (int status)
{
 8000c22:	b508      	push	{r3, lr}
  _kill(status, -1);
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c28:	f7ff fff3 	bl	8000c12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c2c:	e7fe      	b.n	8000c2c <_exit+0xa>

08000c2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c2e:	b570      	push	{r4, r5, r6, lr}
 8000c30:	460c      	mov	r4, r1
 8000c32:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c34:	2500      	movs	r5, #0
 8000c36:	e006      	b.n	8000c46 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8000c38:	f3af 8000 	nop.w
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8000c44:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	42b5      	cmp	r5, r6
 8000c48:	dbf6      	blt.n	8000c38 <_read+0xa>
  }

  return len;
}
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	bd70      	pop	{r4, r5, r6, pc}

08000c4e <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c52:	4770      	bx	lr

08000c54 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c58:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4770      	bx	lr

08000c62 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000c62:	2000      	movs	r0, #0
 8000c64:	4770      	bx	lr
	...

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b510      	push	{r4, lr}
 8000c6a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <_sbrk+0x38>)
 8000c6e:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <_sbrk+0x40>)
 8000c72:	6800      	ldr	r0, [r0, #0]
 8000c74:	b140      	cbz	r0, 8000c88 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <_sbrk+0x40>)
 8000c78:	6800      	ldr	r0, [r0, #0]
 8000c7a:	4403      	add	r3, r0
 8000c7c:	1a52      	subs	r2, r2, r1
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d806      	bhi.n	8000c90 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <_sbrk+0x40>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000c86:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <_sbrk+0x40>)
 8000c8a:	4c08      	ldr	r4, [pc, #32]	; (8000cac <_sbrk+0x44>)
 8000c8c:	6004      	str	r4, [r0, #0]
 8000c8e:	e7f2      	b.n	8000c76 <_sbrk+0xe>
    errno = ENOMEM;
 8000c90:	f006 f95a 	bl	8006f48 <__errno>
 8000c94:	230c      	movs	r3, #12
 8000c96:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c9c:	e7f3      	b.n	8000c86 <_sbrk+0x1e>
 8000c9e:	bf00      	nop
 8000ca0:	20020000 	.word	0x20020000
 8000ca4:	00000400 	.word	0x00000400
 8000ca8:	20000244 	.word	0x20000244
 8000cac:	20000398 	.word	0x20000398

08000cb0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4a03      	ldr	r2, [pc, #12]	; (8000cc0 <SystemInit+0x10>)
 8000cb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000cb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cca:	490e      	ldr	r1, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce0:	4c0b      	ldr	r4, [pc, #44]	; (8000d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cee:	f7ff ffdf 	bl	8000cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f006 f92f 	bl	8006f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fdd3 	bl	80008a0 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8000d08:	080087a0 	.word	0x080087a0
  ldr r2, =_sbss
 8000d0c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8000d10:	20000398 	.word	0x20000398

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b510      	push	{r4, lr}
 8000d1a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_InitTick+0x40>)
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d28:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <HAL_InitTick+0x44>)
 8000d2a:	6810      	ldr	r0, [r2, #0]
 8000d2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d30:	f000 f8b0 	bl	8000e94 <HAL_SYSTICK_Config>
 8000d34:	b968      	cbnz	r0, 8000d52 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	2c0f      	cmp	r4, #15
 8000d38:	d901      	bls.n	8000d3e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	e00a      	b.n	8000d54 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4621      	mov	r1, r4
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d46:	f000 f85f 	bl	8000e08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_InitTick+0x48>)
 8000d4c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2000      	movs	r0, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000d52:	2001      	movs	r0, #1
}
 8000d54:	bd10      	pop	{r4, pc}
 8000d56:	bf00      	nop
 8000d58:	20000050 	.word	0x20000050
 8000d5c:	2000004c 	.word	0x2000004c
 8000d60:	20000054 	.word	0x20000054

08000d64 <HAL_Init>:
{
 8000d64:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_Init+0x30>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f82f 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f7ff ffc6 	bl	8000d18 <HAL_InitTick>
  HAL_MspInit();
 8000d8c:	f7ff fe9e 	bl	8000acc <HAL_MspInit>
}
 8000d90:	2000      	movs	r0, #0
 8000d92:	bd08      	pop	{r3, pc}
 8000d94:	40023c00 	.word	0x40023c00

08000d98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d98:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <HAL_IncTick+0x10>)
 8000d9a:	6811      	ldr	r1, [r2, #0]
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_IncTick+0x14>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	440b      	add	r3, r1
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000248 	.word	0x20000248
 8000dac:	20000050 	.word	0x20000050

08000db0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000db0:	4b01      	ldr	r3, [pc, #4]	; (8000db8 <HAL_GetTick+0x8>)
 8000db2:	6818      	ldr	r0, [r3, #0]
}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000248 	.word	0x20000248

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff fff6 	bl	8000db0 <HAL_GetTick>
 8000dc4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000dca:	d002      	beq.n	8000dd2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <HAL_Delay+0x24>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd2:	f7ff ffed 	bl	8000db0 <HAL_GetTick>
 8000dd6:	1b40      	subs	r0, r0, r5
 8000dd8:	42a0      	cmp	r0, r4
 8000dda:	d3fa      	bcc.n	8000dd2 <HAL_Delay+0x16>
  {
  }
}
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
 8000dde:	bf00      	nop
 8000de0:	20000050 	.word	0x20000050

08000de4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000de6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dec:	041b      	lsls	r3, r3, #16
 8000dee:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	0200      	lsls	r0, r0, #8
 8000df2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000e00:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e08:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_NVIC_SetPriority+0x68>)
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e12:	f1c3 0c07 	rsb	ip, r3, #7
 8000e16:	f1bc 0f04 	cmp.w	ip, #4
 8000e1a:	bf28      	it	cs
 8000e1c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e20:	f103 0e04 	add.w	lr, r3, #4
 8000e24:	f1be 0f06 	cmp.w	lr, #6
 8000e28:	d918      	bls.n	8000e5c <HAL_NVIC_SetPriority+0x54>
 8000e2a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000e30:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000e34:	ea21 010c 	bic.w	r1, r1, ip
 8000e38:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3a:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e3e:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e42:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8000e44:	2800      	cmp	r0, #0
 8000e46:	db0b      	blt.n	8000e60 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000e50:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000e54:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e58:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e7e5      	b.n	8000e2c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	f000 000f 	and.w	r0, r0, #15
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	4b02      	ldr	r3, [pc, #8]	; (8000e74 <HAL_NVIC_SetPriority+0x6c>)
 8000e6a:	541a      	strb	r2, [r3, r0]
 8000e6c:	e7f4      	b.n	8000e58 <HAL_NVIC_SetPriority+0x50>
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00
 8000e74:	e000ed14 	.word	0xe000ed14

08000e78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	db07      	blt.n	8000e8c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7c:	f000 021f 	and.w	r2, r0, #31
 8000e80:	0940      	lsrs	r0, r0, #5
 8000e82:	2301      	movs	r3, #1
 8000e84:	4093      	lsls	r3, r2
 8000e86:	4a02      	ldr	r2, [pc, #8]	; (8000e90 <HAL_NVIC_EnableIRQ+0x18>)
 8000e88:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	3801      	subs	r0, #1
 8000e96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e9a:	d20b      	bcs.n	8000eb4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000ea0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <HAL_SYSTICK_Config+0x24>)
 8000ea4:	21f0      	movs	r1, #240	; 0xf0
 8000ea6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eaa:	2000      	movs	r0, #0
 8000eac:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	2207      	movs	r2, #7
 8000eb0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eb4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	2b0f      	cmp	r3, #15
 8000ec0:	f200 80d7 	bhi.w	8001072 <HAL_GPIO_Init+0x1b6>
{
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	e065      	b.n	8000f96 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eca:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ecc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ed0:	2403      	movs	r4, #3
 8000ed2:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ed6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	68cc      	ldr	r4, [r1, #12]
 8000edc:	fa04 f40e 	lsl.w	r4, r4, lr
 8000ee0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000ee2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eea:	684a      	ldr	r2, [r1, #4]
 8000eec:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000ef4:	6042      	str	r2, [r0, #4]
 8000ef6:	e05c      	b.n	8000fb2 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef8:	08dc      	lsrs	r4, r3, #3
 8000efa:	3408      	adds	r4, #8
 8000efc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f00:	f003 0507 	and.w	r5, r3, #7
 8000f04:	00ad      	lsls	r5, r5, #2
 8000f06:	f04f 0e0f 	mov.w	lr, #15
 8000f0a:	fa0e fe05 	lsl.w	lr, lr, r5
 8000f0e:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f12:	690a      	ldr	r2, [r1, #16]
 8000f14:	40aa      	lsls	r2, r5
 8000f16:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000f1a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000f1e:	e05c      	b.n	8000fda <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f20:	2204      	movs	r2, #4
 8000f22:	e000      	b.n	8000f26 <HAL_GPIO_Init+0x6a>
 8000f24:	2200      	movs	r2, #0
 8000f26:	fa02 f20e 	lsl.w	r2, r2, lr
 8000f2a:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	3402      	adds	r4, #2
 8000f2e:	4d51      	ldr	r5, [pc, #324]	; (8001074 <HAL_GPIO_Init+0x1b8>)
 8000f30:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f34:	4a50      	ldr	r2, [pc, #320]	; (8001078 <HAL_GPIO_Init+0x1bc>)
 8000f36:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	ea6f 020c 	mvn.w	r2, ip
 8000f3c:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f40:	684e      	ldr	r6, [r1, #4]
 8000f42:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000f46:	d001      	beq.n	8000f4c <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000f48:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000f4c:	4c4a      	ldr	r4, [pc, #296]	; (8001078 <HAL_GPIO_Init+0x1bc>)
 8000f4e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000f50:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f56:	684e      	ldr	r6, [r1, #4]
 8000f58:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000f5c:	d001      	beq.n	8000f62 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000f5e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000f62:	4c45      	ldr	r4, [pc, #276]	; (8001078 <HAL_GPIO_Init+0x1bc>)
 8000f64:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000f66:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f6c:	684e      	ldr	r6, [r1, #4]
 8000f6e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000f72:	d001      	beq.n	8000f78 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000f74:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000f78:	4c3f      	ldr	r4, [pc, #252]	; (8001078 <HAL_GPIO_Init+0x1bc>)
 8000f7a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f80:	684d      	ldr	r5, [r1, #4]
 8000f82:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8000f86:	d001      	beq.n	8000f8c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000f88:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000f8c:	4c3a      	ldr	r4, [pc, #232]	; (8001078 <HAL_GPIO_Init+0x1bc>)
 8000f8e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f90:	3301      	adds	r3, #1
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	d86b      	bhi.n	800106e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000f96:	2201      	movs	r2, #1
 8000f98:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9a:	680c      	ldr	r4, [r1, #0]
 8000f9c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000fa0:	ea32 0404 	bics.w	r4, r2, r4
 8000fa4:	d1f4      	bne.n	8000f90 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	684c      	ldr	r4, [r1, #4]
 8000fa8:	f004 0403 	and.w	r4, r4, #3
 8000fac:	3c01      	subs	r4, #1
 8000fae:	2c01      	cmp	r4, #1
 8000fb0:	d98b      	bls.n	8000eca <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb2:	684a      	ldr	r2, [r1, #4]
 8000fb4:	f002 0203 	and.w	r2, r2, #3
 8000fb8:	2a03      	cmp	r2, #3
 8000fba:	d009      	beq.n	8000fd0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000fbc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	005d      	lsls	r5, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	40aa      	lsls	r2, r5
 8000fc4:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc8:	688a      	ldr	r2, [r1, #8]
 8000fca:	40aa      	lsls	r2, r5
 8000fcc:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000fce:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	684a      	ldr	r2, [r1, #4]
 8000fd2:	f002 0203 	and.w	r2, r2, #3
 8000fd6:	2a02      	cmp	r2, #2
 8000fd8:	d08e      	beq.n	8000ef8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000fda:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fdc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fe6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fea:	684a      	ldr	r2, [r1, #4]
 8000fec:	f002 0203 	and.w	r2, r2, #3
 8000ff0:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ff4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000ff6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff8:	684a      	ldr	r2, [r1, #4]
 8000ffa:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000ffe:	d0c7      	beq.n	8000f90 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001000:	2200      	movs	r2, #0
 8001002:	9201      	str	r2, [sp, #4]
 8001004:	4a1d      	ldr	r2, [pc, #116]	; (800107c <HAL_GPIO_Init+0x1c0>)
 8001006:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001008:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800100c:	6454      	str	r4, [r2, #68]	; 0x44
 800100e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001010:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001014:	9201      	str	r2, [sp, #4]
 8001016:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001018:	089c      	lsrs	r4, r3, #2
 800101a:	1ca5      	adds	r5, r4, #2
 800101c:	4a15      	ldr	r2, [pc, #84]	; (8001074 <HAL_GPIO_Init+0x1b8>)
 800101e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001022:	f003 0e03 	and.w	lr, r3, #3
 8001026:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001030:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001034:	4a12      	ldr	r2, [pc, #72]	; (8001080 <HAL_GPIO_Init+0x1c4>)
 8001036:	4290      	cmp	r0, r2
 8001038:	f43f af74 	beq.w	8000f24 <HAL_GPIO_Init+0x68>
 800103c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001040:	4290      	cmp	r0, r2
 8001042:	d00e      	beq.n	8001062 <HAL_GPIO_Init+0x1a6>
 8001044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001048:	4290      	cmp	r0, r2
 800104a:	d00c      	beq.n	8001066 <HAL_GPIO_Init+0x1aa>
 800104c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001050:	4290      	cmp	r0, r2
 8001052:	d00a      	beq.n	800106a <HAL_GPIO_Init+0x1ae>
 8001054:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001058:	4290      	cmp	r0, r2
 800105a:	f43f af61 	beq.w	8000f20 <HAL_GPIO_Init+0x64>
 800105e:	2207      	movs	r2, #7
 8001060:	e761      	b.n	8000f26 <HAL_GPIO_Init+0x6a>
 8001062:	2201      	movs	r2, #1
 8001064:	e75f      	b.n	8000f26 <HAL_GPIO_Init+0x6a>
 8001066:	2202      	movs	r2, #2
 8001068:	e75d      	b.n	8000f26 <HAL_GPIO_Init+0x6a>
 800106a:	2203      	movs	r2, #3
 800106c:	e75b      	b.n	8000f26 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800106e:	b002      	add	sp, #8
 8001070:	bd70      	pop	{r4, r5, r6, pc}
 8001072:	4770      	bx	lr
 8001074:	40013800 	.word	0x40013800
 8001078:	40013c00 	.word	0x40013c00
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000

08001084 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001084:	b10a      	cbz	r2, 800108a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001086:	6181      	str	r1, [r0, #24]
 8001088:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800108a:	0409      	lsls	r1, r1, #16
 800108c:	6181      	str	r1, [r0, #24]
  }
}
 800108e:	4770      	bx	lr

08001090 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001090:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001092:	ea01 0203 	and.w	r2, r1, r3
 8001096:	ea21 0103 	bic.w	r1, r1, r3
 800109a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800109e:	6181      	str	r1, [r0, #24]
}
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010a4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4203      	tst	r3, r0
 80010ac:	d100      	bne.n	80010b0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80010ae:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80010b2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010b4:	f7ff fb60 	bl	8000778 <HAL_GPIO_EXTI_Callback>
}
 80010b8:	e7f9      	b.n	80010ae <HAL_GPIO_EXTI_IRQHandler+0xa>
 80010ba:	bf00      	nop
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010c0:	6803      	ldr	r3, [r0, #0]
 80010c2:	695a      	ldr	r2, [r3, #20]
 80010c4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80010c8:	d101      	bne.n	80010ce <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80010ca:	2000      	movs	r0, #0
}
 80010cc:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80010d2:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80010d8:	2220      	movs	r2, #32
 80010da:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010de:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010e4:	f042 0204 	orr.w	r2, r2, #4
 80010e8:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80010ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
 80010f0:	4770      	bx	lr

080010f2 <I2C_WaitOnFlagUntilTimeout>:
{
 80010f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010f6:	4607      	mov	r7, r0
 80010f8:	460d      	mov	r5, r1
 80010fa:	4690      	mov	r8, r2
 80010fc:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010fe:	e024      	b.n	800114a <I2C_WaitOnFlagUntilTimeout+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001100:	f7ff fe56 	bl	8000db0 <HAL_GetTick>
 8001104:	9b06      	ldr	r3, [sp, #24]
 8001106:	1ac0      	subs	r0, r0, r3
 8001108:	42b0      	cmp	r0, r6
 800110a:	d800      	bhi.n	800110e <I2C_WaitOnFlagUntilTimeout+0x1c>
 800110c:	b9ee      	cbnz	r6, 800114a <I2C_WaitOnFlagUntilTimeout+0x58>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001112:	2220      	movs	r2, #32
 8001114:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001118:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800111c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800111e:	f042 0220 	orr.w	r2, r2, #32
 8001122:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001124:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8001128:	2001      	movs	r0, #1
 800112a:	e01e      	b.n	800116a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	699c      	ldr	r4, [r3, #24]
 8001130:	ea25 0c04 	bic.w	ip, r5, r4
 8001134:	fa1f fc8c 	uxth.w	ip, ip
 8001138:	fabc fc8c 	clz	ip, ip
 800113c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001140:	45e0      	cmp	r8, ip
 8001142:	d111      	bne.n	8001168 <I2C_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001144:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8001148:	d1da      	bne.n	8001100 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800114a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800114e:	2b01      	cmp	r3, #1
 8001150:	d1ec      	bne.n	800112c <I2C_WaitOnFlagUntilTimeout+0x3a>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	ea25 0c03 	bic.w	ip, r5, r3
 800115a:	fa1f fc8c 	uxth.w	ip, ip
 800115e:	fabc fc8c 	clz	ip, ip
 8001162:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001166:	e7eb      	b.n	8001140 <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001168:	2000      	movs	r0, #0
}
 800116a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800116e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800116e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460e      	mov	r6, r1
 8001176:	4617      	mov	r7, r2
 8001178:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800117a:	e03d      	b.n	80011f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001182:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800118a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001190:	2220      	movs	r2, #32
 8001192:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001196:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800119a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800119c:	f042 0204 	orr.w	r2, r2, #4
 80011a0:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80011a2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80011a6:	2001      	movs	r0, #1
 80011a8:	e034      	b.n	8001214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011aa:	f7ff fe01 	bl	8000db0 <HAL_GetTick>
 80011ae:	eba0 0008 	sub.w	r0, r0, r8
 80011b2:	42b8      	cmp	r0, r7
 80011b4:	d800      	bhi.n	80011b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 80011b6:	b9ff      	cbnz	r7, 80011f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80011bc:	2220      	movs	r2, #32
 80011be:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011c2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80011c6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80011c8:	f042 0220 	orr.w	r2, r2, #32
 80011cc:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80011ce:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 80011d2:	2001      	movs	r0, #1
 80011d4:	e01e      	b.n	8001214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80011d6:	682b      	ldr	r3, [r5, #0]
 80011d8:	699c      	ldr	r4, [r3, #24]
 80011da:	ea26 0404 	bic.w	r4, r6, r4
 80011de:	b2a4      	uxth	r4, r4
 80011e0:	3c00      	subs	r4, #0
 80011e2:	bf18      	it	ne
 80011e4:	2401      	movne	r4, #1
 80011e6:	b1a4      	cbz	r4, 8001212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011e8:	682b      	ldr	r3, [r5, #0]
 80011ea:	695a      	ldr	r2, [r3, #20]
 80011ec:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80011f0:	d1c4      	bne.n	800117c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80011f2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80011f6:	d1d8      	bne.n	80011aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80011f8:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d1ea      	bne.n	80011d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	695c      	ldr	r4, [r3, #20]
 8001204:	ea26 0404 	bic.w	r4, r6, r4
 8001208:	b2a4      	uxth	r4, r4
 800120a:	3c00      	subs	r4, #0
 800120c:	bf18      	it	ne
 800120e:	2401      	movne	r4, #1
 8001210:	e7e9      	b.n	80011e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8001212:	2000      	movs	r0, #0
}
 8001214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001218 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	4604      	mov	r4, r0
 800121c:	460d      	mov	r5, r1
 800121e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001228:	d11c      	bne.n	8001264 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff ff48 	bl	80010c0 <I2C_IsAcknowledgeFailed>
 8001230:	b9d0      	cbnz	r0, 8001268 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001232:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001236:	d0f3      	beq.n	8001220 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001238:	f7ff fdba 	bl	8000db0 <HAL_GetTick>
 800123c:	1b80      	subs	r0, r0, r6
 800123e:	42a8      	cmp	r0, r5
 8001240:	d801      	bhi.n	8001246 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001242:	2d00      	cmp	r5, #0
 8001244:	d1ec      	bne.n	8001220 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800124a:	2220      	movs	r2, #32
 800124c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001250:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001254:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001256:	f042 0220 	orr.w	r2, r2, #32
 800125a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800125c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001260:	2001      	movs	r0, #1
 8001262:	e000      	b.n	8001266 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001264:	2000      	movs	r0, #0
}
 8001266:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001268:	2001      	movs	r0, #1
 800126a:	e7fc      	b.n	8001266 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

0800126c <I2C_RequestMemoryWrite>:
{
 800126c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001270:	b085      	sub	sp, #20
 8001272:	4604      	mov	r4, r0
 8001274:	460d      	mov	r5, r1
 8001276:	4691      	mov	r9, r2
 8001278:	461f      	mov	r7, r3
 800127a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800127e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001280:	6803      	ldr	r3, [r0, #0]
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001288:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800128a:	9600      	str	r6, [sp, #0]
 800128c:	4643      	mov	r3, r8
 800128e:	2200      	movs	r2, #0
 8001290:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001294:	f7ff ff2d 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 8001298:	b960      	cbnz	r0, 80012b4 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80012a0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012a2:	4633      	mov	r3, r6
 80012a4:	4642      	mov	r2, r8
 80012a6:	4926      	ldr	r1, [pc, #152]	; (8001340 <I2C_RequestMemoryWrite+0xd4>)
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff ff60 	bl	800116e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012ae:	b168      	cbz	r0, 80012cc <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80012b0:	2001      	movs	r0, #1
 80012b2:	e008      	b.n	80012c6 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012bc:	d002      	beq.n	80012c4 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80012be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80012c4:	2003      	movs	r0, #3
}
 80012c6:	b005      	add	sp, #20
 80012c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012cc:	2300      	movs	r3, #0
 80012ce:	9303      	str	r3, [sp, #12]
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	9203      	str	r2, [sp, #12]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	9303      	str	r3, [sp, #12]
 80012da:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012dc:	4632      	mov	r2, r6
 80012de:	4641      	mov	r1, r8
 80012e0:	4620      	mov	r0, r4
 80012e2:	f7ff ff99 	bl	8001218 <I2C_WaitOnTXEFlagUntilTimeout>
 80012e6:	b930      	cbnz	r0, 80012f6 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012e8:	2f01      	cmp	r7, #1
 80012ea:	d10f      	bne.n	800130c <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	fa5f f689 	uxtb.w	r6, r9
 80012f2:	611e      	str	r6, [r3, #16]
 80012f4:	e7e7      	b.n	80012c6 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d001      	beq.n	8001300 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80012fc:	2001      	movs	r0, #1
 80012fe:	e7e2      	b.n	80012c6 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001300:	6822      	ldr	r2, [r4, #0]
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e7f7      	b.n	80012fc <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8001312:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001314:	4632      	mov	r2, r6
 8001316:	4641      	mov	r1, r8
 8001318:	4620      	mov	r0, r4
 800131a:	f7ff ff7d 	bl	8001218 <I2C_WaitOnTXEFlagUntilTimeout>
 800131e:	b920      	cbnz	r0, 800132a <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	fa5f f689 	uxtb.w	r6, r9
 8001326:	611e      	str	r6, [r3, #16]
 8001328:	e7cd      	b.n	80012c6 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800132a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800132c:	2b04      	cmp	r3, #4
 800132e:	d001      	beq.n	8001334 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8001330:	2001      	movs	r0, #1
 8001332:	e7c8      	b.n	80012c6 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001334:	6822      	ldr	r2, [r4, #0]
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e7f7      	b.n	8001330 <I2C_RequestMemoryWrite+0xc4>
 8001340:	00010002 	.word	0x00010002

08001344 <I2C_RequestMemoryRead>:
{
 8001344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	4604      	mov	r4, r0
 800134c:	460d      	mov	r5, r1
 800134e:	4616      	mov	r6, r2
 8001350:	4699      	mov	r9, r3
 8001352:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001354:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001358:	6802      	ldr	r2, [r0, #0]
 800135a:	6813      	ldr	r3, [r2, #0]
 800135c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001360:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001362:	6803      	ldr	r3, [r0, #0]
 8001364:	6819      	ldr	r1, [r3, #0]
 8001366:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800136a:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800136c:	f8cd 8000 	str.w	r8, [sp]
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001378:	f7ff febb 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 800137c:	b970      	cbnz	r0, 800139c <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800137e:	fa5f fa85 	uxtb.w	sl, r5
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001388:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800138a:	4643      	mov	r3, r8
 800138c:	463a      	mov	r2, r7
 800138e:	4941      	ldr	r1, [pc, #260]	; (8001494 <I2C_RequestMemoryRead+0x150>)
 8001390:	4620      	mov	r0, r4
 8001392:	f7ff feec 	bl	800116e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001396:	b168      	cbz	r0, 80013b4 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8001398:	2001      	movs	r0, #1
 800139a:	e008      	b.n	80013ae <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800139c:	6823      	ldr	r3, [r4, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013a4:	d002      	beq.n	80013ac <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80013a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013aa:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80013ac:	2003      	movs	r0, #3
}
 80013ae:	b004      	add	sp, #16
 80013b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b4:	2300      	movs	r3, #0
 80013b6:	9303      	str	r3, [sp, #12]
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	9203      	str	r2, [sp, #12]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	9303      	str	r3, [sp, #12]
 80013c2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013c4:	4642      	mov	r2, r8
 80013c6:	4639      	mov	r1, r7
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff ff25 	bl	8001218 <I2C_WaitOnTXEFlagUntilTimeout>
 80013ce:	b980      	cbnz	r0, 80013f2 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013d0:	f1b9 0f01 	cmp.w	r9, #1
 80013d4:	d118      	bne.n	8001408 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	b2f6      	uxtb	r6, r6
 80013da:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013dc:	4642      	mov	r2, r8
 80013de:	4639      	mov	r1, r7
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff ff19 	bl	8001218 <I2C_WaitOnTXEFlagUntilTimeout>
 80013e6:	b368      	cbz	r0, 8001444 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d024      	beq.n	8001438 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 80013ee:	2001      	movs	r0, #1
 80013f0:	e7dd      	b.n	80013ae <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d001      	beq.n	80013fc <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 80013f8:	2001      	movs	r0, #1
 80013fa:	e7d8      	b.n	80013ae <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013fc:	6822      	ldr	r2, [r4, #0]
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e7f7      	b.n	80013f8 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	0a32      	lsrs	r2, r6, #8
 800140c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800140e:	4642      	mov	r2, r8
 8001410:	4639      	mov	r1, r7
 8001412:	4620      	mov	r0, r4
 8001414:	f7ff ff00 	bl	8001218 <I2C_WaitOnTXEFlagUntilTimeout>
 8001418:	b918      	cbnz	r0, 8001422 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	b2f6      	uxtb	r6, r6
 800141e:	611e      	str	r6, [r3, #16]
 8001420:	e7dc      	b.n	80013dc <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001424:	2b04      	cmp	r3, #4
 8001426:	d001      	beq.n	800142c <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8001428:	2001      	movs	r0, #1
 800142a:	e7c0      	b.n	80013ae <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800142c:	6822      	ldr	r2, [r4, #0]
 800142e:	6813      	ldr	r3, [r2, #0]
 8001430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e7f7      	b.n	8001428 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001438:	6822      	ldr	r2, [r4, #0]
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e7d4      	b.n	80013ee <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001444:	6822      	ldr	r2, [r4, #0]
 8001446:	6813      	ldr	r3, [r2, #0]
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800144e:	f8cd 8000 	str.w	r8, [sp]
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800145a:	4620      	mov	r0, r4
 800145c:	f7ff fe49 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 8001460:	b968      	cbnz	r0, 800147e <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001462:	6822      	ldr	r2, [r4, #0]
 8001464:	f04a 0301 	orr.w	r3, sl, #1
 8001468:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800146a:	4643      	mov	r3, r8
 800146c:	463a      	mov	r2, r7
 800146e:	4909      	ldr	r1, [pc, #36]	; (8001494 <I2C_RequestMemoryRead+0x150>)
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fe7c 	bl	800116e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001476:	2800      	cmp	r0, #0
 8001478:	d099      	beq.n	80013ae <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 800147a:	2001      	movs	r0, #1
 800147c:	e797      	b.n	80013ae <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001486:	d002      	beq.n	800148e <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800148e:	2003      	movs	r0, #3
 8001490:	e78d      	b.n	80013ae <I2C_RequestMemoryRead+0x6a>
 8001492:	bf00      	nop
 8001494:	00010002 	.word	0x00010002

08001498 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	4604      	mov	r4, r0
 800149c:	460d      	mov	r5, r1
 800149e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	f013 0f04 	tst.w	r3, #4
 80014a8:	d11c      	bne.n	80014e4 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff fe08 	bl	80010c0 <I2C_IsAcknowledgeFailed>
 80014b0:	b9d0      	cbnz	r0, 80014e8 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80014b2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80014b6:	d0f3      	beq.n	80014a0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014b8:	f7ff fc7a 	bl	8000db0 <HAL_GetTick>
 80014bc:	1b80      	subs	r0, r0, r6
 80014be:	42a8      	cmp	r0, r5
 80014c0:	d801      	bhi.n	80014c6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80014c2:	2d00      	cmp	r5, #0
 80014c4:	d1ec      	bne.n	80014a0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80014ca:	2220      	movs	r2, #32
 80014cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014d6:	f042 0220 	orr.w	r2, r2, #32
 80014da:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80014dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80014e0:	2001      	movs	r0, #1
 80014e2:	e000      	b.n	80014e6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80014e4:	2000      	movs	r0, #0
}
 80014e6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80014e8:	2001      	movs	r0, #1
 80014ea:	e7fc      	b.n	80014e6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080014ec <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	4605      	mov	r5, r0
 80014f0:	460c      	mov	r4, r1
 80014f2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	6959      	ldr	r1, [r3, #20]
 80014f8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80014fc:	d129      	bne.n	8001552 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80014fe:	6959      	ldr	r1, [r3, #20]
 8001500:	f011 0f10 	tst.w	r1, #16
 8001504:	d115      	bne.n	8001532 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001506:	f7ff fc53 	bl	8000db0 <HAL_GetTick>
 800150a:	1b80      	subs	r0, r0, r6
 800150c:	42a0      	cmp	r0, r4
 800150e:	d801      	bhi.n	8001514 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8001510:	2c00      	cmp	r4, #0
 8001512:	d1ef      	bne.n	80014f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001514:	2300      	movs	r3, #0
 8001516:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001518:	2220      	movs	r2, #32
 800151a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800151e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001522:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001524:	f042 0220 	orr.w	r2, r2, #32
 8001528:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800152a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800152e:	2001      	movs	r0, #1
}
 8001530:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001532:	f06f 0210 	mvn.w	r2, #16
 8001536:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001538:	2300      	movs	r3, #0
 800153a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800153c:	2220      	movs	r2, #32
 800153e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001542:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001546:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001548:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800154a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800154e:	2001      	movs	r0, #1
 8001550:	e7ee      	b.n	8001530 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8001552:	2000      	movs	r0, #0
 8001554:	e7ec      	b.n	8001530 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08001558 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001558:	2800      	cmp	r0, #0
 800155a:	f000 80cc 	beq.w	80016f6 <HAL_I2C_Init+0x19e>
{
 800155e:	b570      	push	{r4, r5, r6, lr}
 8001560:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001562:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001566:	2b00      	cmp	r3, #0
 8001568:	d077      	beq.n	800165a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800156a:	2324      	movs	r3, #36	; 0x24
 800156c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001570:	6822      	ldr	r2, [r4, #0]
 8001572:	6813      	ldr	r3, [r2, #0]
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800157a:	6822      	ldr	r2, [r4, #0]
 800157c:	6813      	ldr	r3, [r2, #0]
 800157e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001582:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001584:	6822      	ldr	r2, [r4, #0]
 8001586:	6813      	ldr	r3, [r2, #0]
 8001588:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800158c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800158e:	f000 feb5 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001592:	6862      	ldr	r2, [r4, #4]
 8001594:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <HAL_I2C_Init+0x1a8>)
 8001596:	429a      	cmp	r2, r3
 8001598:	d864      	bhi.n	8001664 <HAL_I2C_Init+0x10c>
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_I2C_Init+0x1ac>)
 800159c:	4298      	cmp	r0, r3
 800159e:	bf8c      	ite	hi
 80015a0:	2300      	movhi	r3, #0
 80015a2:	2301      	movls	r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f040 80a8 	bne.w	80016fa <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80015aa:	4957      	ldr	r1, [pc, #348]	; (8001708 <HAL_I2C_Init+0x1b0>)
 80015ac:	fba1 3100 	umull	r3, r1, r1, r0
 80015b0:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015b2:	6825      	ldr	r5, [r4, #0]
 80015b4:	686a      	ldr	r2, [r5, #4]
 80015b6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80015ba:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80015be:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015c0:	6821      	ldr	r1, [r4, #0]
 80015c2:	6a0a      	ldr	r2, [r1, #32]
 80015c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80015c8:	6866      	ldr	r6, [r4, #4]
 80015ca:	4d4d      	ldr	r5, [pc, #308]	; (8001700 <HAL_I2C_Init+0x1a8>)
 80015cc:	42ae      	cmp	r6, r5
 80015ce:	d84f      	bhi.n	8001670 <HAL_I2C_Init+0x118>
 80015d0:	3301      	adds	r3, #1
 80015d2:	4313      	orrs	r3, r2
 80015d4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015d6:	6821      	ldr	r1, [r4, #0]
 80015d8:	69ca      	ldr	r2, [r1, #28]
 80015da:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80015de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015e2:	6865      	ldr	r5, [r4, #4]
 80015e4:	4b46      	ldr	r3, [pc, #280]	; (8001700 <HAL_I2C_Init+0x1a8>)
 80015e6:	429d      	cmp	r5, r3
 80015e8:	d84c      	bhi.n	8001684 <HAL_I2C_Init+0x12c>
 80015ea:	1e43      	subs	r3, r0, #1
 80015ec:	006d      	lsls	r5, r5, #1
 80015ee:	fbb3 f3f5 	udiv	r3, r3, r5
 80015f2:	3301      	adds	r3, #1
 80015f4:	f640 70fc 	movw	r0, #4092	; 0xffc
 80015f8:	4203      	tst	r3, r0
 80015fa:	d078      	beq.n	80016ee <HAL_I2C_Init+0x196>
 80015fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001600:	431a      	orrs	r2, r3
 8001602:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001604:	6821      	ldr	r1, [r4, #0]
 8001606:	680b      	ldr	r3, [r1, #0]
 8001608:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800160c:	69e2      	ldr	r2, [r4, #28]
 800160e:	6a20      	ldr	r0, [r4, #32]
 8001610:	4302      	orrs	r2, r0
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001616:	6821      	ldr	r1, [r4, #0]
 8001618:	688b      	ldr	r3, [r1, #8]
 800161a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800161e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001622:	6922      	ldr	r2, [r4, #16]
 8001624:	68e0      	ldr	r0, [r4, #12]
 8001626:	4302      	orrs	r2, r0
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800162c:	6821      	ldr	r1, [r4, #0]
 800162e:	68cb      	ldr	r3, [r1, #12]
 8001630:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001634:	6962      	ldr	r2, [r4, #20]
 8001636:	69a0      	ldr	r0, [r4, #24]
 8001638:	4302      	orrs	r2, r0
 800163a:	4313      	orrs	r3, r2
 800163c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800163e:	6822      	ldr	r2, [r4, #0]
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001648:	2000      	movs	r0, #0
 800164a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800164c:	2320      	movs	r3, #32
 800164e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001652:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001654:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001658:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800165a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800165e:	f7ff fa51 	bl	8000b04 <HAL_I2C_MspInit>
 8001662:	e782      	b.n	800156a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_I2C_Init+0x1b4>)
 8001666:	4298      	cmp	r0, r3
 8001668:	bf8c      	ite	hi
 800166a:	2300      	movhi	r3, #0
 800166c:	2301      	movls	r3, #1
 800166e:	e799      	b.n	80015a4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001670:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8001674:	fb05 f303 	mul.w	r3, r5, r3
 8001678:	4d25      	ldr	r5, [pc, #148]	; (8001710 <HAL_I2C_Init+0x1b8>)
 800167a:	fba5 5303 	umull	r5, r3, r5, r3
 800167e:	099b      	lsrs	r3, r3, #6
 8001680:	3301      	adds	r3, #1
 8001682:	e7a6      	b.n	80015d2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001684:	68a6      	ldr	r6, [r4, #8]
 8001686:	b9be      	cbnz	r6, 80016b8 <HAL_I2C_Init+0x160>
 8001688:	1e43      	subs	r3, r0, #1
 800168a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800168e:	fbb3 f3fc 	udiv	r3, r3, ip
 8001692:	3301      	adds	r3, #1
 8001694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001698:	fab3 f383 	clz	r3, r3
 800169c:	095b      	lsrs	r3, r3, #5
 800169e:	bb43      	cbnz	r3, 80016f2 <HAL_I2C_Init+0x19a>
 80016a0:	b9c6      	cbnz	r6, 80016d4 <HAL_I2C_Init+0x17c>
 80016a2:	1e43      	subs	r3, r0, #1
 80016a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80016a8:	fbb3 f3f5 	udiv	r3, r3, r5
 80016ac:	3301      	adds	r3, #1
 80016ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b6:	e7a3      	b.n	8001600 <HAL_I2C_Init+0xa8>
 80016b8:	1e43      	subs	r3, r0, #1
 80016ba:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80016be:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80016c2:	fbb3 f3fc 	udiv	r3, r3, ip
 80016c6:	3301      	adds	r3, #1
 80016c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	095b      	lsrs	r3, r3, #5
 80016d2:	e7e4      	b.n	800169e <HAL_I2C_Init+0x146>
 80016d4:	1e43      	subs	r3, r0, #1
 80016d6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80016da:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80016de:	fbb3 f3f5 	udiv	r3, r3, r5
 80016e2:	3301      	adds	r3, #1
 80016e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ec:	e788      	b.n	8001600 <HAL_I2C_Init+0xa8>
 80016ee:	2304      	movs	r3, #4
 80016f0:	e786      	b.n	8001600 <HAL_I2C_Init+0xa8>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e784      	b.n	8001600 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80016f6:	2001      	movs	r0, #1
}
 80016f8:	4770      	bx	lr
    return HAL_ERROR;
 80016fa:	2001      	movs	r0, #1
 80016fc:	e7ac      	b.n	8001658 <HAL_I2C_Init+0x100>
 80016fe:	bf00      	nop
 8001700:	000186a0 	.word	0x000186a0
 8001704:	001e847f 	.word	0x001e847f
 8001708:	431bde83 	.word	0x431bde83
 800170c:	003d08ff 	.word	0x003d08ff
 8001710:	10624dd3 	.word	0x10624dd3

08001714 <HAL_I2C_Mem_Write>:
{
 8001714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001718:	b083      	sub	sp, #12
 800171a:	4604      	mov	r4, r0
 800171c:	460f      	mov	r7, r1
 800171e:	4690      	mov	r8, r2
 8001720:	4699      	mov	r9, r3
 8001722:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff fb44 	bl	8000db0 <HAL_GetTick>
 8001728:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800172a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800172e:	b2c0      	uxtb	r0, r0
 8001730:	2820      	cmp	r0, #32
 8001732:	d003      	beq.n	800173c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8001734:	2002      	movs	r0, #2
}
 8001736:	b003      	add	sp, #12
 8001738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800173c:	9500      	str	r5, [sp, #0]
 800173e:	2319      	movs	r3, #25
 8001740:	2201      	movs	r2, #1
 8001742:	494b      	ldr	r1, [pc, #300]	; (8001870 <HAL_I2C_Mem_Write+0x15c>)
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff fcd4 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 800174a:	2800      	cmp	r0, #0
 800174c:	f040 8089 	bne.w	8001862 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8001750:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001754:	2b01      	cmp	r3, #1
 8001756:	f000 8086 	beq.w	8001866 <HAL_I2C_Mem_Write+0x152>
 800175a:	2301      	movs	r3, #1
 800175c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f012 0f01 	tst.w	r2, #1
 8001768:	d103      	bne.n	8001772 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f042 0201 	orr.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001772:	6822      	ldr	r2, [r4, #0]
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800177a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800177c:	2321      	movs	r3, #33	; 0x21
 800177e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001782:	2340      	movs	r3, #64	; 0x40
 8001784:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001788:	2300      	movs	r3, #0
 800178a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800178c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800178e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001790:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001794:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001796:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001798:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_I2C_Mem_Write+0x160>)
 800179c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800179e:	9501      	str	r5, [sp, #4]
 80017a0:	9600      	str	r6, [sp, #0]
 80017a2:	464b      	mov	r3, r9
 80017a4:	4642      	mov	r2, r8
 80017a6:	4639      	mov	r1, r7
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7ff fd5f 	bl	800126c <I2C_RequestMemoryWrite>
 80017ae:	2800      	cmp	r0, #0
 80017b0:	d15b      	bne.n	800186a <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80017b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d035      	beq.n	8001824 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b8:	462a      	mov	r2, r5
 80017ba:	4631      	mov	r1, r6
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff fd2b 	bl	8001218 <I2C_WaitOnTXEFlagUntilTimeout>
 80017c2:	bb20      	cbnz	r0, 800180e <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80017cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017ce:	1c53      	adds	r3, r2, #1
 80017d0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80017d2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80017d4:	3901      	subs	r1, #1
 80017d6:	b289      	uxth	r1, r1
 80017d8:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80017da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017dc:	b29b      	uxth	r3, r3
 80017de:	3b01      	subs	r3, #1
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	6958      	ldr	r0, [r3, #20]
 80017e8:	f010 0f04 	tst.w	r0, #4
 80017ec:	d0e1      	beq.n	80017b2 <HAL_I2C_Mem_Write+0x9e>
 80017ee:	2900      	cmp	r1, #0
 80017f0:	d0df      	beq.n	80017b2 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017f2:	7852      	ldrb	r2, [r2, #1]
 80017f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80017f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017f8:	3301      	adds	r3, #1
 80017fa:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80017fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017fe:	3b01      	subs	r3, #1
 8001800:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001802:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b29b      	uxth	r3, r3
 800180a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800180c:	e7d1      	b.n	80017b2 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800180e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001810:	2b04      	cmp	r3, #4
 8001812:	d001      	beq.n	8001818 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8001814:	2001      	movs	r0, #1
 8001816:	e78e      	b.n	8001736 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001818:	6822      	ldr	r2, [r4, #0]
 800181a:	6813      	ldr	r3, [r2, #0]
 800181c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e7f7      	b.n	8001814 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001824:	462a      	mov	r2, r5
 8001826:	4631      	mov	r1, r6
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fe35 	bl	8001498 <I2C_WaitOnBTFFlagUntilTimeout>
 800182e:	b150      	cbz	r0, 8001846 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001832:	2b04      	cmp	r3, #4
 8001834:	d001      	beq.n	800183a <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8001836:	2001      	movs	r0, #1
 8001838:	e77d      	b.n	8001736 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183a:	6822      	ldr	r2, [r4, #0]
 800183c:	6813      	ldr	r3, [r2, #0]
 800183e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e7f7      	b.n	8001836 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001846:	6822      	ldr	r2, [r4, #0]
 8001848:	6813      	ldr	r3, [r2, #0]
 800184a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001850:	2320      	movs	r3, #32
 8001852:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001856:	2300      	movs	r3, #0
 8001858:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800185c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001860:	e769      	b.n	8001736 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8001862:	2002      	movs	r0, #2
 8001864:	e767      	b.n	8001736 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8001866:	2002      	movs	r0, #2
 8001868:	e765      	b.n	8001736 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
 800186c:	e763      	b.n	8001736 <HAL_I2C_Mem_Write+0x22>
 800186e:	bf00      	nop
 8001870:	00100002 	.word	0x00100002
 8001874:	ffff0000 	.word	0xffff0000

08001878 <HAL_I2C_Mem_Read>:
{
 8001878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800187c:	b087      	sub	sp, #28
 800187e:	4604      	mov	r4, r0
 8001880:	460f      	mov	r7, r1
 8001882:	4690      	mov	r8, r2
 8001884:	4699      	mov	r9, r3
 8001886:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff fa92 	bl	8000db0 <HAL_GetTick>
 800188c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800188e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001892:	b2c0      	uxtb	r0, r0
 8001894:	2820      	cmp	r0, #32
 8001896:	d004      	beq.n	80018a2 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8001898:	2702      	movs	r7, #2
}
 800189a:	4638      	mov	r0, r7
 800189c:	b007      	add	sp, #28
 800189e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018a2:	9500      	str	r5, [sp, #0]
 80018a4:	2319      	movs	r3, #25
 80018a6:	2201      	movs	r2, #1
 80018a8:	4988      	ldr	r1, [pc, #544]	; (8001acc <HAL_I2C_Mem_Read+0x254>)
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff fc21 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 80018b0:	2800      	cmp	r0, #0
 80018b2:	f040 8143 	bne.w	8001b3c <HAL_I2C_Mem_Read+0x2c4>
    __HAL_LOCK(hi2c);
 80018b6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	f000 8140 	beq.w	8001b40 <HAL_I2C_Mem_Read+0x2c8>
 80018c0:	2301      	movs	r3, #1
 80018c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	f012 0f01 	tst.w	r2, #1
 80018ce:	d103      	bne.n	80018d8 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018d8:	6822      	ldr	r2, [r4, #0]
 80018da:	6813      	ldr	r3, [r2, #0]
 80018dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018e0:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018e2:	2322      	movs	r3, #34	; 0x22
 80018e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018e8:	2340      	movs	r3, #64	; 0x40
 80018ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80018f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018f4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018f6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80018fa:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018fe:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001900:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <HAL_I2C_Mem_Read+0x258>)
 8001902:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001904:	9501      	str	r5, [sp, #4]
 8001906:	9600      	str	r6, [sp, #0]
 8001908:	464b      	mov	r3, r9
 800190a:	4642      	mov	r2, r8
 800190c:	4639      	mov	r1, r7
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff fd18 	bl	8001344 <I2C_RequestMemoryRead>
 8001914:	4607      	mov	r7, r0
 8001916:	2800      	cmp	r0, #0
 8001918:	f040 8114 	bne.w	8001b44 <HAL_I2C_Mem_Read+0x2cc>
    if (hi2c->XferSize == 0U)
 800191c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800191e:	b95b      	cbnz	r3, 8001938 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	9202      	str	r2, [sp, #8]
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	9202      	str	r2, [sp, #8]
 800192c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e075      	b.n	8001a24 <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 8001938:	2b01      	cmp	r3, #1
 800193a:	d00a      	beq.n	8001952 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 800193c:	2b02      	cmp	r3, #2
 800193e:	d01a      	beq.n	8001976 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001940:	2300      	movs	r3, #0
 8001942:	9305      	str	r3, [sp, #20]
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	9205      	str	r2, [sp, #20]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	9305      	str	r3, [sp, #20]
 800194e:	9b05      	ldr	r3, [sp, #20]
 8001950:	e068      	b.n	8001a24 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001952:	6822      	ldr	r2, [r4, #0]
 8001954:	6813      	ldr	r3, [r2, #0]
 8001956:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800195a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195c:	2300      	movs	r3, #0
 800195e:	9303      	str	r3, [sp, #12]
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	9203      	str	r2, [sp, #12]
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	9203      	str	r2, [sp, #12]
 800196a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e056      	b.n	8001a24 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001976:	6822      	ldr	r2, [r4, #0]
 8001978:	6813      	ldr	r3, [r2, #0]
 800197a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800197e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001980:	6822      	ldr	r2, [r4, #0]
 8001982:	6813      	ldr	r3, [r2, #0]
 8001984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001988:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198a:	2300      	movs	r3, #0
 800198c:	9304      	str	r3, [sp, #16]
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	9204      	str	r2, [sp, #16]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	9304      	str	r3, [sp, #16]
 8001998:	9b04      	ldr	r3, [sp, #16]
 800199a:	e043      	b.n	8001a24 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199c:	462a      	mov	r2, r5
 800199e:	4631      	mov	r1, r6
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff fda3 	bl	80014ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	f040 80ce 	bne.w	8001b48 <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019b2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80019b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019b6:	3301      	adds	r3, #1
 80019b8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80019ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019bc:	3b01      	subs	r3, #1
 80019be:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80019c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80019ca:	e02b      	b.n	8001a24 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019cc:	9500      	str	r5, [sp, #0]
 80019ce:	4633      	mov	r3, r6
 80019d0:	2200      	movs	r2, #0
 80019d2:	4940      	ldr	r1, [pc, #256]	; (8001ad4 <HAL_I2C_Mem_Read+0x25c>)
 80019d4:	4620      	mov	r0, r4
 80019d6:	f7ff fb8c 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 80019da:	2800      	cmp	r0, #0
 80019dc:	f040 80b6 	bne.w	8001b4c <HAL_I2C_Mem_Read+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e0:	6822      	ldr	r2, [r4, #0]
 80019e2:	6813      	ldr	r3, [r2, #0]
 80019e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e8:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019f0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80019f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019f4:	1c53      	adds	r3, r2, #1
 80019f6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80019f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019fa:	3b01      	subs	r3, #1
 80019fc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80019fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001a14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a16:	3b01      	subs	r3, #1
 8001a18:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a24:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d07f      	beq.n	8001b2a <HAL_I2C_Mem_Read+0x2b2>
      if (hi2c->XferSize <= 3U)
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d854      	bhi.n	8001ad8 <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d0b4      	beq.n	800199c <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d0ca      	beq.n	80019cc <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a36:	9500      	str	r5, [sp, #0]
 8001a38:	4633      	mov	r3, r6
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4925      	ldr	r1, [pc, #148]	; (8001ad4 <HAL_I2C_Mem_Read+0x25c>)
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff fb57 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 8001a44:	2800      	cmp	r0, #0
 8001a46:	f040 8083 	bne.w	8001b50 <HAL_I2C_Mem_Read+0x2d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a4a:	6822      	ldr	r2, [r4, #0]
 8001a4c:	6813      	ldr	r3, [r2, #0]
 8001a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a5a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a5e:	3301      	adds	r3, #1
 8001a60:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001a62:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a64:	3b01      	subs	r3, #1
 8001a66:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a72:	9500      	str	r5, [sp, #0]
 8001a74:	4633      	mov	r3, r6
 8001a76:	2200      	movs	r2, #0
 8001a78:	4916      	ldr	r1, [pc, #88]	; (8001ad4 <HAL_I2C_Mem_Read+0x25c>)
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7ff fb39 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 8001a80:	2800      	cmp	r0, #0
 8001a82:	d167      	bne.n	8001b54 <HAL_I2C_Mem_Read+0x2dc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a84:	6822      	ldr	r2, [r4, #0]
 8001a86:	6813      	ldr	r3, [r2, #0]
 8001a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a94:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001a96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a98:	1c53      	adds	r3, r2, #1
 8001a9a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001a9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001aa2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001ab8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001aba:	3b01      	subs	r3, #1
 8001abc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001abe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001ac8:	e7ac      	b.n	8001a24 <HAL_I2C_Mem_Read+0x1ac>
 8001aca:	bf00      	nop
 8001acc:	00100002 	.word	0x00100002
 8001ad0:	ffff0000 	.word	0xffff0000
 8001ad4:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad8:	462a      	mov	r2, r5
 8001ada:	4631      	mov	r1, r6
 8001adc:	4620      	mov	r0, r4
 8001ade:	f7ff fd05 	bl	80014ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	d138      	bne.n	8001b58 <HAL_I2C_Mem_Read+0x2e0>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001aee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001af0:	1c53      	adds	r3, r2, #1
 8001af2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001af4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001af6:	3b01      	subs	r3, #1
 8001af8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001afa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b04:	6823      	ldr	r3, [r4, #0]
 8001b06:	6959      	ldr	r1, [r3, #20]
 8001b08:	f011 0f04 	tst.w	r1, #4
 8001b0c:	d08a      	beq.n	8001a24 <HAL_I2C_Mem_Read+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b14:	3301      	adds	r3, #1
 8001b16:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001b18:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001b1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001b28:	e77c      	b.n	8001a24 <HAL_I2C_Mem_Read+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001b36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001b3a:	e6ae      	b.n	800189a <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 8001b3c:	2702      	movs	r7, #2
 8001b3e:	e6ac      	b.n	800189a <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8001b40:	2702      	movs	r7, #2
 8001b42:	e6aa      	b.n	800189a <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 8001b44:	2701      	movs	r7, #1
 8001b46:	e6a8      	b.n	800189a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001b48:	2701      	movs	r7, #1
 8001b4a:	e6a6      	b.n	800189a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001b4c:	2701      	movs	r7, #1
 8001b4e:	e6a4      	b.n	800189a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001b50:	2701      	movs	r7, #1
 8001b52:	e6a2      	b.n	800189a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8001b54:	2701      	movs	r7, #1
 8001b56:	e6a0      	b.n	800189a <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 8001b58:	2701      	movs	r7, #1
 8001b5a:	e69e      	b.n	800189a <HAL_I2C_Mem_Read+0x22>

08001b5c <HAL_I2C_IsDeviceReady>:
{
 8001b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b60:	b085      	sub	sp, #20
 8001b62:	4604      	mov	r4, r0
 8001b64:	4688      	mov	r8, r1
 8001b66:	4691      	mov	r9, r2
 8001b68:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8001b6a:	f7ff f921 	bl	8000db0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d003      	beq.n	8001b80 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001b78:	2002      	movs	r0, #2
}
 8001b7a:	b005      	add	sp, #20
 8001b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b80:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b82:	9000      	str	r0, [sp, #0]
 8001b84:	2319      	movs	r3, #25
 8001b86:	2201      	movs	r2, #1
 8001b88:	4957      	ldr	r1, [pc, #348]	; (8001ce8 <HAL_I2C_IsDeviceReady+0x18c>)
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fab1 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	f040 80a0 	bne.w	8001cd6 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8001b96:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	f000 809d 	beq.w	8001cda <HAL_I2C_IsDeviceReady+0x17e>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f012 0f01 	tst.w	r2, #1
 8001bae:	d103      	bne.n	8001bb8 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bb8:	6822      	ldr	r2, [r4, #0]
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bc0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc2:	2324      	movs	r3, #36	; 0x24
 8001bc4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc8:	2700      	movs	r7, #0
 8001bca:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bcc:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_I2C_IsDeviceReady+0x190>)
 8001bce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bd0:	e040      	b.n	8001c54 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bda:	d002      	beq.n	8001be2 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be0:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001be2:	2003      	movs	r0, #3
 8001be4:	e7c9      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001be6:	23a0      	movs	r3, #160	; 0xa0
 8001be8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bec:	6822      	ldr	r2, [r4, #0]
 8001bee:	6953      	ldr	r3, [r2, #20]
 8001bf0:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bf4:	6952      	ldr	r2, [r2, #20]
 8001bf6:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001bfa:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
 8001bfe:	fa5f fc8c 	uxtb.w	ip, ip
 8001c02:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
 8001c06:	d009      	beq.n	8001c1c <HAL_I2C_IsDeviceReady+0xc0>
 8001c08:	b943      	cbnz	r3, 8001c1c <HAL_I2C_IsDeviceReady+0xc0>
 8001c0a:	b93a      	cbnz	r2, 8001c1c <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c0c:	f7ff f8d0 	bl	8000db0 <HAL_GetTick>
 8001c10:	1b80      	subs	r0, r0, r6
 8001c12:	42a8      	cmp	r0, r5
 8001c14:	d8e7      	bhi.n	8001be6 <HAL_I2C_IsDeviceReady+0x8a>
 8001c16:	2d00      	cmp	r5, #0
 8001c18:	d1e8      	bne.n	8001bec <HAL_I2C_IsDeviceReady+0x90>
 8001c1a:	e7e4      	b.n	8001be6 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	f012 0f02 	tst.w	r2, #2
 8001c2a:	d131      	bne.n	8001c90 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c32:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c3a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c3c:	9600      	str	r6, [sp, #0]
 8001c3e:	2319      	movs	r3, #25
 8001c40:	2201      	movs	r2, #1
 8001c42:	4929      	ldr	r1, [pc, #164]	; (8001ce8 <HAL_I2C_IsDeviceReady+0x18c>)
 8001c44:	4620      	mov	r0, r4
 8001c46:	f7ff fa54 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	d149      	bne.n	8001ce2 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8001c4e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8001c50:	454f      	cmp	r7, r9
 8001c52:	d238      	bcs.n	8001cc6 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	6813      	ldr	r3, [r2, #0]
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c5e:	9600      	str	r6, [sp, #0]
 8001c60:	462b      	mov	r3, r5
 8001c62:	2200      	movs	r2, #0
 8001c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff fa42 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	d1af      	bne.n	8001bd2 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8001c78:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f899 	bl	8000db0 <HAL_GetTick>
 8001c7e:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c80:	6822      	ldr	r2, [r4, #0]
 8001c82:	6953      	ldr	r3, [r2, #20]
 8001c84:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c88:	6952      	ldr	r2, [r2, #20]
 8001c8a:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c8e:	e7b4      	b.n	8001bfa <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c96:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9303      	str	r3, [sp, #12]
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	9203      	str	r2, [sp, #12]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	9303      	str	r3, [sp, #12]
 8001ca6:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ca8:	9600      	str	r6, [sp, #0]
 8001caa:	2319      	movs	r3, #25
 8001cac:	2201      	movs	r2, #1
 8001cae:	490e      	ldr	r1, [pc, #56]	; (8001ce8 <HAL_I2C_IsDeviceReady+0x18c>)
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f7ff fa1e 	bl	80010f2 <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	b990      	cbnz	r0, 8001cde <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 8001cc4:	e759      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	e751      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	e74f      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8001cda:	2002      	movs	r0, #2
 8001cdc:	e74d      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8001cde:	2001      	movs	r0, #1
 8001ce0:	e74b      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	e749      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x1e>
 8001ce6:	bf00      	nop
 8001ce8:	00100002 	.word	0x00100002
 8001cec:	ffff0000 	.word	0xffff0000

08001cf0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	f000 81e0 	beq.w	80020b6 <HAL_RCC_OscConfig+0x3c6>
{
 8001cf6:	b570      	push	{r4, r5, r6, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfc:	6803      	ldr	r3, [r0, #0]
 8001cfe:	f013 0f01 	tst.w	r3, #1
 8001d02:	d03b      	beq.n	8001d7c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d04:	4b9f      	ldr	r3, [pc, #636]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d02c      	beq.n	8001d6a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d10:	4b9c      	ldr	r3, [pc, #624]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d021      	beq.n	8001d60 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1c:	6863      	ldr	r3, [r4, #4]
 8001d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d22:	d04f      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xd4>
 8001d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d28:	d052      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xe0>
 8001d2a:	4b96      	ldr	r3, [pc, #600]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d3c:	6863      	ldr	r3, [r4, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d050      	beq.n	8001de4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff f835 	bl	8000db0 <HAL_GetTick>
 8001d46:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d48:	4b8e      	ldr	r3, [pc, #568]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d50:	d114      	bne.n	8001d7c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d52:	f7ff f82d 	bl	8000db0 <HAL_GetTick>
 8001d56:	1b40      	subs	r0, r0, r5
 8001d58:	2864      	cmp	r0, #100	; 0x64
 8001d5a:	d9f5      	bls.n	8001d48 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	e1b1      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d60:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001d68:	d0d8      	beq.n	8001d1c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6a:	4b86      	ldr	r3, [pc, #536]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d72:	d003      	beq.n	8001d7c <HAL_RCC_OscConfig+0x8c>
 8001d74:	6863      	ldr	r3, [r4, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 819f 	beq.w	80020ba <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	f013 0f02 	tst.w	r3, #2
 8001d82:	d054      	beq.n	8001e2e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d84:	4b7f      	ldr	r3, [pc, #508]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f013 0f0c 	tst.w	r3, #12
 8001d8c:	d03e      	beq.n	8001e0c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8e:	4b7d      	ldr	r3, [pc, #500]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d033      	beq.n	8001e02 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d9a:	68e3      	ldr	r3, [r4, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d068      	beq.n	8001e72 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da0:	4b79      	ldr	r3, [pc, #484]	; (8001f88 <HAL_RCC_OscConfig+0x298>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff f803 	bl	8000db0 <HAL_GetTick>
 8001daa:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	4b75      	ldr	r3, [pc, #468]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f013 0f02 	tst.w	r3, #2
 8001db4:	d154      	bne.n	8001e60 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db6:	f7fe fffb 	bl	8000db0 <HAL_GetTick>
 8001dba:	1b40      	subs	r0, r0, r5
 8001dbc:	2802      	cmp	r0, #2
 8001dbe:	d9f5      	bls.n	8001dac <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	e17f      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc4:	4a6f      	ldr	r2, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001dc6:	6813      	ldr	r3, [r2, #0]
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e7b5      	b.n	8001d3c <HAL_RCC_OscConfig+0x4c>
 8001dd0:	4b6c      	ldr	r3, [pc, #432]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e7ab      	b.n	8001d3c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001de4:	f7fe ffe4 	bl	8000db0 <HAL_GetTick>
 8001de8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	4b66      	ldr	r3, [pc, #408]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001df2:	d0c3      	beq.n	8001d7c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df4:	f7fe ffdc 	bl	8000db0 <HAL_GetTick>
 8001df8:	1b40      	subs	r0, r0, r5
 8001dfa:	2864      	cmp	r0, #100	; 0x64
 8001dfc:	d9f5      	bls.n	8001dea <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001dfe:	2003      	movs	r0, #3
 8001e00:	e160      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e02:	4b60      	ldr	r3, [pc, #384]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e0a:	d1c6      	bne.n	8001d9a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0c:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f013 0f02 	tst.w	r3, #2
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_OscConfig+0x12e>
 8001e16:	68e3      	ldr	r3, [r4, #12]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	f040 8150 	bne.w	80020be <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4a59      	ldr	r2, [pc, #356]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001e20:	6813      	ldr	r3, [r2, #0]
 8001e22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e26:	6921      	ldr	r1, [r4, #16]
 8001e28:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e2c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	f013 0f08 	tst.w	r3, #8
 8001e34:	d042      	beq.n	8001ebc <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e36:	6963      	ldr	r3, [r4, #20]
 8001e38:	b36b      	cbz	r3, 8001e96 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCC_OscConfig+0x298>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7fe ffb5 	bl	8000db0 <HAL_GetTick>
 8001e46:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e48:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4c:	f013 0f02 	tst.w	r3, #2
 8001e50:	d134      	bne.n	8001ebc <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e52:	f7fe ffad 	bl	8000db0 <HAL_GetTick>
 8001e56:	1b40      	subs	r0, r0, r5
 8001e58:	2802      	cmp	r0, #2
 8001e5a:	d9f5      	bls.n	8001e48 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	e131      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e60:	4a48      	ldr	r2, [pc, #288]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001e62:	6813      	ldr	r3, [r2, #0]
 8001e64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e68:	6921      	ldr	r1, [r4, #16]
 8001e6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e7dd      	b.n	8001e2e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001e72:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <HAL_RCC_OscConfig+0x298>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e78:	f7fe ff9a 	bl	8000db0 <HAL_GetTick>
 8001e7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f013 0f02 	tst.w	r3, #2
 8001e86:	d0d2      	beq.n	8001e2e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e88:	f7fe ff92 	bl	8000db0 <HAL_GetTick>
 8001e8c:	1b40      	subs	r0, r0, r5
 8001e8e:	2802      	cmp	r0, #2
 8001e90:	d9f5      	bls.n	8001e7e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001e92:	2003      	movs	r0, #3
 8001e94:	e116      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <HAL_RCC_OscConfig+0x298>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7fe ff87 	bl	8000db0 <HAL_GetTick>
 8001ea2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea8:	f013 0f02 	tst.w	r3, #2
 8001eac:	d006      	beq.n	8001ebc <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eae:	f7fe ff7f 	bl	8000db0 <HAL_GetTick>
 8001eb2:	1b40      	subs	r0, r0, r5
 8001eb4:	2802      	cmp	r0, #2
 8001eb6:	d9f5      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001eb8:	2003      	movs	r0, #3
 8001eba:	e103      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	f013 0f04 	tst.w	r3, #4
 8001ec2:	d077      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec4:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001ecc:	d133      	bne.n	8001f36 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ee6:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_RCC_OscConfig+0x29c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ef0:	d023      	beq.n	8001f3a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef2:	68a3      	ldr	r3, [r4, #8]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d034      	beq.n	8001f62 <HAL_RCC_OscConfig+0x272>
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d038      	beq.n	8001f6e <HAL_RCC_OscConfig+0x27e>
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	671a      	str	r2, [r3, #112]	; 0x70
 8001f06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f08:	f022 0204 	bic.w	r2, r2, #4
 8001f0c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f0e:	68a3      	ldr	r3, [r4, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d03d      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f14:	f7fe ff4c 	bl	8000db0 <HAL_GetTick>
 8001f18:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	f013 0f02 	tst.w	r3, #2
 8001f22:	d146      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7fe ff44 	bl	8000db0 <HAL_GetTick>
 8001f28:	1b80      	subs	r0, r0, r6
 8001f2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f2e:	4298      	cmp	r0, r3
 8001f30:	d9f3      	bls.n	8001f1a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001f32:	2003      	movs	r0, #3
 8001f34:	e0c6      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8001f36:	2500      	movs	r5, #0
 8001f38:	e7d6      	b.n	8001ee8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_RCC_OscConfig+0x29c>)
 8001f3c:	6813      	ldr	r3, [r2, #0]
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f44:	f7fe ff34 	bl	8000db0 <HAL_GetTick>
 8001f48:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_RCC_OscConfig+0x29c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f52:	d1ce      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7fe ff2c 	bl	8000db0 <HAL_GetTick>
 8001f58:	1b80      	subs	r0, r0, r6
 8001f5a:	2802      	cmp	r0, #2
 8001f5c:	d9f5      	bls.n	8001f4a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001f5e:	2003      	movs	r0, #3
 8001f60:	e0b0      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001f64:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	e7cf      	b.n	8001f0e <HAL_RCC_OscConfig+0x21e>
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_OscConfig+0x294>)
 8001f70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f72:	f042 0204 	orr.w	r2, r2, #4
 8001f76:	671a      	str	r2, [r3, #112]	; 0x70
 8001f78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	671a      	str	r2, [r3, #112]	; 0x70
 8001f80:	e7c5      	b.n	8001f0e <HAL_RCC_OscConfig+0x21e>
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	42470000 	.word	0x42470000
 8001f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f90:	f7fe ff0e 	bl	8000db0 <HAL_GetTick>
 8001f94:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f96:	4b52      	ldr	r3, [pc, #328]	; (80020e0 <HAL_RCC_OscConfig+0x3f0>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	f013 0f02 	tst.w	r3, #2
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe ff06 	bl	8000db0 <HAL_GetTick>
 8001fa4:	1b80      	subs	r0, r0, r6
 8001fa6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001faa:	4298      	cmp	r0, r3
 8001fac:	d9f3      	bls.n	8001f96 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001fae:	2003      	movs	r0, #3
 8001fb0:	e088      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb2:	b9ed      	cbnz	r5, 8001ff0 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb4:	69a3      	ldr	r3, [r4, #24]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8083 	beq.w	80020c2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fbc:	4a48      	ldr	r2, [pc, #288]	; (80020e0 <HAL_RCC_OscConfig+0x3f0>)
 8001fbe:	6892      	ldr	r2, [r2, #8]
 8001fc0:	f002 020c 	and.w	r2, r2, #12
 8001fc4:	2a08      	cmp	r2, #8
 8001fc6:	d051      	beq.n	800206c <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d017      	beq.n	8001ffc <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b45      	ldr	r3, [pc, #276]	; (80020e4 <HAL_RCC_OscConfig+0x3f4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe feed 	bl	8000db0 <HAL_GetTick>
 8001fd6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd8:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_OscConfig+0x3f0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001fe0:	d042      	beq.n	8002068 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7fe fee5 	bl	8000db0 <HAL_GetTick>
 8001fe6:	1b00      	subs	r0, r0, r4
 8001fe8:	2802      	cmp	r0, #2
 8001fea:	d9f5      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001fec:	2003      	movs	r0, #3
 8001fee:	e069      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff0:	4a3b      	ldr	r2, [pc, #236]	; (80020e0 <HAL_RCC_OscConfig+0x3f0>)
 8001ff2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	e7db      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <HAL_RCC_OscConfig+0x3f4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002002:	f7fe fed5 	bl	8000db0 <HAL_GetTick>
 8002006:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002008:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <HAL_RCC_OscConfig+0x3f0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002010:	d006      	beq.n	8002020 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002012:	f7fe fecd 	bl	8000db0 <HAL_GetTick>
 8002016:	1b40      	subs	r0, r0, r5
 8002018:	2802      	cmp	r0, #2
 800201a:	d9f5      	bls.n	8002008 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800201c:	2003      	movs	r0, #3
 800201e:	e051      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002020:	69e3      	ldr	r3, [r4, #28]
 8002022:	6a22      	ldr	r2, [r4, #32]
 8002024:	4313      	orrs	r3, r2
 8002026:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002028:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800202c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800202e:	0852      	lsrs	r2, r2, #1
 8002030:	3a01      	subs	r2, #1
 8002032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002036:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002038:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800203c:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <HAL_RCC_OscConfig+0x3f0>)
 800203e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_RCC_OscConfig+0x3f4>)
 8002042:	2201      	movs	r2, #1
 8002044:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002046:	f7fe feb3 	bl	8000db0 <HAL_GetTick>
 800204a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x3f0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002054:	d106      	bne.n	8002064 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002056:	f7fe feab 	bl	8000db0 <HAL_GetTick>
 800205a:	1b00      	subs	r0, r0, r4
 800205c:	2802      	cmp	r0, #2
 800205e:	d9f5      	bls.n	800204c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002060:	2003      	movs	r0, #3
 8002062:	e02f      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002064:	2000      	movs	r0, #0
 8002066:	e02d      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
 8002068:	2000      	movs	r0, #0
 800206a:	e02b      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	2b01      	cmp	r3, #1
 800206e:	d02b      	beq.n	80020c8 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_RCC_OscConfig+0x3f0>)
 8002072:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002074:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002078:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207a:	4291      	cmp	r1, r2
 800207c:	d126      	bne.n	80020cc <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800207e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002082:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002084:	428a      	cmp	r2, r1
 8002086:	d123      	bne.n	80020d0 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002088:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800208a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800208e:	401a      	ands	r2, r3
 8002090:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002094:	d11e      	bne.n	80020d4 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002096:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800209a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800209c:	0852      	lsrs	r2, r2, #1
 800209e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80020aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ac:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80020b0:	d114      	bne.n	80020dc <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80020b2:	2000      	movs	r0, #0
 80020b4:	e006      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80020b6:	2001      	movs	r0, #1
}
 80020b8:	4770      	bx	lr
        return HAL_ERROR;
 80020ba:	2001      	movs	r0, #1
 80020bc:	e002      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80020be:	2001      	movs	r0, #1
 80020c0:	e000      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80020c2:	2000      	movs	r0, #0
}
 80020c4:	b002      	add	sp, #8
 80020c6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80020c8:	2001      	movs	r0, #1
 80020ca:	e7fb      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80020cc:	2001      	movs	r0, #1
 80020ce:	e7f9      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
 80020d0:	2001      	movs	r0, #1
 80020d2:	e7f7      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
 80020d4:	2001      	movs	r0, #1
 80020d6:	e7f5      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
 80020d8:	2001      	movs	r0, #1
 80020da:	e7f3      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
 80020dc:	2001      	movs	r0, #1
 80020de:	e7f1      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
 80020e0:	40023800 	.word	0x40023800
 80020e4:	42470000 	.word	0x42470000

080020e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d041      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x92>
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d141      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002108:	d012      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_RCC_GetSysClockFreq+0x9c>)
 800210c:	6859      	ldr	r1, [r3, #4]
 800210e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002112:	481d      	ldr	r0, [pc, #116]	; (8002188 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002114:	2300      	movs	r3, #0
 8002116:	fba1 0100 	umull	r0, r1, r1, r0
 800211a:	f7fe f8b9 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002126:	3301      	adds	r3, #1
 8002128:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800212a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800212e:	e027      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002132:	6858      	ldr	r0, [r3, #4]
 8002134:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002138:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 800213c:	ebbc 0c00 	subs.w	ip, ip, r0
 8002140:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002144:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002148:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800214c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002150:	ebb1 010c 	subs.w	r1, r1, ip
 8002154:	eb63 030e 	sbc.w	r3, r3, lr
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800215e:	00c9      	lsls	r1, r1, #3
 8002160:	eb11 0c00 	adds.w	ip, r1, r0
 8002164:	f143 0300 	adc.w	r3, r3, #0
 8002168:	0299      	lsls	r1, r3, #10
 800216a:	2300      	movs	r3, #0
 800216c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002170:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002174:	f7fe f88c 	bl	8000290 <__aeabi_uldivmod>
 8002178:	e7d1      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 800217a:	4803      	ldr	r0, [pc, #12]	; (8002188 <HAL_RCC_GetSysClockFreq+0xa0>)
 800217c:	e000      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x98>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800217e:	4803      	ldr	r0, [pc, #12]	; (800218c <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002180:	bd08      	pop	{r3, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	017d7840 	.word	0x017d7840
 800218c:	00f42400 	.word	0x00f42400

08002190 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002190:	2800      	cmp	r0, #0
 8002192:	f000 809b 	beq.w	80022cc <HAL_RCC_ClockConfig+0x13c>
{
 8002196:	b570      	push	{r4, r5, r6, lr}
 8002198:	460d      	mov	r5, r1
 800219a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <HAL_RCC_ClockConfig+0x14c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	428b      	cmp	r3, r1
 80021a6:	d208      	bcs.n	80021ba <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a8:	b2cb      	uxtb	r3, r1
 80021aa:	4a4c      	ldr	r2, [pc, #304]	; (80022dc <HAL_RCC_ClockConfig+0x14c>)
 80021ac:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	428b      	cmp	r3, r1
 80021b6:	f040 808b 	bne.w	80022d0 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	f013 0f02 	tst.w	r3, #2
 80021c0:	d017      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c2:	f013 0f04 	tst.w	r3, #4
 80021c6:	d004      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4a45      	ldr	r2, [pc, #276]	; (80022e0 <HAL_RCC_ClockConfig+0x150>)
 80021ca:	6893      	ldr	r3, [r2, #8]
 80021cc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	f013 0f08 	tst.w	r3, #8
 80021d8:	d004      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021da:	4a41      	ldr	r2, [pc, #260]	; (80022e0 <HAL_RCC_ClockConfig+0x150>)
 80021dc:	6893      	ldr	r3, [r2, #8]
 80021de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021e2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4a3e      	ldr	r2, [pc, #248]	; (80022e0 <HAL_RCC_ClockConfig+0x150>)
 80021e6:	6893      	ldr	r3, [r2, #8]
 80021e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021ec:	68a1      	ldr	r1, [r4, #8]
 80021ee:	430b      	orrs	r3, r1
 80021f0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	f013 0f01 	tst.w	r3, #1
 80021f8:	d032      	beq.n	8002260 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	6863      	ldr	r3, [r4, #4]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d021      	beq.n	8002244 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002200:	1e9a      	subs	r2, r3, #2
 8002202:	2a01      	cmp	r2, #1
 8002204:	d925      	bls.n	8002252 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	4a36      	ldr	r2, [pc, #216]	; (80022e0 <HAL_RCC_ClockConfig+0x150>)
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	f012 0f02 	tst.w	r2, #2
 800220e:	d061      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002210:	4933      	ldr	r1, [pc, #204]	; (80022e0 <HAL_RCC_ClockConfig+0x150>)
 8002212:	688a      	ldr	r2, [r1, #8]
 8002214:	f022 0203 	bic.w	r2, r2, #3
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800221c:	f7fe fdc8 	bl	8000db0 <HAL_GetTick>
 8002220:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <HAL_RCC_ClockConfig+0x150>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	6862      	ldr	r2, [r4, #4]
 800222c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002230:	d016      	beq.n	8002260 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002232:	f7fe fdbd 	bl	8000db0 <HAL_GetTick>
 8002236:	1b80      	subs	r0, r0, r6
 8002238:	f241 3388 	movw	r3, #5000	; 0x1388
 800223c:	4298      	cmp	r0, r3
 800223e:	d9f0      	bls.n	8002222 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002240:	2003      	movs	r0, #3
 8002242:	e042      	b.n	80022ca <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002244:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <HAL_RCC_ClockConfig+0x150>)
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800224c:	d1e0      	bne.n	8002210 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800224e:	2001      	movs	r0, #1
 8002250:	e03b      	b.n	80022ca <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <HAL_RCC_ClockConfig+0x150>)
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800225a:	d1d9      	bne.n	8002210 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800225c:	2001      	movs	r0, #1
 800225e:	e034      	b.n	80022ca <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <HAL_RCC_ClockConfig+0x14c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	42ab      	cmp	r3, r5
 800226a:	d907      	bls.n	800227c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226c:	b2ea      	uxtb	r2, r5
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_ClockConfig+0x14c>)
 8002270:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	42ab      	cmp	r3, r5
 800227a:	d12d      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	f013 0f04 	tst.w	r3, #4
 8002282:	d006      	beq.n	8002292 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <HAL_RCC_ClockConfig+0x150>)
 8002286:	6893      	ldr	r3, [r2, #8]
 8002288:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800228c:	68e1      	ldr	r1, [r4, #12]
 800228e:	430b      	orrs	r3, r1
 8002290:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002292:	6823      	ldr	r3, [r4, #0]
 8002294:	f013 0f08 	tst.w	r3, #8
 8002298:	d007      	beq.n	80022aa <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800229a:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <HAL_RCC_ClockConfig+0x150>)
 800229c:	6893      	ldr	r3, [r2, #8]
 800229e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80022a2:	6921      	ldr	r1, [r4, #16]
 80022a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022a8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022aa:	f7ff ff1d 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_RCC_ClockConfig+0x150>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022b6:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <HAL_RCC_ClockConfig+0x154>)
 80022b8:	5cd3      	ldrb	r3, [r2, r3]
 80022ba:	40d8      	lsrs	r0, r3
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <HAL_RCC_ClockConfig+0x158>)
 80022be:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_RCC_ClockConfig+0x15c>)
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	f7fe fd28 	bl	8000d18 <HAL_InitTick>
  return HAL_OK;
 80022c8:	2000      	movs	r0, #0
}
 80022ca:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80022cc:	2001      	movs	r0, #1
}
 80022ce:	4770      	bx	lr
      return HAL_ERROR;
 80022d0:	2001      	movs	r0, #1
 80022d2:	e7fa      	b.n	80022ca <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
 80022d6:	e7f8      	b.n	80022ca <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80022d8:	2001      	movs	r0, #1
 80022da:	e7f6      	b.n	80022ca <HAL_RCC_ClockConfig+0x13a>
 80022dc:	40023c00 	.word	0x40023c00
 80022e0:	40023800 	.word	0x40023800
 80022e4:	08007b8c 	.word	0x08007b8c
 80022e8:	2000004c 	.word	0x2000004c
 80022ec:	20000054 	.word	0x20000054

080022f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80022f0:	4b01      	ldr	r3, [pc, #4]	; (80022f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2000004c 	.word	0x2000004c

080022fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022fe:	f7ff fff7 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002302:	4b04      	ldr	r3, [pc, #16]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800230a:	4a03      	ldr	r2, [pc, #12]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800230c:	5cd3      	ldrb	r3, [r2, r3]
}
 800230e:	40d8      	lsrs	r0, r3
 8002310:	bd08      	pop	{r3, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	08007b9c 	.word	0x08007b9c

0800231c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800231c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800231e:	f7ff ffe7 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800232a:	4a03      	ldr	r2, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800232c:	5cd3      	ldrb	r3, [r2, r3]
}
 800232e:	40d8      	lsrs	r0, r3
 8002330:	bd08      	pop	{r3, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	08007b9c 	.word	0x08007b9c

0800233c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800233c:	b510      	push	{r4, lr}
 800233e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002340:	6802      	ldr	r2, [r0, #0]
 8002342:	6913      	ldr	r3, [r2, #16]
 8002344:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002348:	68c1      	ldr	r1, [r0, #12]
 800234a:	430b      	orrs	r3, r1
 800234c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800234e:	6883      	ldr	r3, [r0, #8]
 8002350:	6902      	ldr	r2, [r0, #16]
 8002352:	431a      	orrs	r2, r3
 8002354:	6943      	ldr	r3, [r0, #20]
 8002356:	431a      	orrs	r2, r3
 8002358:	69c3      	ldr	r3, [r0, #28]
 800235a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800235c:	6801      	ldr	r1, [r0, #0]
 800235e:	68cb      	ldr	r3, [r1, #12]
 8002360:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002364:	f023 030c 	bic.w	r3, r3, #12
 8002368:	4313      	orrs	r3, r2
 800236a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800236c:	6802      	ldr	r2, [r0, #0]
 800236e:	6953      	ldr	r3, [r2, #20]
 8002370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002374:	6981      	ldr	r1, [r0, #24]
 8002376:	430b      	orrs	r3, r1
 8002378:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800237a:	6803      	ldr	r3, [r0, #0]
 800237c:	4a31      	ldr	r2, [pc, #196]	; (8002444 <UART_SetConfig+0x108>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d006      	beq.n	8002390 <UART_SetConfig+0x54>
 8002382:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002386:	4293      	cmp	r3, r2
 8002388:	d002      	beq.n	8002390 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800238a:	f7ff ffb7 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 800238e:	e001      	b.n	8002394 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002390:	f7ff ffc4 	bl	800231c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002394:	69e3      	ldr	r3, [r4, #28]
 8002396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800239a:	d029      	beq.n	80023f0 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800239c:	2100      	movs	r1, #0
 800239e:	1803      	adds	r3, r0, r0
 80023a0:	4149      	adcs	r1, r1
 80023a2:	181b      	adds	r3, r3, r0
 80023a4:	f141 0100 	adc.w	r1, r1, #0
 80023a8:	00c9      	lsls	r1, r1, #3
 80023aa:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	1818      	adds	r0, r3, r0
 80023b2:	6863      	ldr	r3, [r4, #4]
 80023b4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80023b8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80023bc:	f141 0100 	adc.w	r1, r1, #0
 80023c0:	f7fd ff66 	bl	8000290 <__aeabi_uldivmod>
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <UART_SetConfig+0x10c>)
 80023c6:	fba2 3100 	umull	r3, r1, r2, r0
 80023ca:	0949      	lsrs	r1, r1, #5
 80023cc:	2364      	movs	r3, #100	; 0x64
 80023ce:	fb03 0311 	mls	r3, r3, r1, r0
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	3332      	adds	r3, #50	; 0x32
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	6821      	ldr	r1, [r4, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }
}
 80023ee:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023f0:	2300      	movs	r3, #0
 80023f2:	1802      	adds	r2, r0, r0
 80023f4:	eb43 0103 	adc.w	r1, r3, r3
 80023f8:	1812      	adds	r2, r2, r0
 80023fa:	f141 0100 	adc.w	r1, r1, #0
 80023fe:	00c9      	lsls	r1, r1, #3
 8002400:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002404:	00d2      	lsls	r2, r2, #3
 8002406:	1810      	adds	r0, r2, r0
 8002408:	f141 0100 	adc.w	r1, r1, #0
 800240c:	6862      	ldr	r2, [r4, #4]
 800240e:	1892      	adds	r2, r2, r2
 8002410:	415b      	adcs	r3, r3
 8002412:	f7fd ff3d 	bl	8000290 <__aeabi_uldivmod>
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <UART_SetConfig+0x10c>)
 8002418:	fba2 3100 	umull	r3, r1, r2, r0
 800241c:	0949      	lsrs	r1, r1, #5
 800241e:	2364      	movs	r3, #100	; 0x64
 8002420:	fb03 0311 	mls	r3, r3, r1, r0
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	3332      	adds	r3, #50	; 0x32
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	005a      	lsls	r2, r3, #1
 8002430:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002434:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	6821      	ldr	r1, [r4, #0]
 800243e:	4413      	add	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
 8002442:	e7d4      	b.n	80023ee <UART_SetConfig+0xb2>
 8002444:	40011000 	.word	0x40011000
 8002448:	51eb851f 	.word	0x51eb851f

0800244c <UART_WaitOnFlagUntilTimeout>:
{
 800244c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002450:	4605      	mov	r5, r0
 8002452:	460f      	mov	r7, r1
 8002454:	4616      	mov	r6, r2
 8002456:	4699      	mov	r9, r3
 8002458:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	681c      	ldr	r4, [r3, #0]
 8002460:	ea37 0404 	bics.w	r4, r7, r4
 8002464:	bf0c      	ite	eq
 8002466:	2401      	moveq	r4, #1
 8002468:	2400      	movne	r4, #0
 800246a:	42b4      	cmp	r4, r6
 800246c:	d12d      	bne.n	80024ca <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 800246e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002472:	d0f3      	beq.n	800245c <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002474:	f1b8 0f00 	cmp.w	r8, #0
 8002478:	d005      	beq.n	8002486 <UART_WaitOnFlagUntilTimeout+0x3a>
 800247a:	f7fe fc99 	bl	8000db0 <HAL_GetTick>
 800247e:	eba0 0009 	sub.w	r0, r0, r9
 8002482:	4540      	cmp	r0, r8
 8002484:	d9ea      	bls.n	800245c <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002486:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002488:	f102 030c 	add.w	r3, r2, #12
 800248c:	e853 3f00 	ldrex	r3, [r3]
 8002490:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002494:	320c      	adds	r2, #12
 8002496:	e842 3100 	strex	r1, r3, [r2]
 800249a:	2900      	cmp	r1, #0
 800249c:	d1f3      	bne.n	8002486 <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a0:	f102 0314 	add.w	r3, r2, #20
 80024a4:	e853 3f00 	ldrex	r3, [r3]
 80024a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ac:	3214      	adds	r2, #20
 80024ae:	e842 3100 	strex	r1, r3, [r2]
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d1f3      	bne.n	800249e <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 80024b6:	2320      	movs	r3, #32
 80024b8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024bc:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80024c0:	2300      	movs	r3, #0
 80024c2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 80024c6:	2003      	movs	r0, #3
 80024c8:	e000      	b.n	80024cc <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 80024ca:	2000      	movs	r0, #0
}
 80024cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080024d0 <HAL_UART_Init>:
  if (huart == NULL)
 80024d0:	b358      	cbz	r0, 800252a <HAL_UART_Init+0x5a>
{
 80024d2:	b510      	push	{r4, lr}
 80024d4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80024d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024da:	b30b      	cbz	r3, 8002520 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80024dc:	2324      	movs	r3, #36	; 0x24
 80024de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80024e2:	6822      	ldr	r2, [r4, #0]
 80024e4:	68d3      	ldr	r3, [r2, #12]
 80024e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024ea:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff ff25 	bl	800233c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f2:	6822      	ldr	r2, [r4, #0]
 80024f4:	6913      	ldr	r3, [r2, #16]
 80024f6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80024fa:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024fc:	6822      	ldr	r2, [r4, #0]
 80024fe:	6953      	ldr	r3, [r2, #20]
 8002500:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002504:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002506:	6822      	ldr	r2, [r4, #0]
 8002508:	68d3      	ldr	r3, [r2, #12]
 800250a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800250e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002510:	2000      	movs	r0, #0
 8002512:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002514:	2320      	movs	r3, #32
 8002516:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800251a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800251e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002520:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002524:	f7fe fb28 	bl	8000b78 <HAL_UART_MspInit>
 8002528:	e7d8      	b.n	80024dc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800252a:	2001      	movs	r0, #1
}
 800252c:	4770      	bx	lr

0800252e <HAL_UART_Transmit>:
{
 800252e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002536:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b20      	cmp	r3, #32
 800253e:	d154      	bne.n	80025ea <HAL_UART_Transmit+0xbc>
 8002540:	4604      	mov	r4, r0
 8002542:	460d      	mov	r5, r1
 8002544:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002546:	2900      	cmp	r1, #0
 8002548:	d053      	beq.n	80025f2 <HAL_UART_Transmit+0xc4>
 800254a:	2a00      	cmp	r2, #0
 800254c:	d053      	beq.n	80025f6 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800254e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002552:	2b01      	cmp	r3, #1
 8002554:	d051      	beq.n	80025fa <HAL_UART_Transmit+0xcc>
 8002556:	2301      	movs	r3, #1
 8002558:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255c:	2300      	movs	r3, #0
 800255e:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002560:	2321      	movs	r3, #33	; 0x21
 8002562:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002566:	f7fe fc23 	bl	8000db0 <HAL_GetTick>
 800256a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800256c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002570:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002574:	68a3      	ldr	r3, [r4, #8]
 8002576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257a:	d005      	beq.n	8002588 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 800257c:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8002580:	2300      	movs	r3, #0
 8002582:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002586:	e012      	b.n	80025ae <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002588:	6923      	ldr	r3, [r4, #16]
 800258a:	b113      	cbz	r3, 8002592 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 800258c:	f04f 0800 	mov.w	r8, #0
 8002590:	e7f6      	b.n	8002580 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 8002592:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002594:	2500      	movs	r5, #0
 8002596:	e7f3      	b.n	8002580 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002598:	f838 3b02 	ldrh.w	r3, [r8], #2
 800259c:	6822      	ldr	r2, [r4, #0]
 800259e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a2:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80025a4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80025a6:	b292      	uxth	r2, r2
 80025a8:	3a01      	subs	r2, #1
 80025aa:	b292      	uxth	r2, r2
 80025ac:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025ae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	b173      	cbz	r3, 80025d2 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025b4:	9600      	str	r6, [sp, #0]
 80025b6:	463b      	mov	r3, r7
 80025b8:	2200      	movs	r2, #0
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	4620      	mov	r0, r4
 80025be:	f7ff ff45 	bl	800244c <UART_WaitOnFlagUntilTimeout>
 80025c2:	b9e0      	cbnz	r0, 80025fe <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 80025c4:	2d00      	cmp	r5, #0
 80025c6:	d0e7      	beq.n	8002598 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025d0:	e7e8      	b.n	80025a4 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d2:	9600      	str	r6, [sp, #0]
 80025d4:	463b      	mov	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	2140      	movs	r1, #64	; 0x40
 80025da:	4620      	mov	r0, r4
 80025dc:	f7ff ff36 	bl	800244c <UART_WaitOnFlagUntilTimeout>
 80025e0:	b978      	cbnz	r0, 8002602 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 80025e2:	2320      	movs	r3, #32
 80025e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80025e8:	e000      	b.n	80025ec <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80025ea:	2002      	movs	r0, #2
}
 80025ec:	b002      	add	sp, #8
 80025ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80025f2:	2001      	movs	r0, #1
 80025f4:	e7fa      	b.n	80025ec <HAL_UART_Transmit+0xbe>
 80025f6:	2001      	movs	r0, #1
 80025f8:	e7f8      	b.n	80025ec <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 80025fa:	2002      	movs	r0, #2
 80025fc:	e7f6      	b.n	80025ec <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 80025fe:	2003      	movs	r0, #3
 8002600:	e7f4      	b.n	80025ec <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8002602:	2003      	movs	r0, #3
 8002604:	e7f2      	b.n	80025ec <HAL_UART_Transmit+0xbe>

08002606 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8002606:	b082      	sub	sp, #8
 8002608:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800260a:	ab01      	add	r3, sp, #4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b11b      	cbz	r3, 8002618 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 8002610:	428b      	cmp	r3, r1
 8002612:	d1fb      	bne.n	800260c <lfs_mlist_isopen+0x6>
            return true;
 8002614:	2001      	movs	r0, #1
 8002616:	e000      	b.n	800261a <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 8002618:	2000      	movs	r0, #0
}
 800261a:	b002      	add	sp, #8
 800261c:	4770      	bx	lr

0800261e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800261e:	3028      	adds	r0, #40	; 0x28
 8002620:	e000      	b.n	8002624 <lfs_mlist_remove+0x6>
 8002622:	4618      	mov	r0, r3
 8002624:	6803      	ldr	r3, [r0, #0]
 8002626:	b123      	cbz	r3, 8002632 <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 8002628:	428b      	cmp	r3, r1
 800262a:	d1fa      	bne.n	8002622 <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6003      	str	r3, [r0, #0]
            break;
 8002630:	4770      	bx	lr
        }
    }
}
 8002632:	4770      	bx	lr

08002634 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 8002634:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002636:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 8002638:	6281      	str	r1, [r0, #40]	; 0x28
}
 800263a:	4770      	bx	lr

0800263c <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 800263c:	4800      	ldr	r0, [pc, #0]	; (8002640 <lfs_fs_disk_version+0x4>)
 800263e:	4770      	bx	lr
 8002640:	00020001 	.word	0x00020001

08002644 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8002644:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8002646:	f7ff fff9 	bl	800263c <lfs_fs_disk_version>

}
 800264a:	0c00      	lsrs	r0, r0, #16
 800264c:	bd08      	pop	{r3, pc}

0800264e <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 800264e:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8002650:	f7ff fff4 	bl	800263c <lfs_fs_disk_version>
}
 8002654:	b280      	uxth	r0, r0
 8002656:	bd08      	pop	{r3, pc}

08002658 <lfs_alloc_lookahead>:

/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->free.off)
 8002658:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800265a:	1ac9      	subs	r1, r1, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 800265c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->free.off)
 8002662:	fbb1 f2f3 	udiv	r2, r1, r3
 8002666:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->free.size) {
 800266a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800266c:	428b      	cmp	r3, r1
 800266e:	d90b      	bls.n	8002688 <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8002670:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8002672:	ea4f 1c51 	mov.w	ip, r1, lsr #5
 8002676:	f001 011f 	and.w	r1, r1, #31
 800267a:	2201      	movs	r2, #1
 800267c:	408a      	lsls	r2, r1
 800267e:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
 8002682:	4313      	orrs	r3, r2
 8002684:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
    }

    return 0;
}
 8002688:	2000      	movs	r0, #0
 800268a:	4770      	bx	lr

0800268c <lfs_alloc_ack>:

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
    lfs->free.ack = lfs->cfg->block_count;
 800268c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	6603      	str	r3, [r0, #96]	; 0x60
}
 8002692:	4770      	bx	lr

08002694 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8002694:	b508      	push	{r3, lr}
    lfs->free.size = 0;
 8002696:	2200      	movs	r2, #0
 8002698:	6582      	str	r2, [r0, #88]	; 0x58
    lfs->free.i = 0;
 800269a:	65c2      	str	r2, [r0, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800269c:	f7ff fff6 	bl	800268c <lfs_alloc_ack>
}
 80026a0:	bd08      	pop	{r3, pc}
	...

080026a4 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 80026a4:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80026a6:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 80026aa:	d01c      	beq.n	80026e6 <lfs_dir_traverse_filter+0x42>
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80026ae:	6803      	ldr	r3, [r0, #0]
 80026b0:	ea83 0401 	eor.w	r4, r3, r1
 80026b4:	4214      	tst	r4, r2
 80026b6:	d018      	beq.n	80026ea <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 80026b8:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 80026bc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80026c0:	d013      	beq.n	80026ea <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80026c2:	4c14      	ldr	r4, [pc, #80]	; (8002714 <lfs_dir_traverse_filter+0x70>)
 80026c4:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80026c6:	4a14      	ldr	r2, [pc, #80]	; (8002718 <lfs_dir_traverse_filter+0x74>)
 80026c8:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80026ca:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
 80026ce:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 80026d2:	4294      	cmp	r4, r2
 80026d4:	d009      	beq.n	80026ea <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 80026d6:	0d0a      	lsrs	r2, r1, #20
 80026d8:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80026dc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80026e0:	d009      	beq.n	80026f6 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 80026e2:	2000      	movs	r0, #0
 80026e4:	e004      	b.n	80026f0 <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80026e6:	4a0d      	ldr	r2, [pc, #52]	; (800271c <lfs_dir_traverse_filter+0x78>)
 80026e8:	e7e1      	b.n	80026ae <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 80026ea:	2300      	movs	r3, #0
 80026ec:	6003      	str	r3, [r0, #0]
        return true;
 80026ee:	2001      	movs	r0, #1
}
 80026f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026f4:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 80026f6:	f3c1 2189 	ubfx	r1, r1, #10, #10
 80026fa:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80026fe:	428c      	cmp	r4, r1
 8002700:	d305      	bcc.n	800270e <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 8002702:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002704:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8002708:	6003      	str	r3, [r0, #0]
    return false;
 800270a:	2000      	movs	r0, #0
 800270c:	e7f0      	b.n	80026f0 <lfs_dir_traverse_filter+0x4c>
 800270e:	2000      	movs	r0, #0
 8002710:	e7ee      	b.n	80026f0 <lfs_dir_traverse_filter+0x4c>
 8002712:	bf00      	nop
 8002714:	7ffffc00 	.word	0x7ffffc00
 8002718:	000ffc00 	.word	0x000ffc00
 800271c:	700ffc00 	.word	0x700ffc00

08002720 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 8002720:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002728:	bf08      	it	eq
 800272a:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 800272c:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8002730:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8002732:	6803      	ldr	r3, [r0, #0]
 8002734:	440b      	add	r3, r1
 8002736:	6003      	str	r3, [r0, #0]
    return 0;
}
 8002738:	2000      	movs	r0, #0
 800273a:	4770      	bx	lr

0800273c <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800273c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8002740:	2b00      	cmp	r3, #0
 8002742:	dd0b      	ble.n	800275c <lfs_dir_needsrelocation+0x20>
 8002744:	688a      	ldr	r2, [r1, #8]
 8002746:	3201      	adds	r2, #1
 8002748:	3301      	adds	r3, #1
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	fbb2 f1f3 	udiv	r1, r2, r3
 8002752:	fb03 2211 	mls	r2, r3, r1, r2
 8002756:	b11a      	cbz	r2, 8002760 <lfs_dir_needsrelocation+0x24>
 8002758:	2000      	movs	r0, #0
 800275a:	4770      	bx	lr
 800275c:	2000      	movs	r0, #0
 800275e:	4770      	bx	lr
 8002760:	2001      	movs	r0, #1
}
 8002762:	4770      	bx	lr

08002764 <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8002764:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002766:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800276a:	d101      	bne.n	8002770 <lfs_file_rawsize+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 800276c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
}
 800276e:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 8002770:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8002772:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002774:	4298      	cmp	r0, r3
 8002776:	bf38      	it	cc
 8002778:	4618      	movcc	r0, r3
 800277a:	4770      	bx	lr

0800277c <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800277c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800277e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8002782:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8002786:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002788:	4770      	bx	lr
	...

0800278c <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800278c:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <lfs_fs_prepmove+0x50>)
 8002790:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002792:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8002794:	f240 3cff 	movw	ip, #1023	; 0x3ff
 8002798:	4561      	cmp	r1, ip
 800279a:	d017      	beq.n	80027cc <lfs_fs_prepmove+0x40>
 800279c:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 80027a0:	f04c 4c9f 	orr.w	ip, ip, #1333788672	; 0x4f800000
 80027a4:	f44c 0ce0 	orr.w	ip, ip, #7340032	; 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80027a8:	ea43 030c 	orr.w	r3, r3, ip
 80027ac:	6303      	str	r3, [r0, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80027ae:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80027b2:	4299      	cmp	r1, r3
 80027b4:	d00d      	beq.n	80027d2 <lfs_fs_prepmove+0x46>
 80027b6:	6813      	ldr	r3, [r2, #0]
 80027b8:	6343      	str	r3, [r0, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80027ba:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80027be:	4299      	cmp	r1, r3
 80027c0:	d009      	beq.n	80027d6 <lfs_fs_prepmove+0x4a>
 80027c2:	6853      	ldr	r3, [r2, #4]
 80027c4:	6383      	str	r3, [r0, #56]	; 0x38
}
 80027c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027ca:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 80027cc:	f04f 0c00 	mov.w	ip, #0
 80027d0:	e7ea      	b.n	80027a8 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e7f0      	b.n	80027b8 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e7f4      	b.n	80027c4 <lfs_fs_prepmove+0x38>
 80027da:	bf00      	nop
 80027dc:	800003ff 	.word	0x800003ff

080027e0 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 80027e0:	6803      	ldr	r3, [r0, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	6003      	str	r3, [r0, #0]
    return 0;
}
 80027e6:	2000      	movs	r0, #0
 80027e8:	4770      	bx	lr
	...

080027ec <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80027ec:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->cfg->block_count);
 80027ee:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80027f0:	6a03      	ldr	r3, [r0, #32]
 80027f2:	428b      	cmp	r3, r1
 80027f4:	d904      	bls.n	8002800 <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80027f6:	68c3      	ldr	r3, [r0, #12]
 80027f8:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 80027fa:	2800      	cmp	r0, #0
 80027fc:	dc07      	bgt.n	800280e <lfs_bd_erase+0x22>
}
 80027fe:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->cfg->block_count);
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <lfs_bd_erase+0x30>)
 8002802:	4a07      	ldr	r2, [pc, #28]	; (8002820 <lfs_bd_erase+0x34>)
 8002804:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002808:	4806      	ldr	r0, [pc, #24]	; (8002824 <lfs_bd_erase+0x38>)
 800280a:	f004 f907 	bl	8006a1c <__assert_func>
    LFS_ASSERT(err <= 0);
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <lfs_bd_erase+0x3c>)
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <lfs_bd_erase+0x34>)
 8002812:	f44f 718b 	mov.w	r1, #278	; 0x116
 8002816:	4803      	ldr	r0, [pc, #12]	; (8002824 <lfs_bd_erase+0x38>)
 8002818:	f004 f900 	bl	8006a1c <__assert_func>
 800281c:	08007eb0 	.word	0x08007eb0
 8002820:	08008648 	.word	0x08008648
 8002824:	08007ba4 	.word	0x08007ba4
 8002828:	08007bb8 	.word	0x08007bb8

0800282c <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800282c:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 800282e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
 8002830:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8002834:	b90a      	cbnz	r2, 800283a <lfs_fs_preporphans+0xe>
 8002836:	2900      	cmp	r1, #0
 8002838:	db12      	blt.n	8002860 <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 800283a:	f5b2 7fff 	cmp.w	r2, #510	; 0x1fe
 800283e:	d901      	bls.n	8002844 <lfs_fs_preporphans+0x18>
 8002840:	2900      	cmp	r1, #0
 8002842:	dc14      	bgt.n	800286e <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 8002844:	4419      	add	r1, r3
 8002846:	6301      	str	r1, [r0, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8002848:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    return tag & 0x000003ff;
 800284c:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 8002850:	3900      	subs	r1, #0
 8002852:	bf18      	it	ne
 8002854:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8002856:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 800285a:	6303      	str	r3, [r0, #48]	; 0x30
}
 800285c:	2000      	movs	r0, #0
 800285e:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <lfs_fs_preporphans+0x50>)
 8002862:	4a07      	ldr	r2, [pc, #28]	; (8002880 <lfs_fs_preporphans+0x54>)
 8002864:	f241 217e 	movw	r1, #4734	; 0x127e
 8002868:	4806      	ldr	r0, [pc, #24]	; (8002884 <lfs_fs_preporphans+0x58>)
 800286a:	f004 f8d7 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <lfs_fs_preporphans+0x5c>)
 8002870:	4a03      	ldr	r2, [pc, #12]	; (8002880 <lfs_fs_preporphans+0x54>)
 8002872:	f241 217f 	movw	r1, #4735	; 0x127f
 8002876:	4803      	ldr	r0, [pc, #12]	; (8002884 <lfs_fs_preporphans+0x58>)
 8002878:	f004 f8d0 	bl	8006a1c <__assert_func>
 800287c:	08007bc4 	.word	0x08007bc4
 8002880:	080085cc 	.word	0x080085cc
 8002884:	08007ba4 	.word	0x08007ba4
 8002888:	08007bfc 	.word	0x08007bfc

0800288c <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 800288c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002890:	b087      	sub	sp, #28
 8002892:	4615      	mov	r5, r2
 8002894:	469a      	mov	sl, r3
 8002896:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8002898:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800289a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    if (block >= lfs->cfg->block_count ||
 800289e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80028a0:	6a13      	ldr	r3, [r2, #32]
 80028a2:	42b3      	cmp	r3, r6
 80028a4:	f240 80ca 	bls.w	8002a3c <lfs_bd_read+0x1b0>
 80028a8:	4689      	mov	r9, r1
            off+size > lfs->cfg->block_size) {
 80028aa:	eb04 030b 	add.w	r3, r4, fp
 80028ae:	69d2      	ldr	r2, [r2, #28]
    if (block >= lfs->cfg->block_count ||
 80028b0:	4293      	cmp	r3, r2
 80028b2:	f200 80c6 	bhi.w	8002a42 <lfs_bd_read+0x1b6>
 80028b6:	9003      	str	r0, [sp, #12]
 80028b8:	e081      	b.n	80029be <lfs_bd_read+0x132>
                off < pcache->off + pcache->size) {
 80028ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80028be:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80028c2:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 80028c4:	42a1      	cmp	r1, r4
 80028c6:	d91e      	bls.n	8002906 <lfs_bd_read+0x7a>
            if (off >= pcache->off) {
 80028c8:	42a3      	cmp	r3, r4
 80028ca:	d905      	bls.n	80028d8 <lfs_bd_read+0x4c>
            diff = lfs_min(diff, pcache->off-off);
 80028cc:	1b1b      	subs	r3, r3, r4
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
    return (a > b) ? a : b;
}

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
    return (a < b) ? a : b;
 80028ce:	455b      	cmp	r3, fp
 80028d0:	bf28      	it	cs
 80028d2:	465b      	movcs	r3, fp
 80028d4:	4698      	mov	r8, r3
 80028d6:	e07e      	b.n	80029d6 <lfs_bd_read+0x14a>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80028d8:	1b19      	subs	r1, r3, r4
 80028da:	eb02 0801 	add.w	r8, r2, r1
 80028de:	45d8      	cmp	r8, fp
 80028e0:	bf28      	it	cs
 80028e2:	46d8      	movcs	r8, fp
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80028e4:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80028e8:	1ae3      	subs	r3, r4, r3
 80028ea:	4642      	mov	r2, r8
 80028ec:	4419      	add	r1, r3
 80028ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80028f0:	f004 fb56 	bl	8006fa0 <memcpy>
                data += diff;
 80028f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80028f6:	4443      	add	r3, r8
 80028f8:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
 80028fa:	4444      	add	r4, r8
                size -= diff;
 80028fc:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
 8002900:	e05d      	b.n	80029be <lfs_bd_read+0x132>
        lfs_size_t diff = size;
 8002902:	46d8      	mov	r8, fp
 8002904:	e067      	b.n	80029d6 <lfs_bd_read+0x14a>
 8002906:	46d8      	mov	r8, fp
 8002908:	e065      	b.n	80029d6 <lfs_bd_read+0x14a>
                off < rcache->off + rcache->size) {
 800290a:	686b      	ldr	r3, [r5, #4]
 800290c:	68aa      	ldr	r2, [r5, #8]
 800290e:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 8002910:	42a1      	cmp	r1, r4
 8002912:	d963      	bls.n	80029dc <lfs_bd_read+0x150>
            if (off >= rcache->off) {
 8002914:	42a3      	cmp	r3, r4
 8002916:	d904      	bls.n	8002922 <lfs_bd_read+0x96>
            diff = lfs_min(diff, rcache->off-off);
 8002918:	1b1b      	subs	r3, r3, r4
 800291a:	4598      	cmp	r8, r3
 800291c:	bf28      	it	cs
 800291e:	4698      	movcs	r8, r3
 8002920:	e05c      	b.n	80029dc <lfs_bd_read+0x150>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8002922:	1b19      	subs	r1, r3, r4
 8002924:	440a      	add	r2, r1
 8002926:	4590      	cmp	r8, r2
 8002928:	bf28      	it	cs
 800292a:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800292c:	68e9      	ldr	r1, [r5, #12]
 800292e:	1ae3      	subs	r3, r4, r3
 8002930:	4642      	mov	r2, r8
 8002932:	4419      	add	r1, r3
 8002934:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002936:	f004 fb33 	bl	8006fa0 <memcpy>
                data += diff;
 800293a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800293c:	4443      	add	r3, r8
 800293e:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
 8002940:	4444      	add	r4, r8
                size -= diff;
 8002942:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
 8002946:	e03a      	b.n	80029be <lfs_bd_read+0x132>
            data += diff;
 8002948:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800294a:	9b04      	ldr	r3, [sp, #16]
 800294c:	441a      	add	r2, r3
 800294e:	9212      	str	r2, [sp, #72]	; 0x48
            off += diff;
 8002950:	441c      	add	r4, r3
            size -= diff;
 8002952:	9b05      	ldr	r3, [sp, #20]
 8002954:	eba3 0308 	sub.w	r3, r3, r8
 8002958:	449b      	add	fp, r3
            continue;
 800295a:	e030      	b.n	80029be <lfs_bd_read+0x132>
        LFS_ASSERT(block < lfs->cfg->block_count);
 800295c:	9b03      	ldr	r3, [sp, #12]
 800295e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	42b3      	cmp	r3, r6
 8002964:	d95c      	bls.n	8002a20 <lfs_bd_read+0x194>
        rcache->block = block;
 8002966:	602e      	str	r6, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8002968:	9f03      	ldr	r7, [sp, #12]
 800296a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800296c:	695b      	ldr	r3, [r3, #20]
}

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
 800296e:	fbb4 f2f3 	udiv	r2, r4, r3
 8002972:	fb03 4212 	mls	r2, r3, r2, r4
 8002976:	1aa2      	subs	r2, r4, r2
 8002978:	606a      	str	r2, [r5, #4]
                lfs_min(
 800297a:	eb04 030a 	add.w	r3, r4, sl
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800297e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002980:	6948      	ldr	r0, [r1, #20]
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
 8002982:	4403      	add	r3, r0
 8002984:	3b01      	subs	r3, #1
    return a - (a % alignment);
 8002986:	fbb3 fcf0 	udiv	ip, r3, r0
 800298a:	fb00 301c 	mls	r0, r0, ip, r3
 800298e:	1a1b      	subs	r3, r3, r0
                    lfs->cfg->block_size)
 8002990:	69c8      	ldr	r0, [r1, #28]
        rcache->size = lfs_min(
 8002992:	4298      	cmp	r0, r3
 8002994:	bf94      	ite	ls
 8002996:	ebc2 0c00 	rsbls	ip, r2, r0
 800299a:	ebc2 0c03 	rsbhi	ip, r2, r3
                lfs->cfg->cache_size);
 800299e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    return (a < b) ? a : b;
 80029a0:	4563      	cmp	r3, ip
 80029a2:	bf28      	it	cs
 80029a4:	4663      	movcs	r3, ip
        rcache->size = lfs_min(
 80029a6:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80029a8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80029aa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	68eb      	ldr	r3, [r5, #12]
 80029b2:	4631      	mov	r1, r6
 80029b4:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	dc38      	bgt.n	8002a2c <lfs_bd_read+0x1a0>
        if (err) {
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d144      	bne.n	8002a48 <lfs_bd_read+0x1bc>
    while (size > 0) {
 80029be:	f1bb 0f00 	cmp.w	fp, #0
 80029c2:	d039      	beq.n	8002a38 <lfs_bd_read+0x1ac>
        if (pcache && block == pcache->block &&
 80029c4:	f1b9 0f00 	cmp.w	r9, #0
 80029c8:	d09b      	beq.n	8002902 <lfs_bd_read+0x76>
 80029ca:	f8d9 3000 	ldr.w	r3, [r9]
 80029ce:	42b3      	cmp	r3, r6
 80029d0:	f43f af73 	beq.w	80028ba <lfs_bd_read+0x2e>
        lfs_size_t diff = size;
 80029d4:	46d8      	mov	r8, fp
        if (block == rcache->block &&
 80029d6:	682b      	ldr	r3, [r5, #0]
 80029d8:	42b3      	cmp	r3, r6
 80029da:	d096      	beq.n	800290a <lfs_bd_read+0x7e>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80029dc:	45d3      	cmp	fp, sl
 80029de:	d3bd      	bcc.n	800295c <lfs_bd_read+0xd0>
 80029e0:	9b03      	ldr	r3, [sp, #12]
 80029e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80029e4:	6942      	ldr	r2, [r0, #20]
 80029e6:	fbb4 f3f2 	udiv	r3, r4, r2
 80029ea:	fb02 4313 	mls	r3, r2, r3, r4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1b4      	bne.n	800295c <lfs_bd_read+0xd0>
 80029f2:	455a      	cmp	r2, fp
 80029f4:	d8b2      	bhi.n	800295c <lfs_bd_read+0xd0>
    return a - (a % alignment);
 80029f6:	fbb8 f3f2 	udiv	r3, r8, r2
 80029fa:	fb02 8313 	mls	r3, r2, r3, r8
 80029fe:	9305      	str	r3, [sp, #20]
 8002a00:	eba8 0203 	sub.w	r2, r8, r3
 8002a04:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8002a06:	6842      	ldr	r2, [r0, #4]
 8002a08:	4617      	mov	r7, r2
 8002a0a:	9304      	str	r3, [sp, #16]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002a10:	4622      	mov	r2, r4
 8002a12:	4631      	mov	r1, r6
 8002a14:	47b8      	blx	r7
            if (err) {
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d096      	beq.n	8002948 <lfs_bd_read+0xbc>
}
 8002a1a:	b007      	add	sp, #28
 8002a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(block < lfs->cfg->block_count);
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <lfs_bd_read+0x1c0>)
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <lfs_bd_read+0x1c4>)
 8002a24:	216b      	movs	r1, #107	; 0x6b
 8002a26:	480b      	ldr	r0, [pc, #44]	; (8002a54 <lfs_bd_read+0x1c8>)
 8002a28:	f003 fff8 	bl	8006a1c <__assert_func>
        LFS_ASSERT(err <= 0);
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <lfs_bd_read+0x1cc>)
 8002a2e:	4a08      	ldr	r2, [pc, #32]	; (8002a50 <lfs_bd_read+0x1c4>)
 8002a30:	2176      	movs	r1, #118	; 0x76
 8002a32:	4808      	ldr	r0, [pc, #32]	; (8002a54 <lfs_bd_read+0x1c8>)
 8002a34:	f003 fff2 	bl	8006a1c <__assert_func>
    return 0;
 8002a38:	2000      	movs	r0, #0
 8002a3a:	e7ee      	b.n	8002a1a <lfs_bd_read+0x18e>
        return LFS_ERR_CORRUPT;
 8002a3c:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8002a40:	e7eb      	b.n	8002a1a <lfs_bd_read+0x18e>
 8002a42:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8002a46:	e7e8      	b.n	8002a1a <lfs_bd_read+0x18e>
 8002a48:	4618      	mov	r0, r3
 8002a4a:	e7e6      	b.n	8002a1a <lfs_bd_read+0x18e>
 8002a4c:	08007eb0 	.word	0x08007eb0
 8002a50:	08008670 	.word	0x08008670
 8002a54:	08007ba4 	.word	0x08007ba4
 8002a58:	08007bb8 	.word	0x08007bb8

08002a5c <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 8002a5c:	b530      	push	{r4, r5, lr}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 8002a62:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8002a64:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002a66:	69db      	ldr	r3, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8002a68:	6811      	ldr	r1, [r2, #0]
 8002a6a:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8002a6c:	2508      	movs	r5, #8
 8002a6e:	9503      	str	r5, [sp, #12]
 8002a70:	ad04      	add	r5, sp, #16
 8002a72:	9502      	str	r5, [sp, #8]
 8002a74:	9201      	str	r2, [sp, #4]
 8002a76:	9100      	str	r1, [sp, #0]
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f100 0110 	add.w	r1, r0, #16
 8002a7e:	f7ff ff05 	bl	800288c <lfs_bd_read>
    if (err) {
 8002a82:	4603      	mov	r3, r0
 8002a84:	b978      	cbnz	r0, 8002aa6 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8002a86:	9a04      	ldr	r2, [sp, #16]
 8002a88:	6861      	ldr	r1, [r4, #4]
 8002a8a:	4291      	cmp	r1, r2
 8002a8c:	d008      	beq.n	8002aa0 <lfs_fs_parent_match+0x44>
 8002a8e:	9d05      	ldr	r5, [sp, #20]
 8002a90:	68a0      	ldr	r0, [r4, #8]
 8002a92:	4285      	cmp	r5, r0
 8002a94:	d004      	beq.n	8002aa0 <lfs_fs_parent_match+0x44>
 8002a96:	4282      	cmp	r2, r0
 8002a98:	d002      	beq.n	8002aa0 <lfs_fs_parent_match+0x44>
 8002a9a:	42a9      	cmp	r1, r5
 8002a9c:	d000      	beq.n	8002aa0 <lfs_fs_parent_match+0x44>
 8002a9e:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8002aa0:	3b00      	subs	r3, #0
 8002aa2:	bf18      	it	ne
 8002aa4:	2301      	movne	r3, #1
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	b007      	add	sp, #28
 8002aaa:	bd30      	pop	{r4, r5, pc}

08002aac <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8002aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab0:	b089      	sub	sp, #36	; 0x24
 8002ab2:	4681      	mov	r9, r0
 8002ab4:	9105      	str	r1, [sp, #20]
 8002ab6:	4693      	mov	fp, r2
 8002ab8:	4698      	mov	r8, r3
 8002aba:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002abe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8002ac0:	9f15      	ldr	r7, [sp, #84]	; 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 8002ac2:	2400      	movs	r4, #0
 8002ac4:	e006      	b.n	8002ad4 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 8002ac6:	462a      	mov	r2, r5
 8002ac8:	a906      	add	r1, sp, #24
 8002aca:	6838      	ldr	r0, [r7, #0]
 8002acc:	f003 fec2 	bl	8006854 <lfs_crc>
 8002ad0:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8002ad2:	442c      	add	r4, r5
 8002ad4:	42b4      	cmp	r4, r6
 8002ad6:	d216      	bcs.n	8002b06 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 8002ad8:	1b35      	subs	r5, r6, r4
    return (a < b) ? a : b;
 8002ada:	2d08      	cmp	r5, #8
 8002adc:	bf28      	it	cs
 8002ade:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 8002ae0:	9503      	str	r5, [sp, #12]
 8002ae2:	ab06      	add	r3, sp, #24
 8002ae4:	9302      	str	r3, [sp, #8]
 8002ae6:	eb04 030a 	add.w	r3, r4, sl
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	eba8 0304 	sub.w	r3, r8, r4
 8002af4:	465a      	mov	r2, fp
 8002af6:	9905      	ldr	r1, [sp, #20]
 8002af8:	4648      	mov	r0, r9
 8002afa:	f7ff fec7 	bl	800288c <lfs_bd_read>
        if (err) {
 8002afe:	4603      	mov	r3, r0
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d0e0      	beq.n	8002ac6 <lfs_bd_crc+0x1a>
 8002b04:	e000      	b.n	8002b08 <lfs_bd_crc+0x5c>
    return 0;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	b009      	add	sp, #36	; 0x24
 8002b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002b10 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b14:	b0af      	sub	sp, #188	; 0xbc
 8002b16:	9007      	str	r0, [sp, #28]
 8002b18:	460e      	mov	r6, r1
 8002b1a:	4617      	mov	r7, r2
 8002b1c:	461c      	mov	r4, r3
 8002b1e:	f8dd 80e0 	ldr.w	r8, [sp, #224]	; 0xe0
 8002b22:	f8dd b0e4 	ldr.w	fp, [sp, #228]	; 0xe4
 8002b26:	f8dd a0e8 	ldr.w	sl, [sp, #232]	; 0xe8
 8002b2a:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	; 0xf0
 8002b2e:	9304      	str	r3, [sp, #16]
 8002b30:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	; 0xf4
 8002b34:	9305      	str	r3, [sp, #20]
 8002b36:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	; 0xf8
 8002b3a:	9306      	str	r3, [sp, #24]
    unsigned sp = 0;
 8002b3c:	2500      	movs	r5, #0
    return ((int32_t)(tag << 22) >> 22) == -1;
 8002b3e:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b46:	bf14      	ite	ne
 8002b48:	46a1      	movne	r9, r4
 8002b4a:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 8002b4e:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8002b52:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8002b56:	44b9      	add	r9, r7
 8002b58:	68f3      	ldr	r3, [r6, #12]
 8002b5a:	4599      	cmp	r9, r3
 8002b5c:	d35e      	bcc.n	8002c1c <lfs_dir_traverse+0x10c>
            } else if (attrcount > 0) {
 8002b5e:	f1bb 0f00 	cmp.w	fp, #0
 8002b62:	f340 80fa 	ble.w	8002d5a <lfs_dir_traverse+0x24a>
                tag = attrs[0].tag;
 8002b66:	f8d8 3000 	ldr.w	r3, [r8]
 8002b6a:	930f      	str	r3, [sp, #60]	; 0x3c
                buffer = attrs[0].buffer;
 8002b6c:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 8002b70:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 8002b74:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8002b78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002b7a:	4ba9      	ldr	r3, [pc, #676]	; (8002e20 <lfs_dir_traverse+0x310>)
 8002b7c:	ea0a 0303 	and.w	r3, sl, r3
 8002b80:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8002b82:	404a      	eors	r2, r1
 8002b84:	401a      	ands	r2, r3
 8002b86:	d1da      	bne.n	8002b3e <lfs_dir_traverse+0x2e>
    return (tag & 0x000ffc00) >> 10;
 8002b88:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8116 	beq.w	8002dbe <lfs_dir_traverse+0x2ae>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8002b92:	2d02      	cmp	r5, #2
 8002b94:	d862      	bhi.n	8002c5c <lfs_dir_traverse+0x14c>
                stack[sp] = (struct lfs_dir_traverse){
 8002b96:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8002b9a:	a82e      	add	r0, sp, #184	; 0xb8
 8002b9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002ba0:	f843 6c78 	str.w	r6, [r3, #-120]
 8002ba4:	f843 7c74 	str.w	r7, [r3, #-116]
 8002ba8:	f843 4c70 	str.w	r4, [r3, #-112]
 8002bac:	f843 8c6c 	str.w	r8, [r3, #-108]
 8002bb0:	f843 bc68 	str.w	fp, [r3, #-104]
 8002bb4:	f843 ac64 	str.w	sl, [r3, #-100]
 8002bb8:	983b      	ldr	r0, [sp, #236]	; 0xec
 8002bba:	f843 0c60 	str.w	r0, [r3, #-96]
 8002bbe:	9804      	ldr	r0, [sp, #16]
 8002bc0:	f823 0c5c 	strh.w	r0, [r3, #-92]
 8002bc4:	9805      	ldr	r0, [sp, #20]
 8002bc6:	f823 0c5a 	strh.w	r0, [r3, #-90]
 8002bca:	9806      	ldr	r0, [sp, #24]
 8002bcc:	f823 0c58 	strh.w	r0, [r3, #-88]
 8002bd0:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8002bd2:	f843 0c54 	str.w	r0, [r3, #-84]
 8002bd6:	9840      	ldr	r0, [sp, #256]	; 0x100
 8002bd8:	f843 0c50 	str.w	r0, [r3, #-80]
 8002bdc:	f843 1c4c 	str.w	r1, [r3, #-76]
 8002be0:	f843 9c48 	str.w	r9, [r3, #-72]
 8002be4:	3b44      	subs	r3, #68	; 0x44
 8002be6:	a90d      	add	r1, sp, #52	; 0x34
 8002be8:	c903      	ldmia	r1, {r0, r1}
 8002bea:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 8002bee:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	3328      	adds	r3, #40	; 0x28
 8002bf6:	a910      	add	r1, sp, #64	; 0x40
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	9340      	str	r3, [sp, #256]	; 0x100
                sp += 1;
 8002bfe:	3501      	adds	r5, #1
                ttag = 0;
 8002c00:	923b      	str	r2, [sp, #236]	; 0xec
                tmask = 0;
 8002c02:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 8002c04:	4b87      	ldr	r3, [pc, #540]	; (8002e24 <lfs_dir_traverse+0x314>)
 8002c06:	933f      	str	r3, [sp, #252]	; 0xfc
                diff = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9306      	str	r3, [sp, #24]
                end = 0;
 8002c0c:	9305      	str	r3, [sp, #20]
                begin = 0;
 8002c0e:	9304      	str	r3, [sp, #16]
 8002c10:	e795      	b.n	8002b3e <lfs_dir_traverse+0x2e>
 8002c12:	9d08      	ldr	r5, [sp, #32]
 8002c14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002c16:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002c18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002c1a:	e790      	b.n	8002b3e <lfs_dir_traverse+0x2e>
                        dir->pair[0], off, &tag, sizeof(tag));
 8002c1c:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 8002c1e:	2304      	movs	r3, #4
 8002c20:	9303      	str	r3, [sp, #12]
 8002c22:	a90f      	add	r1, sp, #60	; 0x3c
 8002c24:	9102      	str	r1, [sp, #8]
 8002c26:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c2a:	9200      	str	r2, [sp, #0]
 8002c2c:	9a07      	ldr	r2, [sp, #28]
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4610      	mov	r0, r2
 8002c32:	f7ff fe2b 	bl	800288c <lfs_bd_read>
                if (err) {
 8002c36:	4603      	mov	r3, r0
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	f040 80ec 	bne.w	8002e16 <lfs_dir_traverse+0x306>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8002c3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8002c40:	ba1b      	rev	r3, r3
 8002c42:	4063      	eors	r3, r4
 8002c44:	f043 4400 	orr.w	r4, r3, #2147483648	; 0x80000000
 8002c48:	940f      	str	r4, [sp, #60]	; 0x3c
                disk.block = dir->pair[0];
 8002c4a:	6833      	ldr	r3, [r6, #0]
 8002c4c:	930d      	str	r3, [sp, #52]	; 0x34
                disk.off = off+sizeof(lfs_tag_t);
 8002c4e:	f109 0304 	add.w	r3, r9, #4
 8002c52:	930e      	str	r3, [sp, #56]	; 0x38
                off += lfs_tag_dsize(ptag);
 8002c54:	464f      	mov	r7, r9
                buffer = &disk;
 8002c56:	f10d 0934 	add.w	r9, sp, #52	; 0x34
 8002c5a:	e78d      	b.n	8002b78 <lfs_dir_traverse+0x68>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8002c5c:	4b72      	ldr	r3, [pc, #456]	; (8002e28 <lfs_dir_traverse+0x318>)
 8002c5e:	4a73      	ldr	r2, [pc, #460]	; (8002e2c <lfs_dir_traverse+0x31c>)
 8002c60:	f240 3193 	movw	r1, #915	; 0x393
 8002c64:	4872      	ldr	r0, [pc, #456]	; (8002e30 <lfs_dir_traverse+0x320>)
 8002c66:	f003 fed9 	bl	8006a1c <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 8002c6a:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <lfs_dir_traverse+0x314>)
 8002c6c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	f43f af65 	beq.w	8002b3e <lfs_dir_traverse+0x2e>
            stack[sp] = (struct lfs_dir_traverse){
 8002c74:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8002c78:	aa2e      	add	r2, sp, #184	; 0xb8
 8002c7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002c7e:	223c      	movs	r2, #60	; 0x3c
 8002c80:	2100      	movs	r1, #0
 8002c82:	9309      	str	r3, [sp, #36]	; 0x24
 8002c84:	f1a3 0078 	sub.w	r0, r3, #120	; 0x78
 8002c88:	f004 f8d1 	bl	8006e2e <memset>
 8002c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c8e:	f843 6c78 	str.w	r6, [r3, #-120]
 8002c92:	f843 7c74 	str.w	r7, [r3, #-116]
 8002c96:	f843 4c70 	str.w	r4, [r3, #-112]
 8002c9a:	f843 8c6c 	str.w	r8, [r3, #-108]
 8002c9e:	f843 bc68 	str.w	fp, [r3, #-104]
 8002ca2:	f843 ac64 	str.w	sl, [r3, #-100]
 8002ca6:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8002ca8:	f843 2c60 	str.w	r2, [r3, #-96]
 8002cac:	9a04      	ldr	r2, [sp, #16]
 8002cae:	f823 2c5c 	strh.w	r2, [r3, #-92]
 8002cb2:	9a05      	ldr	r2, [sp, #20]
 8002cb4:	f823 2c5a 	strh.w	r2, [r3, #-90]
 8002cb8:	9906      	ldr	r1, [sp, #24]
 8002cba:	f823 1c58 	strh.w	r1, [r3, #-88]
 8002cbe:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8002cc0:	f843 2c54 	str.w	r2, [r3, #-84]
 8002cc4:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8002cc6:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 8002cca:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 8002ccc:	9b08      	ldr	r3, [sp, #32]
 8002cce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cd2:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 8002cd4:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 8002cd8:	1c50      	adds	r0, r2, #1
 8002cda:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	fa11 f383 	uxtah	r3, r1, r3
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	9306      	str	r3, [sp, #24]
            dir = buffer;
 8002ce6:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002ce8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002cec:	933b      	str	r3, [sp, #236]	; 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8002cee:	f8df a144 	ldr.w	sl, [pc, #324]	; 8002e34 <lfs_dir_traverse+0x324>
            attrcount = 0;
 8002cf2:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 8002cf6:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 8002cf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            off = 0;
 8002cfc:	465f      	mov	r7, fp
 8002cfe:	e71e      	b.n	8002b3e <lfs_dir_traverse+0x2e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002d00:	2300      	movs	r3, #0
 8002d02:	9508      	str	r5, [sp, #32]
 8002d04:	9609      	str	r6, [sp, #36]	; 0x24
 8002d06:	970a      	str	r7, [sp, #40]	; 0x28
 8002d08:	940b      	str	r4, [sp, #44]	; 0x2c
 8002d0a:	461c      	mov	r4, r3
 8002d0c:	9d06      	ldr	r5, [sp, #24]
 8002d0e:	9e3f      	ldr	r6, [sp, #252]	; 0xfc
 8002d10:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8002d12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    return tag & 0x000003ff;
 8002d14:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002d18:	4294      	cmp	r4, r2
 8002d1a:	d219      	bcs.n	8002d50 <lfs_dir_traverse+0x240>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002d1c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8002d20:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 8002d24:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 8002d28:	f501 7140 	add.w	r1, r1, #768	; 0x300
    return (tag & 0x000ffc00) >> 10;
 8002d2c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002d30:	442b      	add	r3, r5
 8002d32:	029b      	lsls	r3, r3, #10
 8002d34:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8002d38:	6891      	ldr	r1, [r2, #8]
 8002d3a:	6852      	ldr	r2, [r2, #4]
 8002d3c:	4319      	orrs	r1, r3
 8002d3e:	4638      	mov	r0, r7
 8002d40:	47b0      	blx	r6
                if (res < 0) {
 8002d42:	2800      	cmp	r0, #0
 8002d44:	db66      	blt.n	8002e14 <lfs_dir_traverse+0x304>
                if (res) {
 8002d46:	2800      	cmp	r0, #0
 8002d48:	f47f af63 	bne.w	8002c12 <lfs_dir_traverse+0x102>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002d4c:	3401      	adds	r4, #1
 8002d4e:	e7e0      	b.n	8002d12 <lfs_dir_traverse+0x202>
 8002d50:	9d08      	ldr	r5, [sp, #32]
 8002d52:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002d54:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002d56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002d58:	e6f1      	b.n	8002b3e <lfs_dir_traverse+0x2e>
                res = 0;
 8002d5a:	2300      	movs	r3, #0
    if (sp > 0) {
 8002d5c:	2d00      	cmp	r5, #0
 8002d5e:	d05a      	beq.n	8002e16 <lfs_dir_traverse+0x306>
        dir         = stack[sp-1].dir;
 8002d60:	3d01      	subs	r5, #1
 8002d62:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8002d66:	aa2e      	add	r2, sp, #184	; 0xb8
 8002d68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002d6c:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 8002d70:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 8002d74:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 8002d78:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 8002d7c:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 8002d80:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 8002d84:	f853 2c60 	ldr.w	r2, [r3, #-96]
 8002d88:	923b      	str	r2, [sp, #236]	; 0xec
        begin       = stack[sp-1].begin;
 8002d8a:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 8002d8e:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 8002d90:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 8002d94:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 8002d96:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 8002d9a:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 8002d9c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002da0:	923f      	str	r2, [sp, #252]	; 0xfc
        data        = stack[sp-1].data;
 8002da2:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8002da6:	9240      	str	r2, [sp, #256]	; 0x100
        tag         = stack[sp-1].tag;
 8002da8:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8002dac:	920f      	str	r2, [sp, #60]	; 0x3c
        buffer      = stack[sp-1].buffer;
 8002dae:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 8002db2:	aa0d      	add	r2, sp, #52	; 0x34
 8002db4:	3b44      	subs	r3, #68	; 0x44
 8002db6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dba:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 8002dbe:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 8002dc2:	b153      	cbz	r3, 8002dda <lfs_dir_traverse+0x2ca>
    return (tag & 0x000ffc00) >> 10;
 8002dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002dc6:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 8002dca:	9a04      	ldr	r2, [sp, #16]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	f63f aeb6 	bhi.w	8002b3e <lfs_dir_traverse+0x2e>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8002dd2:	9a05      	ldr	r2, [sp, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f67f aeb2 	bls.w	8002b3e <lfs_dir_traverse+0x2e>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002dda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ddc:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 8002dde:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f43f aeab 	beq.w	8002b3e <lfs_dir_traverse+0x2e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8002de8:	f240 1201 	movw	r2, #257	; 0x101
 8002dec:	4293      	cmp	r3, r2
 8002dee:	f43f af3c 	beq.w	8002c6a <lfs_dir_traverse+0x15a>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8002df2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8002df6:	d083      	beq.n	8002d00 <lfs_dir_traverse+0x1f0>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8002df8:	464a      	mov	r2, r9
 8002dfa:	9b08      	ldr	r3, [sp, #32]
 8002dfc:	9906      	ldr	r1, [sp, #24]
 8002dfe:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 8002e02:	9840      	ldr	r0, [sp, #256]	; 0x100
 8002e04:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8002e06:	4798      	blx	r3
            if (res < 0) {
 8002e08:	1e03      	subs	r3, r0, #0
 8002e0a:	db04      	blt.n	8002e16 <lfs_dir_traverse+0x306>
            if (res) {
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f43f ae96 	beq.w	8002b3e <lfs_dir_traverse+0x2e>
 8002e12:	e7a3      	b.n	8002d5c <lfs_dir_traverse+0x24c>
 8002e14:	4603      	mov	r3, r0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	b02f      	add	sp, #188	; 0xbc
 8002e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e1e:	bf00      	nop
 8002e20:	7ff00000 	.word	0x7ff00000
 8002e24:	080026a5 	.word	0x080026a5
 8002e28:	08007c34 	.word	0x08007c34
 8002e2c:	080085fc 	.word	0x080085fc
 8002e30:	08007ba4 	.word	0x08007ba4
 8002e34:	600ffc00 	.word	0x600ffc00

08002e38 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 8002e3a:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8002e3c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002e3e:	69df      	ldr	r7, [r3, #28]
 8002e40:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 8002e42:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 8002e46:	42bd      	cmp	r5, r7
 8002e48:	d312      	bcc.n	8002e70 <lfs_ctz_index+0x38>
 8002e4a:	460e      	mov	r6, r1
    return __builtin_popcount(a);
 8002e4c:	3801      	subs	r0, #1
 8002e4e:	f7fd fa37 	bl	80002c0 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8002e52:	1c84      	adds	r4, r0, #2
 8002e54:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 8002e58:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 8002e5c:	fb04 5517 	mls	r5, r4, r7, r5
 8002e60:	4620      	mov	r0, r4
 8002e62:	f7fd fa2d 	bl	80002c0 <__popcountsi2>
 8002e66:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 8002e6a:	6035      	str	r5, [r6, #0]
    return i;
 8002e6c:	4620      	mov	r0, r4
}
 8002e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8002e70:	2000      	movs	r0, #0
 8002e72:	e7fc      	b.n	8002e6e <lfs_ctz_index+0x36>

08002e74 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 8002e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e78:	b089      	sub	sp, #36	; 0x24
 8002e7a:	461c      	mov	r4, r3
 8002e7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e7e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8002e80:	9f14      	ldr	r7, [sp, #80]	; 0x50
    if (size == 0) {
 8002e82:	b923      	cbnz	r3, 8002e8e <lfs_ctz_traverse+0x1a>
        return 0;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	b009      	add	sp, #36	; 0x24
 8002e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e8e:	4680      	mov	r8, r0
 8002e90:	4689      	mov	r9, r1
 8002e92:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8002e94:	3b01      	subs	r3, #1
 8002e96:	9307      	str	r3, [sp, #28]
 8002e98:	a907      	add	r1, sp, #28
 8002e9a:	f7ff ffcd 	bl	8002e38 <lfs_ctz_index>
 8002e9e:	4605      	mov	r5, r0
        int err = cb(data, head);
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	4638      	mov	r0, r7
 8002ea4:	47b0      	blx	r6
        if (err) {
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	d1ec      	bne.n	8002e86 <lfs_ctz_traverse+0x12>
        if (index == 0) {
 8002eac:	2d00      	cmp	r5, #0
 8002eae:	d0ea      	beq.n	8002e86 <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 8002eb0:	f005 0b01 	and.w	fp, r5, #1
 8002eb4:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 8002eb8:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8002eba:	9303      	str	r3, [sp, #12]
 8002ebc:	aa05      	add	r2, sp, #20
 8002ebe:	9202      	str	r2, [sp, #8]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	9400      	str	r4, [sp, #0]
 8002ec6:	4652      	mov	r2, sl
 8002ec8:	4649      	mov	r1, r9
 8002eca:	4640      	mov	r0, r8
 8002ecc:	f7ff fcde 	bl	800288c <lfs_bd_read>
        if (err) {
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	b9c8      	cbnz	r0, 8002f08 <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 8002ed4:	43eb      	mvns	r3, r5
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	42a3      	cmp	r3, r4
 8002edc:	dd0b      	ble.n	8002ef6 <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 8002ede:	ab08      	add	r3, sp, #32
 8002ee0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002ee4:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8002ee8:	4638      	mov	r0, r7
 8002eea:	47b0      	blx	r6
            if (err) {
 8002eec:	4603      	mov	r3, r0
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d1c9      	bne.n	8002e86 <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 8002ef2:	3401      	adds	r4, #1
 8002ef4:	e7ee      	b.n	8002ed4 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 8002ef6:	aa08      	add	r2, sp, #32
 8002ef8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002efc:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 8002f00:	f1ab 0b02 	sub.w	fp, fp, #2
 8002f04:	445d      	add	r5, fp
    while (true) {
 8002f06:	e7cb      	b.n	8002ea0 <lfs_ctz_traverse+0x2c>
            return err;
 8002f08:	4603      	mov	r3, r0
 8002f0a:	e7bc      	b.n	8002e86 <lfs_ctz_traverse+0x12>

08002f0c <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	b089      	sub	sp, #36	; 0x24
 8002f12:	4680      	mov	r8, r0
 8002f14:	9105      	str	r1, [sp, #20]
 8002f16:	4692      	mov	sl, r2
 8002f18:	461f      	mov	r7, r3
 8002f1a:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8002f1e:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8002f22:	9e15      	ldr	r6, [sp, #84]	; 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 8002f24:	2400      	movs	r4, #0
 8002f26:	e002      	b.n	8002f2e <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e023      	b.n	8002f74 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8002f2c:	442c      	add	r4, r5
 8002f2e:	42b4      	cmp	r4, r6
 8002f30:	d21f      	bcs.n	8002f72 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 8002f32:	1b35      	subs	r5, r6, r4
    return (a < b) ? a : b;
 8002f34:	2d08      	cmp	r5, #8
 8002f36:	bf28      	it	cs
 8002f38:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 8002f3a:	9503      	str	r5, [sp, #12]
 8002f3c:	ab06      	add	r3, sp, #24
 8002f3e:	9302      	str	r3, [sp, #8]
 8002f40:	eb04 0309 	add.w	r3, r4, r9
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	1b3b      	subs	r3, r7, r4
 8002f4c:	4652      	mov	r2, sl
 8002f4e:	9905      	ldr	r1, [sp, #20]
 8002f50:	4640      	mov	r0, r8
 8002f52:	f7ff fc9b 	bl	800288c <lfs_bd_read>
        if (err) {
 8002f56:	4603      	mov	r3, r0
 8002f58:	b960      	cbnz	r0, 8002f74 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 8002f5a:	462a      	mov	r2, r5
 8002f5c:	eb0b 0104 	add.w	r1, fp, r4
 8002f60:	a806      	add	r0, sp, #24
 8002f62:	f003 ff54 	bl	8006e0e <memcmp>
        if (res) {
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d0e0      	beq.n	8002f2c <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	dbdc      	blt.n	8002f28 <lfs_bd_cmp+0x1c>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e000      	b.n	8002f74 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	b009      	add	sp, #36	; 0x24
 8002f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002f7c <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	4604      	mov	r4, r0
 8002f82:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 8002f84:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002f86:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 8002f88:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8002f8c:	42ab      	cmp	r3, r5
 8002f8e:	bf28      	it	cs
 8002f90:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 8002f98:	9303      	str	r3, [sp, #12]
 8002f9a:	6866      	ldr	r6, [r4, #4]
 8002f9c:	9602      	str	r6, [sp, #8]
 8002f9e:	9101      	str	r1, [sp, #4]
 8002fa0:	9200      	str	r2, [sp, #0]
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	f7ff ffb1 	bl	8002f0c <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 8002faa:	b920      	cbnz	r0, 8002fb6 <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 8002fac:	68a3      	ldr	r3, [r4, #8]
 8002fae:	42ab      	cmp	r3, r5
 8002fb0:	d001      	beq.n	8002fb6 <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002fb2:	d202      	bcs.n	8002fba <lfs_dir_find_match+0x3e>
 8002fb4:	2001      	movs	r0, #1
}
 8002fb6:	b004      	add	sp, #16
 8002fb8:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002fba:	2002      	movs	r0, #2
 8002fbc:	e7fb      	b.n	8002fb6 <lfs_dir_find_match+0x3a>

08002fbe <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8002fbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fc2:	b089      	sub	sp, #36	; 0x24
 8002fc4:	9305      	str	r3, [sp, #20]
 8002fc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (size == 0) {
 8002fc8:	b953      	cbnz	r3, 8002fe0 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002fd0:	6013      	str	r3, [r2, #0]
        *off = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	b009      	add	sp, #36	; 0x24
 8002fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fe0:	4607      	mov	r7, r0
 8002fe2:	4688      	mov	r8, r1
 8002fe4:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	9307      	str	r3, [sp, #28]
 8002fea:	a907      	add	r1, sp, #28
 8002fec:	f7ff ff24 	bl	8002e38 <lfs_ctz_index>
 8002ff0:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8002ff2:	a911      	add	r1, sp, #68	; 0x44
 8002ff4:	4638      	mov	r0, r7
 8002ff6:	f7ff ff1f 	bl	8002e38 <lfs_ctz_index>
 8002ffa:	4606      	mov	r6, r0
    while (current > target) {
 8002ffc:	42b5      	cmp	r5, r6
 8002ffe:	d91f      	bls.n	8003040 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 8003000:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 8003002:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 8003006:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 800300a:	fa95 f3a5 	rbit	r3, r5
 800300e:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 8003012:	429c      	cmp	r4, r3
 8003014:	bf28      	it	cs
 8003016:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 8003018:	2304      	movs	r3, #4
 800301a:	9303      	str	r3, [sp, #12]
 800301c:	aa05      	add	r2, sp, #20
 800301e:	9202      	str	r2, [sp, #8]
 8003020:	00a2      	lsls	r2, r4, #2
 8003022:	9201      	str	r2, [sp, #4]
 8003024:	9a05      	ldr	r2, [sp, #20]
 8003026:	9200      	str	r2, [sp, #0]
 8003028:	464a      	mov	r2, r9
 800302a:	4641      	mov	r1, r8
 800302c:	4638      	mov	r0, r7
 800302e:	f7ff fc2d 	bl	800288c <lfs_bd_read>
        if (err) {
 8003032:	4603      	mov	r3, r0
 8003034:	2800      	cmp	r0, #0
 8003036:	d1cf      	bne.n	8002fd8 <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 8003038:	2301      	movs	r3, #1
 800303a:	40a3      	lsls	r3, r4
 800303c:	1aed      	subs	r5, r5, r3
 800303e:	e7dd      	b.n	8002ffc <lfs_ctz_find+0x3e>
    *block = head;
 8003040:	9b05      	ldr	r3, [sp, #20]
 8003042:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003044:	6013      	str	r3, [r2, #0]
    *off = pos;
 8003046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800304a:	6013      	str	r3, [r2, #0]
    return 0;
 800304c:	2300      	movs	r3, #0
 800304e:	e7c3      	b.n	8002fd8 <lfs_ctz_find+0x1a>

08003050 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 8003050:	b510      	push	{r4, lr}
 8003052:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 8003054:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	b13b      	cbz	r3, 800306a <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 800305a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	b143      	cbz	r3, 8003072 <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 8003060:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	b14b      	cbz	r3, 800307a <lfs_deinit+0x2a>
}
 8003066:	2000      	movs	r0, #0
 8003068:	bd10      	pop	{r4, pc}
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
 800306a:	68c0      	ldr	r0, [r0, #12]
 800306c:	f003 fcfc 	bl	8006a68 <free>
#else
    (void)p;
#endif
}
 8003070:	e7f3      	b.n	800305a <lfs_deinit+0xa>
    free(p);
 8003072:	69e0      	ldr	r0, [r4, #28]
 8003074:	f003 fcf8 	bl	8006a68 <free>
}
 8003078:	e7f2      	b.n	8003060 <lfs_deinit+0x10>
    free(p);
 800307a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800307c:	f003 fcf4 	bl	8006a68 <free>
}
 8003080:	e7f1      	b.n	8003066 <lfs_deinit+0x16>

08003082 <lfs_rawunmount>:
static int lfs_rawunmount(lfs_t *lfs) {
 8003082:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 8003084:	f7ff ffe4 	bl	8003050 <lfs_deinit>
}
 8003088:	bd08      	pop	{r3, pc}
	...

0800308c <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4604      	mov	r4, r0
    lfs->cfg = cfg;
 8003090:	6681      	str	r1, [r0, #104]	; 0x68
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8003092:	694b      	ldr	r3, [r1, #20]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8095 	beq.w	80031c4 <lfs_init+0x138>
 800309a:	460d      	mov	r5, r1
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800309c:	698a      	ldr	r2, [r1, #24]
 800309e:	2a00      	cmp	r2, #0
 80030a0:	f000 8097 	beq.w	80031d2 <lfs_init+0x146>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80030a4:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80030a6:	2800      	cmp	r0, #0
 80030a8:	f000 809a 	beq.w	80031e0 <lfs_init+0x154>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80030ac:	fbb0 f1f3 	udiv	r1, r0, r3
 80030b0:	fb03 0311 	mls	r3, r3, r1, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f040 809a 	bne.w	80031ee <lfs_init+0x162>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 80030ba:	fbb0 f3f2 	udiv	r3, r0, r2
 80030be:	fb02 0313 	mls	r3, r2, r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f040 809a 	bne.w	80031fc <lfs_init+0x170>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 80030c8:	69ea      	ldr	r2, [r5, #28]
 80030ca:	fbb2 f3f0 	udiv	r3, r2, r0
 80030ce:	fb00 2313 	mls	r3, r0, r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 8099 	bne.w	800320a <lfs_init+0x17e>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 80030d8:	2a7f      	cmp	r2, #127	; 0x7f
 80030da:	f240 809d 	bls.w	8003218 <lfs_init+0x18c>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80030de:	f1a2 0108 	sub.w	r1, r2, #8
 80030e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030e6:	fbb3 f3f1 	udiv	r3, r3, r1
    return 32 - __builtin_clz(a-1);
 80030ea:	3b01      	subs	r3, #1
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	f1c3 0320 	rsb	r3, r3, #32
 80030f4:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 80030f8:	f0c0 8095 	bcc.w	8003226 <lfs_init+0x19a>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80030fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8098 	beq.w	8003234 <lfs_init+0x1a8>
    if (lfs->cfg->read_buffer) {
 8003104:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 809b 	beq.w	8003242 <lfs_init+0x1b6>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800310c:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 800310e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a2 	beq.w	800325a <lfs_init+0x1ce>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8003116:	61e3      	str	r3, [r4, #28]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8003118:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800311a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311c:	21ff      	movs	r1, #255	; 0xff
 800311e:	68e0      	ldr	r0, [r4, #12]
 8003120:	f003 fe85 	bl	8006e2e <memset>
    pcache->block = LFS_BLOCK_NULL;
 8003124:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003128:	4623      	mov	r3, r4
 800312a:	f843 5b10 	str.w	r5, [r3], #16
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800312e:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003130:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003132:	21ff      	movs	r1, #255	; 0xff
 8003134:	68d8      	ldr	r0, [r3, #12]
 8003136:	f003 fe7a 	bl	8006e2e <memset>
    pcache->block = LFS_BLOCK_NULL;
 800313a:	6125      	str	r5, [r4, #16]
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800313c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800313e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003140:	2800      	cmp	r0, #0
 8003142:	f000 8092 	beq.w	800326a <lfs_init+0x1de>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8003146:	f010 0f07 	tst.w	r0, #7
 800314a:	f040 8095 	bne.w	8003278 <lfs_init+0x1ec>
 800314e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003150:	f013 0f03 	tst.w	r3, #3
 8003154:	f040 8090 	bne.w	8003278 <lfs_init+0x1ec>
    if (lfs->cfg->lookahead_buffer) {
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8094 	beq.w	8003286 <lfs_init+0x1fa>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800315e:	6663      	str	r3, [r4, #100]	; 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8003160:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	f200 8096 	bhi.w	8003294 <lfs_init+0x208>
    lfs->name_max = lfs->cfg->name_max;
 8003168:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (!lfs->name_max) {
 800316a:	b90b      	cbnz	r3, 8003170 <lfs_init+0xe4>
        lfs->name_max = LFS_NAME_MAX;
 800316c:	23ff      	movs	r3, #255	; 0xff
 800316e:	66e3      	str	r3, [r4, #108]	; 0x6c
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8003170:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	f2c0 8095 	blt.w	80032a2 <lfs_init+0x216>
    lfs->file_max = lfs->cfg->file_max;
 8003178:	6723      	str	r3, [r4, #112]	; 0x70
    if (!lfs->file_max) {
 800317a:	b913      	cbnz	r3, 8003182 <lfs_init+0xf6>
        lfs->file_max = LFS_FILE_MAX;
 800317c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003180:	6723      	str	r3, [r4, #112]	; 0x70
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8003182:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003184:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8003188:	4293      	cmp	r3, r2
 800318a:	f200 8091 	bhi.w	80032b0 <lfs_init+0x224>
    lfs->attr_max = lfs->cfg->attr_max;
 800318e:	6763      	str	r3, [r4, #116]	; 0x74
    if (!lfs->attr_max) {
 8003190:	b913      	cbnz	r3, 8003198 <lfs_init+0x10c>
        lfs->attr_max = LFS_ATTR_MAX;
 8003192:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8003196:	6763      	str	r3, [r4, #116]	; 0x74
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8003198:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800319a:	69eb      	ldr	r3, [r5, #28]
 800319c:	429a      	cmp	r2, r3
 800319e:	f200 808e 	bhi.w	80032be <lfs_init+0x232>
    lfs->root[0] = LFS_BLOCK_NULL;
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031a6:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80031a8:	6263      	str	r3, [r4, #36]	; 0x24
    lfs->mlist = NULL;
 80031aa:	2000      	movs	r0, #0
 80031ac:	62a0      	str	r0, [r4, #40]	; 0x28
    lfs->seed = 0;
 80031ae:	62e0      	str	r0, [r4, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80031b0:	63e0      	str	r0, [r4, #60]	; 0x3c
 80031b2:	6420      	str	r0, [r4, #64]	; 0x40
 80031b4:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
 80031b6:	6320      	str	r0, [r4, #48]	; 0x30
 80031b8:	6360      	str	r0, [r4, #52]	; 0x34
 80031ba:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 80031bc:	64a0      	str	r0, [r4, #72]	; 0x48
 80031be:	64e0      	str	r0, [r4, #76]	; 0x4c
 80031c0:	6520      	str	r0, [r4, #80]	; 0x50
}
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80031c4:	4b41      	ldr	r3, [pc, #260]	; (80032cc <lfs_init+0x240>)
 80031c6:	4a42      	ldr	r2, [pc, #264]	; (80032d0 <lfs_init+0x244>)
 80031c8:	f241 0115 	movw	r1, #4117	; 0x1015
 80031cc:	4841      	ldr	r0, [pc, #260]	; (80032d4 <lfs_init+0x248>)
 80031ce:	f003 fc25 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <lfs_init+0x24c>)
 80031d4:	4a3e      	ldr	r2, [pc, #248]	; (80032d0 <lfs_init+0x244>)
 80031d6:	f241 0116 	movw	r1, #4118	; 0x1016
 80031da:	483e      	ldr	r0, [pc, #248]	; (80032d4 <lfs_init+0x248>)
 80031dc:	f003 fc1e 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80031e0:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <lfs_init+0x250>)
 80031e2:	4a3b      	ldr	r2, [pc, #236]	; (80032d0 <lfs_init+0x244>)
 80031e4:	f241 0117 	movw	r1, #4119	; 0x1017
 80031e8:	483a      	ldr	r0, [pc, #232]	; (80032d4 <lfs_init+0x248>)
 80031ea:	f003 fc17 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80031ee:	4b3c      	ldr	r3, [pc, #240]	; (80032e0 <lfs_init+0x254>)
 80031f0:	4a37      	ldr	r2, [pc, #220]	; (80032d0 <lfs_init+0x244>)
 80031f2:	f241 011b 	movw	r1, #4123	; 0x101b
 80031f6:	4837      	ldr	r0, [pc, #220]	; (80032d4 <lfs_init+0x248>)
 80031f8:	f003 fc10 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 80031fc:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <lfs_init+0x258>)
 80031fe:	4a34      	ldr	r2, [pc, #208]	; (80032d0 <lfs_init+0x244>)
 8003200:	f241 011c 	movw	r1, #4124	; 0x101c
 8003204:	4833      	ldr	r0, [pc, #204]	; (80032d4 <lfs_init+0x248>)
 8003206:	f003 fc09 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800320a:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <lfs_init+0x25c>)
 800320c:	4a30      	ldr	r2, [pc, #192]	; (80032d0 <lfs_init+0x244>)
 800320e:	f241 011d 	movw	r1, #4125	; 0x101d
 8003212:	4830      	ldr	r0, [pc, #192]	; (80032d4 <lfs_init+0x248>)
 8003214:	f003 fc02 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8003218:	4b34      	ldr	r3, [pc, #208]	; (80032ec <lfs_init+0x260>)
 800321a:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <lfs_init+0x244>)
 800321c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8003220:	482c      	ldr	r0, [pc, #176]	; (80032d4 <lfs_init+0x248>)
 8003222:	f003 fbfb 	bl	8006a1c <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8003226:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <lfs_init+0x264>)
 8003228:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <lfs_init+0x244>)
 800322a:	f241 0123 	movw	r1, #4131	; 0x1023
 800322e:	4829      	ldr	r0, [pc, #164]	; (80032d4 <lfs_init+0x248>)
 8003230:	f003 fbf4 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8003234:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <lfs_init+0x268>)
 8003236:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <lfs_init+0x244>)
 8003238:	f241 012c 	movw	r1, #4140	; 0x102c
 800323c:	4825      	ldr	r0, [pc, #148]	; (80032d4 <lfs_init+0x248>)
 800323e:	f003 fbed 	bl	8006a1c <__assert_func>
    return malloc(size);
 8003242:	f003 fc09 	bl	8006a58 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8003246:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 8003248:	2800      	cmp	r0, #0
 800324a:	f47f af60 	bne.w	800310e <lfs_init+0x82>
    lfs_deinit(lfs);
 800324e:	4620      	mov	r0, r4
 8003250:	f7ff fefe 	bl	8003050 <lfs_deinit>
    return err;
 8003254:	f06f 000b 	mvn.w	r0, #11
 8003258:	e7b3      	b.n	80031c2 <lfs_init+0x136>
 800325a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800325c:	f003 fbfc 	bl	8006a58 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8003260:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 8003262:	2800      	cmp	r0, #0
 8003264:	f47f af58 	bne.w	8003118 <lfs_init+0x8c>
 8003268:	e7f1      	b.n	800324e <lfs_init+0x1c2>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800326a:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <lfs_init+0x26c>)
 800326c:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <lfs_init+0x244>)
 800326e:	f241 014a 	movw	r1, #4170	; 0x104a
 8003272:	4818      	ldr	r0, [pc, #96]	; (80032d4 <lfs_init+0x248>)
 8003274:	f003 fbd2 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8003278:	4b20      	ldr	r3, [pc, #128]	; (80032fc <lfs_init+0x270>)
 800327a:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <lfs_init+0x244>)
 800327c:	f241 014b 	movw	r1, #4171	; 0x104b
 8003280:	4814      	ldr	r0, [pc, #80]	; (80032d4 <lfs_init+0x248>)
 8003282:	f003 fbcb 	bl	8006a1c <__assert_func>
 8003286:	f003 fbe7 	bl	8006a58 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800328a:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
 800328c:	2800      	cmp	r0, #0
 800328e:	f47f af67 	bne.w	8003160 <lfs_init+0xd4>
 8003292:	e7dc      	b.n	800324e <lfs_init+0x1c2>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8003294:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <lfs_init+0x274>)
 8003296:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <lfs_init+0x244>)
 8003298:	f241 0158 	movw	r1, #4184	; 0x1058
 800329c:	480d      	ldr	r0, [pc, #52]	; (80032d4 <lfs_init+0x248>)
 800329e:	f003 fbbd 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80032a2:	4b18      	ldr	r3, [pc, #96]	; (8003304 <lfs_init+0x278>)
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <lfs_init+0x244>)
 80032a6:	f241 015e 	movw	r1, #4190	; 0x105e
 80032aa:	480a      	ldr	r0, [pc, #40]	; (80032d4 <lfs_init+0x248>)
 80032ac:	f003 fbb6 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80032b0:	4b15      	ldr	r3, [pc, #84]	; (8003308 <lfs_init+0x27c>)
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <lfs_init+0x244>)
 80032b4:	f241 0164 	movw	r1, #4196	; 0x1064
 80032b8:	4806      	ldr	r0, [pc, #24]	; (80032d4 <lfs_init+0x248>)
 80032ba:	f003 fbaf 	bl	8006a1c <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <lfs_init+0x280>)
 80032c0:	4a03      	ldr	r2, [pc, #12]	; (80032d0 <lfs_init+0x244>)
 80032c2:	f241 016a 	movw	r1, #4202	; 0x106a
 80032c6:	4803      	ldr	r0, [pc, #12]	; (80032d4 <lfs_init+0x248>)
 80032c8:	f003 fba8 	bl	8006a1c <__assert_func>
 80032cc:	08007c3c 	.word	0x08007c3c
 80032d0:	080085c0 	.word	0x080085c0
 80032d4:	08007ba4 	.word	0x08007ba4
 80032d8:	08007c58 	.word	0x08007c58
 80032dc:	08007c74 	.word	0x08007c74
 80032e0:	08007c90 	.word	0x08007c90
 80032e4:	08007cc0 	.word	0x08007cc0
 80032e8:	08007cf0 	.word	0x08007cf0
 80032ec:	08007d24 	.word	0x08007d24
 80032f0:	08007d40 	.word	0x08007d40
 80032f4:	08007d8c 	.word	0x08007d8c
 80032f8:	08007da8 	.word	0x08007da8
 80032fc:	08007dc8 	.word	0x08007dc8
 8003300:	08007e1c 	.word	0x08007e1c
 8003304:	08007e38 	.word	0x08007e38
 8003308:	08007e5c 	.word	0x08007e5c
 800330c:	08007e78 	.word	0x08007e78

08003310 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8003310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003314:	b085      	sub	sp, #20
 8003316:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8003318:	6809      	ldr	r1, [r1, #0]
 800331a:	f111 0f03 	cmn.w	r1, #3
 800331e:	d844      	bhi.n	80033aa <lfs_bd_flush+0x9a>
 8003320:	4607      	mov	r7, r0
 8003322:	4691      	mov	r9, r2
 8003324:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8003326:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8003328:	6a03      	ldr	r3, [r0, #32]
 800332a:	4299      	cmp	r1, r3
 800332c:	d231      	bcs.n	8003392 <lfs_bd_flush+0x82>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800332e:	68a5      	ldr	r5, [r4, #8]
 8003330:	6982      	ldr	r2, [r0, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 8003332:	4415      	add	r5, r2
 8003334:	3d01      	subs	r5, #1
    return a - (a % alignment);
 8003336:	fbb5 f3f2 	udiv	r3, r5, r2
 800333a:	fb02 5313 	mls	r3, r2, r3, r5
 800333e:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8003340:	6885      	ldr	r5, [r0, #8]
 8003342:	9600      	str	r6, [sp, #0]
 8003344:	68e3      	ldr	r3, [r4, #12]
 8003346:	6862      	ldr	r2, [r4, #4]
 8003348:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 800334a:	1e05      	subs	r5, r0, #0
 800334c:	dc27      	bgt.n	800339e <lfs_bd_flush+0x8e>
        if (err) {
 800334e:	bb6d      	cbnz	r5, 80033ac <lfs_bd_flush+0x9c>
        if (validate) {
 8003350:	f1b8 0f00 	cmp.w	r8, #0
 8003354:	d013      	beq.n	800337e <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800335a:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 800335e:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 8003360:	9603      	str	r6, [sp, #12]
 8003362:	9302      	str	r3, [sp, #8]
 8003364:	6863      	ldr	r3, [r4, #4]
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	4633      	mov	r3, r6
 800336e:	464a      	mov	r2, r9
 8003370:	2100      	movs	r1, #0
 8003372:	4638      	mov	r0, r7
 8003374:	f7ff fdca 	bl	8002f0c <lfs_bd_cmp>
            if (res < 0) {
 8003378:	2800      	cmp	r0, #0
 800337a:	db1b      	blt.n	80033b4 <lfs_bd_flush+0xa4>
            if (res != LFS_CMP_EQ) {
 800337c:	b9e0      	cbnz	r0, 80033b8 <lfs_bd_flush+0xa8>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800337e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003382:	21ff      	movs	r1, #255	; 0xff
 8003384:	68e0      	ldr	r0, [r4, #12]
 8003386:	f003 fd52 	bl	8006e2e <memset>
    pcache->block = LFS_BLOCK_NULL;
 800338a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800338e:	6023      	str	r3, [r4, #0]
}
 8003390:	e00c      	b.n	80033ac <lfs_bd_flush+0x9c>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <lfs_bd_flush+0xb0>)
 8003394:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <lfs_bd_flush+0xb4>)
 8003396:	21b3      	movs	r1, #179	; 0xb3
 8003398:	480b      	ldr	r0, [pc, #44]	; (80033c8 <lfs_bd_flush+0xb8>)
 800339a:	f003 fb3f 	bl	8006a1c <__assert_func>
        LFS_ASSERT(err <= 0);
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <lfs_bd_flush+0xbc>)
 80033a0:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <lfs_bd_flush+0xb4>)
 80033a2:	21b7      	movs	r1, #183	; 0xb7
 80033a4:	4808      	ldr	r0, [pc, #32]	; (80033c8 <lfs_bd_flush+0xb8>)
 80033a6:	f003 fb39 	bl	8006a1c <__assert_func>
    return 0;
 80033aa:	2500      	movs	r5, #0
}
 80033ac:	4628      	mov	r0, r5
 80033ae:	b005      	add	sp, #20
 80033b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 80033b4:	4605      	mov	r5, r0
 80033b6:	e7f9      	b.n	80033ac <lfs_bd_flush+0x9c>
                return LFS_ERR_CORRUPT;
 80033b8:	f06f 0553 	mvn.w	r5, #83	; 0x53
 80033bc:	e7f6      	b.n	80033ac <lfs_bd_flush+0x9c>
 80033be:	bf00      	nop
 80033c0:	08007ea8 	.word	0x08007ea8
 80033c4:	0800862c 	.word	0x0800862c
 80033c8:	08007ba4 	.word	0x08007ba4
 80033cc:	08007bb8 	.word	0x08007bb8

080033d0 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 80033d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d4:	b083      	sub	sp, #12
 80033d6:	4607      	mov	r7, r0
 80033d8:	460c      	mov	r4, r1
 80033da:	9201      	str	r2, [sp, #4]
 80033dc:	469b      	mov	fp, r3
 80033de:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80033e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80033e2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80033e6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 80033ea:	f116 0f02 	cmn.w	r6, #2
 80033ee:	d003      	beq.n	80033f8 <lfs_bd_prog+0x28>
 80033f0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	42b3      	cmp	r3, r6
 80033f6:	d90b      	bls.n	8003410 <lfs_bd_prog+0x40>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80033f8:	eb05 0308 	add.w	r3, r5, r8
 80033fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033fe:	69d2      	ldr	r2, [r2, #28]
 8003400:	4293      	cmp	r3, r2
 8003402:	d919      	bls.n	8003438 <lfs_bd_prog+0x68>
 8003404:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <lfs_bd_prog+0xe4>)
 8003406:	4a2c      	ldr	r2, [pc, #176]	; (80034b8 <lfs_bd_prog+0xe8>)
 8003408:	21e9      	movs	r1, #233	; 0xe9
 800340a:	482c      	ldr	r0, [pc, #176]	; (80034bc <lfs_bd_prog+0xec>)
 800340c:	f003 fb06 	bl	8006a1c <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8003410:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <lfs_bd_prog+0xf0>)
 8003412:	4a29      	ldr	r2, [pc, #164]	; (80034b8 <lfs_bd_prog+0xe8>)
 8003414:	21e8      	movs	r1, #232	; 0xe8
 8003416:	4829      	ldr	r0, [pc, #164]	; (80034bc <lfs_bd_prog+0xec>)
 8003418:	f003 fb00 	bl	8006a1c <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003420:	d13c      	bne.n	800349c <lfs_bd_prog+0xcc>
        pcache->block = block;
 8003422:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8003424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003426:	699a      	ldr	r2, [r3, #24]
 8003428:	fbb5 f3f2 	udiv	r3, r5, r2
 800342c:	fb02 5313 	mls	r3, r2, r3, r5
 8003430:	1aeb      	subs	r3, r5, r3
 8003432:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 8003438:	f1b8 0f00 	cmp.w	r8, #0
 800343c:	d035      	beq.n	80034aa <lfs_bd_prog+0xda>
        if (block == pcache->block &&
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	42b3      	cmp	r3, r6
 8003442:	d1eb      	bne.n	800341c <lfs_bd_prog+0x4c>
                off >= pcache->off &&
 8003444:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 8003446:	42aa      	cmp	r2, r5
 8003448:	d8e8      	bhi.n	800341c <lfs_bd_prog+0x4c>
                off < pcache->off + lfs->cfg->cache_size) {
 800344a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800344c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800344e:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 8003450:	42a8      	cmp	r0, r5
 8003452:	d9e3      	bls.n	800341c <lfs_bd_prog+0x4c>
                    lfs->cfg->cache_size - (off-pcache->off));
 8003454:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 8003456:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 800345a:	45c1      	cmp	r9, r8
 800345c:	bf28      	it	cs
 800345e:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8003460:	68e3      	ldr	r3, [r4, #12]
 8003462:	1aa8      	subs	r0, r5, r2
 8003464:	464a      	mov	r2, r9
 8003466:	4651      	mov	r1, sl
 8003468:	4418      	add	r0, r3
 800346a:	f003 fd99 	bl	8006fa0 <memcpy>
            data += diff;
 800346e:	44ca      	add	sl, r9
            off += diff;
 8003470:	444d      	add	r5, r9
            size -= diff;
 8003472:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8003476:	68a3      	ldr	r3, [r4, #8]
 8003478:	6862      	ldr	r2, [r4, #4]
 800347a:	1aaa      	subs	r2, r5, r2
    return (a > b) ? a : b;
 800347c:	4293      	cmp	r3, r2
 800347e:	bf38      	it	cc
 8003480:	4613      	movcc	r3, r2
 8003482:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8003484:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003486:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003488:	429a      	cmp	r2, r3
 800348a:	d1d5      	bne.n	8003438 <lfs_bd_prog+0x68>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800348c:	465b      	mov	r3, fp
 800348e:	9a01      	ldr	r2, [sp, #4]
 8003490:	4621      	mov	r1, r4
 8003492:	4638      	mov	r0, r7
 8003494:	f7ff ff3c 	bl	8003310 <lfs_bd_flush>
                if (err) {
 8003498:	b940      	cbnz	r0, 80034ac <lfs_bd_prog+0xdc>
 800349a:	e7cd      	b.n	8003438 <lfs_bd_prog+0x68>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <lfs_bd_prog+0xf4>)
 800349e:	4a06      	ldr	r2, [pc, #24]	; (80034b8 <lfs_bd_prog+0xe8>)
 80034a0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80034a4:	4805      	ldr	r0, [pc, #20]	; (80034bc <lfs_bd_prog+0xec>)
 80034a6:	f003 fab9 	bl	8006a1c <__assert_func>
    return 0;
 80034aa:	2000      	movs	r0, #0
}
 80034ac:	b003      	add	sp, #12
 80034ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b2:	bf00      	nop
 80034b4:	08007f0c 	.word	0x08007f0c
 80034b8:	0800863c 	.word	0x0800863c
 80034bc:	08007ba4 	.word	0x08007ba4
 80034c0:	08007ed0 	.word	0x08007ed0
 80034c4:	08007f30 	.word	0x08007f30

080034c8 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 80034c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ca:	b085      	sub	sp, #20
 80034cc:	460c      	mov	r4, r1
 80034ce:	4616      	mov	r6, r2
 80034d0:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 80034d2:	9303      	str	r3, [sp, #12]
 80034d4:	9202      	str	r2, [sp, #8]
 80034d6:	684b      	ldr	r3, [r1, #4]
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	680b      	ldr	r3, [r1, #0]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2300      	movs	r3, #0
 80034e0:	4602      	mov	r2, r0
 80034e2:	f100 0110 	add.w	r1, r0, #16
 80034e6:	f7ff ff73 	bl	80033d0 <lfs_bd_prog>
    if (err) {
 80034ea:	4607      	mov	r7, r0
 80034ec:	b110      	cbz	r0, 80034f4 <lfs_dir_commitprog+0x2c>
}
 80034ee:	4638      	mov	r0, r7
 80034f0:	b005      	add	sp, #20
 80034f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 80034f4:	462a      	mov	r2, r5
 80034f6:	4631      	mov	r1, r6
 80034f8:	68e0      	ldr	r0, [r4, #12]
 80034fa:	f003 f9ab 	bl	8006854 <lfs_crc>
 80034fe:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 8003500:	6863      	ldr	r3, [r4, #4]
 8003502:	442b      	add	r3, r5
 8003504:	6063      	str	r3, [r4, #4]
    return 0;
 8003506:	e7f2      	b.n	80034ee <lfs_dir_commitprog+0x26>

08003508 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 8003508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800350c:	b087      	sub	sp, #28
 800350e:	4614      	mov	r4, r2
 8003510:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003512:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800351a:	bf14      	ite	ne
 800351c:	4690      	movne	r8, r2
 800351e:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 8003522:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003526:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 800352a:	684b      	ldr	r3, [r1, #4]
 800352c:	444b      	add	r3, r9
 800352e:	694a      	ldr	r2, [r1, #20]
 8003530:	4293      	cmp	r3, r2
 8003532:	d841      	bhi.n	80035b8 <lfs_dir_commitattr+0xb0>
 8003534:	4605      	mov	r5, r0
 8003536:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8003538:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 800353c:	688b      	ldr	r3, [r1, #8]
 800353e:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 8003542:	ba1b      	rev	r3, r3
 8003544:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8003546:	2304      	movs	r3, #4
 8003548:	aa05      	add	r2, sp, #20
 800354a:	f7ff ffbd 	bl	80034c8 <lfs_dir_commitprog>
    if (err) {
 800354e:	4682      	mov	sl, r0
 8003550:	bb60      	cbnz	r0, 80035ac <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 8003552:	2c00      	cmp	r4, #0
 8003554:	da21      	bge.n	800359a <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003556:	2400      	movs	r4, #0
 8003558:	4544      	cmp	r4, r8
 800355a:	d225      	bcs.n	80035a8 <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800355c:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 8003560:	6839      	ldr	r1, [r7, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 8003564:	2001      	movs	r0, #1
 8003566:	9003      	str	r0, [sp, #12]
 8003568:	f10d 0013 	add.w	r0, sp, #19
 800356c:	9002      	str	r0, [sp, #8]
 800356e:	4422      	add	r2, r4
 8003570:	9201      	str	r2, [sp, #4]
 8003572:	9100      	str	r1, [sp, #0]
 8003574:	3b04      	subs	r3, #4
 8003576:	462a      	mov	r2, r5
 8003578:	2100      	movs	r1, #0
 800357a:	4628      	mov	r0, r5
 800357c:	f7ff f986 	bl	800288c <lfs_bd_read>
            if (err) {
 8003580:	4603      	mov	r3, r0
 8003582:	b9b8      	cbnz	r0, 80035b4 <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8003584:	2301      	movs	r3, #1
 8003586:	f10d 0213 	add.w	r2, sp, #19
 800358a:	4631      	mov	r1, r6
 800358c:	4628      	mov	r0, r5
 800358e:	f7ff ff9b 	bl	80034c8 <lfs_dir_commitprog>
            if (err) {
 8003592:	4603      	mov	r3, r0
 8003594:	b970      	cbnz	r0, 80035b4 <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003596:	3401      	adds	r4, #1
 8003598:	e7de      	b.n	8003558 <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800359a:	4643      	mov	r3, r8
 800359c:	463a      	mov	r2, r7
 800359e:	4631      	mov	r1, r6
 80035a0:	4628      	mov	r0, r5
 80035a2:	f7ff ff91 	bl	80034c8 <lfs_dir_commitprog>
        if (err) {
 80035a6:	b950      	cbnz	r0, 80035be <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 80035a8:	f8c6 b008 	str.w	fp, [r6, #8]
}
 80035ac:	4650      	mov	r0, sl
 80035ae:	b007      	add	sp, #28
 80035b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 80035b4:	469a      	mov	sl, r3
 80035b6:	e7f9      	b.n	80035ac <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 80035b8:	f06f 0a1b 	mvn.w	sl, #27
 80035bc:	e7f6      	b.n	80035ac <lfs_dir_commitattr+0xa4>
            return err;
 80035be:	4682      	mov	sl, r0
 80035c0:	e7f4      	b.n	80035ac <lfs_dir_commitattr+0xa4>

080035c2 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80035c2:	b508      	push	{r3, lr}
 80035c4:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80035c6:	460a      	mov	r2, r1
 80035c8:	6841      	ldr	r1, [r0, #4]
 80035ca:	6800      	ldr	r0, [r0, #0]
 80035cc:	f7ff ff9c 	bl	8003508 <lfs_dir_commitattr>
}
 80035d0:	bd08      	pop	{r3, pc}
	...

080035d4 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 80035d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80035dc:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80035de:	f7ff fe97 	bl	8003310 <lfs_bd_flush>
    if (err) {
 80035e2:	4603      	mov	r3, r0
 80035e4:	b920      	cbnz	r0, 80035f0 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 80035e6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80035e8:	6903      	ldr	r3, [r0, #16]
 80035ea:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	dc01      	bgt.n	80035f4 <lfs_bd_sync+0x20>
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 80035f4:	4b02      	ldr	r3, [pc, #8]	; (8003600 <lfs_bd_sync+0x2c>)
 80035f6:	4a03      	ldr	r2, [pc, #12]	; (8003604 <lfs_bd_sync+0x30>)
 80035f8:	21dd      	movs	r1, #221	; 0xdd
 80035fa:	4803      	ldr	r0, [pc, #12]	; (8003608 <lfs_bd_sync+0x34>)
 80035fc:	f003 fa0e 	bl	8006a1c <__assert_func>
 8003600:	08007bb8 	.word	0x08007bb8
 8003604:	080085f0 	.word	0x080085f0
 8003608:	08007ba4 	.word	0x08007ba4

0800360c <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003610:	b08b      	sub	sp, #44	; 0x2c
 8003612:	4607      	mov	r7, r0
 8003614:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003616:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 8003618:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800361a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800361c:	69d1      	ldr	r1, [r2, #28]
            lfs->cfg->prog_size);
 800361e:	6992      	ldr	r2, [r2, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 8003620:	428b      	cmp	r3, r1
 8003622:	bf94      	ite	ls
 8003624:	eb02 0803 	addls.w	r8, r2, r3
 8003628:	eb02 0801 	addhi.w	r8, r2, r1
 800362c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    return a - (a % alignment);
 8003630:	fbb8 f3f2 	udiv	r3, r8, r2
 8003634:	fb02 8313 	mls	r3, r2, r3, r8
 8003638:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 8003640:	469b      	mov	fp, r3
    while (commit->off < end) {
 8003642:	e03c      	b.n	80036be <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 8003644:	2201      	movs	r2, #1
 8003646:	9203      	str	r2, [sp, #12]
 8003648:	f10d 021b 	add.w	r2, sp, #27
 800364c:	9202      	str	r2, [sp, #8]
 800364e:	9401      	str	r4, [sp, #4]
 8003650:	6832      	ldr	r2, [r6, #0]
 8003652:	9200      	str	r2, [sp, #0]
 8003654:	463a      	mov	r2, r7
 8003656:	2100      	movs	r1, #0
 8003658:	4638      	mov	r0, r7
 800365a:	f7ff f917 	bl	800288c <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 800365e:	4603      	mov	r3, r0
 8003660:	b118      	cbz	r0, 800366a <lfs_dir_commitcrc+0x5e>
 8003662:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003666:	f040 80c0 	bne.w	80037ea <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 800366a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800366c:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 800366e:	9307      	str	r3, [sp, #28]
 8003670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003674:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 8003676:	aa08      	add	r2, sp, #32
 8003678:	9203      	str	r2, [sp, #12]
 800367a:	9302      	str	r3, [sp, #8]
 800367c:	9401      	str	r4, [sp, #4]
 800367e:	6832      	ldr	r2, [r6, #0]
 8003680:	9200      	str	r2, [sp, #0]
 8003682:	463a      	mov	r2, r7
 8003684:	2100      	movs	r1, #0
 8003686:	4638      	mov	r0, r7
 8003688:	f7ff fa10 	bl	8002aac <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 800368c:	4603      	mov	r3, r0
 800368e:	b118      	cbz	r0, 8003698 <lfs_dir_commitcrc+0x8c>
 8003690:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003694:	f040 80a9 	bne.w	80037ea <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 8003698:	ab07      	add	r3, sp, #28
 800369a:	4a59      	ldr	r2, [pc, #356]	; (8003800 <lfs_dir_commitcrc+0x1f4>)
 800369c:	4631      	mov	r1, r6
 800369e:	4638      	mov	r0, r7
 80036a0:	f7ff ff32 	bl	8003508 <lfs_dir_commitattr>
                if (err) {
 80036a4:	4603      	mov	r3, r0
 80036a6:	b348      	cbz	r0, 80036fc <lfs_dir_commitcrc+0xf0>
 80036a8:	e09f      	b.n	80037ea <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80036aa:	2300      	movs	r3, #0
 80036ac:	463a      	mov	r2, r7
 80036ae:	4651      	mov	r1, sl
 80036b0:	4638      	mov	r0, r7
 80036b2:	f7ff ff8f 	bl	80035d4 <lfs_bd_sync>
            if (err) {
 80036b6:	4603      	mov	r3, r0
 80036b8:	2800      	cmp	r0, #0
 80036ba:	f040 8096 	bne.w	80037ea <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 80036be:	6874      	ldr	r4, [r6, #4]
 80036c0:	4544      	cmp	r4, r8
 80036c2:	d268      	bcs.n	8003796 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80036c4:	eba8 0304 	sub.w	r3, r8, r4
 80036c8:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 80036ca:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80036ce:	4293      	cmp	r3, r2
 80036d0:	bf94      	ite	ls
 80036d2:	18e4      	addls	r4, r4, r3
 80036d4:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 80036d6:	3404      	adds	r4, #4
        if (noff < end) {
 80036d8:	4544      	cmp	r4, r8
 80036da:	d204      	bcs.n	80036e6 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80036dc:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 80036e0:	429c      	cmp	r4, r3
 80036e2:	bf28      	it	cs
 80036e4:	461c      	movcs	r4, r3
        uint8_t eperturb = -1;
 80036e6:	23ff      	movs	r3, #255	; 0xff
 80036e8:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80036ec:	4544      	cmp	r4, r8
 80036ee:	d305      	bcc.n	80036fc <lfs_dir_commitcrc+0xf0>
 80036f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	1ad2      	subs	r2, r2, r3
 80036f8:	42a2      	cmp	r2, r4
 80036fa:	d2a3      	bcs.n	8003644 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 80036fc:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8003700:	43d2      	mvns	r2, r2
 8003702:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8003706:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800370a:	6873      	ldr	r3, [r6, #4]
 800370c:	1ae5      	subs	r5, r4, r3
 800370e:	3d04      	subs	r5, #4
 8003710:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 8003714:	f445 257f 	orr.w	r5, r5, #1044480	; 0xff000
 8003718:	f445 6540 	orr.w	r5, r5, #3072	; 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 800371c:	68b3      	ldr	r3, [r6, #8]
 800371e:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 8003720:	ba1b      	rev	r3, r3
 8003722:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8003724:	f10d 091c 	add.w	r9, sp, #28
 8003728:	2204      	movs	r2, #4
 800372a:	4649      	mov	r1, r9
 800372c:	68f0      	ldr	r0, [r6, #12]
 800372e:	f003 f891 	bl	8006854 <lfs_crc>
 8003732:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8003734:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 8003736:	f107 0a10 	add.w	sl, r7, #16
 800373a:	2308      	movs	r3, #8
 800373c:	9303      	str	r3, [sp, #12]
 800373e:	f8cd 9008 	str.w	r9, [sp, #8]
 8003742:	6873      	ldr	r3, [r6, #4]
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	6833      	ldr	r3, [r6, #0]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2300      	movs	r3, #0
 800374c:	463a      	mov	r2, r7
 800374e:	4651      	mov	r1, sl
 8003750:	4638      	mov	r0, r7
 8003752:	f7ff fe3d 	bl	80033d0 <lfs_bd_prog>
        if (err) {
 8003756:	4603      	mov	r3, r0
 8003758:	2800      	cmp	r0, #0
 800375a:	d146      	bne.n	80037ea <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 800375c:	f1bb 0f00 	cmp.w	fp, #0
 8003760:	d104      	bne.n	800376c <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 8003762:	6873      	ldr	r3, [r6, #4]
 8003764:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 8003768:	68f3      	ldr	r3, [r6, #12]
 800376a:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 800376c:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 800376e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003772:	43db      	mvns	r3, r3
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800377a:	406b      	eors	r3, r5
 800377c:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 800377e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003782:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8003784:	4544      	cmp	r4, r8
 8003786:	d290      	bcs.n	80036aa <lfs_dir_commitcrc+0x9e>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800378c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800378e:	4413      	add	r3, r2
 8003790:	42a3      	cmp	r3, r4
 8003792:	d894      	bhi.n	80036be <lfs_dir_commitcrc+0xb2>
 8003794:	e789      	b.n	80036aa <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 8003796:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 8003798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800379c:	9209      	str	r2, [sp, #36]	; 0x24
    int err = lfs_bd_crc(lfs,
 800379e:	aa09      	add	r2, sp, #36	; 0x24
 80037a0:	9203      	str	r2, [sp, #12]
 80037a2:	ebab 0203 	sub.w	r2, fp, r3
 80037a6:	9202      	str	r2, [sp, #8]
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	6833      	ldr	r3, [r6, #0]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	f10b 0304 	add.w	r3, fp, #4
 80037b2:	463a      	mov	r2, r7
 80037b4:	2100      	movs	r1, #0
 80037b6:	4638      	mov	r0, r7
 80037b8:	f7ff f978 	bl	8002aac <lfs_bd_crc>
    if (err) {
 80037bc:	4603      	mov	r3, r0
 80037be:	b9a0      	cbnz	r0, 80037ea <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 80037c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c2:	9a05      	ldr	r2, [sp, #20]
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d114      	bne.n	80037f2 <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 80037c8:	ab09      	add	r3, sp, #36	; 0x24
 80037ca:	9303      	str	r3, [sp, #12]
 80037cc:	2304      	movs	r3, #4
 80037ce:	9302      	str	r3, [sp, #8]
 80037d0:	f8cd b004 	str.w	fp, [sp, #4]
 80037d4:	6832      	ldr	r2, [r6, #0]
 80037d6:	9200      	str	r2, [sp, #0]
 80037d8:	463a      	mov	r2, r7
 80037da:	2100      	movs	r1, #0
 80037dc:	4638      	mov	r0, r7
 80037de:	f7ff f965 	bl	8002aac <lfs_bd_crc>
    if (err) {
 80037e2:	4603      	mov	r3, r0
 80037e4:	b908      	cbnz	r0, 80037ea <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 80037e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037e8:	b932      	cbnz	r2, 80037f8 <lfs_dir_commitcrc+0x1ec>
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	b00b      	add	sp, #44	; 0x2c
 80037ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 80037f2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80037f6:	e7f8      	b.n	80037ea <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 80037f8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80037fc:	e7f5      	b.n	80037ea <lfs_dir_commitcrc+0x1de>
 80037fe:	bf00      	nop
 8003800:	5ffffc08 	.word	0x5ffffc08

08003804 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8003804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003808:	b089      	sub	sp, #36	; 0x24
 800380a:	4606      	mov	r6, r0
 800380c:	468a      	mov	sl, r1
 800380e:	4690      	mov	r8, r2
 8003810:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 8003812:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 8003814:	690b      	ldr	r3, [r1, #16]
 8003816:	9307      	str	r3, [sp, #28]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8003818:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 800381a:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800381c:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 8003820:	d010      	beq.n	8003844 <lfs_dir_getslice+0x40>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8003822:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003824:	6809      	ldr	r1, [r1, #0]
 8003826:	428b      	cmp	r3, r1
 8003828:	d01f      	beq.n	800386a <lfs_dir_getslice+0x66>
 800382a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800382c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003830:	4290      	cmp	r0, r2
 8003832:	d01c      	beq.n	800386e <lfs_dir_getslice+0x6a>
 8003834:	4293      	cmp	r3, r2
 8003836:	d01c      	beq.n	8003872 <lfs_dir_getslice+0x6e>
 8003838:	4281      	cmp	r1, r0
 800383a:	d001      	beq.n	8003840 <lfs_dir_getslice+0x3c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800383c:	2300      	movs	r3, #0
 800383e:	e002      	b.n	8003846 <lfs_dir_getslice+0x42>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <lfs_dir_getslice+0x42>
 8003844:	2300      	movs	r3, #0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 808a 	beq.w	8003960 <lfs_dir_getslice+0x15c>
    return (tag & 0x000ffc00) >> 10;
 800384c:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8087 	beq.w	8003964 <lfs_dir_getslice+0x160>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8003856:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    return (tag & 0x000ffc00) >> 10;
 8003858:	f3c3 2389 	ubfx	r3, r3, #10, #10
 800385c:	f3cb 2289 	ubfx	r2, fp, #10, #10
            lfs_tag_id(gmask) != 0 &&
 8003860:	4293      	cmp	r3, r2
 8003862:	f240 8081 	bls.w	8003968 <lfs_dir_getslice+0x164>
    lfs_stag_t gdiff = 0;
 8003866:	2700      	movs	r7, #0
 8003868:	e00c      	b.n	8003884 <lfs_dir_getslice+0x80>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800386a:	2301      	movs	r3, #1
 800386c:	e7eb      	b.n	8003846 <lfs_dir_getslice+0x42>
 800386e:	2301      	movs	r3, #1
 8003870:	e7e9      	b.n	8003846 <lfs_dir_getslice+0x42>
 8003872:	2301      	movs	r3, #1
 8003874:	e7e7      	b.n	8003846 <lfs_dir_getslice+0x42>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8003876:	9705      	str	r7, [sp, #20]
 8003878:	ebab 0307 	sub.w	r3, fp, r7
 800387c:	4063      	eors	r3, r4
 800387e:	ea13 0f08 	tst.w	r3, r8
 8003882:	d048      	beq.n	8003916 <lfs_dir_getslice+0x112>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8003884:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003886:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800388a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800388e:	bf14      	ite	ne
 8003890:	4623      	movne	r3, r4
 8003892:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 8003894:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003898:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800389a:	3308      	adds	r3, #8
 800389c:	42ab      	cmp	r3, r5
 800389e:	d865      	bhi.n	800396c <lfs_dir_getslice+0x168>
        off -= lfs_tag_dsize(ntag);
 80038a0:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 80038a2:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 80038a6:	2304      	movs	r3, #4
 80038a8:	9303      	str	r3, [sp, #12]
 80038aa:	a907      	add	r1, sp, #28
 80038ac:	9102      	str	r1, [sp, #8]
 80038ae:	9501      	str	r5, [sp, #4]
 80038b0:	9200      	str	r2, [sp, #0]
 80038b2:	4632      	mov	r2, r6
 80038b4:	2100      	movs	r1, #0
 80038b6:	4630      	mov	r0, r6
 80038b8:	f7fe ffe8 	bl	800288c <lfs_bd_read>
        if (err) {
 80038bc:	4603      	mov	r3, r0
 80038be:	2800      	cmp	r0, #0
 80038c0:	d156      	bne.n	8003970 <lfs_dir_getslice+0x16c>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80038c2:	9b07      	ldr	r3, [sp, #28]
 80038c4:	ba1b      	rev	r3, r3
 80038c6:	4063      	eors	r3, r4
 80038c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038cc:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 80038ce:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0cf      	beq.n	8003876 <lfs_dir_getslice+0x72>
    return (tag & 0x70000000) >> 20;
 80038d6:	0d23      	lsrs	r3, r4, #20
 80038d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
        if (lfs_tag_id(gmask) != 0 &&
 80038dc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80038e0:	d1c9      	bne.n	8003876 <lfs_dir_getslice+0x72>
    return (tag & 0x000ffc00) >> 10;
 80038e2:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 80038e6:	ebab 0207 	sub.w	r2, fp, r7
    return (tag & 0x000ffc00) >> 10;
 80038ea:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80038ee:	4584      	cmp	ip, r0
 80038f0:	d3c1      	bcc.n	8003876 <lfs_dir_getslice+0x72>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80038f2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80038f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038fa:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80038fe:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8003902:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003906:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800390a:	42a2      	cmp	r2, r4
 800390c:	d034      	beq.n	8003978 <lfs_dir_getslice+0x174>
    return (int8_t)lfs_tag_chunk(tag);
 800390e:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003910:	eb07 2783 	add.w	r7, r7, r3, lsl #10
 8003914:	e7af      	b.n	8003876 <lfs_dir_getslice+0x72>
            if (lfs_tag_isdelete(tag)) {
 8003916:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800391a:	d030      	beq.n	800397e <lfs_dir_getslice+0x17a>
    return tag & 0x000003ff;
 800391c:	f3c4 0709 	ubfx	r7, r4, #0, #10
    return (a < b) ? a : b;
 8003920:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003922:	429f      	cmp	r7, r3
 8003924:	bf28      	it	cs
 8003926:	461f      	movcs	r7, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8003928:	f8da 2000 	ldr.w	r2, [sl]
 800392c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800392e:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 8003930:	9703      	str	r7, [sp, #12]
 8003932:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003934:	9102      	str	r1, [sp, #8]
 8003936:	3304      	adds	r3, #4
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	9200      	str	r2, [sp, #0]
 800393c:	463b      	mov	r3, r7
 800393e:	4632      	mov	r2, r6
 8003940:	2100      	movs	r1, #0
 8003942:	4630      	mov	r0, r6
 8003944:	f7fe ffa2 	bl	800288c <lfs_bd_read>
            if (err) {
 8003948:	4603      	mov	r3, r0
 800394a:	b988      	cbnz	r0, 8003970 <lfs_dir_getslice+0x16c>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800394c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800394e:	1bda      	subs	r2, r3, r7
 8003950:	2100      	movs	r1, #0
 8003952:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003954:	19d8      	adds	r0, r3, r7
 8003956:	f003 fa6a 	bl	8006e2e <memset>
            return tag + gdiff;
 800395a:	9b05      	ldr	r3, [sp, #20]
 800395c:	4423      	add	r3, r4
 800395e:	e007      	b.n	8003970 <lfs_dir_getslice+0x16c>
    lfs_stag_t gdiff = 0;
 8003960:	2700      	movs	r7, #0
 8003962:	e78f      	b.n	8003884 <lfs_dir_getslice+0x80>
 8003964:	2700      	movs	r7, #0
 8003966:	e78d      	b.n	8003884 <lfs_dir_getslice+0x80>
        gdiff -= LFS_MKTAG(0, 1, 0);
 8003968:	4f06      	ldr	r7, [pc, #24]	; (8003984 <lfs_dir_getslice+0x180>)
 800396a:	e78b      	b.n	8003884 <lfs_dir_getslice+0x80>
    return LFS_ERR_NOENT;
 800396c:	f06f 0301 	mvn.w	r3, #1
}
 8003970:	4618      	mov	r0, r3
 8003972:	b009      	add	sp, #36	; 0x24
 8003974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return LFS_ERR_NOENT;
 8003978:	f06f 0301 	mvn.w	r3, #1
 800397c:	e7f8      	b.n	8003970 <lfs_dir_getslice+0x16c>
                return LFS_ERR_NOENT;
 800397e:	f06f 0301 	mvn.w	r3, #1
 8003982:	e7f5      	b.n	8003970 <lfs_dir_getslice+0x16c>
 8003984:	fffffc00 	.word	0xfffffc00

08003988 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8003988:	b510      	push	{r4, lr}
 800398a:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 800398c:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 8003990:	9402      	str	r4, [sp, #8]
 8003992:	9c06      	ldr	r4, [sp, #24]
 8003994:	9401      	str	r4, [sp, #4]
 8003996:	2400      	movs	r4, #0
 8003998:	9400      	str	r4, [sp, #0]
 800399a:	f7ff ff33 	bl	8003804 <lfs_dir_getslice>
}
 800399e:	b004      	add	sp, #16
 80039a0:	bd10      	pop	{r4, pc}
	...

080039a4 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 80039a4:	b510      	push	{r4, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 80039aa:	ab03      	add	r3, sp, #12
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <lfs_dir_getgstate+0x4c>)
 80039b0:	4a10      	ldr	r2, [pc, #64]	; (80039f4 <lfs_dir_getgstate+0x50>)
 80039b2:	f7ff ffe9 	bl	8003988 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 80039b6:	2800      	cmp	r0, #0
 80039b8:	db05      	blt.n	80039c6 <lfs_dir_getgstate+0x22>
    if (res != LFS_ERR_NOENT) {
 80039ba:	f110 0f02 	cmn.w	r0, #2
 80039be:	d115      	bne.n	80039ec <lfs_dir_getgstate+0x48>
    return 0;
 80039c0:	2000      	movs	r0, #0
}
 80039c2:	b006      	add	sp, #24
 80039c4:	bd10      	pop	{r4, pc}
    if (res < 0 && res != LFS_ERR_NOENT) {
 80039c6:	f110 0f02 	cmn.w	r0, #2
 80039ca:	d1fa      	bne.n	80039c2 <lfs_dir_getgstate+0x1e>
 80039cc:	e7f5      	b.n	80039ba <lfs_dir_getgstate+0x16>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80039ce:	aa06      	add	r2, sp, #24
 80039d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80039d4:	f852 1c0c 	ldr.w	r1, [r2, #-12]
 80039d8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 80039dc:	404a      	eors	r2, r1
 80039de:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 80039e2:	3301      	adds	r3, #1
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	ddf2      	ble.n	80039ce <lfs_dir_getgstate+0x2a>
    return 0;
 80039e8:	2000      	movs	r0, #0
 80039ea:	e7ea      	b.n	80039c2 <lfs_dir_getgstate+0x1e>
    for (int i = 0; i < 3; i++) {
 80039ec:	2300      	movs	r3, #0
 80039ee:	e7f9      	b.n	80039e4 <lfs_dir_getgstate+0x40>
 80039f0:	7ff0000c 	.word	0x7ff0000c
 80039f4:	7ff00000 	.word	0x7ff00000

080039f8 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 80039f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fc:	b087      	sub	sp, #28
 80039fe:	4606      	mov	r6, r0
 8003a00:	468a      	mov	sl, r1
 8003a02:	4617      	mov	r7, r2
 8003a04:	461c      	mov	r4, r3
 8003a06:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8003a0a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8003a0e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8003a10:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    if (off+size > lfs->cfg->block_size) {
 8003a14:	eb05 0208 	add.w	r2, r5, r8
 8003a18:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d94d      	bls.n	8003abc <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 8003a20:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8003a24:	e076      	b.n	8003b14 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8003a2c:	42a9      	cmp	r1, r5
 8003a2e:	d91c      	bls.n	8003a6a <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 8003a30:	42ab      	cmp	r3, r5
 8003a32:	d904      	bls.n	8003a3e <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 8003a34:	1b5b      	subs	r3, r3, r5
 8003a36:	4543      	cmp	r3, r8
 8003a38:	bf28      	it	cs
 8003a3a:	4643      	movcs	r3, r8
 8003a3c:	e048      	b.n	8003ad0 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8003a3e:	1b59      	subs	r1, r3, r5
 8003a40:	440a      	add	r2, r1
 8003a42:	4542      	cmp	r2, r8
 8003a44:	bf28      	it	cs
 8003a46:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8003a48:	68f9      	ldr	r1, [r7, #12]
 8003a4a:	1aeb      	subs	r3, r5, r3
 8003a4c:	9205      	str	r2, [sp, #20]
 8003a4e:	4419      	add	r1, r3
 8003a50:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003a52:	f003 faa5 	bl	8006fa0 <memcpy>
                data += diff;
 8003a56:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003a58:	9b05      	ldr	r3, [sp, #20]
 8003a5a:	4419      	add	r1, r3
 8003a5c:	9114      	str	r1, [sp, #80]	; 0x50
                off += diff;
 8003a5e:	441d      	add	r5, r3
                size -= diff;
 8003a60:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 8003a64:	e02a      	b.n	8003abc <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 8003a66:	4643      	mov	r3, r8
 8003a68:	e032      	b.n	8003ad0 <lfs_dir_getread+0xd8>
 8003a6a:	4643      	mov	r3, r8
 8003a6c:	e030      	b.n	8003ad0 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 8003a6e:	f06f 0301 	mvn.w	r3, #1
 8003a72:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003a74:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8003a76:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
 8003a78:	fbb5 f2f3 	udiv	r2, r5, r3
 8003a7c:	fb03 5212 	mls	r2, r3, r2, r5
 8003a80:	1aaa      	subs	r2, r5, r2
 8003a82:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003a84:	eb05 030b 	add.w	r3, r5, fp
 8003a88:	6eb1      	ldr	r1, [r6, #104]	; 0x68
 8003a8a:	6948      	ldr	r0, [r1, #20]
    return lfs_aligndown(a + alignment-1, alignment);
 8003a8c:	4403      	add	r3, r0
 8003a8e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 8003a90:	fbb3 fcf0 	udiv	ip, r3, r0
 8003a94:	fb00 301c 	mls	r0, r0, ip, r3
 8003a98:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 8003a9a:	6a89      	ldr	r1, [r1, #40]	; 0x28
    return (a < b) ? a : b;
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	bf28      	it	cs
 8003aa0:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8003aa2:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 8003aa4:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8003aa6:	9302      	str	r3, [sp, #8]
 8003aa8:	9101      	str	r1, [sp, #4]
 8003aaa:	9200      	str	r2, [sp, #0]
 8003aac:	464b      	mov	r3, r9
 8003aae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f7ff fea6 	bl	8003804 <lfs_dir_getslice>
        if (err < 0) {
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	db2b      	blt.n	8003b14 <lfs_dir_getread+0x11c>
    while (size > 0) {
 8003abc:	f1b8 0f00 	cmp.w	r8, #0
 8003ac0:	d027      	beq.n	8003b12 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8003ac2:	2f00      	cmp	r7, #0
 8003ac4:	d0cf      	beq.n	8003a66 <lfs_dir_getread+0x6e>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f113 0f02 	cmn.w	r3, #2
 8003acc:	d0ab      	beq.n	8003a26 <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 8003ace:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 8003ad0:	6822      	ldr	r2, [r4, #0]
 8003ad2:	f112 0f02 	cmn.w	r2, #2
 8003ad6:	d1ca      	bne.n	8003a6e <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 8003ad8:	6862      	ldr	r2, [r4, #4]
 8003ada:	68a1      	ldr	r1, [r4, #8]
 8003adc:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 8003ade:	42a8      	cmp	r0, r5
 8003ae0:	d9c5      	bls.n	8003a6e <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 8003ae2:	42aa      	cmp	r2, r5
 8003ae4:	d8c3      	bhi.n	8003a6e <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8003ae6:	1b50      	subs	r0, r2, r5
 8003ae8:	4401      	add	r1, r0
 8003aea:	4608      	mov	r0, r1
 8003aec:	4299      	cmp	r1, r3
 8003aee:	bf28      	it	cs
 8003af0:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003af2:	68e3      	ldr	r3, [r4, #12]
 8003af4:	1aa9      	subs	r1, r5, r2
 8003af6:	9005      	str	r0, [sp, #20]
 8003af8:	4602      	mov	r2, r0
 8003afa:	4419      	add	r1, r3
 8003afc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003afe:	f003 fa4f 	bl	8006fa0 <memcpy>
                data += diff;
 8003b02:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003b04:	9b05      	ldr	r3, [sp, #20]
 8003b06:	4419      	add	r1, r3
 8003b08:	9114      	str	r1, [sp, #80]	; 0x50
                off += diff;
 8003b0a:	441d      	add	r5, r3
                size -= diff;
 8003b0c:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 8003b10:	e7d4      	b.n	8003abc <lfs_dir_getread+0xc4>
    return 0;
 8003b12:	2000      	movs	r0, #0
}
 8003b14:	b007      	add	sp, #28
 8003b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003b1c <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 8003b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b20:	b087      	sub	sp, #28
 8003b22:	460c      	mov	r4, r1
 8003b24:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 8003b26:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003b28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b2a:	4291      	cmp	r1, r2
 8003b2c:	d272      	bcs.n	8003c14 <lfs_file_flushedread+0xf8>
 8003b2e:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 8003b30:	eba2 0901 	sub.w	r9, r2, r1
 8003b34:	4599      	cmp	r9, r3
 8003b36:	bf28      	it	cs
 8003b38:	4699      	movcs	r9, r3
    nsize = size;
 8003b3a:	464e      	mov	r6, r9
    while (nsize > 0) {
 8003b3c:	e037      	b.n	8003bae <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 8003b3e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003b42:	d041      	beq.n	8003bc8 <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 8003b44:	f06f 0301 	mvn.w	r3, #1
 8003b48:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
 8003b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b4c:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_READING;
 8003b4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b54:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8003b56:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b5e:	1a9d      	subs	r5, r3, r2
 8003b60:	42b5      	cmp	r5, r6
 8003b62:	bf28      	it	cs
 8003b64:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 8003b66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003b68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003b6c:	d041      	beq.n	8003bf2 <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8003b6e:	88a1      	ldrh	r1, [r4, #4]
 8003b70:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8003b72:	9505      	str	r5, [sp, #20]
 8003b74:	9704      	str	r7, [sp, #16]
 8003b76:	9203      	str	r2, [sp, #12]
 8003b78:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8003b7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003b80:	9102      	str	r1, [sp, #8]
 8003b82:	4a27      	ldr	r2, [pc, #156]	; (8003c20 <lfs_file_flushedread+0x104>)
 8003b84:	9201      	str	r2, [sp, #4]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f104 0108 	add.w	r1, r4, #8
 8003b92:	4640      	mov	r0, r8
 8003b94:	f7ff ff30 	bl	80039f8 <lfs_dir_getread>
            if (err) {
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d13b      	bne.n	8003c16 <lfs_file_flushedread+0xfa>
        file->pos += diff;
 8003b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ba0:	442b      	add	r3, r5
 8003ba2:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 8003ba4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ba6:	442b      	add	r3, r5
 8003ba8:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 8003baa:	442f      	add	r7, r5
        nsize -= diff;
 8003bac:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 8003bae:	2e00      	cmp	r6, #0
 8003bb0:	d02e      	beq.n	8003c10 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 8003bb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bb4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003bb8:	d0c1      	beq.n	8003b3e <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 8003bba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003bbc:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 8003bc0:	69d2      	ldr	r2, [r2, #28]
        if (!(file->flags & LFS_F_READING) ||
 8003bc2:	4291      	cmp	r1, r2
 8003bc4:	d1c7      	bne.n	8003b56 <lfs_file_flushedread+0x3a>
 8003bc6:	e7ba      	b.n	8003b3e <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8003bc8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8003bcc:	9303      	str	r3, [sp, #12]
 8003bce:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8003bd2:	9302      	str	r3, [sp, #8]
 8003bd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bde:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8003be2:	2100      	movs	r1, #0
 8003be4:	4640      	mov	r0, r8
 8003be6:	f7ff f9ea 	bl	8002fbe <lfs_ctz_find>
                if (err) {
 8003bea:	4603      	mov	r3, r0
 8003bec:	2800      	cmp	r0, #0
 8003bee:	d0ae      	beq.n	8003b4e <lfs_file_flushedread+0x32>
 8003bf0:	e011      	b.n	8003c16 <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 8003bf2:	9503      	str	r5, [sp, #12]
 8003bf4:	9702      	str	r7, [sp, #8]
 8003bf6:	9201      	str	r2, [sp, #4]
 8003bf8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bfa:	9200      	str	r2, [sp, #0]
 8003bfc:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8003c00:	2100      	movs	r1, #0
 8003c02:	4640      	mov	r0, r8
 8003c04:	f7fe fe42 	bl	800288c <lfs_bd_read>
            if (err) {
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d0c7      	beq.n	8003b9e <lfs_file_flushedread+0x82>
 8003c0e:	e002      	b.n	8003c16 <lfs_file_flushedread+0xfa>
    return size;
 8003c10:	464b      	mov	r3, r9
 8003c12:	e000      	b.n	8003c16 <lfs_file_flushedread+0xfa>
        return 0;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	b007      	add	sp, #28
 8003c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c1e:	bf00      	nop
 8003c20:	fff7fc00 	.word	0xfff7fc00

08003c24 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8003c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c28:	b097      	sub	sp, #92	; 0x5c
 8003c2a:	4617      	mov	r7, r2
 8003c2c:	9306      	str	r3, [sp, #24]
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	f080 8268 	bcs.w	800410a <lfs_dir_fetchmatch+0x4e6>
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	460e      	mov	r6, r1
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4293      	cmp	r3, r2
 8003c42:	f240 8265 	bls.w	8004110 <lfs_dir_fetchmatch+0x4ec>
    uint32_t revs[2] = {0, 0};
 8003c46:	2300      	movs	r3, #0
 8003c48:	9312      	str	r3, [sp, #72]	; 0x48
 8003c4a:	9313      	str	r3, [sp, #76]	; 0x4c
    for (int i = 0; i < 2; i++) {
 8003c4c:	461d      	mov	r5, r3
    int r = 0;
 8003c4e:	4698      	mov	r8, r3
    for (int i = 0; i < 2; i++) {
 8003c50:	e000      	b.n	8003c54 <lfs_dir_fetchmatch+0x30>
 8003c52:	3501      	adds	r5, #1
 8003c54:	2d01      	cmp	r5, #1
 8003c56:	dc2e      	bgt.n	8003cb6 <lfs_dir_fetchmatch+0x92>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8003c58:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8003c5c:	ab12      	add	r3, sp, #72	; 0x48
 8003c5e:	eb03 0285 	add.w	r2, r3, r5, lsl #2
        int err = lfs_bd_read(lfs,
 8003c62:	2304      	movs	r3, #4
 8003c64:	9303      	str	r3, [sp, #12]
 8003c66:	9202      	str	r2, [sp, #8]
 8003c68:	2100      	movs	r1, #0
 8003c6a:	9101      	str	r1, [sp, #4]
 8003c6c:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8003c70:	9200      	str	r2, [sp, #0]
 8003c72:	4622      	mov	r2, r4
 8003c74:	4620      	mov	r0, r4
 8003c76:	f7fe fe09 	bl	800288c <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 8003c7a:	f109 0358 	add.w	r3, r9, #88	; 0x58
 8003c7e:	eb0d 0903 	add.w	r9, sp, r3
 8003c82:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 8003c86:	4683      	mov	fp, r0
 8003c88:	b118      	cbz	r0, 8003c92 <lfs_dir_fetchmatch+0x6e>
 8003c8a:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003c8e:	f040 8238 	bne.w	8004102 <lfs_dir_fetchmatch+0x4de>
        if (err != LFS_ERR_CORRUPT &&
 8003c92:	f11b 0f54 	cmn.w	fp, #84	; 0x54
 8003c96:	d0dc      	beq.n	8003c52 <lfs_dir_fetchmatch+0x2e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8003c98:	1c6b      	adds	r3, r5, #1
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	bf48      	it	mi
 8003ca0:	425b      	negmi	r3, r3
 8003ca2:	a916      	add	r1, sp, #88	; 0x58
 8003ca4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003ca8:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 8003cac:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 8003cae:	2a00      	cmp	r2, #0
 8003cb0:	ddcf      	ble.n	8003c52 <lfs_dir_fetchmatch+0x2e>
            r = i;
 8003cb2:	46a8      	mov	r8, r5
 8003cb4:	e7cd      	b.n	8003c52 <lfs_dir_fetchmatch+0x2e>
    dir->pair[0] = pair[(r+0)%2];
 8003cb6:	f1b8 0f00 	cmp.w	r8, #0
 8003cba:	f008 0301 	and.w	r3, r8, #1
 8003cbe:	bfb8      	it	lt
 8003cc0:	425b      	neglt	r3, r3
 8003cc2:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8003cc6:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 8003cc8:	f118 0801 	adds.w	r8, r8, #1
 8003ccc:	f008 0801 	and.w	r8, r8, #1
 8003cd0:	bf48      	it	mi
 8003cd2:	f1c8 0800 	rsbmi	r8, r8, #0
 8003cd6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8003cda:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 8003cdc:	aa16      	add	r2, sp, #88	; 0x58
 8003cde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003ce2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8003ce6:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60f3      	str	r3, [r6, #12]
    for (int i = 0; i < 2; i++) {
 8003cec:	9305      	str	r3, [sp, #20]
    lfs_stag_t besttag = -1;
 8003cee:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003cf2:	f8cd 801c 	str.w	r8, [sp, #28]
    for (int i = 0; i < 2; i++) {
 8003cf6:	9b05      	ldr	r3, [sp, #20]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	f300 81f5 	bgt.w	80040e8 <lfs_dir_fetchmatch+0x4c4>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8003cfe:	4a89      	ldr	r2, [pc, #548]	; (8003f24 <lfs_dir_fetchmatch+0x300>)
 8003d00:	ab0e      	add	r3, sp, #56	; 0x38
 8003d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d06:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	f106 0108 	add.w	r1, r6, #8
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d14:	f002 fd9e 	bl	8006854 <lfs_crc>
 8003d18:	900b      	str	r0, [sp, #44]	; 0x2c
        lfs_stag_t tempbesttag = besttag;
 8003d1a:	46d9      	mov	r9, fp
        bool hasfcrc = false;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	461f      	mov	r7, r3
 8003d20:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 8003d22:	9309      	str	r3, [sp, #36]	; 0x24
        uint16_t tempcount = 0;
 8003d24:	469a      	mov	sl, r3
        lfs_tag_t ptag = 0xffffffff;
 8003d26:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8003d2a:	e104      	b.n	8003f36 <lfs_dir_fetchmatch+0x312>
                if (err == LFS_ERR_CORRUPT) {
 8003d2c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003d30:	d101      	bne.n	8003d36 <lfs_dir_fetchmatch+0x112>
        bool maybeerased = false;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e01e      	b.n	8003d74 <lfs_dir_fetchmatch+0x150>
                return err;
 8003d36:	4683      	mov	fp, r0
 8003d38:	e1e3      	b.n	8004102 <lfs_dir_fetchmatch+0x4de>
    return (tag & 0x78000000) >> 20;
 8003d3a:	ea4f 5318 	mov.w	r3, r8, lsr #20
 8003d3e:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8003d42:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003d46:	bf14      	ite	ne
 8003d48:	2300      	movne	r3, #0
 8003d4a:	2301      	moveq	r3, #1
                break;
 8003d4c:	e012      	b.n	8003d74 <lfs_dir_fetchmatch+0x150>
                err = lfs_bd_read(lfs,
 8003d4e:	2204      	movs	r2, #4
 8003d50:	9203      	str	r2, [sp, #12]
 8003d52:	aa0d      	add	r2, sp, #52	; 0x34
 8003d54:	9202      	str	r2, [sp, #8]
 8003d56:	1d3a      	adds	r2, r7, #4
 8003d58:	9201      	str	r2, [sp, #4]
 8003d5a:	6832      	ldr	r2, [r6, #0]
 8003d5c:	9200      	str	r2, [sp, #0]
 8003d5e:	4622      	mov	r2, r4
 8003d60:	2100      	movs	r1, #0
 8003d62:	4620      	mov	r0, r4
 8003d64:	f7fe fd92 	bl	800288c <lfs_bd_read>
                if (err) {
 8003d68:	bb70      	cbnz	r0, 8003dc8 <lfs_dir_fetchmatch+0x1a4>
                if (crc != dcrc) {
 8003d6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d02f      	beq.n	8003dd2 <lfs_dir_fetchmatch+0x1ae>
        bool maybeerased = false;
 8003d72:	2300      	movs	r3, #0
        if (dir->off == 0) {
 8003d74:	68f2      	ldr	r2, [r6, #12]
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	f000 8156 	beq.w	8004028 <lfs_dir_fetchmatch+0x404>
        dir->erased = false;
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8003d80:	b153      	cbz	r3, 8003d98 <lfs_dir_fetchmatch+0x174>
 8003d82:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003d84:	6981      	ldr	r1, [r0, #24]
 8003d86:	fbb2 f3f1 	udiv	r3, r2, r1
 8003d8a:	fb01 2313 	mls	r3, r1, r3, r2
 8003d8e:	b91b      	cbnz	r3, 8003d98 <lfs_dir_fetchmatch+0x174>
            if (hasfcrc) {
 8003d90:	9b08      	ldr	r3, [sp, #32]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 8157 	bne.w	8004046 <lfs_dir_fetchmatch+0x422>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8003d98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 8003d9a:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8003d9c:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 8003da0:	f000 8171 	beq.w	8004086 <lfs_dir_fetchmatch+0x462>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8003da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003da6:	6831      	ldr	r1, [r6, #0]
 8003da8:	428b      	cmp	r3, r1
 8003daa:	f000 817d 	beq.w	80040a8 <lfs_dir_fetchmatch+0x484>
 8003dae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003db0:	6872      	ldr	r2, [r6, #4]
 8003db2:	4290      	cmp	r0, r2
 8003db4:	f000 817a 	beq.w	80040ac <lfs_dir_fetchmatch+0x488>
 8003db8:	4293      	cmp	r3, r2
 8003dba:	f000 8179 	beq.w	80040b0 <lfs_dir_fetchmatch+0x48c>
 8003dbe:	4281      	cmp	r1, r0
 8003dc0:	f000 815f 	beq.w	8004082 <lfs_dir_fetchmatch+0x45e>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e15f      	b.n	8004088 <lfs_dir_fetchmatch+0x464>
                    if (err == LFS_ERR_CORRUPT) {
 8003dc8:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003dcc:	d0d1      	beq.n	8003d72 <lfs_dir_fetchmatch+0x14e>
                    return err;
 8003dce:	4683      	mov	fp, r0
 8003dd0:	e197      	b.n	8004102 <lfs_dir_fetchmatch+0x4de>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8003dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003dd4:	f3c3 5307 	ubfx	r3, r3, #20, #8
 8003dd8:	ea85 78c3 	eor.w	r8, r5, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8003ddc:	2204      	movs	r2, #4
 8003dde:	a90b      	add	r1, sp, #44	; 0x2c
 8003de0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003de2:	f002 fd37 	bl	8006854 <lfs_crc>
 8003de6:	62e0      	str	r0, [r4, #44]	; 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 8003de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003dea:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003dee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8003df2:	bf08      	it	eq
 8003df4:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 8003df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003dfa:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 8003dfc:	443b      	add	r3, r7
 8003dfe:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 8003e00:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 8003e04:	f8a6 a014 	strh.w	sl, [r6, #20]
                dir->tail[0] = temptail[0];
 8003e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e0a:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 8003e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e0e:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 8003e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e12:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e18:	930b      	str	r3, [sp, #44]	; 0x2c
                besttag = tempbesttag;
 8003e1a:	46cb      	mov	fp, r9
 8003e1c:	e08b      	b.n	8003f36 <lfs_dir_fetchmatch+0x312>
                if (err == LFS_ERR_CORRUPT) {
 8003e1e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003e22:	d101      	bne.n	8003e28 <lfs_dir_fetchmatch+0x204>
        bool maybeerased = false;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e7a5      	b.n	8003d74 <lfs_dir_fetchmatch+0x150>
                return err;
 8003e28:	4683      	mov	fp, r0
 8003e2a:	e16a      	b.n	8004102 <lfs_dir_fetchmatch+0x4de>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8003e2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003e30:	d021      	beq.n	8003e76 <lfs_dir_fetchmatch+0x252>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8003e32:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8003e36:	d03d      	beq.n	8003eb4 <lfs_dir_fetchmatch+0x290>
    return (tag & 0x7ff00000) >> 20;
 8003e38:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8003e3c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003e40:	429a      	cmp	r2, r3
 8003e42:	f040 80d6 	bne.w	8003ff2 <lfs_dir_fetchmatch+0x3ce>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003e46:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003e48:	69db      	ldr	r3, [r3, #28]
                err = lfs_bd_read(lfs,
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	9203      	str	r2, [sp, #12]
 8003e4e:	aa10      	add	r2, sp, #64	; 0x40
 8003e50:	9202      	str	r2, [sp, #8]
 8003e52:	f8cd 8004 	str.w	r8, [sp, #4]
 8003e56:	6832      	ldr	r2, [r6, #0]
 8003e58:	9200      	str	r2, [sp, #0]
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f7fe fd14 	bl	800288c <lfs_bd_read>
                if (err) {
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d041      	beq.n	8003eec <lfs_dir_fetchmatch+0x2c8>
                    if (err == LFS_ERR_CORRUPT) {
 8003e68:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003e6c:	f000 80da 	beq.w	8004024 <lfs_dir_fetchmatch+0x400>
                hasfcrc = true;
 8003e70:	2301      	movs	r3, #1
 8003e72:	9308      	str	r3, [sp, #32]
 8003e74:	e0bd      	b.n	8003ff2 <lfs_dir_fetchmatch+0x3ce>
    return (int8_t)lfs_tag_chunk(tag);
 8003e76:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 8003e78:	fa1a fa80 	uxtah	sl, sl, r0
 8003e7c:	fa1f fa8a 	uxth.w	sl, sl
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8003e80:	4a29      	ldr	r2, [pc, #164]	; (8003f28 <lfs_dir_fetchmatch+0x304>)
 8003e82:	ea09 0202 	and.w	r2, r9, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8003e86:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
 8003e8a:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00d      	beq.n	8003eae <lfs_dir_fetchmatch+0x28a>
                } else if (tempbesttag != -1 &&
 8003e92:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8003e96:	f000 80ac 	beq.w	8003ff2 <lfs_dir_fetchmatch+0x3ce>
    return (tag & 0x000ffc00) >> 10;
 8003e9a:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8003e9e:	f3c9 2289 	ubfx	r2, r9, #10, #10
                } else if (tempbesttag != -1 &&
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	f0c0 80a5 	bcc.w	8003ff2 <lfs_dir_fetchmatch+0x3ce>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8003ea8:	eb09 2980 	add.w	r9, r9, r0, lsl #10
 8003eac:	e0a1      	b.n	8003ff2 <lfs_dir_fetchmatch+0x3ce>
                    tempbesttag |= 0x80000000;
 8003eae:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003eb2:	e09e      	b.n	8003ff2 <lfs_dir_fetchmatch+0x3ce>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8003eb4:	f000 0301 	and.w	r3, r0, #1
 8003eb8:	9309      	str	r3, [sp, #36]	; 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8003eba:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003ebc:	69db      	ldr	r3, [r3, #28]
                err = lfs_bd_read(lfs,
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	9203      	str	r2, [sp, #12]
 8003ec2:	aa0e      	add	r2, sp, #56	; 0x38
 8003ec4:	9202      	str	r2, [sp, #8]
 8003ec6:	f8cd 8004 	str.w	r8, [sp, #4]
 8003eca:	6832      	ldr	r2, [r6, #0]
 8003ecc:	9200      	str	r2, [sp, #0]
 8003ece:	4622      	mov	r2, r4
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f7fe fcda 	bl	800288c <lfs_bd_read>
                if (err) {
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	f000 808a 	beq.w	8003ff2 <lfs_dir_fetchmatch+0x3ce>
                    if (err == LFS_ERR_CORRUPT) {
 8003ede:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003ee2:	d101      	bne.n	8003ee8 <lfs_dir_fetchmatch+0x2c4>
        bool maybeerased = false;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e745      	b.n	8003d74 <lfs_dir_fetchmatch+0x150>
                    return err;
 8003ee8:	4683      	mov	fp, r0
 8003eea:	e10a      	b.n	8004102 <lfs_dir_fetchmatch+0x4de>
                hasfcrc = true;
 8003eec:	2301      	movs	r3, #1
 8003eee:	9308      	str	r3, [sp, #32]
 8003ef0:	e07f      	b.n	8003ff2 <lfs_dir_fetchmatch+0x3ce>
                    if (res == LFS_ERR_CORRUPT) {
 8003ef2:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8003ef6:	d101      	bne.n	8003efc <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e73b      	b.n	8003d74 <lfs_dir_fetchmatch+0x150>
                    return res;
 8003efc:	4683      	mov	fp, r0
 8003efe:	e100      	b.n	8004102 <lfs_dir_fetchmatch+0x4de>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8003f00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f02:	ea82 0109 	eor.w	r1, r2, r9
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <lfs_dir_fetchmatch+0x308>)
 8003f08:	400b      	ands	r3, r1
 8003f0a:	b18b      	cbz	r3, 8003f30 <lfs_dir_fetchmatch+0x30c>
                } else if (res == LFS_CMP_GT &&
 8003f0c:	2802      	cmp	r0, #2
 8003f0e:	d111      	bne.n	8003f34 <lfs_dir_fetchmatch+0x310>
    return (tag & 0x000ffc00) >> 10;
 8003f10:	f3c2 2389 	ubfx	r3, r2, #10, #10
 8003f14:	f3c9 2c89 	ubfx	ip, r9, #10, #10
                } else if (res == LFS_CMP_GT &&
 8003f18:	459c      	cmp	ip, r3
 8003f1a:	d30b      	bcc.n	8003f34 <lfs_dir_fetchmatch+0x310>
                    tempbesttag = tag | 0x80000000;
 8003f1c:	f042 4900 	orr.w	r9, r2, #2147483648	; 0x80000000
 8003f20:	e008      	b.n	8003f34 <lfs_dir_fetchmatch+0x310>
 8003f22:	bf00      	nop
 8003f24:	08007aa4 	.word	0x08007aa4
 8003f28:	000ffc00 	.word	0x000ffc00
 8003f2c:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 8003f30:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
            ptag = tag;
 8003f34:	46a8      	mov	r8, r5
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003f36:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003f3a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8003f3e:	bf14      	ite	ne
 8003f40:	4643      	movne	r3, r8
 8003f42:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 8003f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003f4a:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 8003f4c:	441f      	add	r7, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8003f4e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003f50:	69db      	ldr	r3, [r3, #28]
            int err = lfs_bd_read(lfs,
 8003f52:	2204      	movs	r2, #4
 8003f54:	9203      	str	r2, [sp, #12]
 8003f56:	aa0c      	add	r2, sp, #48	; 0x30
 8003f58:	9202      	str	r2, [sp, #8]
 8003f5a:	9701      	str	r7, [sp, #4]
 8003f5c:	6832      	ldr	r2, [r6, #0]
 8003f5e:	9200      	str	r2, [sp, #0]
 8003f60:	4622      	mov	r2, r4
 8003f62:	2100      	movs	r1, #0
 8003f64:	4620      	mov	r0, r4
 8003f66:	f7fe fc91 	bl	800288c <lfs_bd_read>
            if (err) {
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	f47f aede 	bne.w	8003d2c <lfs_dir_fetchmatch+0x108>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 8003f70:	2204      	movs	r2, #4
 8003f72:	a90c      	add	r1, sp, #48	; 0x30
 8003f74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003f76:	f002 fc6d 	bl	8006854 <lfs_crc>
 8003f7a:	900b      	str	r0, [sp, #44]	; 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 8003f7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    return __builtin_bswap32(a);
 8003f7e:	ba2d      	rev	r5, r5
 8003f80:	ea88 0505 	eor.w	r5, r8, r5
 8003f84:	950c      	str	r5, [sp, #48]	; 0x30
            if (!lfs_tag_isvalid(tag)) {
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	f6ff aed7 	blt.w	8003d3a <lfs_dir_fetchmatch+0x116>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8003f8c:	f345 0309 	sbfx	r3, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f94:	bf14      	ite	ne
 8003f96:	462a      	movne	r2, r5
 8003f98:	1c6a      	addeq	r2, r5, #1
    return tag & 0x000003ff;
 8003f9a:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8003f9e:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8003fa0:	4439      	add	r1, r7
 8003fa2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	4299      	cmp	r1, r3
 8003fa8:	d83a      	bhi.n	8004020 <lfs_dir_fetchmatch+0x3fc>
    return (tag & 0x78000000) >> 20;
 8003faa:	0d29      	lsrs	r1, r5, #20
 8003fac:	f401 61f0 	and.w	r1, r1, #1920	; 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8003fb0:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8003fb4:	f43f aecb 	beq.w	8003d4e <lfs_dir_fetchmatch+0x12a>
            err = lfs_bd_crc(lfs,
 8003fb8:	f107 0804 	add.w	r8, r7, #4
 8003fbc:	a90b      	add	r1, sp, #44	; 0x2c
 8003fbe:	9103      	str	r1, [sp, #12]
 8003fc0:	9202      	str	r2, [sp, #8]
 8003fc2:	f8cd 8004 	str.w	r8, [sp, #4]
 8003fc6:	6832      	ldr	r2, [r6, #0]
 8003fc8:	9200      	str	r2, [sp, #0]
 8003fca:	4622      	mov	r2, r4
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f7fe fd6c 	bl	8002aac <lfs_bd_crc>
            if (err) {
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	f47f af22 	bne.w	8003e1e <lfs_dir_fetchmatch+0x1fa>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8003fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 8003fdc:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8003fde:	f410 61e0 	ands.w	r1, r0, #1792	; 0x700
 8003fe2:	f47f af23 	bne.w	8003e2c <lfs_dir_fetchmatch+0x208>
    return (tag & 0x000ffc00) >> 10;
 8003fe6:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 8003fea:	459a      	cmp	sl, r3
 8003fec:	d801      	bhi.n	8003ff2 <lfs_dir_fetchmatch+0x3ce>
                    tempcount = lfs_tag_id(tag) + 1;
 8003fee:	f103 0a01 	add.w	sl, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 8003ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ff4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ff6:	404b      	eors	r3, r1
 8003ff8:	9a06      	ldr	r2, [sp, #24]
 8003ffa:	4213      	tst	r3, r2
 8003ffc:	d19a      	bne.n	8003f34 <lfs_dir_fetchmatch+0x310>
                        dir->pair[0], off+sizeof(tag)});
 8003ffe:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8004000:	9314      	str	r3, [sp, #80]	; 0x50
 8004002:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 8004006:	aa14      	add	r2, sp, #80	; 0x50
 8004008:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800400a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800400c:	4798      	blx	r3
                if (res < 0) {
 800400e:	2800      	cmp	r0, #0
 8004010:	f6ff af6f 	blt.w	8003ef2 <lfs_dir_fetchmatch+0x2ce>
                if (res == LFS_CMP_EQ) {
 8004014:	2800      	cmp	r0, #0
 8004016:	f47f af73 	bne.w	8003f00 <lfs_dir_fetchmatch+0x2dc>
                    tempbesttag = tag;
 800401a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800401e:	e789      	b.n	8003f34 <lfs_dir_fetchmatch+0x310>
        bool maybeerased = false;
 8004020:	2300      	movs	r3, #0
 8004022:	e6a7      	b.n	8003d74 <lfs_dir_fetchmatch+0x150>
 8004024:	2300      	movs	r3, #0
 8004026:	e6a5      	b.n	8003d74 <lfs_dir_fetchmatch+0x150>
    lfs_block_t t = pair[0];
 8004028:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 800402a:	6872      	ldr	r2, [r6, #4]
 800402c:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 800402e:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 8004030:	aa16      	add	r2, sp, #88	; 0x58
 8004032:	9b07      	ldr	r3, [sp, #28]
 8004034:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004038:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800403c:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 800403e:	9b05      	ldr	r3, [sp, #20]
 8004040:	3301      	adds	r3, #1
 8004042:	9305      	str	r3, [sp, #20]
 8004044:	e657      	b.n	8003cf6 <lfs_dir_fetchmatch+0xd2>
                uint32_t fcrc_ = 0xffffffff;
 8004046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800404a:	930d      	str	r3, [sp, #52]	; 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800404c:	69c3      	ldr	r3, [r0, #28]
                int err = lfs_bd_crc(lfs,
 800404e:	a90d      	add	r1, sp, #52	; 0x34
 8004050:	9103      	str	r1, [sp, #12]
 8004052:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004054:	9102      	str	r1, [sp, #8]
 8004056:	9201      	str	r2, [sp, #4]
 8004058:	6832      	ldr	r2, [r6, #0]
 800405a:	9200      	str	r2, [sp, #0]
 800405c:	4622      	mov	r2, r4
 800405e:	2100      	movs	r1, #0
 8004060:	4620      	mov	r0, r4
 8004062:	f7fe fd23 	bl	8002aac <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 8004066:	b120      	cbz	r0, 8004072 <lfs_dir_fetchmatch+0x44e>
 8004068:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800406c:	d001      	beq.n	8004072 <lfs_dir_fetchmatch+0x44e>
                    return err;
 800406e:	4683      	mov	fp, r0
 8004070:	e047      	b.n	8004102 <lfs_dir_fetchmatch+0x4de>
                dir->erased = (fcrc_ == fcrc.crc);
 8004072:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004076:	4293      	cmp	r3, r2
 8004078:	bf14      	ite	ne
 800407a:	2300      	movne	r3, #0
 800407c:	2301      	moveq	r3, #1
 800407e:	75b3      	strb	r3, [r6, #22]
 8004080:	e68a      	b.n	8003d98 <lfs_dir_fetchmatch+0x174>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <lfs_dir_fetchmatch+0x464>
 8004086:	2300      	movs	r3, #0
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8004088:	b1b3      	cbz	r3, 80040b8 <lfs_dir_fetchmatch+0x494>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800408a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    return (tag & 0x000ffc00) >> 10;
 800408c:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8004090:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8004094:	429a      	cmp	r2, r3
 8004096:	d00d      	beq.n	80040b4 <lfs_dir_fetchmatch+0x490>
            } else if (besttag != -1 &&
 8004098:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800409c:	d00c      	beq.n	80040b8 <lfs_dir_fetchmatch+0x494>
 800409e:	429a      	cmp	r2, r3
 80040a0:	d90a      	bls.n	80040b8 <lfs_dir_fetchmatch+0x494>
                besttag -= LFS_MKTAG(0, 1, 0);
 80040a2:	f5ab 6b80 	sub.w	fp, fp, #1024	; 0x400
 80040a6:	e007      	b.n	80040b8 <lfs_dir_fetchmatch+0x494>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e7ed      	b.n	8004088 <lfs_dir_fetchmatch+0x464>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e7eb      	b.n	8004088 <lfs_dir_fetchmatch+0x464>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e7e9      	b.n	8004088 <lfs_dir_fetchmatch+0x464>
                besttag |= 0x80000000;
 80040b4:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
        if (id) {
 80040b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040ba:	b13b      	cbz	r3, 80040cc <lfs_dir_fetchmatch+0x4a8>
    return (tag & 0x000ffc00) >> 10;
 80040bc:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 80040c0:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 80040c2:	4293      	cmp	r3, r2
 80040c4:	bf28      	it	cs
 80040c6:	4613      	movcs	r3, r2
 80040c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80040ca:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 80040cc:	f1bb 0f00 	cmp.w	fp, #0
 80040d0:	da17      	bge.n	8004102 <lfs_dir_fetchmatch+0x4de>
    return (tag & 0x000ffc00) >> 10;
 80040d2:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 80040d6:	8ab2      	ldrh	r2, [r6, #20]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d902      	bls.n	80040e2 <lfs_dir_fetchmatch+0x4be>
            return LFS_ERR_NOENT;
 80040dc:	f06f 0b01 	mvn.w	fp, #1
 80040e0:	e00f      	b.n	8004102 <lfs_dir_fetchmatch+0x4de>
            return 0;
 80040e2:	f04f 0b00 	mov.w	fp, #0
 80040e6:	e00c      	b.n	8004102 <lfs_dir_fetchmatch+0x4de>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 80040e8:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <lfs_dir_fetchmatch+0x4f4>)
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	6873      	ldr	r3, [r6, #4]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	6833      	ldr	r3, [r6, #0]
 80040f2:	f240 5235 	movw	r2, #1333	; 0x535
 80040f6:	4909      	ldr	r1, [pc, #36]	; (800411c <lfs_dir_fetchmatch+0x4f8>)
 80040f8:	4809      	ldr	r0, [pc, #36]	; (8004120 <lfs_dir_fetchmatch+0x4fc>)
 80040fa:	f002 fe2b 	bl	8006d54 <iprintf>
    return LFS_ERR_CORRUPT;
 80040fe:	f06f 0b53 	mvn.w	fp, #83	; 0x53
}
 8004102:	4658      	mov	r0, fp
 8004104:	b017      	add	sp, #92	; 0x5c
 8004106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 800410a:	f06f 0b53 	mvn.w	fp, #83	; 0x53
 800410e:	e7f8      	b.n	8004102 <lfs_dir_fetchmatch+0x4de>
 8004110:	f06f 0b53 	mvn.w	fp, #83	; 0x53
 8004114:	e7f5      	b.n	8004102 <lfs_dir_fetchmatch+0x4de>
 8004116:	bf00      	nop
 8004118:	080081c0 	.word	0x080081c0
 800411c:	08007ba4 	.word	0x08007ba4
 8004120:	08007f58 	.word	0x08007f58

08004124 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 8004124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004128:	b08a      	sub	sp, #40	; 0x28
 800412a:	4681      	mov	r9, r0
 800412c:	468a      	mov	sl, r1
 800412e:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 8004134:	2501      	movs	r5, #1
 8004136:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8004138:	4a31      	ldr	r2, [pc, #196]	; (8004200 <lfs_fs_parent+0xdc>)
 800413a:	ab05      	add	r3, sp, #20
 800413c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004140:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 8004144:	46a8      	mov	r8, r5
    while (!lfs_pair_isnull(parent->tail)) {
 8004146:	e04b      	b.n	80041e0 <lfs_fs_parent+0xbc>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004148:	6856      	ldr	r6, [r2, #4]
 800414a:	9f06      	ldr	r7, [sp, #24]
 800414c:	42be      	cmp	r6, r7
 800414e:	d124      	bne.n	800419a <lfs_fs_parent+0x76>
 8004150:	2301      	movs	r3, #1
 8004152:	e026      	b.n	80041a2 <lfs_fs_parent+0x7e>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8004154:	6853      	ldr	r3, [r2, #4]
 8004156:	4298      	cmp	r0, r3
 8004158:	d001      	beq.n	800415e <lfs_fs_parent+0x3a>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800415a:	2300      	movs	r3, #0
 800415c:	e021      	b.n	80041a2 <lfs_fs_parent+0x7e>
 800415e:	2301      	movs	r3, #1
 8004160:	e01f      	b.n	80041a2 <lfs_fs_parent+0x7e>
            LFS_WARN("Cycle detected in tail list");
 8004162:	4b28      	ldr	r3, [pc, #160]	; (8004204 <lfs_fs_parent+0xe0>)
 8004164:	f241 225d 	movw	r2, #4701	; 0x125d
 8004168:	4927      	ldr	r1, [pc, #156]	; (8004208 <lfs_fs_parent+0xe4>)
 800416a:	4828      	ldr	r0, [pc, #160]	; (800420c <lfs_fs_parent+0xe8>)
 800416c:	f002 fdf2 	bl	8006d54 <iprintf>
            return LFS_ERR_CORRUPT;
 8004170:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004174:	e040      	b.n	80041f8 <lfs_fs_parent+0xd4>
            tortoise[0] = parent->tail[0];
 8004176:	9105      	str	r1, [sp, #20]
            tortoise[1] = parent->tail[1];
 8004178:	69e3      	ldr	r3, [r4, #28]
 800417a:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 800417c:	ea4f 0848 	mov.w	r8, r8, lsl #1
            tortoise_i = 0;
 8004180:	2500      	movs	r5, #0
 8004182:	e012      	b.n	80041aa <lfs_fs_parent+0x86>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <lfs_fs_parent+0x66>
 8004188:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 800418a:	2b00      	cmp	r3, #0
 800418c:	d132      	bne.n	80041f4 <lfs_fs_parent+0xd0>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 800418e:	f104 0218 	add.w	r2, r4, #24
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004192:	69a3      	ldr	r3, [r4, #24]
 8004194:	9805      	ldr	r0, [sp, #20]
 8004196:	4283      	cmp	r3, r0
 8004198:	d0d6      	beq.n	8004148 <lfs_fs_parent+0x24>
 800419a:	9e06      	ldr	r6, [sp, #24]
 800419c:	42b3      	cmp	r3, r6
 800419e:	d0d9      	beq.n	8004154 <lfs_fs_parent+0x30>
 80041a0:	2300      	movs	r3, #0
        if (lfs_pair_issync(parent->tail, tortoise)) {
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1dd      	bne.n	8004162 <lfs_fs_parent+0x3e>
        if (tortoise_i == tortoise_period) {
 80041a6:	4545      	cmp	r5, r8
 80041a8:	d0e5      	beq.n	8004176 <lfs_fs_parent+0x52>
        tortoise_i += 1;
 80041aa:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80041ac:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 80041b0:	f8da 3000 	ldr.w	r3, [sl]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80041b4:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 80041b6:	f8da 3004 	ldr.w	r3, [sl, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80041ba:	9309      	str	r3, [sp, #36]	; 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80041bc:	ab07      	add	r3, sp, #28
 80041be:	9303      	str	r3, [sp, #12]
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <lfs_fs_parent+0xec>)
 80041c2:	9302      	str	r3, [sp, #8]
 80041c4:	2300      	movs	r3, #0
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	4b12      	ldr	r3, [pc, #72]	; (8004214 <lfs_fs_parent+0xf0>)
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	4b12      	ldr	r3, [pc, #72]	; (8004218 <lfs_fs_parent+0xf4>)
 80041ce:	4621      	mov	r1, r4
 80041d0:	4648      	mov	r0, r9
 80041d2:	f7ff fd27 	bl	8003c24 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 80041d6:	4603      	mov	r3, r0
 80041d8:	b110      	cbz	r0, 80041e0 <lfs_fs_parent+0xbc>
 80041da:	f110 0f02 	cmn.w	r0, #2
 80041de:	d10b      	bne.n	80041f8 <lfs_fs_parent+0xd4>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80041e0:	69a1      	ldr	r1, [r4, #24]
 80041e2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80041e6:	d0cf      	beq.n	8004188 <lfs_fs_parent+0x64>
 80041e8:	69e3      	ldr	r3, [r4, #28]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ee:	d0c9      	beq.n	8004184 <lfs_fs_parent+0x60>
 80041f0:	2300      	movs	r3, #0
 80041f2:	e7ca      	b.n	800418a <lfs_fs_parent+0x66>
    return LFS_ERR_NOENT;
 80041f4:	f06f 0301 	mvn.w	r3, #1
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	b00a      	add	sp, #40	; 0x28
 80041fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004200:	08007aa4 	.word	0x08007aa4
 8004204:	080081c0 	.word	0x080081c0
 8004208:	08007ba4 	.word	0x08007ba4
 800420c:	08007f90 	.word	0x08007f90
 8004210:	08002a5d 	.word	0x08002a5d
 8004214:	20000008 	.word	0x20000008
 8004218:	7ff003ff 	.word	0x7ff003ff

0800421c <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800421c:	b500      	push	{lr}
 800421e:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8004220:	2300      	movs	r3, #0
 8004222:	9303      	str	r3, [sp, #12]
 8004224:	9302      	str	r3, [sp, #8]
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	f7ff fcf9 	bl	8003c24 <lfs_dir_fetchmatch>
}
 8004232:	b005      	add	sp, #20
 8004234:	f85d fb04 	ldr.w	pc, [sp], #4

08004238 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8004238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800423c:	b083      	sub	sp, #12
 800423e:	4681      	mov	r9, r0
 8004240:	460e      	mov	r6, r1
 8004242:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 8004248:	2501      	movs	r5, #1
 800424a:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800424c:	4b31      	ldr	r3, [pc, #196]	; (8004314 <lfs_fs_pred+0xdc>)
 800424e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004252:	ab02      	add	r3, sp, #8
 8004254:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 8004258:	46a8      	mov	r8, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800425a:	69a3      	ldr	r3, [r4, #24]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004260:	d049      	beq.n	80042f6 <lfs_fs_pred+0xbe>
 8004262:	69e2      	ldr	r2, [r4, #28]
 8004264:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8004268:	d043      	beq.n	80042f2 <lfs_fs_pred+0xba>
 800426a:	2200      	movs	r2, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 800426c:	2a00      	cmp	r2, #0
 800426e:	d144      	bne.n	80042fa <lfs_fs_pred+0xc2>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8004270:	f104 0c18 	add.w	ip, r4, #24
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004274:	69a1      	ldr	r1, [r4, #24]
 8004276:	9a00      	ldr	r2, [sp, #0]
 8004278:	4291      	cmp	r1, r2
 800427a:	d01a      	beq.n	80042b2 <lfs_fs_pred+0x7a>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800427c:	9801      	ldr	r0, [sp, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800427e:	4281      	cmp	r1, r0
 8004280:	d01e      	beq.n	80042c0 <lfs_fs_pred+0x88>
 8004282:	2100      	movs	r1, #0
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8004284:	bb21      	cbnz	r1, 80042d0 <lfs_fs_pred+0x98>
        if (tortoise_i == tortoise_period) {
 8004286:	4545      	cmp	r5, r8
 8004288:	d02c      	beq.n	80042e4 <lfs_fs_pred+0xac>
        tortoise_i += 1;
 800428a:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800428c:	6831      	ldr	r1, [r6, #0]
 800428e:	4299      	cmp	r1, r3
 8004290:	d036      	beq.n	8004300 <lfs_fs_pred+0xc8>
 8004292:	69e0      	ldr	r0, [r4, #28]
 8004294:	6872      	ldr	r2, [r6, #4]
 8004296:	4290      	cmp	r0, r2
 8004298:	d036      	beq.n	8004308 <lfs_fs_pred+0xd0>
 800429a:	429a      	cmp	r2, r3
 800429c:	d036      	beq.n	800430c <lfs_fs_pred+0xd4>
 800429e:	4288      	cmp	r0, r1
 80042a0:	d036      	beq.n	8004310 <lfs_fs_pred+0xd8>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 80042a2:	4662      	mov	r2, ip
 80042a4:	4621      	mov	r1, r4
 80042a6:	4648      	mov	r0, r9
 80042a8:	f7ff ffb8 	bl	800421c <lfs_dir_fetch>
        if (err) {
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d0d4      	beq.n	800425a <lfs_fs_pred+0x22>
 80042b0:	e027      	b.n	8004302 <lfs_fs_pred+0xca>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80042b2:	9801      	ldr	r0, [sp, #4]
 80042b4:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80042b8:	4287      	cmp	r7, r0
 80042ba:	d1df      	bne.n	800427c <lfs_fs_pred+0x44>
 80042bc:	2101      	movs	r1, #1
 80042be:	e7e1      	b.n	8004284 <lfs_fs_pred+0x4c>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80042c0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80042c4:	428a      	cmp	r2, r1
 80042c6:	d001      	beq.n	80042cc <lfs_fs_pred+0x94>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80042c8:	2100      	movs	r1, #0
 80042ca:	e7db      	b.n	8004284 <lfs_fs_pred+0x4c>
 80042cc:	2101      	movs	r1, #1
 80042ce:	e7d9      	b.n	8004284 <lfs_fs_pred+0x4c>
            LFS_WARN("Cycle detected in tail list");
 80042d0:	4b11      	ldr	r3, [pc, #68]	; (8004318 <lfs_fs_pred+0xe0>)
 80042d2:	f241 221c 	movw	r2, #4636	; 0x121c
 80042d6:	4911      	ldr	r1, [pc, #68]	; (800431c <lfs_fs_pred+0xe4>)
 80042d8:	4811      	ldr	r0, [pc, #68]	; (8004320 <lfs_fs_pred+0xe8>)
 80042da:	f002 fd3b 	bl	8006d54 <iprintf>
            return LFS_ERR_CORRUPT;
 80042de:	f06f 0053 	mvn.w	r0, #83	; 0x53
 80042e2:	e00e      	b.n	8004302 <lfs_fs_pred+0xca>
            tortoise[0] = pdir->tail[0];
 80042e4:	9300      	str	r3, [sp, #0]
            tortoise[1] = pdir->tail[1];
 80042e6:	69e2      	ldr	r2, [r4, #28]
 80042e8:	9201      	str	r2, [sp, #4]
            tortoise_period *= 2;
 80042ea:	ea4f 0848 	mov.w	r8, r8, lsl #1
            tortoise_i = 0;
 80042ee:	2500      	movs	r5, #0
 80042f0:	e7cb      	b.n	800428a <lfs_fs_pred+0x52>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80042f2:	2201      	movs	r2, #1
 80042f4:	e7ba      	b.n	800426c <lfs_fs_pred+0x34>
 80042f6:	2201      	movs	r2, #1
 80042f8:	e7b8      	b.n	800426c <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 80042fa:	f06f 0001 	mvn.w	r0, #1
 80042fe:	e000      	b.n	8004302 <lfs_fs_pred+0xca>
            return 0;
 8004300:	2000      	movs	r0, #0
}
 8004302:	b003      	add	sp, #12
 8004304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return 0;
 8004308:	2000      	movs	r0, #0
 800430a:	e7fa      	b.n	8004302 <lfs_fs_pred+0xca>
 800430c:	2000      	movs	r0, #0
 800430e:	e7f8      	b.n	8004302 <lfs_fs_pred+0xca>
 8004310:	2000      	movs	r0, #0
 8004312:	e7f6      	b.n	8004302 <lfs_fs_pred+0xca>
 8004314:	08007aa4 	.word	0x08007aa4
 8004318:	080081c0 	.word	0x080081c0
 800431c:	08007ba4 	.word	0x08007ba4
 8004320:	08007f90 	.word	0x08007f90

08004324 <lfs_fs_rawtraverse>:
        bool includeorphans) {
 8004324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004328:	b093      	sub	sp, #76	; 0x4c
 800432a:	4606      	mov	r6, r0
 800432c:	460f      	mov	r7, r1
 800432e:	4690      	mov	r8, r2
 8004330:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 8004332:	2220      	movs	r2, #32
 8004334:	2100      	movs	r1, #0
 8004336:	a80a      	add	r0, sp, #40	; 0x28
 8004338:	f002 fd79 	bl	8006e2e <memset>
 800433c:	2501      	movs	r5, #1
 800433e:	9511      	str	r5, [sp, #68]	; 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8004340:	4a6b      	ldr	r2, [pc, #428]	; (80044f0 <lfs_fs_rawtraverse+0x1cc>)
 8004342:	ab08      	add	r3, sp, #32
 8004344:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004348:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 800434c:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800434e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004350:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8004354:	f000 8093 	beq.w	800447e <lfs_fs_rawtraverse+0x15a>
 8004358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800435e:	f000 808c 	beq.w	800447a <lfs_fs_rawtraverse+0x156>
 8004362:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 808c 	bne.w	8004482 <lfs_fs_rawtraverse+0x15e>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800436a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800436c:	9c08      	ldr	r4, [sp, #32]
 800436e:	42a3      	cmp	r3, r4
 8004370:	d016      	beq.n	80043a0 <lfs_fs_rawtraverse+0x7c>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8004372:	9909      	ldr	r1, [sp, #36]	; 0x24
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004374:	428b      	cmp	r3, r1
 8004376:	d019      	beq.n	80043ac <lfs_fs_rawtraverse+0x88>
 8004378:	2300      	movs	r3, #0
        if (lfs_pair_issync(dir.tail, tortoise)) {
 800437a:	b9f3      	cbnz	r3, 80043ba <lfs_fs_rawtraverse+0x96>
        if (tortoise_i == tortoise_period) {
 800437c:	4555      	cmp	r5, sl
 800437e:	d026      	beq.n	80043ce <lfs_fs_rawtraverse+0xaa>
        tortoise_i += 1;
 8004380:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 8004382:	2400      	movs	r4, #0
 8004384:	2c01      	cmp	r4, #1
 8004386:	dc29      	bgt.n	80043dc <lfs_fs_rawtraverse+0xb8>
            int err = cb(data, dir.tail[i]);
 8004388:	1da3      	adds	r3, r4, #6
 800438a:	aa12      	add	r2, sp, #72	; 0x48
 800438c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004390:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8004394:	4640      	mov	r0, r8
 8004396:	47b8      	blx	r7
            if (err) {
 8004398:	4603      	mov	r3, r0
 800439a:	bb60      	cbnz	r0, 80043f6 <lfs_fs_rawtraverse+0xd2>
        for (int i = 0; i < 2; i++) {
 800439c:	3401      	adds	r4, #1
 800439e:	e7f1      	b.n	8004384 <lfs_fs_rawtraverse+0x60>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80043a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80043a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043a4:	4288      	cmp	r0, r1
 80043a6:	d1e4      	bne.n	8004372 <lfs_fs_rawtraverse+0x4e>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e7e6      	b.n	800437a <lfs_fs_rawtraverse+0x56>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80043ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043ae:	429c      	cmp	r4, r3
 80043b0:	d001      	beq.n	80043b6 <lfs_fs_rawtraverse+0x92>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80043b2:	2300      	movs	r3, #0
 80043b4:	e7e1      	b.n	800437a <lfs_fs_rawtraverse+0x56>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e7df      	b.n	800437a <lfs_fs_rawtraverse+0x56>
            LFS_WARN("Cycle detected in tail list");
 80043ba:	4b4e      	ldr	r3, [pc, #312]	; (80044f4 <lfs_fs_rawtraverse+0x1d0>)
 80043bc:	f241 12be 	movw	r2, #4542	; 0x11be
 80043c0:	494d      	ldr	r1, [pc, #308]	; (80044f8 <lfs_fs_rawtraverse+0x1d4>)
 80043c2:	484e      	ldr	r0, [pc, #312]	; (80044fc <lfs_fs_rawtraverse+0x1d8>)
 80043c4:	f002 fcc6 	bl	8006d54 <iprintf>
            return LFS_ERR_CORRUPT;
 80043c8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80043cc:	e013      	b.n	80043f6 <lfs_fs_rawtraverse+0xd2>
            tortoise[0] = dir.tail[0];
 80043ce:	9208      	str	r2, [sp, #32]
            tortoise[1] = dir.tail[1];
 80043d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043d2:	9309      	str	r3, [sp, #36]	; 0x24
            tortoise_period *= 2;
 80043d4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 80043d8:	2500      	movs	r5, #0
 80043da:	e7d1      	b.n	8004380 <lfs_fs_rawtraverse+0x5c>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80043dc:	aa10      	add	r2, sp, #64	; 0x40
 80043de:	a90a      	add	r1, sp, #40	; 0x28
 80043e0:	4630      	mov	r0, r6
 80043e2:	f7ff ff1b 	bl	800421c <lfs_dir_fetch>
        if (err) {
 80043e6:	9005      	str	r0, [sp, #20]
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d17e      	bne.n	80044ea <lfs_fs_rawtraverse+0x1c6>
        for (uint16_t id = 0; id < dir.count; id++) {
 80043ec:	2400      	movs	r4, #0
 80043ee:	e016      	b.n	800441e <lfs_fs_rawtraverse+0xfa>
                if (tag == LFS_ERR_NOENT) {
 80043f0:	f113 0f02 	cmn.w	r3, #2
 80043f4:	d011      	beq.n	800441a <lfs_fs_rawtraverse+0xf6>
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	b013      	add	sp, #76	; 0x4c
 80043fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80043fe:	f8cd 8008 	str.w	r8, [sp, #8]
 8004402:	9701      	str	r7, [sp, #4]
 8004404:	9b07      	ldr	r3, [sp, #28]
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	9b06      	ldr	r3, [sp, #24]
 800440a:	4632      	mov	r2, r6
 800440c:	2100      	movs	r1, #0
 800440e:	4630      	mov	r0, r6
 8004410:	f7fe fd30 	bl	8002e74 <lfs_ctz_traverse>
                if (err) {
 8004414:	4603      	mov	r3, r0
 8004416:	2800      	cmp	r0, #0
 8004418:	d1ed      	bne.n	80043f6 <lfs_fs_rawtraverse+0xd2>
        for (uint16_t id = 0; id < dir.count; id++) {
 800441a:	3401      	adds	r4, #1
 800441c:	b2a4      	uxth	r4, r4
 800441e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004422:	42a3      	cmp	r3, r4
 8004424:	d993      	bls.n	800434e <lfs_fs_rawtraverse+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8004426:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8004428:	aa06      	add	r2, sp, #24
 800442a:	9200      	str	r2, [sp, #0]
 800442c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004430:	f043 0308 	orr.w	r3, r3, #8
 8004434:	4a32      	ldr	r2, [pc, #200]	; (8004500 <lfs_fs_rawtraverse+0x1dc>)
 8004436:	a90a      	add	r1, sp, #40	; 0x28
 8004438:	4630      	mov	r0, r6
 800443a:	f7ff faa5 	bl	8003988 <lfs_dir_get>
            if (tag < 0) {
 800443e:	1e03      	subs	r3, r0, #0
 8004440:	dbd6      	blt.n	80043f0 <lfs_fs_rawtraverse+0xcc>
    return (tag & 0x7ff00000) >> 20;
 8004442:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8004446:	f240 2202 	movw	r2, #514	; 0x202
 800444a:	4293      	cmp	r3, r2
 800444c:	d0d7      	beq.n	80043fe <lfs_fs_rawtraverse+0xda>
            } else if (includeorphans &&
 800444e:	f1b9 0f00 	cmp.w	r9, #0
 8004452:	d0e2      	beq.n	800441a <lfs_fs_rawtraverse+0xf6>
 8004454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004458:	d1df      	bne.n	800441a <lfs_fs_rawtraverse+0xf6>
                for (int i = 0; i < 2; i++) {
 800445a:	f8dd b014 	ldr.w	fp, [sp, #20]
 800445e:	f1bb 0f01 	cmp.w	fp, #1
 8004462:	dcda      	bgt.n	800441a <lfs_fs_rawtraverse+0xf6>
                    err = cb(data, (&ctz.head)[i]);
 8004464:	ab06      	add	r3, sp, #24
 8004466:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800446a:	4640      	mov	r0, r8
 800446c:	47b8      	blx	r7
                    if (err) {
 800446e:	4603      	mov	r3, r0
 8004470:	2800      	cmp	r0, #0
 8004472:	d1c0      	bne.n	80043f6 <lfs_fs_rawtraverse+0xd2>
                for (int i = 0; i < 2; i++) {
 8004474:	f10b 0b01 	add.w	fp, fp, #1
 8004478:	e7f1      	b.n	800445e <lfs_fs_rawtraverse+0x13a>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800447a:	2301      	movs	r3, #1
 800447c:	e772      	b.n	8004364 <lfs_fs_rawtraverse+0x40>
 800447e:	2301      	movs	r3, #1
 8004480:	e770      	b.n	8004364 <lfs_fs_rawtraverse+0x40>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004482:	6ab4      	ldr	r4, [r6, #40]	; 0x28
 8004484:	e00f      	b.n	80044a6 <lfs_fs_rawtraverse+0x182>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8004486:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004488:	f8cd 8008 	str.w	r8, [sp, #8]
 800448c:	9701      	str	r7, [sp, #4]
 800448e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004490:	9200      	str	r2, [sp, #0]
 8004492:	4632      	mov	r2, r6
 8004494:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004498:	4630      	mov	r0, r6
 800449a:	f7fe fceb 	bl	8002e74 <lfs_ctz_traverse>
            if (err) {
 800449e:	4603      	mov	r3, r0
 80044a0:	b158      	cbz	r0, 80044ba <lfs_fs_rawtraverse+0x196>
 80044a2:	e7a8      	b.n	80043f6 <lfs_fs_rawtraverse+0xd2>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80044a4:	6824      	ldr	r4, [r4, #0]
 80044a6:	b1f4      	cbz	r4, 80044e6 <lfs_fs_rawtraverse+0x1c2>
        if (f->type != LFS_TYPE_REG) {
 80044a8:	79a3      	ldrb	r3, [r4, #6]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d1fa      	bne.n	80044a4 <lfs_fs_rawtraverse+0x180>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80044ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044b0:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d0e5      	beq.n	8004486 <lfs_fs_rawtraverse+0x162>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80044ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044bc:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
 80044c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044c4:	d1ee      	bne.n	80044a4 <lfs_fs_rawtraverse+0x180>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80044c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80044cc:	9701      	str	r7, [sp, #4]
 80044ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80044d0:	9200      	str	r2, [sp, #0]
 80044d2:	4632      	mov	r2, r6
 80044d4:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80044d8:	4630      	mov	r0, r6
 80044da:	f7fe fccb 	bl	8002e74 <lfs_ctz_traverse>
            if (err) {
 80044de:	4603      	mov	r3, r0
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d0df      	beq.n	80044a4 <lfs_fs_rawtraverse+0x180>
 80044e4:	e787      	b.n	80043f6 <lfs_fs_rawtraverse+0xd2>
    return 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e785      	b.n	80043f6 <lfs_fs_rawtraverse+0xd2>
            return err;
 80044ea:	9b05      	ldr	r3, [sp, #20]
 80044ec:	e783      	b.n	80043f6 <lfs_fs_rawtraverse+0xd2>
 80044ee:	bf00      	nop
 80044f0:	08007aa4 	.word	0x08007aa4
 80044f4:	080081c0 	.word	0x080081c0
 80044f8:	08007ba4 	.word	0x08007ba4
 80044fc:	08007f90 	.word	0x08007f90
 8004500:	700ffc00 	.word	0x700ffc00

08004504 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	4604      	mov	r4, r0
 800450a:	460d      	mov	r5, r1
        while (lfs->free.i != lfs->free.size) {
 800450c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800450e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004510:	4293      	cmp	r3, r2
 8004512:	d02d      	beq.n	8004570 <lfs_alloc+0x6c>
            lfs->free.i += 1;
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	65e2      	str	r2, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
 8004518:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800451a:	3a01      	subs	r2, #1
 800451c:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800451e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004520:	0959      	lsrs	r1, r3, #5
 8004522:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8004526:	f003 001f 	and.w	r0, r3, #31
 800452a:	2201      	movs	r2, #1
 800452c:	4082      	lsls	r2, r0
 800452e:	4211      	tst	r1, r2
 8004530:	d1ec      	bne.n	800450c <lfs_alloc+0x8>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8004532:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004534:	4413      	add	r3, r2
 8004536:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004538:	6a12      	ldr	r2, [r2, #32]
 800453a:	fbb3 f1f2 	udiv	r1, r3, r2
 800453e:	fb02 3311 	mls	r3, r2, r1, r3
 8004542:	602b      	str	r3, [r5, #0]
                while (lfs->free.i != lfs->free.size &&
 8004544:	e004      	b.n	8004550 <lfs_alloc+0x4c>
                    lfs->free.i += 1;
 8004546:	3301      	adds	r3, #1
 8004548:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800454a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800454c:	3b01      	subs	r3, #1
 800454e:	6623      	str	r3, [r4, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8004550:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004552:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004554:	4293      	cmp	r3, r2
 8004556:	d03c      	beq.n	80045d2 <lfs_alloc+0xce>
                        (lfs->free.buffer[lfs->free.i / 32]
 8004558:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800455a:	0959      	lsrs	r1, r3, #5
 800455c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
                            & (1U << (lfs->free.i % 32)))) {
 8004560:	f003 001f 	and.w	r0, r3, #31
 8004564:	2201      	movs	r2, #1
 8004566:	4082      	lsls	r2, r0
                while (lfs->free.i != lfs->free.size &&
 8004568:	4211      	tst	r1, r2
 800456a:	d1ec      	bne.n	8004546 <lfs_alloc+0x42>
                return 0;
 800456c:	2600      	movs	r6, #0
 800456e:	e031      	b.n	80045d4 <lfs_alloc+0xd0>
        if (lfs->free.ack == 0) {
 8004570:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004572:	b309      	cbz	r1, 80045b8 <lfs_alloc+0xb4>
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004574:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004576:	441a      	add	r2, r3
                % lfs->cfg->block_count;
 8004578:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800457a:	6a18      	ldr	r0, [r3, #32]
 800457c:	fbb2 f6f0 	udiv	r6, r2, r0
 8004580:	fb00 2216 	mls	r2, r0, r6, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004584:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	00d2      	lsls	r2, r2, #3
 800458a:	4291      	cmp	r1, r2
 800458c:	bf28      	it	cs
 800458e:	4611      	movcs	r1, r2
 8004590:	65a1      	str	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
 8004592:	2100      	movs	r1, #0
 8004594:	65e1      	str	r1, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800459a:	f002 fc48 	bl	8006e2e <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 800459e:	2301      	movs	r3, #1
 80045a0:	4622      	mov	r2, r4
 80045a2:	490e      	ldr	r1, [pc, #56]	; (80045dc <lfs_alloc+0xd8>)
 80045a4:	4620      	mov	r0, r4
 80045a6:	f7ff febd 	bl	8004324 <lfs_fs_rawtraverse>
        if (err) {
 80045aa:	4606      	mov	r6, r0
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d0ad      	beq.n	800450c <lfs_alloc+0x8>
            lfs_alloc_drop(lfs);
 80045b0:	4620      	mov	r0, r4
 80045b2:	f7fe f86f 	bl	8002694 <lfs_alloc_drop>
            return err;
 80045b6:	e00d      	b.n	80045d4 <lfs_alloc+0xd0>
            LFS_ERROR("No more free space %"PRIu32,
 80045b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80045ba:	4909      	ldr	r1, [pc, #36]	; (80045e0 <lfs_alloc+0xdc>)
 80045bc:	9100      	str	r1, [sp, #0]
 80045be:	4413      	add	r3, r2
 80045c0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80045c4:	4907      	ldr	r1, [pc, #28]	; (80045e4 <lfs_alloc+0xe0>)
 80045c6:	4808      	ldr	r0, [pc, #32]	; (80045e8 <lfs_alloc+0xe4>)
 80045c8:	f002 fbc4 	bl	8006d54 <iprintf>
            return LFS_ERR_NOSPC;
 80045cc:	f06f 061b 	mvn.w	r6, #27
 80045d0:	e000      	b.n	80045d4 <lfs_alloc+0xd0>
                return 0;
 80045d2:	2600      	movs	r6, #0
}
 80045d4:	4630      	mov	r0, r6
 80045d6:	b002      	add	sp, #8
 80045d8:	bd70      	pop	{r4, r5, r6, pc}
 80045da:	bf00      	nop
 80045dc:	08002659 	.word	0x08002659
 80045e0:	080081c0 	.word	0x080081c0
 80045e4:	08007ba4 	.word	0x08007ba4
 80045e8:	08007fbc 	.word	0x08007fbc

080045ec <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	4606      	mov	r6, r0
 80045f2:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 80045f4:	2500      	movs	r5, #0
 80045f6:	2d01      	cmp	r5, #1
 80045f8:	dc0d      	bgt.n	8004616 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80045fa:	3501      	adds	r5, #1
 80045fc:	f005 0101 	and.w	r1, r5, #1
 8004600:	bf48      	it	mi
 8004602:	4249      	negmi	r1, r1
 8004604:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004608:	4630      	mov	r0, r6
 800460a:	f7ff ff7b 	bl	8004504 <lfs_alloc>
        if (err) {
 800460e:	4603      	mov	r3, r0
 8004610:	2800      	cmp	r0, #0
 8004612:	d0f0      	beq.n	80045f6 <lfs_dir_alloc+0xa>
 8004614:	e02d      	b.n	8004672 <lfs_dir_alloc+0x86>
    dir->rev = 0;
 8004616:	2100      	movs	r1, #0
 8004618:	4622      	mov	r2, r4
 800461a:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 800461e:	2304      	movs	r3, #4
 8004620:	9303      	str	r3, [sp, #12]
 8004622:	9202      	str	r2, [sp, #8]
 8004624:	9101      	str	r1, [sp, #4]
 8004626:	6822      	ldr	r2, [r4, #0]
 8004628:	9200      	str	r2, [sp, #0]
 800462a:	4632      	mov	r2, r6
 800462c:	4630      	mov	r0, r6
 800462e:	f7fe f92d 	bl	800288c <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 8004632:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8004634:	4603      	mov	r3, r0
 8004636:	b110      	cbz	r0, 800463e <lfs_dir_alloc+0x52>
 8004638:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800463c:	d119      	bne.n	8004672 <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 800463e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	dd0a      	ble.n	800465c <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8004646:	3301      	adds	r3, #1
 8004648:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 800464c:	1853      	adds	r3, r2, r1
 800464e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 8004650:	fbb3 f2f1 	udiv	r2, r3, r1
 8004654:	fb01 3212 	mls	r2, r1, r2, r3
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 800465c:	2304      	movs	r3, #4
 800465e:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 8004660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004664:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800466a:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800466c:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 800466e:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 8004670:	75e3      	strb	r3, [r4, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	b004      	add	sp, #16
 8004676:	bd70      	pop	{r4, r5, r6, pc}

08004678 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8004678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800467a:	b089      	sub	sp, #36	; 0x24
 800467c:	4605      	mov	r5, r0
 800467e:	460e      	mov	r6, r1
 8004680:	e053      	b.n	800472a <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 8004682:	2201      	movs	r2, #1
 8004684:	9203      	str	r2, [sp, #12]
 8004686:	f10d 021b 	add.w	r2, sp, #27
 800468a:	9202      	str	r2, [sp, #8]
 800468c:	9401      	str	r4, [sp, #4]
 800468e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8004690:	9200      	str	r2, [sp, #0]
 8004692:	1b1b      	subs	r3, r3, r4
 8004694:	462a      	mov	r2, r5
 8004696:	f106 0140 	add.w	r1, r6, #64	; 0x40
 800469a:	4628      	mov	r0, r5
 800469c:	f7fe f8f6 	bl	800288c <lfs_bd_read>
                if (err) {
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d152      	bne.n	800474a <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 80046a4:	2301      	movs	r3, #1
 80046a6:	9303      	str	r3, [sp, #12]
 80046a8:	f10d 021b 	add.w	r2, sp, #27
 80046ac:	9202      	str	r2, [sp, #8]
 80046ae:	9401      	str	r4, [sp, #4]
 80046b0:	9a07      	ldr	r2, [sp, #28]
 80046b2:	9200      	str	r2, [sp, #0]
 80046b4:	462a      	mov	r2, r5
 80046b6:	f105 0110 	add.w	r1, r5, #16
 80046ba:	4628      	mov	r0, r5
 80046bc:	f7fe fe88 	bl	80033d0 <lfs_bd_prog>
            if (err) {
 80046c0:	bb20      	cbnz	r0, 800470c <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80046c2:	3401      	adds	r4, #1
 80046c4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	d945      	bls.n	8004756 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 80046ca:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80046cc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80046d0:	d0d7      	beq.n	8004682 <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80046d2:	88b2      	ldrh	r2, [r6, #4]
 80046d4:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 80046d6:	2101      	movs	r1, #1
 80046d8:	9105      	str	r1, [sp, #20]
 80046da:	f10d 011b 	add.w	r1, sp, #27
 80046de:	9104      	str	r1, [sp, #16]
 80046e0:	9403      	str	r4, [sp, #12]
 80046e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80046e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80046ea:	9202      	str	r2, [sp, #8]
 80046ec:	4a29      	ldr	r2, [pc, #164]	; (8004794 <lfs_file_relocate+0x11c>)
 80046ee:	9201      	str	r2, [sp, #4]
 80046f0:	1b1b      	subs	r3, r3, r4
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	f106 0340 	add.w	r3, r6, #64	; 0x40
 80046f8:	2200      	movs	r2, #0
 80046fa:	f106 0108 	add.w	r1, r6, #8
 80046fe:	4628      	mov	r0, r5
 8004700:	f7ff f97a 	bl	80039f8 <lfs_dir_getread>
                if (err) {
 8004704:	2800      	cmp	r0, #0
 8004706:	d0cd      	beq.n	80046a4 <lfs_file_relocate+0x2c>
                    return err;
 8004708:	4607      	mov	r7, r0
 800470a:	e03f      	b.n	800478c <lfs_file_relocate+0x114>
                if (err == LFS_ERR_CORRUPT) {
 800470c:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8004710:	d11d      	bne.n	800474e <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004712:	4b21      	ldr	r3, [pc, #132]	; (8004798 <lfs_file_relocate+0x120>)
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	9b07      	ldr	r3, [sp, #28]
 8004718:	f640 42b3 	movw	r2, #3251	; 0xcb3
 800471c:	491f      	ldr	r1, [pc, #124]	; (800479c <lfs_file_relocate+0x124>)
 800471e:	4820      	ldr	r0, [pc, #128]	; (80047a0 <lfs_file_relocate+0x128>)
 8004720:	f002 fb18 	bl	8006d54 <iprintf>
    rcache->block = LFS_BLOCK_NULL;
 8004724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004728:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 800472a:	a907      	add	r1, sp, #28
 800472c:	4628      	mov	r0, r5
 800472e:	f7ff fee9 	bl	8004504 <lfs_alloc>
        if (err) {
 8004732:	4607      	mov	r7, r0
 8004734:	bb50      	cbnz	r0, 800478c <lfs_file_relocate+0x114>
        err = lfs_bd_erase(lfs, nblock);
 8004736:	9907      	ldr	r1, [sp, #28]
 8004738:	4628      	mov	r0, r5
 800473a:	f7fe f857 	bl	80027ec <lfs_bd_erase>
        if (err) {
 800473e:	4607      	mov	r7, r0
 8004740:	b138      	cbz	r0, 8004752 <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 8004742:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8004746:	d0e4      	beq.n	8004712 <lfs_file_relocate+0x9a>
 8004748:	e020      	b.n	800478c <lfs_file_relocate+0x114>
                    return err;
 800474a:	4607      	mov	r7, r0
 800474c:	e01e      	b.n	800478c <lfs_file_relocate+0x114>
                return err;
 800474e:	4607      	mov	r7, r0
 8004750:	e01c      	b.n	800478c <lfs_file_relocate+0x114>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8004752:	2400      	movs	r4, #0
 8004754:	e7b6      	b.n	80046c4 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8004756:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475a:	69e9      	ldr	r1, [r5, #28]
 800475c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800475e:	f002 fc1f 	bl	8006fa0 <memcpy>
        file->cache.block = lfs->pcache.block;
 8004762:	692b      	ldr	r3, [r5, #16]
 8004764:	6433      	str	r3, [r6, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8004766:	696b      	ldr	r3, [r5, #20]
 8004768:	6473      	str	r3, [r6, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800476a:	69ab      	ldr	r3, [r5, #24]
 800476c:	64b3      	str	r3, [r6, #72]	; 0x48
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800476e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004772:	21ff      	movs	r1, #255	; 0xff
 8004774:	69e8      	ldr	r0, [r5, #28]
 8004776:	f002 fb5a 	bl	8006e2e <memset>
    pcache->block = LFS_BLOCK_NULL;
 800477a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800477e:	612b      	str	r3, [r5, #16]
        file->block = nblock;
 8004780:	9b07      	ldr	r3, [sp, #28]
 8004782:	63b3      	str	r3, [r6, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8004784:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800478a:	6333      	str	r3, [r6, #48]	; 0x30
}
 800478c:	4638      	mov	r0, r7
 800478e:	b009      	add	sp, #36	; 0x24
 8004790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004792:	bf00      	nop
 8004794:	fff7fc00 	.word	0xfff7fc00
 8004798:	080081c0 	.word	0x080081c0
 800479c:	08007ba4 	.word	0x08007ba4
 80047a0:	08007fe4 	.word	0x08007fe4

080047a4 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4605      	mov	r5, r0
 80047a8:	460c      	mov	r4, r1
    file->off = file->pos;
 80047aa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80047ac:	63cb      	str	r3, [r1, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80047ae:	f7fd ff6d 	bl	800268c <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80047b2:	4621      	mov	r1, r4
 80047b4:	4628      	mov	r0, r5
 80047b6:	f7ff ff5f 	bl	8004678 <lfs_file_relocate>
    if (err) {
 80047ba:	b918      	cbnz	r0, 80047c4 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 80047bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047c2:	6323      	str	r3, [r4, #48]	; 0x30
}
 80047c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080047c8 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 80047c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047cc:	b08b      	sub	sp, #44	; 0x2c
 80047ce:	4604      	mov	r4, r0
 80047d0:	460f      	mov	r7, r1
 80047d2:	4615      	mov	r5, r2
 80047d4:	4699      	mov	r9, r3
 80047d6:	e04d      	b.n	8004874 <lfs_ctz_extend+0xac>
            if (size == 0) {
 80047d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d032      	beq.n	8004844 <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 80047de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80047e0:	3b01      	subs	r3, #1
 80047e2:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 80047e4:	a908      	add	r1, sp, #32
 80047e6:	4620      	mov	r0, r4
 80047e8:	f7fe fb26 	bl	8002e38 <lfs_ctz_index>
            noff = noff + 1;
 80047ec:	9b08      	ldr	r3, [sp, #32]
 80047ee:	3301      	adds	r3, #1
 80047f0:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 80047f2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80047f4:	69d2      	ldr	r2, [r2, #28]
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d059      	beq.n	80048ae <lfs_ctz_extend+0xe6>
                for (lfs_off_t i = 0; i < noff; i++) {
 80047fa:	2600      	movs	r6, #0
 80047fc:	46b8      	mov	r8, r7
 80047fe:	464f      	mov	r7, r9
 8004800:	9b08      	ldr	r3, [sp, #32]
 8004802:	42b3      	cmp	r3, r6
 8004804:	d949      	bls.n	800489a <lfs_ctz_extend+0xd2>
                    err = lfs_bd_read(lfs,
 8004806:	2201      	movs	r2, #1
 8004808:	9203      	str	r2, [sp, #12]
 800480a:	aa09      	add	r2, sp, #36	; 0x24
 800480c:	9202      	str	r2, [sp, #8]
 800480e:	9601      	str	r6, [sp, #4]
 8004810:	9700      	str	r7, [sp, #0]
 8004812:	1b9b      	subs	r3, r3, r6
 8004814:	462a      	mov	r2, r5
 8004816:	2100      	movs	r1, #0
 8004818:	4620      	mov	r0, r4
 800481a:	f7fe f837 	bl	800288c <lfs_bd_read>
                    if (err) {
 800481e:	4603      	mov	r3, r0
 8004820:	2800      	cmp	r0, #0
 8004822:	d138      	bne.n	8004896 <lfs_ctz_extend+0xce>
                    err = lfs_bd_prog(lfs,
 8004824:	2301      	movs	r3, #1
 8004826:	9303      	str	r3, [sp, #12]
 8004828:	aa09      	add	r2, sp, #36	; 0x24
 800482a:	9202      	str	r2, [sp, #8]
 800482c:	9601      	str	r6, [sp, #4]
 800482e:	9a07      	ldr	r2, [sp, #28]
 8004830:	9200      	str	r2, [sp, #0]
 8004832:	462a      	mov	r2, r5
 8004834:	4641      	mov	r1, r8
 8004836:	4620      	mov	r0, r4
 8004838:	f7fe fdca 	bl	80033d0 <lfs_bd_prog>
                    if (err) {
 800483c:	4603      	mov	r3, r0
 800483e:	b940      	cbnz	r0, 8004852 <lfs_ctz_extend+0x8a>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004840:	3601      	adds	r6, #1
 8004842:	e7dd      	b.n	8004800 <lfs_ctz_extend+0x38>
                *block = nblock;
 8004844:	9b07      	ldr	r3, [sp, #28]
 8004846:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004848:	6013      	str	r3, [r2, #0]
                *off = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800484e:	6013      	str	r3, [r2, #0]
                return 0;
 8004850:	e029      	b.n	80048a6 <lfs_ctz_extend+0xde>
                        if (err == LFS_ERR_CORRUPT) {
 8004852:	46b9      	mov	r9, r7
 8004854:	4647      	mov	r7, r8
 8004856:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800485a:	d11c      	bne.n	8004896 <lfs_ctz_extend+0xce>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800485c:	4b33      	ldr	r3, [pc, #204]	; (800492c <lfs_ctz_extend+0x164>)
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	9b07      	ldr	r3, [sp, #28]
 8004862:	f640 327d 	movw	r2, #2941	; 0xb7d
 8004866:	4932      	ldr	r1, [pc, #200]	; (8004930 <lfs_ctz_extend+0x168>)
 8004868:	4832      	ldr	r0, [pc, #200]	; (8004934 <lfs_ctz_extend+0x16c>)
 800486a:	f002 fa73 	bl	8006d54 <iprintf>
    rcache->block = LFS_BLOCK_NULL;
 800486e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004872:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 8004874:	a907      	add	r1, sp, #28
 8004876:	4620      	mov	r0, r4
 8004878:	f7ff fe44 	bl	8004504 <lfs_alloc>
        if (err) {
 800487c:	9005      	str	r0, [sp, #20]
 800487e:	b990      	cbnz	r0, 80048a6 <lfs_ctz_extend+0xde>
            err = lfs_bd_erase(lfs, nblock);
 8004880:	9907      	ldr	r1, [sp, #28]
 8004882:	4620      	mov	r0, r4
 8004884:	f7fd ffb2 	bl	80027ec <lfs_bd_erase>
            if (err) {
 8004888:	9005      	str	r0, [sp, #20]
 800488a:	2800      	cmp	r0, #0
 800488c:	d0a4      	beq.n	80047d8 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 800488e:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8004892:	d0e3      	beq.n	800485c <lfs_ctz_extend+0x94>
 8004894:	e007      	b.n	80048a6 <lfs_ctz_extend+0xde>
                        return err;
 8004896:	9305      	str	r3, [sp, #20]
 8004898:	e005      	b.n	80048a6 <lfs_ctz_extend+0xde>
                *block = nblock;
 800489a:	9b07      	ldr	r3, [sp, #28]
 800489c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800489e:	6013      	str	r3, [r2, #0]
                *off = noff;
 80048a0:	9b08      	ldr	r3, [sp, #32]
 80048a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80048a4:	6013      	str	r3, [r2, #0]
}
 80048a6:	9805      	ldr	r0, [sp, #20]
 80048a8:	b00b      	add	sp, #44	; 0x2c
 80048aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 80048ae:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 80048b0:	fa90 faa0 	rbit	sl, r0
 80048b4:	faba fa8a 	clz	sl, sl
            lfs_size_t skips = lfs_ctz(index) + 1;
 80048b8:	f10a 0b01 	add.w	fp, sl, #1
            lfs_block_t nhead = head;
 80048bc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 80048c0:	2600      	movs	r6, #0
 80048c2:	46a0      	mov	r8, r4
 80048c4:	e006      	b.n	80048d4 <lfs_ctz_extend+0x10c>
                    if (err == LFS_ERR_CORRUPT) {
 80048c6:	4644      	mov	r4, r8
 80048c8:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80048cc:	d0c6      	beq.n	800485c <lfs_ctz_extend+0x94>
                    return err;
 80048ce:	9005      	str	r0, [sp, #20]
 80048d0:	e7e9      	b.n	80048a6 <lfs_ctz_extend+0xde>
            for (lfs_off_t i = 0; i < skips; i++) {
 80048d2:	3601      	adds	r6, #1
 80048d4:	455e      	cmp	r6, fp
 80048d6:	d221      	bcs.n	800491c <lfs_ctz_extend+0x154>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80048d8:	00b4      	lsls	r4, r6, #2
 80048da:	2304      	movs	r3, #4
 80048dc:	9303      	str	r3, [sp, #12]
 80048de:	ab09      	add	r3, sp, #36	; 0x24
 80048e0:	9302      	str	r3, [sp, #8]
 80048e2:	9401      	str	r4, [sp, #4]
 80048e4:	9b07      	ldr	r3, [sp, #28]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	2301      	movs	r3, #1
 80048ea:	462a      	mov	r2, r5
 80048ec:	4639      	mov	r1, r7
 80048ee:	4640      	mov	r0, r8
 80048f0:	f7fe fd6e 	bl	80033d0 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 80048f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
                if (err) {
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d1e5      	bne.n	80048c6 <lfs_ctz_extend+0xfe>
                if (i != skips-1) {
 80048fa:	4556      	cmp	r6, sl
 80048fc:	d0e9      	beq.n	80048d2 <lfs_ctz_extend+0x10a>
                    err = lfs_bd_read(lfs,
 80048fe:	2304      	movs	r3, #4
 8004900:	9303      	str	r3, [sp, #12]
 8004902:	a909      	add	r1, sp, #36	; 0x24
 8004904:	9102      	str	r1, [sp, #8]
 8004906:	9401      	str	r4, [sp, #4]
 8004908:	9200      	str	r2, [sp, #0]
 800490a:	462a      	mov	r2, r5
 800490c:	2100      	movs	r1, #0
 800490e:	4640      	mov	r0, r8
 8004910:	f7fd ffbc 	bl	800288c <lfs_bd_read>
                    if (err) {
 8004914:	2800      	cmp	r0, #0
 8004916:	d0dc      	beq.n	80048d2 <lfs_ctz_extend+0x10a>
                        return err;
 8004918:	9005      	str	r0, [sp, #20]
 800491a:	e7c4      	b.n	80048a6 <lfs_ctz_extend+0xde>
            *block = nblock;
 800491c:	9b07      	ldr	r3, [sp, #28]
 800491e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004920:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 8004922:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8004926:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004928:	6013      	str	r3, [r2, #0]
            return 0;
 800492a:	e7bc      	b.n	80048a6 <lfs_ctz_extend+0xde>
 800492c:	080081c0 	.word	0x080081c0
 8004930:	08007ba4 	.word	0x08007ba4
 8004934:	08007fe4 	.word	0x08007fe4

08004938 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 8004938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800493c:	b087      	sub	sp, #28
 800493e:	4605      	mov	r5, r0
 8004940:	460c      	mov	r4, r1
 8004942:	4617      	mov	r7, r2
 8004944:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 8004946:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004948:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800494c:	d015      	beq.n	800497a <lfs_file_flushedwrite+0x42>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800494e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004950:	444b      	add	r3, r9
 8004952:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    return (a > b) ? a : b;
 8004954:	4293      	cmp	r3, r2
 8004956:	bf38      	it	cc
 8004958:	4613      	movcc	r3, r2
                lfs->cfg->cache_size,
 800495a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800495c:	6a82      	ldr	r2, [r0, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 800495e:	6c81      	ldr	r1, [r0, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8004960:	2900      	cmp	r1, #0
 8004962:	d038      	beq.n	80049d6 <lfs_file_flushedwrite+0x9e>
 8004964:	08c9      	lsrs	r1, r1, #3
    return (a < b) ? a : b;
 8004966:	428a      	cmp	r2, r1
 8004968:	bf28      	it	cs
 800496a:	460a      	movcs	r2, r1
 800496c:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004970:	428a      	cmp	r2, r1
 8004972:	bf28      	it	cs
 8004974:	460a      	movcs	r2, r1
    if ((file->flags & LFS_F_INLINE) &&
 8004976:	429a      	cmp	r2, r3
 8004978:	d330      	bcc.n	80049dc <lfs_file_flushedwrite+0xa4>
        const void *buffer, lfs_size_t size) {
 800497a:	46c8      	mov	r8, r9
    while (nsize > 0) {
 800497c:	f1b8 0f00 	cmp.w	r8, #0
 8004980:	f000 809e 	beq.w	8004ac0 <lfs_file_flushedwrite+0x188>
        if (!(file->flags & LFS_F_WRITING) ||
 8004984:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004986:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
 800498a:	d004      	beq.n	8004996 <lfs_file_flushedwrite+0x5e>
                file->off == lfs->cfg->block_size) {
 800498c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800498e:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8004990:	69c9      	ldr	r1, [r1, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8004992:	4288      	cmp	r0, r1
 8004994:	d15a      	bne.n	8004a4c <lfs_file_flushedwrite+0x114>
            if (!(file->flags & LFS_F_INLINE)) {
 8004996:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800499a:	d14e      	bne.n	8004a3a <lfs_file_flushedwrite+0x102>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800499c:	b90a      	cbnz	r2, 80049a2 <lfs_file_flushedwrite+0x6a>
 800499e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049a0:	bb43      	cbnz	r3, 80049f4 <lfs_file_flushedwrite+0xbc>
                lfs_alloc_ack(lfs);
 80049a2:	4628      	mov	r0, r5
 80049a4:	f7fd fe72 	bl	800268c <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80049a8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80049ac:	9302      	str	r3, [sp, #8]
 80049ae:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049ba:	462a      	mov	r2, r5
 80049bc:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80049c0:	4628      	mov	r0, r5
 80049c2:	f7ff ff01 	bl	80047c8 <lfs_ctz_extend>
                if (err) {
 80049c6:	4601      	mov	r1, r0
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d03b      	beq.n	8004a44 <lfs_file_flushedwrite+0x10c>
                    file->flags |= LFS_F_ERRED;
 80049cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049d2:	6323      	str	r3, [r4, #48]	; 0x30
                    return err;
 80049d4:	e063      	b.n	8004a9e <lfs_file_flushedwrite+0x166>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80049d6:	69c1      	ldr	r1, [r0, #28]
            lfs_min(0x3fe, lfs_min(
 80049d8:	08c9      	lsrs	r1, r1, #3
 80049da:	e7c4      	b.n	8004966 <lfs_file_flushedwrite+0x2e>
        int err = lfs_file_outline(lfs, file);
 80049dc:	4621      	mov	r1, r4
 80049de:	4628      	mov	r0, r5
 80049e0:	f7ff fee0 	bl	80047a4 <lfs_file_outline>
        if (err) {
 80049e4:	4601      	mov	r1, r0
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d0c7      	beq.n	800497a <lfs_file_flushedwrite+0x42>
            file->flags |= LFS_F_ERRED;
 80049ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049f0:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
 80049f2:	e054      	b.n	8004a9e <lfs_file_flushedwrite+0x166>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80049f4:	f104 0640 	add.w	r6, r4, #64	; 0x40
 80049f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80049fa:	2100      	movs	r1, #0
 80049fc:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80049fe:	a805      	add	r0, sp, #20
 8004a00:	9003      	str	r0, [sp, #12]
 8004a02:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8004a06:	9002      	str	r0, [sp, #8]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	9200      	str	r2, [sp, #0]
 8004a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a10:	4632      	mov	r2, r6
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7fe fad3 	bl	8002fbe <lfs_ctz_find>
                    if (err) {
 8004a18:	4601      	mov	r1, r0
 8004a1a:	b948      	cbnz	r0, 8004a30 <lfs_file_flushedwrite+0xf8>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8004a1c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a20:	21ff      	movs	r1, #255	; 0xff
 8004a22:	68f0      	ldr	r0, [r6, #12]
 8004a24:	f002 fa03 	bl	8006e2e <memset>
    pcache->block = LFS_BLOCK_NULL;
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a2c:	6423      	str	r3, [r4, #64]	; 0x40
 8004a2e:	e7b8      	b.n	80049a2 <lfs_file_flushedwrite+0x6a>
                        file->flags |= LFS_F_ERRED;
 8004a30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a36:	6323      	str	r3, [r4, #48]	; 0x30
                        return err;
 8004a38:	e031      	b.n	8004a9e <lfs_file_flushedwrite+0x166>
                file->block = LFS_BLOCK_INLINE;
 8004a3a:	f06f 0301 	mvn.w	r3, #1
 8004a3e:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
 8004a40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a42:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
 8004a44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4a:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8004a4c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004a4e:	69de      	ldr	r6, [r3, #28]
 8004a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a52:	1af6      	subs	r6, r6, r3
 8004a54:	4546      	cmp	r6, r8
 8004a56:	bf28      	it	cs
 8004a58:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8004a5a:	9603      	str	r6, [sp, #12]
 8004a5c:	9702      	str	r7, [sp, #8]
 8004a5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	2301      	movs	r3, #1
 8004a68:	462a      	mov	r2, r5
 8004a6a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f7fe fcae 	bl	80033d0 <lfs_bd_prog>
            if (err) {
 8004a74:	4601      	mov	r1, r0
 8004a76:	b1b0      	cbz	r0, 8004aa6 <lfs_file_flushedwrite+0x16e>
                if (err == LFS_ERR_CORRUPT) {
 8004a78:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8004a7c:	d10b      	bne.n	8004a96 <lfs_file_flushedwrite+0x15e>
            err = lfs_file_relocate(lfs, file);
 8004a7e:	4621      	mov	r1, r4
 8004a80:	4628      	mov	r0, r5
 8004a82:	f7ff fdf9 	bl	8004678 <lfs_file_relocate>
            if (err) {
 8004a86:	4601      	mov	r1, r0
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d0e6      	beq.n	8004a5a <lfs_file_flushedwrite+0x122>
                file->flags |= LFS_F_ERRED;
 8004a8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a92:	6323      	str	r3, [r4, #48]	; 0x30
                return err;
 8004a94:	e003      	b.n	8004a9e <lfs_file_flushedwrite+0x166>
                file->flags |= LFS_F_ERRED;
 8004a96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a9c:	6323      	str	r3, [r4, #48]	; 0x30
}
 8004a9e:	4608      	mov	r0, r1
 8004aa0:	b007      	add	sp, #28
 8004aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 8004aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004aa8:	4433      	add	r3, r6
 8004aaa:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
 8004aac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004aae:	4433      	add	r3, r6
 8004ab0:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
 8004ab2:	4437      	add	r7, r6
        nsize -= diff;
 8004ab4:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ack(lfs);
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f7fd fde7 	bl	800268c <lfs_alloc_ack>
 8004abe:	e75d      	b.n	800497c <lfs_file_flushedwrite+0x44>
    return size;
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	e7ec      	b.n	8004a9e <lfs_file_flushedwrite+0x166>

08004ac4 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	b098      	sub	sp, #96	; 0x60
 8004ac8:	4605      	mov	r5, r0
 8004aca:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 8004acc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004ace:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004ad2:	d008      	beq.n	8004ae6 <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 8004ad4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004ad8:	d102      	bne.n	8004ae0 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 8004ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ade:	640a      	str	r2, [r1, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
 8004ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae4:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
 8004ae6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ae8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004aec:	d068      	beq.n	8004bc0 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 8004aee:	6b66      	ldr	r6, [r4, #52]	; 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 8004af0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004af4:	d151      	bne.n	8004b9a <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 8004af6:	2254      	movs	r2, #84	; 0x54
 8004af8:	2100      	movs	r1, #0
 8004afa:	a803      	add	r0, sp, #12
 8004afc:	f002 f997 	bl	8006e2e <memset>
                .ctz.head = file->ctz.head,
 8004b00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            lfs_file_t orig = {
 8004b02:	930d      	str	r3, [sp, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8004b04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            lfs_file_t orig = {
 8004b06:	930e      	str	r3, [sp, #56]	; 0x38
 8004b08:	2301      	movs	r3, #1
 8004b0a:	930f      	str	r3, [sp, #60]	; 0x3c
                .pos = file->pos,
 8004b0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
            lfs_file_t orig = {
 8004b0e:	9310      	str	r3, [sp, #64]	; 0x40
 8004b10:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
 8004b14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b18:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 8004b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b20:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 8004b22:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d21a      	bcs.n	8004b60 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f10d 020b 	add.w	r2, sp, #11
 8004b30:	a903      	add	r1, sp, #12
 8004b32:	4628      	mov	r0, r5
 8004b34:	f7fe fff2 	bl	8003b1c <lfs_file_flushedread>
                if (res < 0) {
 8004b38:	1e03      	subs	r3, r0, #0
 8004b3a:	db42      	blt.n	8004bc2 <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f10d 020b 	add.w	r2, sp, #11
 8004b42:	4621      	mov	r1, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	f7ff fef7 	bl	8004938 <lfs_file_flushedwrite>
                if (res < 0) {
 8004b4a:	1e03      	subs	r3, r0, #0
 8004b4c:	db39      	blt.n	8004bc2 <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b54:	d0e5      	beq.n	8004b22 <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b5c:	602b      	str	r3, [r5, #0]
}
 8004b5e:	e7e0      	b.n	8004b22 <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8004b60:	2301      	movs	r3, #1
 8004b62:	462a      	mov	r2, r5
 8004b64:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f7fe fbd1 	bl	8003310 <lfs_bd_flush>
                if (err) {
 8004b6e:	4603      	mov	r3, r0
 8004b70:	b1c0      	cbz	r0, 8004ba4 <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 8004b72:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8004b76:	d124      	bne.n	8004bc2 <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8004b78:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <lfs_file_flush+0x104>)
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b7e:	f640 5202 	movw	r2, #3330	; 0xd02
 8004b82:	4912      	ldr	r1, [pc, #72]	; (8004bcc <lfs_file_flush+0x108>)
 8004b84:	4812      	ldr	r0, [pc, #72]	; (8004bd0 <lfs_file_flush+0x10c>)
 8004b86:	f002 f8e5 	bl	8006d54 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f7ff fd73 	bl	8004678 <lfs_file_relocate>
                if (err) {
 8004b92:	4603      	mov	r3, r0
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d0e3      	beq.n	8004b60 <lfs_file_flush+0x9c>
 8004b98:	e013      	b.n	8004bc2 <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 8004b9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
 8004b9c:	42b3      	cmp	r3, r6
 8004b9e:	bf38      	it	cc
 8004ba0:	4633      	movcc	r3, r6
 8004ba2:	6363      	str	r3, [r4, #52]	; 0x34
        file->ctz.head = file->block;
 8004ba4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ba6:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
 8004ba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004baa:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8004bac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bb2:	6323      	str	r3, [r4, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6323      	str	r3, [r4, #48]	; 0x30
        file->pos = pos;
 8004bba:	6366      	str	r6, [r4, #52]	; 0x34
    return 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e000      	b.n	8004bc2 <lfs_file_flush+0xfe>
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	b018      	add	sp, #96	; 0x60
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}
 8004bc8:	080081c0 	.word	0x080081c0
 8004bcc:	08007ba4 	.word	0x08007ba4
 8004bd0:	08007fe4 	.word	0x08007fe4

08004bd4 <lfs_file_rawread>:
        void *buffer, lfs_size_t size) {
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8004bd8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004bda:	f013 0f01 	tst.w	r3, #1
 8004bde:	d00f      	beq.n	8004c00 <lfs_file_rawread+0x2c>
 8004be0:	4605      	mov	r5, r0
 8004be2:	460c      	mov	r4, r1
 8004be4:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 8004be6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004bea:	d002      	beq.n	8004bf2 <lfs_file_rawread+0x1e>
        int err = lfs_file_flush(lfs, file);
 8004bec:	f7ff ff6a 	bl	8004ac4 <lfs_file_flush>
        if (err) {
 8004bf0:	b928      	cbnz	r0, 8004bfe <lfs_file_rawread+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f7fe ff8f 	bl	8003b1c <lfs_file_flushedread>
}
 8004bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8004c00:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <lfs_file_rawread+0x3c>)
 8004c02:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <lfs_file_rawread+0x40>)
 8004c04:	f640 518d 	movw	r1, #3469	; 0xd8d
 8004c08:	4803      	ldr	r0, [pc, #12]	; (8004c18 <lfs_file_rawread+0x44>)
 8004c0a:	f001 ff07 	bl	8006a1c <__assert_func>
 8004c0e:	bf00      	nop
 8004c10:	08008008 	.word	0x08008008
 8004c14:	080086b0 	.word	0x080086b0
 8004c18:	08007ba4 	.word	0x08007ba4

08004c1c <lfs_file_rawseek>:
        lfs_soff_t off, int whence) {
 8004c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	4606      	mov	r6, r0
 8004c22:	460d      	mov	r5, r1
 8004c24:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 8004c26:	6b4f      	ldr	r7, [r1, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
 8004c28:	b123      	cbz	r3, 8004c34 <lfs_file_rawseek+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d021      	beq.n	8004c72 <lfs_file_rawseek+0x56>
    } else if (whence == LFS_SEEK_END) {
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d023      	beq.n	8004c7a <lfs_file_rawseek+0x5e>
    lfs_off_t npos = file->pos;
 8004c32:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 8004c34:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004c36:	42a3      	cmp	r3, r4
 8004c38:	d339      	bcc.n	8004cae <lfs_file_rawseek+0x92>
    if (file->pos == npos) {
 8004c3a:	42bc      	cmp	r4, r7
 8004c3c:	d023      	beq.n	8004c86 <lfs_file_rawseek+0x6a>
        !(file->flags & LFS_F_WRITING)
 8004c3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    if (
 8004c40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c44:	d10c      	bne.n	8004c60 <lfs_file_rawseek+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8004c46:	9701      	str	r7, [sp, #4]
 8004c48:	a901      	add	r1, sp, #4
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f7fe f8f4 	bl	8002e38 <lfs_ctz_index>
 8004c50:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 8004c52:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 8004c54:	4669      	mov	r1, sp
 8004c56:	4630      	mov	r0, r6
 8004c58:	f7fe f8ee 	bl	8002e38 <lfs_ctz_index>
        if (oindex == nindex
 8004c5c:	4287      	cmp	r7, r0
 8004c5e:	d014      	beq.n	8004c8a <lfs_file_rawseek+0x6e>
    int err = lfs_file_flush(lfs, file);
 8004c60:	4629      	mov	r1, r5
 8004c62:	4630      	mov	r0, r6
 8004c64:	f7ff ff2e 	bl	8004ac4 <lfs_file_flush>
    if (err) {
 8004c68:	b908      	cbnz	r0, 8004c6e <lfs_file_rawseek+0x52>
    file->pos = npos;
 8004c6a:	636c      	str	r4, [r5, #52]	; 0x34
    return npos;
 8004c6c:	4620      	mov	r0, r4
}
 8004c6e:	b003      	add	sp, #12
 8004c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 8004c72:	42e7      	cmn	r7, r4
 8004c74:	d415      	bmi.n	8004ca2 <lfs_file_rawseek+0x86>
            npos = file->pos + off;
 8004c76:	443c      	add	r4, r7
 8004c78:	e7dc      	b.n	8004c34 <lfs_file_rawseek+0x18>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8004c7a:	f7fd fd73 	bl	8002764 <lfs_file_rawsize>
        if (res < 0) {
 8004c7e:	1900      	adds	r0, r0, r4
 8004c80:	d412      	bmi.n	8004ca8 <lfs_file_rawseek+0x8c>
            npos = res;
 8004c82:	4604      	mov	r4, r0
 8004c84:	e7d6      	b.n	8004c34 <lfs_file_rawseek+0x18>
        return npos;
 8004c86:	4620      	mov	r0, r4
 8004c88:	e7f1      	b.n	8004c6e <lfs_file_rawseek+0x52>
                && noff >= file->cache.off
 8004c8a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004c8c:	9a00      	ldr	r2, [sp, #0]
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d8e6      	bhi.n	8004c60 <lfs_file_rawseek+0x44>
                && noff < file->cache.off + file->cache.size) {
 8004c92:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8004c94:	440b      	add	r3, r1
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d2e2      	bcs.n	8004c60 <lfs_file_rawseek+0x44>
            file->pos = npos;
 8004c9a:	636c      	str	r4, [r5, #52]	; 0x34
            file->off = noff;
 8004c9c:	63ea      	str	r2, [r5, #60]	; 0x3c
            return npos;
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	e7e5      	b.n	8004c6e <lfs_file_rawseek+0x52>
            return LFS_ERR_INVAL;
 8004ca2:	f06f 0015 	mvn.w	r0, #21
 8004ca6:	e7e2      	b.n	8004c6e <lfs_file_rawseek+0x52>
            return LFS_ERR_INVAL;
 8004ca8:	f06f 0015 	mvn.w	r0, #21
 8004cac:	e7df      	b.n	8004c6e <lfs_file_rawseek+0x52>
        return LFS_ERR_INVAL;
 8004cae:	f06f 0015 	mvn.w	r0, #21
 8004cb2:	e7dc      	b.n	8004c6e <lfs_file_rawseek+0x52>

08004cb4 <lfs_file_rawrewind>:
static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 8004cb4:	b508      	push	{r3, lr}
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f7ff ffaf 	bl	8004c1c <lfs_file_rawseek>
    if (res < 0) {
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	db00      	blt.n	8004cc4 <lfs_file_rawrewind+0x10>
    return 0;
 8004cc2:	2000      	movs	r0, #0
}
 8004cc4:	bd08      	pop	{r3, pc}
	...

08004cc8 <lfs_file_rawwrite>:
        const void *buffer, lfs_size_t size) {
 8004cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8004cd0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004cd2:	f013 0f02 	tst.w	r3, #2
 8004cd6:	d02a      	beq.n	8004d2e <lfs_file_rawwrite+0x66>
 8004cd8:	4605      	mov	r5, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 8004cde:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004ce2:	d12b      	bne.n	8004d3c <lfs_file_rawwrite+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8004ce4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ce6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004cea:	d004      	beq.n	8004cf6 <lfs_file_rawwrite+0x2e>
 8004cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004cf0:	4291      	cmp	r1, r2
 8004cf2:	d200      	bcs.n	8004cf6 <lfs_file_rawwrite+0x2e>
        file->pos = file->ctz.size;
 8004cf4:	6362      	str	r2, [r4, #52]	; 0x34
    if (file->pos + size > lfs->file_max) {
 8004cf6:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8004cf8:	19f1      	adds	r1, r6, r7
 8004cfa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004cfc:	4291      	cmp	r1, r2
 8004cfe:	d831      	bhi.n	8004d64 <lfs_file_rawwrite+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8004d00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004d04:	d11f      	bne.n	8004d46 <lfs_file_rawwrite+0x7e>
 8004d06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d08:	429e      	cmp	r6, r3
 8004d0a:	d91c      	bls.n	8004d46 <lfs_file_rawwrite+0x7e>
        file->pos = file->ctz.size;
 8004d0c:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
 8004d0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d10:	428e      	cmp	r6, r1
 8004d12:	d918      	bls.n	8004d46 <lfs_file_rawwrite+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8004d14:	2300      	movs	r3, #0
 8004d16:	f88d 3007 	strb.w	r3, [sp, #7]
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f10d 0207 	add.w	r2, sp, #7
 8004d20:	4621      	mov	r1, r4
 8004d22:	4628      	mov	r0, r5
 8004d24:	f7ff fe08 	bl	8004938 <lfs_file_flushedwrite>
            if (res < 0) {
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	daf0      	bge.n	8004d0e <lfs_file_rawwrite+0x46>
 8004d2c:	e017      	b.n	8004d5e <lfs_file_rawwrite+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <lfs_file_rawwrite+0xa4>)
 8004d30:	4a0f      	ldr	r2, [pc, #60]	; (8004d70 <lfs_file_rawwrite+0xa8>)
 8004d32:	f640 51f8 	movw	r1, #3576	; 0xdf8
 8004d36:	480f      	ldr	r0, [pc, #60]	; (8004d74 <lfs_file_rawwrite+0xac>)
 8004d38:	f001 fe70 	bl	8006a1c <__assert_func>
        int err = lfs_file_flush(lfs, file);
 8004d3c:	f7ff fec2 	bl	8004ac4 <lfs_file_flush>
        if (err) {
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d0cf      	beq.n	8004ce4 <lfs_file_rawwrite+0x1c>
 8004d44:	e00b      	b.n	8004d5e <lfs_file_rawwrite+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8004d46:	463b      	mov	r3, r7
 8004d48:	4642      	mov	r2, r8
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f7ff fdf3 	bl	8004938 <lfs_file_flushedwrite>
    if (nsize < 0) {
 8004d52:	2800      	cmp	r0, #0
 8004d54:	db03      	blt.n	8004d5e <lfs_file_rawwrite+0x96>
    file->flags &= ~LFS_F_ERRED;
 8004d56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d58:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004d5c:	6323      	str	r3, [r4, #48]	; 0x30
}
 8004d5e:	b002      	add	sp, #8
 8004d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 8004d64:	f06f 001a 	mvn.w	r0, #26
 8004d68:	e7f9      	b.n	8004d5e <lfs_file_rawwrite+0x96>
 8004d6a:	bf00      	nop
 8004d6c:	08008038 	.word	0x08008038
 8004d70:	0800868c 	.word	0x0800868c
 8004d74:	08007ba4 	.word	0x08007ba4

08004d78 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8004d78:	b500      	push	{lr}
 8004d7a:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8004d80:	aa01      	add	r2, sp, #4
 8004d82:	4904      	ldr	r1, [pc, #16]	; (8004d94 <lfs_fs_rawsize+0x1c>)
 8004d84:	f7ff face 	bl	8004324 <lfs_fs_rawtraverse>
    if (err) {
 8004d88:	b900      	cbnz	r0, 8004d8c <lfs_fs_rawsize+0x14>
        return err;
    }

    return size;
 8004d8a:	9801      	ldr	r0, [sp, #4]
}
 8004d8c:	b003      	add	sp, #12
 8004d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d92:	bf00      	nop
 8004d94:	080027e1 	.word	0x080027e1

08004d98 <lfs_rawmount>:
static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	b09b      	sub	sp, #108	; 0x6c
 8004d9e:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 8004da0:	f7fe f974 	bl	800308c <lfs_init>
    if (err) {
 8004da4:	9005      	str	r0, [sp, #20]
 8004da6:	bb48      	cbnz	r0, 8004dfc <lfs_rawmount+0x64>
    lfs_mdir_t dir = {.tail = {0, 1}};
 8004da8:	2220      	movs	r2, #32
 8004daa:	2100      	movs	r1, #0
 8004dac:	a80f      	add	r0, sp, #60	; 0x3c
 8004dae:	f002 f83e 	bl	8006e2e <memset>
 8004db2:	2501      	movs	r5, #1
 8004db4:	9516      	str	r5, [sp, #88]	; 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8004db6:	4aa0      	ldr	r2, [pc, #640]	; (8005038 <lfs_rawmount+0x2a0>)
 8004db8:	ab0d      	add	r3, sp, #52	; 0x34
 8004dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dbe:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 8004dc2:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 8004dc4:	e087      	b.n	8004ed6 <lfs_rawmount+0x13e>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004dc6:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004dc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004dca:	4288      	cmp	r0, r1
 8004dcc:	f040 8097 	bne.w	8004efe <lfs_rawmount+0x166>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e099      	b.n	8004f08 <lfs_rawmount+0x170>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8004dd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004dd6:	429f      	cmp	r7, r3
 8004dd8:	d001      	beq.n	8004dde <lfs_rawmount+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004dda:	9b05      	ldr	r3, [sp, #20]
 8004ddc:	e094      	b.n	8004f08 <lfs_rawmount+0x170>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e092      	b.n	8004f08 <lfs_rawmount+0x170>
            LFS_WARN("Cycle detected in tail list");
 8004de2:	4b96      	ldr	r3, [pc, #600]	; (800503c <lfs_rawmount+0x2a4>)
 8004de4:	f44f 5287 	mov.w	r2, #4320	; 0x10e0
 8004de8:	4995      	ldr	r1, [pc, #596]	; (8005040 <lfs_rawmount+0x2a8>)
 8004dea:	4896      	ldr	r0, [pc, #600]	; (8005044 <lfs_rawmount+0x2ac>)
 8004dec:	f001 ffb2 	bl	8006d54 <iprintf>
            err = LFS_ERR_CORRUPT;
 8004df0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004df4:	9305      	str	r3, [sp, #20]
    lfs_rawunmount(lfs);
 8004df6:	4620      	mov	r0, r4
 8004df8:	f7fe f943 	bl	8003082 <lfs_rawunmount>
}
 8004dfc:	9805      	ldr	r0, [sp, #20]
 8004dfe:	b01b      	add	sp, #108	; 0x6c
 8004e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 8004e04:	920d      	str	r2, [sp, #52]	; 0x34
            tortoise[1] = dir.tail[1];
 8004e06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e08:	930e      	str	r3, [sp, #56]	; 0x38
            tortoise_period *= 2;
 8004e0a:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 8004e0c:	2500      	movs	r5, #0
 8004e0e:	e082      	b.n	8004f16 <lfs_rawmount+0x17e>
                LFS_ERROR("Invalid version "
 8004e10:	4620      	mov	r0, r4
 8004e12:	f7fd fc1c 	bl	800264e <lfs_fs_disk_version_minor>
 8004e16:	4b89      	ldr	r3, [pc, #548]	; (800503c <lfs_rawmount+0x2a4>)
 8004e18:	9303      	str	r3, [sp, #12]
 8004e1a:	9002      	str	r0, [sp, #8]
 8004e1c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004e20:	b2bf      	uxth	r7, r7
 8004e22:	9700      	str	r7, [sp, #0]
 8004e24:	465b      	mov	r3, fp
 8004e26:	f241 120e 	movw	r2, #4366	; 0x110e
 8004e2a:	4985      	ldr	r1, [pc, #532]	; (8005040 <lfs_rawmount+0x2a8>)
 8004e2c:	4886      	ldr	r0, [pc, #536]	; (8005048 <lfs_rawmount+0x2b0>)
 8004e2e:	f001 ff91 	bl	8006d54 <iprintf>
                err = LFS_ERR_INVAL;
 8004e32:	f06f 0315 	mvn.w	r3, #21
 8004e36:	9305      	str	r3, [sp, #20]
                goto cleanup;
 8004e38:	e7dd      	b.n	8004df6 <lfs_rawmount+0x5e>
                LFS_DEBUG("Found older minor version "
 8004e3a:	4b80      	ldr	r3, [pc, #512]	; (800503c <lfs_rawmount+0x2a4>)
 8004e3c:	9303      	str	r3, [sp, #12]
 8004e3e:	9002      	str	r0, [sp, #8]
 8004e40:	f8cd 8004 	str.w	r8, [sp, #4]
 8004e44:	b2bf      	uxth	r7, r7
 8004e46:	9700      	str	r7, [sp, #0]
 8004e48:	465b      	mov	r3, fp
 8004e4a:	f241 121c 	movw	r2, #4380	; 0x111c
 8004e4e:	497c      	ldr	r1, [pc, #496]	; (8005040 <lfs_rawmount+0x2a8>)
 8004e50:	487e      	ldr	r0, [pc, #504]	; (800504c <lfs_rawmount+0x2b4>)
 8004e52:	f001 ff7f 	bl	8006d54 <iprintf>
                lfs_fs_prepsuperblock(lfs, true);
 8004e56:	2101      	movs	r1, #1
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f7fd fc8f 	bl	800277c <lfs_fs_prepsuperblock>
 8004e5e:	e09a      	b.n	8004f96 <lfs_rawmount+0x1fe>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8004e60:	4976      	ldr	r1, [pc, #472]	; (800503c <lfs_rawmount+0x2a4>)
 8004e62:	9101      	str	r1, [sp, #4]
 8004e64:	9200      	str	r2, [sp, #0]
 8004e66:	f241 122a 	movw	r2, #4394	; 0x112a
 8004e6a:	4975      	ldr	r1, [pc, #468]	; (8005040 <lfs_rawmount+0x2a8>)
 8004e6c:	4878      	ldr	r0, [pc, #480]	; (8005050 <lfs_rawmount+0x2b8>)
 8004e6e:	f001 ff71 	bl	8006d54 <iprintf>
                    err = LFS_ERR_INVAL;
 8004e72:	f06f 0315 	mvn.w	r3, #21
 8004e76:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 8004e78:	e7bd      	b.n	8004df6 <lfs_rawmount+0x5e>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8004e7a:	4970      	ldr	r1, [pc, #448]	; (800503c <lfs_rawmount+0x2a4>)
 8004e7c:	9101      	str	r1, [sp, #4]
 8004e7e:	9200      	str	r2, [sp, #0]
 8004e80:	f241 1235 	movw	r2, #4405	; 0x1135
 8004e84:	496e      	ldr	r1, [pc, #440]	; (8005040 <lfs_rawmount+0x2a8>)
 8004e86:	4873      	ldr	r0, [pc, #460]	; (8005054 <lfs_rawmount+0x2bc>)
 8004e88:	f001 ff64 	bl	8006d54 <iprintf>
                    err = LFS_ERR_INVAL;
 8004e8c:	f06f 0315 	mvn.w	r3, #21
 8004e90:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 8004e92:	e7b0      	b.n	8004df6 <lfs_rawmount+0x5e>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8004e94:	4969      	ldr	r1, [pc, #420]	; (800503c <lfs_rawmount+0x2a4>)
 8004e96:	9101      	str	r1, [sp, #4]
 8004e98:	9200      	str	r2, [sp, #0]
 8004e9a:	f44f 528a 	mov.w	r2, #4416	; 0x1140
 8004e9e:	4968      	ldr	r1, [pc, #416]	; (8005040 <lfs_rawmount+0x2a8>)
 8004ea0:	486d      	ldr	r0, [pc, #436]	; (8005058 <lfs_rawmount+0x2c0>)
 8004ea2:	f001 ff57 	bl	8006d54 <iprintf>
                    err = LFS_ERR_INVAL;
 8004ea6:	f06f 0315 	mvn.w	r3, #21
 8004eaa:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 8004eac:	e7a3      	b.n	8004df6 <lfs_rawmount+0x5e>
            if (superblock.block_count != lfs->cfg->block_count) {
 8004eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004eb2:	6a11      	ldr	r1, [r2, #32]
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	f040 8086 	bne.w	8004fc6 <lfs_rawmount+0x22e>
            if (superblock.block_size != lfs->cfg->block_size) {
 8004eba:	9b08      	ldr	r3, [sp, #32]
 8004ebc:	69d2      	ldr	r2, [r2, #28]
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	f040 808e 	bne.w	8004fe0 <lfs_rawmount+0x248>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8004ec4:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8004ec8:	a90f      	add	r1, sp, #60	; 0x3c
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7fe fd6a 	bl	80039a4 <lfs_dir_getgstate>
        if (err) {
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	f040 8096 	bne.w	8005002 <lfs_rawmount+0x26a>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8004ed6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ed8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8004edc:	f000 8095 	beq.w	800500a <lfs_rawmount+0x272>
 8004ee0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee6:	f000 808e 	beq.w	8005006 <lfs_rawmount+0x26e>
 8004eea:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 8004eec:	f013 0301 	ands.w	r3, r3, #1
 8004ef0:	f040 808d 	bne.w	800500e <lfs_rawmount+0x276>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004ef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ef6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004ef8:	42bb      	cmp	r3, r7
 8004efa:	f43f af64 	beq.w	8004dc6 <lfs_rawmount+0x2e>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8004efe:	990e      	ldr	r1, [sp, #56]	; 0x38
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004f00:	428b      	cmp	r3, r1
 8004f02:	f43f af67 	beq.w	8004dd4 <lfs_rawmount+0x3c>
 8004f06:	9b05      	ldr	r3, [sp, #20]
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8004f08:	f013 0f01 	tst.w	r3, #1
 8004f0c:	f47f af69 	bne.w	8004de2 <lfs_rawmount+0x4a>
        if (tortoise_i == tortoise_period) {
 8004f10:	42b5      	cmp	r5, r6
 8004f12:	f43f af77 	beq.w	8004e04 <lfs_rawmount+0x6c>
        tortoise_i += 1;
 8004f16:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8004f18:	9417      	str	r4, [sp, #92]	; 0x5c
 8004f1a:	4b50      	ldr	r3, [pc, #320]	; (800505c <lfs_rawmount+0x2c4>)
 8004f1c:	9318      	str	r3, [sp, #96]	; 0x60
 8004f1e:	2308      	movs	r3, #8
 8004f20:	9319      	str	r3, [sp, #100]	; 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8004f22:	ab17      	add	r3, sp, #92	; 0x5c
 8004f24:	9303      	str	r3, [sp, #12]
 8004f26:	4b4e      	ldr	r3, [pc, #312]	; (8005060 <lfs_rawmount+0x2c8>)
 8004f28:	9302      	str	r3, [sp, #8]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	4b4d      	ldr	r3, [pc, #308]	; (8005064 <lfs_rawmount+0x2cc>)
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	4b4d      	ldr	r3, [pc, #308]	; (8005068 <lfs_rawmount+0x2d0>)
 8004f34:	aa15      	add	r2, sp, #84	; 0x54
 8004f36:	a90f      	add	r1, sp, #60	; 0x3c
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f7fe fe73 	bl	8003c24 <lfs_dir_fetchmatch>
        if (tag < 0) {
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	db5d      	blt.n	8004ffe <lfs_rawmount+0x266>
        if (tag && !lfs_tag_isdelete(tag)) {
 8004f42:	2800      	cmp	r0, #0
 8004f44:	d0be      	beq.n	8004ec4 <lfs_rawmount+0x12c>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8004f46:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 8004f4a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004f4e:	d0b9      	beq.n	8004ec4 <lfs_rawmount+0x12c>
            lfs->root[0] = dir.pair[0];
 8004f50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f52:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 8004f54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f56:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8004f58:	ab07      	add	r3, sp, #28
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	4b43      	ldr	r3, [pc, #268]	; (800506c <lfs_rawmount+0x2d4>)
 8004f5e:	4a42      	ldr	r2, [pc, #264]	; (8005068 <lfs_rawmount+0x2d0>)
 8004f60:	a90f      	add	r1, sp, #60	; 0x3c
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7fe fd10 	bl	8003988 <lfs_dir_get>
            if (tag < 0) {
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	db46      	blt.n	8004ffa <lfs_rawmount+0x262>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8004f6c:	9f07      	ldr	r7, [sp, #28]
 8004f6e:	ea4f 4b17 	mov.w	fp, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8004f72:	fa1f f987 	uxth.w	r9, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7fd fb64 	bl	8002644 <lfs_fs_disk_version_major>
 8004f7c:	4680      	mov	r8, r0
 8004f7e:	4558      	cmp	r0, fp
 8004f80:	f47f af46 	bne.w	8004e10 <lfs_rawmount+0x78>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8004f84:	4620      	mov	r0, r4
 8004f86:	f7fd fb62 	bl	800264e <lfs_fs_disk_version_minor>
 8004f8a:	4548      	cmp	r0, r9
 8004f8c:	f4ff af40 	bcc.w	8004e10 <lfs_rawmount+0x78>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8004f90:	4548      	cmp	r0, r9
 8004f92:	f63f af52 	bhi.w	8004e3a <lfs_rawmount+0xa2>
            if (superblock.name_max) {
 8004f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f98:	b123      	cbz	r3, 8004fa4 <lfs_rawmount+0x20c>
                if (superblock.name_max > lfs->name_max) {
 8004f9a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	f63f af5f 	bhi.w	8004e60 <lfs_rawmount+0xc8>
                lfs->name_max = superblock.name_max;
 8004fa2:	66e3      	str	r3, [r4, #108]	; 0x6c
            if (superblock.file_max) {
 8004fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fa6:	b123      	cbz	r3, 8004fb2 <lfs_rawmount+0x21a>
                if (superblock.file_max > lfs->file_max) {
 8004fa8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004faa:	4293      	cmp	r3, r2
 8004fac:	f63f af65 	bhi.w	8004e7a <lfs_rawmount+0xe2>
                lfs->file_max = superblock.file_max;
 8004fb0:	6723      	str	r3, [r4, #112]	; 0x70
            if (superblock.attr_max) {
 8004fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f43f af7a 	beq.w	8004eae <lfs_rawmount+0x116>
                if (superblock.attr_max > lfs->attr_max) {
 8004fba:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	f63f af69 	bhi.w	8004e94 <lfs_rawmount+0xfc>
                lfs->attr_max = superblock.attr_max;
 8004fc2:	6763      	str	r3, [r4, #116]	; 0x74
 8004fc4:	e773      	b.n	8004eae <lfs_rawmount+0x116>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8004fc6:	4a1d      	ldr	r2, [pc, #116]	; (800503c <lfs_rawmount+0x2a4>)
 8004fc8:	9201      	str	r2, [sp, #4]
 8004fca:	9100      	str	r1, [sp, #0]
 8004fcc:	f241 124a 	movw	r2, #4426	; 0x114a
 8004fd0:	491b      	ldr	r1, [pc, #108]	; (8005040 <lfs_rawmount+0x2a8>)
 8004fd2:	4827      	ldr	r0, [pc, #156]	; (8005070 <lfs_rawmount+0x2d8>)
 8004fd4:	f001 febe 	bl	8006d54 <iprintf>
                err = LFS_ERR_INVAL;
 8004fd8:	f06f 0315 	mvn.w	r3, #21
 8004fdc:	9305      	str	r3, [sp, #20]
                goto cleanup;
 8004fde:	e70a      	b.n	8004df6 <lfs_rawmount+0x5e>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8004fe0:	4916      	ldr	r1, [pc, #88]	; (800503c <lfs_rawmount+0x2a4>)
 8004fe2:	9101      	str	r1, [sp, #4]
 8004fe4:	9200      	str	r2, [sp, #0]
 8004fe6:	f241 1251 	movw	r2, #4433	; 0x1151
 8004fea:	4915      	ldr	r1, [pc, #84]	; (8005040 <lfs_rawmount+0x2a8>)
 8004fec:	4821      	ldr	r0, [pc, #132]	; (8005074 <lfs_rawmount+0x2dc>)
 8004fee:	f001 feb1 	bl	8006d54 <iprintf>
                err = LFS_ERR_INVAL;
 8004ff2:	f06f 0315 	mvn.w	r3, #21
 8004ff6:	9305      	str	r3, [sp, #20]
                goto cleanup;
 8004ff8:	e6fd      	b.n	8004df6 <lfs_rawmount+0x5e>
                err = tag;
 8004ffa:	9005      	str	r0, [sp, #20]
 8004ffc:	e6fb      	b.n	8004df6 <lfs_rawmount+0x5e>
            err = tag;
 8004ffe:	9005      	str	r0, [sp, #20]
 8005000:	e6f9      	b.n	8004df6 <lfs_rawmount+0x5e>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8005002:	9005      	str	r0, [sp, #20]
 8005004:	e6f7      	b.n	8004df6 <lfs_rawmount+0x5e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8005006:	2301      	movs	r3, #1
 8005008:	e770      	b.n	8004eec <lfs_rawmount+0x154>
 800500a:	2301      	movs	r3, #1
 800500c:	e76e      	b.n	8004eec <lfs_rawmount+0x154>
 800500e:	6a22      	ldr	r2, [r4, #32]
 8005010:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8005014:	d00d      	beq.n	8005032 <lfs_rawmount+0x29a>
 8005016:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005018:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800501c:	d007      	beq.n	800502e <lfs_rawmount+0x296>
 800501e:	9a05      	ldr	r2, [sp, #20]
    if (lfs_pair_isnull(lfs->root)) {
 8005020:	f012 0101 	ands.w	r1, r2, #1
 8005024:	d156      	bne.n	80050d4 <lfs_rawmount+0x33c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8005026:	f104 0530 	add.w	r5, r4, #48	; 0x30
    for (int i = 0; i < 3; i++) {
 800502a:	9a05      	ldr	r2, [sp, #20]
 800502c:	e025      	b.n	800507a <lfs_rawmount+0x2e2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800502e:	2201      	movs	r2, #1
 8005030:	e7f6      	b.n	8005020 <lfs_rawmount+0x288>
 8005032:	2201      	movs	r2, #1
 8005034:	e7f4      	b.n	8005020 <lfs_rawmount+0x288>
 8005036:	bf00      	nop
 8005038:	08007aa4 	.word	0x08007aa4
 800503c:	080081c0 	.word	0x080081c0
 8005040:	08007ba4 	.word	0x08007ba4
 8005044:	08007f90 	.word	0x08007f90
 8005048:	0800807c 	.word	0x0800807c
 800504c:	080080b4 	.word	0x080080b4
 8005050:	080080f4 	.word	0x080080f4
 8005054:	08008128 	.word	0x08008128
 8005058:	0800815c 	.word	0x0800815c
 800505c:	08008070 	.word	0x08008070
 8005060:	08002f7d 	.word	0x08002f7d
 8005064:	0ff00008 	.word	0x0ff00008
 8005068:	7ffffc00 	.word	0x7ffffc00
 800506c:	20100018 	.word	0x20100018
 8005070:	08008190 	.word	0x08008190
 8005074:	080081c4 	.word	0x080081c4
    for (int i = 0; i < 3; i++) {
 8005078:	3201      	adds	r2, #1
 800507a:	2a02      	cmp	r2, #2
 800507c:	dc04      	bgt.n	8005088 <lfs_rawmount+0x2f0>
        if (((uint32_t*)a)[i] != 0) {
 800507e:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 8005082:	2800      	cmp	r0, #0
 8005084:	d0f8      	beq.n	8005078 <lfs_rawmount+0x2e0>
            return false;
 8005086:	460b      	mov	r3, r1
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8005088:	b1b3      	cbz	r3, 80050b8 <lfs_rawmount+0x320>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800508a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800508c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005090:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8005092:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005096:	f104 0230 	add.w	r2, r4, #48	; 0x30
 800509a:	ca07      	ldmia	r2, {r0, r1, r2}
 800509c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 80050a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050a2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80050a4:	6a12      	ldr	r2, [r2, #32]
 80050a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80050aa:	fb02 3311 	mls	r3, r2, r1, r3
 80050ae:	6563      	str	r3, [r4, #84]	; 0x54
    lfs_alloc_drop(lfs);
 80050b0:	4620      	mov	r0, r4
 80050b2:	f7fd faef 	bl	8002694 <lfs_alloc_drop>
    return 0;
 80050b6:	e6a1      	b.n	8004dfc <lfs_rawmount+0x64>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80050b8:	4b08      	ldr	r3, [pc, #32]	; (80050dc <lfs_rawmount+0x344>)
 80050ba:	9302      	str	r3, [sp, #8]
 80050bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050c6:	f241 1267 	movw	r2, #4455	; 0x1167
 80050ca:	4905      	ldr	r1, [pc, #20]	; (80050e0 <lfs_rawmount+0x348>)
 80050cc:	4805      	ldr	r0, [pc, #20]	; (80050e4 <lfs_rawmount+0x34c>)
 80050ce:	f001 fe41 	bl	8006d54 <iprintf>
 80050d2:	e7da      	b.n	800508a <lfs_rawmount+0x2f2>
        err = LFS_ERR_INVAL;
 80050d4:	f06f 0315 	mvn.w	r3, #21
 80050d8:	9305      	str	r3, [sp, #20]
 80050da:	e68c      	b.n	8004df6 <lfs_rawmount+0x5e>
 80050dc:	080081c0 	.word	0x080081c0
 80050e0:	08007ba4 	.word	0x08007ba4
 80050e4:	080081f4 	.word	0x080081f4

080050e8 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 80050e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	b08d      	sub	sp, #52	; 0x34
 80050ee:	4683      	mov	fp, r0
 80050f0:	4688      	mov	r8, r1
 80050f2:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	9205      	str	r2, [sp, #20]
    if (id) {
 80050f8:	9306      	str	r3, [sp, #24]
 80050fa:	b11b      	cbz	r3, 8005104 <lfs_dir_find+0x1c>
 80050fc:	461a      	mov	r2, r3
        *id = 0x3ff;
 80050fe:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005102:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 8005104:	f8db 3020 	ldr.w	r3, [fp, #32]
 8005108:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 800510c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8005110:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8005114:	4e4e      	ldr	r6, [pc, #312]	; (8005250 <lfs_dir_find+0x168>)
        name += strspn(name, "/");
 8005116:	4d4f      	ldr	r5, [pc, #316]	; (8005254 <lfs_dir_find+0x16c>)
 8005118:	4629      	mov	r1, r5
 800511a:	9f05      	ldr	r7, [sp, #20]
 800511c:	4638      	mov	r0, r7
 800511e:	f001 feac 	bl	8006e7a <strspn>
 8005122:	4604      	mov	r4, r0
 8005124:	eb07 0a00 	add.w	sl, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 8005128:	4629      	mov	r1, r5
 800512a:	4650      	mov	r0, sl
 800512c:	f001 fe94 	bl	8006e58 <strcspn>
 8005130:	4681      	mov	r9, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8005132:	2801      	cmp	r0, #1
 8005134:	d00b      	beq.n	800514e <lfs_dir_find+0x66>
 8005136:	f1b9 0f02 	cmp.w	r9, #2
 800513a:	d00c      	beq.n	8005156 <lfs_dir_find+0x6e>
        const char *suffix = name + namelen;
 800513c:	eb0a 0309 	add.w	r3, sl, r9
 8005140:	9305      	str	r3, [sp, #20]
 8005142:	461c      	mov	r4, r3
        int depth = 1;
 8005144:	2701      	movs	r7, #1
 8005146:	e013      	b.n	8005170 <lfs_dir_find+0x88>
 8005148:	46b3      	mov	fp, r6
 800514a:	4606      	mov	r6, r0
 800514c:	e7e3      	b.n	8005116 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800514e:	5d3b      	ldrb	r3, [r7, r4]
 8005150:	2b2e      	cmp	r3, #46	; 0x2e
 8005152:	d1f0      	bne.n	8005136 <lfs_dir_find+0x4e>
 8005154:	e006      	b.n	8005164 <lfs_dir_find+0x7c>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8005156:	2202      	movs	r2, #2
 8005158:	493f      	ldr	r1, [pc, #252]	; (8005258 <lfs_dir_find+0x170>)
 800515a:	4650      	mov	r0, sl
 800515c:	f001 fe57 	bl	8006e0e <memcmp>
 8005160:	2800      	cmp	r0, #0
 8005162:	d1eb      	bne.n	800513c <lfs_dir_find+0x54>
            name += namelen;
 8005164:	eb0a 0309 	add.w	r3, sl, r9
 8005168:	9305      	str	r3, [sp, #20]
            goto nextname;
 800516a:	e7d4      	b.n	8005116 <lfs_dir_find+0x2e>
                depth += 1;
 800516c:	3701      	adds	r7, #1
            suffix += sufflen;
 800516e:	442c      	add	r4, r5
            suffix += strspn(suffix, "/");
 8005170:	4d38      	ldr	r5, [pc, #224]	; (8005254 <lfs_dir_find+0x16c>)
 8005172:	4629      	mov	r1, r5
 8005174:	4620      	mov	r0, r4
 8005176:	f001 fe80 	bl	8006e7a <strspn>
 800517a:	4404      	add	r4, r0
            sufflen = strcspn(suffix, "/");
 800517c:	4629      	mov	r1, r5
 800517e:	4620      	mov	r0, r4
 8005180:	f001 fe6a 	bl	8006e58 <strcspn>
            if (sufflen == 0) {
 8005184:	4605      	mov	r5, r0
 8005186:	b168      	cbz	r0, 80051a4 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8005188:	2802      	cmp	r0, #2
 800518a:	d1ef      	bne.n	800516c <lfs_dir_find+0x84>
 800518c:	2202      	movs	r2, #2
 800518e:	4932      	ldr	r1, [pc, #200]	; (8005258 <lfs_dir_find+0x170>)
 8005190:	4620      	mov	r0, r4
 8005192:	f001 fe3c 	bl	8006e0e <memcmp>
 8005196:	2800      	cmp	r0, #0
 8005198:	d1e8      	bne.n	800516c <lfs_dir_find+0x84>
                if (depth == 0) {
 800519a:	3f01      	subs	r7, #1
 800519c:	d1e7      	bne.n	800516e <lfs_dir_find+0x86>
                    name = suffix + sufflen;
 800519e:	1963      	adds	r3, r4, r5
 80051a0:	9305      	str	r3, [sp, #20]
                    goto nextname;
 80051a2:	e7b8      	b.n	8005116 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 80051a4:	f89a 3000 	ldrb.w	r3, [sl]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d04c      	beq.n	8005246 <lfs_dir_find+0x15e>
        *path = name;
 80051ac:	9b07      	ldr	r3, [sp, #28]
 80051ae:	f8c3 a000 	str.w	sl, [r3]
    return (tag & 0x7ff00000) >> 20;
 80051b2:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d141      	bne.n	800523e <lfs_dir_find+0x156>
    return (tag & 0x000ffc00) >> 10;
 80051ba:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 80051be:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80051c2:	429e      	cmp	r6, r3
 80051c4:	d103      	bne.n	80051ce <lfs_dir_find+0xe6>
 80051c6:	4654      	mov	r4, sl
 80051c8:	464d      	mov	r5, r9
 80051ca:	465e      	mov	r6, fp
 80051cc:	e02a      	b.n	8005224 <lfs_dir_find+0x13c>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80051ce:	02b6      	lsls	r6, r6, #10
 80051d0:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	f046 5300 	orr.w	r3, r6, #536870912	; 0x20000000
 80051da:	f043 0308 	orr.w	r3, r3, #8
 80051de:	4a1f      	ldr	r2, [pc, #124]	; (800525c <lfs_dir_find+0x174>)
 80051e0:	4641      	mov	r1, r8
 80051e2:	4658      	mov	r0, fp
 80051e4:	f7fe fbd0 	bl	8003988 <lfs_dir_get>
            if (res < 0) {
 80051e8:	1e06      	subs	r6, r0, #0
 80051ea:	db2c      	blt.n	8005246 <lfs_dir_find+0x15e>
 80051ec:	4654      	mov	r4, sl
 80051ee:	464d      	mov	r5, r9
 80051f0:	465e      	mov	r6, fp
 80051f2:	e017      	b.n	8005224 <lfs_dir_find+0x13c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80051f4:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 80051f6:	9609      	str	r6, [sp, #36]	; 0x24
 80051f8:	940a      	str	r4, [sp, #40]	; 0x28
 80051fa:	950b      	str	r5, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80051fc:	aa09      	add	r2, sp, #36	; 0x24
 80051fe:	9203      	str	r2, [sp, #12]
 8005200:	4a17      	ldr	r2, [pc, #92]	; (8005260 <lfs_dir_find+0x178>)
 8005202:	9202      	str	r2, [sp, #8]
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	9500      	str	r5, [sp, #0]
 8005208:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800520c:	463a      	mov	r2, r7
 800520e:	4641      	mov	r1, r8
 8005210:	4630      	mov	r0, r6
 8005212:	f7fe fd07 	bl	8003c24 <lfs_dir_fetchmatch>
            if (tag < 0) {
 8005216:	2800      	cmp	r0, #0
 8005218:	db14      	blt.n	8005244 <lfs_dir_find+0x15c>
            if (tag) {
 800521a:	2800      	cmp	r0, #0
 800521c:	d194      	bne.n	8005148 <lfs_dir_find+0x60>
            if (!dir->split) {
 800521e:	f898 3017 	ldrb.w	r3, [r8, #23]
 8005222:	b14b      	cbz	r3, 8005238 <lfs_dir_find+0x150>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8005224:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 8005228:	212f      	movs	r1, #47	; 0x2f
 800522a:	4620      	mov	r0, r4
 800522c:	f001 fe07 	bl	8006e3e <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8005230:	2800      	cmp	r0, #0
 8005232:	d0df      	beq.n	80051f4 <lfs_dir_find+0x10c>
 8005234:	2300      	movs	r3, #0
 8005236:	e7de      	b.n	80051f6 <lfs_dir_find+0x10e>
                return LFS_ERR_NOENT;
 8005238:	f06f 0601 	mvn.w	r6, #1
 800523c:	e003      	b.n	8005246 <lfs_dir_find+0x15e>
            return LFS_ERR_NOTDIR;
 800523e:	f06f 0613 	mvn.w	r6, #19
 8005242:	e000      	b.n	8005246 <lfs_dir_find+0x15e>
 8005244:	4606      	mov	r6, r0
}
 8005246:	4630      	mov	r0, r6
 8005248:	b00d      	add	sp, #52	; 0x34
 800524a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524e:	bf00      	nop
 8005250:	002ffc00 	.word	0x002ffc00
 8005254:	08007f54 	.word	0x08007f54
 8005258:	0800806c 	.word	0x0800806c
 800525c:	700ffc00 	.word	0x700ffc00
 8005260:	08002f7d 	.word	0x08002f7d

08005264 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8005264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005268:	b09d      	sub	sp, #116	; 0x74
 800526a:	4605      	mov	r5, r0
 800526c:	460c      	mov	r4, r1
 800526e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005270:	461f      	mov	r7, r3
 8005272:	f8bd 809c 	ldrh.w	r8, [sp, #156]	; 0x9c
 8005276:	f8bd a0a0 	ldrh.w	sl, [sp, #160]	; 0xa0
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 800527a:	f7fd fa5f 	bl	800273c <lfs_dir_needsrelocation>
    dir->rev += 1;
 800527e:	68a3      	ldr	r3, [r4, #8]
 8005280:	3301      	adds	r3, #1
 8005282:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8005284:	4681      	mov	r9, r0
 8005286:	2800      	cmp	r0, #0
 8005288:	d034      	beq.n	80052f4 <lfs_dir_compact+0x90>
 800528a:	2300      	movs	r3, #0
 800528c:	9316      	str	r3, [sp, #88]	; 0x58
 800528e:	2301      	movs	r3, #1
 8005290:	9317      	str	r3, [sp, #92]	; 0x5c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	b373      	cbz	r3, 80052f4 <lfs_dir_compact+0x90>
 8005296:	6862      	ldr	r2, [r4, #4]
 8005298:	2a01      	cmp	r2, #1
 800529a:	d02b      	beq.n	80052f4 <lfs_dir_compact+0x90>
 800529c:	2b01      	cmp	r3, #1
 800529e:	d029      	beq.n	80052f4 <lfs_dir_compact+0x90>
 80052a0:	b342      	cbz	r2, 80052f4 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 80052a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052a6:	612b      	str	r3, [r5, #16]
        if (!tired) {
 80052a8:	f1b9 0f00 	cmp.w	r9, #0
 80052ac:	f000 812d 	beq.w	800550a <lfs_dir_compact+0x2a6>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80052b0:	2300      	movs	r3, #0
 80052b2:	931a      	str	r3, [sp, #104]	; 0x68
 80052b4:	2301      	movs	r3, #1
 80052b6:	931b      	str	r3, [sp, #108]	; 0x6c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 812f 	beq.w	800551e <lfs_dir_compact+0x2ba>
 80052c0:	6862      	ldr	r2, [r4, #4]
 80052c2:	2a01      	cmp	r2, #1
 80052c4:	f000 812b 	beq.w	800551e <lfs_dir_compact+0x2ba>
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f000 8128 	beq.w	800551e <lfs_dir_compact+0x2ba>
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	f000 8125 	beq.w	800551e <lfs_dir_compact+0x2ba>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80052d4:	1d21      	adds	r1, r4, #4
 80052d6:	4628      	mov	r0, r5
 80052d8:	f7ff f914 	bl	8004504 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80052dc:	4606      	mov	r6, r0
 80052de:	b330      	cbz	r0, 800532e <lfs_dir_compact+0xca>
 80052e0:	f110 0f1c 	cmn.w	r0, #28
 80052e4:	d11f      	bne.n	8005326 <lfs_dir_compact+0xc2>
 80052e6:	f1b9 0f00 	cmp.w	r9, #0
 80052ea:	d01c      	beq.n	8005326 <lfs_dir_compact+0xc2>
        relocated = true;
 80052ec:	46cb      	mov	fp, r9
        tired = false;
 80052ee:	f04f 0900 	mov.w	r9, #0
 80052f2:	e001      	b.n	80052f8 <lfs_dir_compact+0x94>
    bool relocated = false;
 80052f4:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 80052f8:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 80052fa:	9310      	str	r3, [sp, #64]	; 0x40
 80052fc:	2300      	movs	r3, #0
 80052fe:	9311      	str	r3, [sp, #68]	; 0x44
 8005300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005304:	9212      	str	r2, [sp, #72]	; 0x48
 8005306:	9213      	str	r2, [sp, #76]	; 0x4c
 8005308:	9314      	str	r3, [sp, #80]	; 0x50
                .end = (lfs->cfg->metadata_max ?
 800530a:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800530c:	6c93      	ldr	r3, [r2, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800530e:	b19b      	cbz	r3, 8005338 <lfs_dir_compact+0xd4>
 8005310:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8005312:	9315      	str	r3, [sp, #84]	; 0x54
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8005314:	6861      	ldr	r1, [r4, #4]
 8005316:	4628      	mov	r0, r5
 8005318:	f7fd fa68 	bl	80027ec <lfs_bd_erase>
            if (err) {
 800531c:	4606      	mov	r6, r0
 800531e:	b170      	cbz	r0, 800533e <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 8005320:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8005324:	d0bd      	beq.n	80052a2 <lfs_dir_compact+0x3e>
}
 8005326:	4630      	mov	r0, r6
 8005328:	b01d      	add	sp, #116	; 0x74
 800532a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 800532e:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 8005332:	f04f 0b01 	mov.w	fp, #1
 8005336:	e7df      	b.n	80052f8 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8005338:	69d3      	ldr	r3, [r2, #28]
 800533a:	3b08      	subs	r3, #8
 800533c:	e7e9      	b.n	8005312 <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 800533e:	2304      	movs	r3, #4
 8005340:	f104 0208 	add.w	r2, r4, #8
 8005344:	a910      	add	r1, sp, #64	; 0x40
 8005346:	4628      	mov	r0, r5
 8005348:	f7fe f8be 	bl	80034c8 <lfs_dir_commitprog>
            if (err) {
 800534c:	4606      	mov	r6, r0
 800534e:	b118      	cbz	r0, 8005358 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8005350:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8005354:	d1e7      	bne.n	8005326 <lfs_dir_compact+0xc2>
 8005356:	e7a4      	b.n	80052a2 <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005358:	9518      	str	r5, [sp, #96]	; 0x60
 800535a:	ab10      	add	r3, sp, #64	; 0x40
 800535c:	9319      	str	r3, [sp, #100]	; 0x64
            err = lfs_dir_traverse(lfs,
 800535e:	ab18      	add	r3, sp, #96	; 0x60
 8005360:	9308      	str	r3, [sp, #32]
 8005362:	4b75      	ldr	r3, [pc, #468]	; (8005538 <lfs_dir_compact+0x2d4>)
 8005364:	9307      	str	r3, [sp, #28]
 8005366:	f1c8 0300 	rsb	r3, r8, #0
 800536a:	b21b      	sxth	r3, r3
 800536c:	9306      	str	r3, [sp, #24]
 800536e:	f8cd a014 	str.w	sl, [sp, #20]
 8005372:	f8cd 8010 	str.w	r8, [sp, #16]
 8005376:	2200      	movs	r2, #0
 8005378:	9203      	str	r2, [sp, #12]
 800537a:	4b70      	ldr	r3, [pc, #448]	; (800553c <lfs_dir_compact+0x2d8>)
 800537c:	9302      	str	r3, [sp, #8]
 800537e:	9701      	str	r7, [sp, #4]
 8005380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005388:	9926      	ldr	r1, [sp, #152]	; 0x98
 800538a:	4628      	mov	r0, r5
 800538c:	f7fd fbc0 	bl	8002b10 <lfs_dir_traverse>
            if (err) {
 8005390:	4606      	mov	r6, r0
 8005392:	b118      	cbz	r0, 800539c <lfs_dir_compact+0x138>
                if (err == LFS_ERR_CORRUPT) {
 8005394:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8005398:	d1c5      	bne.n	8005326 <lfs_dir_compact+0xc2>
 800539a:	e782      	b.n	80052a2 <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800539c:	69a3      	ldr	r3, [r4, #24]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a2:	d013      	beq.n	80053cc <lfs_dir_compact+0x168>
 80053a4:	69e3      	ldr	r3, [r4, #28]
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053aa:	d00d      	beq.n	80053c8 <lfs_dir_compact+0x164>
 80053ac:	4603      	mov	r3, r0
            if (!lfs_pair_isnull(dir->tail)) {
 80053ae:	f013 0f01 	tst.w	r3, #1
 80053b2:	d00d      	beq.n	80053d0 <lfs_dir_compact+0x16c>
            lfs_gstate_t delta = {0};
 80053b4:	2300      	movs	r3, #0
 80053b6:	930d      	str	r3, [sp, #52]	; 0x34
 80053b8:	930e      	str	r3, [sp, #56]	; 0x38
 80053ba:	930f      	str	r3, [sp, #60]	; 0x3c
            if (!relocated) {
 80053bc:	f1bb 0f00 	cmp.w	fp, #0
 80053c0:	d01a      	beq.n	80053f8 <lfs_dir_compact+0x194>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80053c2:	f105 0048 	add.w	r0, r5, #72	; 0x48
    for (int i = 0; i < 3; i++) {
 80053c6:	e03e      	b.n	8005446 <lfs_dir_compact+0x1e2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e7f0      	b.n	80053ae <lfs_dir_compact+0x14a>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e7ee      	b.n	80053ae <lfs_dir_compact+0x14a>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80053d0:	7de2      	ldrb	r2, [r4, #23]
 80053d2:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 80053d6:	f104 0318 	add.w	r3, r4, #24
 80053da:	4959      	ldr	r1, [pc, #356]	; (8005540 <lfs_dir_compact+0x2dc>)
 80053dc:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 80053e0:	a910      	add	r1, sp, #64	; 0x40
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7fe f890 	bl	8003508 <lfs_dir_commitattr>
                if (err) {
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d0e3      	beq.n	80053b4 <lfs_dir_compact+0x150>
                    if (err == LFS_ERR_CORRUPT) {
 80053ec:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80053f0:	f43f af57 	beq.w	80052a2 <lfs_dir_compact+0x3e>
                    return err;
 80053f4:	4606      	mov	r6, r0
 80053f6:	e796      	b.n	8005326 <lfs_dir_compact+0xc2>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80053f8:	f105 0c3c 	add.w	ip, r5, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
 80053fc:	4633      	mov	r3, r6
 80053fe:	2b02      	cmp	r3, #2
 8005400:	dc09      	bgt.n	8005416 <lfs_dir_compact+0x1b2>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8005402:	a90d      	add	r1, sp, #52	; 0x34
 8005404:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8005408:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800540c:	4042      	eors	r2, r0
 800540e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 8005412:	3301      	adds	r3, #1
 8005414:	e7f3      	b.n	80053fe <lfs_dir_compact+0x19a>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8005416:	f105 0c30 	add.w	ip, r5, #48	; 0x30
    for (int i = 0; i < 3; i++) {
 800541a:	4633      	mov	r3, r6
 800541c:	2b02      	cmp	r3, #2
 800541e:	dcd0      	bgt.n	80053c2 <lfs_dir_compact+0x15e>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8005420:	a90d      	add	r1, sp, #52	; 0x34
 8005422:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8005426:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800542a:	4042      	eors	r2, r0
 800542c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 8005430:	3301      	adds	r3, #1
 8005432:	e7f3      	b.n	800541c <lfs_dir_compact+0x1b8>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8005434:	aa0d      	add	r2, sp, #52	; 0x34
 8005436:	f850 1026 	ldr.w	r1, [r0, r6, lsl #2]
 800543a:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
 800543e:	404b      	eors	r3, r1
 8005440:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    for (int i = 0; i < 3; i++) {
 8005444:	3601      	adds	r6, #1
 8005446:	2e02      	cmp	r6, #2
 8005448:	ddf4      	ble.n	8005434 <lfs_dir_compact+0x1d0>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800544a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800544c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005450:	f023 0303 	bic.w	r3, r3, #3
 8005454:	930d      	str	r3, [sp, #52]	; 0x34
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8005456:	aa0d      	add	r2, sp, #52	; 0x34
 8005458:	4621      	mov	r1, r4
 800545a:	4628      	mov	r0, r5
 800545c:	f7fe faa2 	bl	80039a4 <lfs_dir_getgstate>
            if (err) {
 8005460:	4606      	mov	r6, r0
 8005462:	2800      	cmp	r0, #0
 8005464:	f47f af5f 	bne.w	8005326 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 8005468:	2e02      	cmp	r6, #2
 800546a:	dc07      	bgt.n	800547c <lfs_dir_compact+0x218>
        if (((uint32_t*)a)[i] != 0) {
 800546c:	ab1c      	add	r3, sp, #112	; 0x70
 800546e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8005472:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005476:	b983      	cbnz	r3, 800549a <lfs_dir_compact+0x236>
    for (int i = 0; i < 3; i++) {
 8005478:	3601      	adds	r6, #1
 800547a:	e7f5      	b.n	8005468 <lfs_dir_compact+0x204>
    return true;
 800547c:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 800547e:	b973      	cbnz	r3, 800549e <lfs_dir_compact+0x23a>
                err = lfs_dir_commitattr(lfs, &commit,
 8005480:	ab0d      	add	r3, sp, #52	; 0x34
 8005482:	4a30      	ldr	r2, [pc, #192]	; (8005544 <lfs_dir_compact+0x2e0>)
 8005484:	a910      	add	r1, sp, #64	; 0x40
 8005486:	4628      	mov	r0, r5
 8005488:	f7fe f83e 	bl	8003508 <lfs_dir_commitattr>
                if (err) {
 800548c:	4606      	mov	r6, r0
 800548e:	b130      	cbz	r0, 800549e <lfs_dir_compact+0x23a>
                    if (err == LFS_ERR_CORRUPT) {
 8005490:	f110 0f54 	cmn.w	r0, #84	; 0x54
 8005494:	f47f af47 	bne.w	8005326 <lfs_dir_compact+0xc2>
 8005498:	e703      	b.n	80052a2 <lfs_dir_compact+0x3e>
            return false;
 800549a:	2300      	movs	r3, #0
 800549c:	e7ef      	b.n	800547e <lfs_dir_compact+0x21a>
            err = lfs_dir_commitcrc(lfs, &commit);
 800549e:	a910      	add	r1, sp, #64	; 0x40
 80054a0:	4628      	mov	r0, r5
 80054a2:	f7fe f8b3 	bl	800360c <lfs_dir_commitcrc>
            if (err) {
 80054a6:	4606      	mov	r6, r0
 80054a8:	b120      	cbz	r0, 80054b4 <lfs_dir_compact+0x250>
                if (err == LFS_ERR_CORRUPT) {
 80054aa:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80054ae:	f47f af3a 	bne.w	8005326 <lfs_dir_compact+0xc2>
 80054b2:	e6f6      	b.n	80052a2 <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80054b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054b6:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 80054b8:	6992      	ldr	r2, [r2, #24]
 80054ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80054be:	fb02 3311 	mls	r3, r2, r1, r3
 80054c2:	b9db      	cbnz	r3, 80054fc <lfs_dir_compact+0x298>
    lfs_block_t t = pair[0];
 80054c4:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 80054c6:	6862      	ldr	r2, [r4, #4]
 80054c8:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 80054ca:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 80054cc:	ebaa 0808 	sub.w	r8, sl, r8
 80054d0:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 80054d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054d6:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 80054d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054da:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 80054dc:	2200      	movs	r2, #0
 80054de:	64aa      	str	r2, [r5, #72]	; 0x48
 80054e0:	64ea      	str	r2, [r5, #76]	; 0x4c
 80054e2:	652a      	str	r2, [r5, #80]	; 0x50
            if (!relocated) {
 80054e4:	f1bb 0f00 	cmp.w	fp, #0
 80054e8:	d106      	bne.n	80054f8 <lfs_dir_compact+0x294>
                lfs->gdisk = lfs->gstate;
 80054ea:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 80054ee:	3530      	adds	r5, #48	; 0x30
 80054f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 80054f8:	465e      	mov	r6, fp
 80054fa:	e714      	b.n	8005326 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80054fc:	4b12      	ldr	r3, [pc, #72]	; (8005548 <lfs_dir_compact+0x2e4>)
 80054fe:	4a13      	ldr	r2, [pc, #76]	; (800554c <lfs_dir_compact+0x2e8>)
 8005500:	f240 71e2 	movw	r1, #2018	; 0x7e2
 8005504:	4812      	ldr	r0, [pc, #72]	; (8005550 <lfs_dir_compact+0x2ec>)
 8005506:	f001 fa89 	bl	8006a1c <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <lfs_dir_compact+0x2f0>)
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	6863      	ldr	r3, [r4, #4]
 8005510:	f240 72f4 	movw	r2, #2036	; 0x7f4
 8005514:	490e      	ldr	r1, [pc, #56]	; (8005550 <lfs_dir_compact+0x2ec>)
 8005516:	4810      	ldr	r0, [pc, #64]	; (8005558 <lfs_dir_compact+0x2f4>)
 8005518:	f001 fc1c 	bl	8006d54 <iprintf>
 800551c:	e6c8      	b.n	80052b0 <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800551e:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <lfs_dir_compact+0x2f0>)
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6863      	ldr	r3, [r4, #4]
 8005524:	f240 72f9 	movw	r2, #2041	; 0x7f9
 8005528:	4909      	ldr	r1, [pc, #36]	; (8005550 <lfs_dir_compact+0x2ec>)
 800552a:	480c      	ldr	r0, [pc, #48]	; (800555c <lfs_dir_compact+0x2f8>)
 800552c:	f001 fc12 	bl	8006d54 <iprintf>
            return LFS_ERR_NOSPC;
 8005530:	f06f 061b 	mvn.w	r6, #27
 8005534:	e6f7      	b.n	8005326 <lfs_dir_compact+0xc2>
 8005536:	bf00      	nop
 8005538:	080035c3 	.word	0x080035c3
 800553c:	400ffc00 	.word	0x400ffc00
 8005540:	000ffc08 	.word	0x000ffc08
 8005544:	7ffffc0c 	.word	0x7ffffc0c
 8005548:	0800822c 	.word	0x0800822c
 800554c:	080085e0 	.word	0x080085e0
 8005550:	08007ba4 	.word	0x08007ba4
 8005554:	080081c0 	.word	0x080081c0
 8005558:	08007fe4 	.word	0x08007fe4
 800555c:	08008254 	.word	0x08008254

08005560 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8005560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005564:	b08d      	sub	sp, #52	; 0x34
 8005566:	4605      	mov	r5, r0
 8005568:	460c      	mov	r4, r1
 800556a:	4691      	mov	r9, r2
 800556c:	461e      	mov	r6, r3
 800556e:	f8bd 8054 	ldrh.w	r8, [sp, #84]	; 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 8005572:	a904      	add	r1, sp, #16
 8005574:	f7ff f83a 	bl	80045ec <lfs_dir_alloc>
    if (err) {
 8005578:	4607      	mov	r7, r0
 800557a:	b118      	cbz	r0, 8005584 <lfs_dir_split+0x24>
}
 800557c:	4638      	mov	r0, r7
 800557e:	b00d      	add	sp, #52	; 0x34
 8005580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 8005584:	7de3      	ldrb	r3, [r4, #23]
 8005586:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 800558a:	69a3      	ldr	r3, [r4, #24]
 800558c:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800558e:	69e3      	ldr	r3, [r4, #28]
 8005590:	930b      	str	r3, [sp, #44]	; 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8005592:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8005596:	9302      	str	r3, [sp, #8]
 8005598:	f8cd 8004 	str.w	r8, [sp, #4]
 800559c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	4633      	mov	r3, r6
 80055a2:	464a      	mov	r2, r9
 80055a4:	a904      	add	r1, sp, #16
 80055a6:	4628      	mov	r0, r5
 80055a8:	f7ff fe5c 	bl	8005264 <lfs_dir_compact>
    if (res < 0) {
 80055ac:	2800      	cmp	r0, #0
 80055ae:	db17      	blt.n	80055e0 <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 80055b0:	9904      	ldr	r1, [sp, #16]
 80055b2:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 80055b4:	9a05      	ldr	r2, [sp, #20]
 80055b6:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	6a28      	ldr	r0, [r5, #32]
 80055c0:	4283      	cmp	r3, r0
 80055c2:	d007      	beq.n	80055d4 <lfs_dir_split+0x74>
 80055c4:	6866      	ldr	r6, [r4, #4]
 80055c6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80055c8:	42a6      	cmp	r6, r4
 80055ca:	d003      	beq.n	80055d4 <lfs_dir_split+0x74>
 80055cc:	42a3      	cmp	r3, r4
 80055ce:	d001      	beq.n	80055d4 <lfs_dir_split+0x74>
 80055d0:	42b0      	cmp	r0, r6
 80055d2:	d1d3      	bne.n	800557c <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80055d4:	f1b8 0f00 	cmp.w	r8, #0
 80055d8:	d1d0      	bne.n	800557c <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 80055da:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 80055dc:	626a      	str	r2, [r5, #36]	; 0x24
 80055de:	e7cd      	b.n	800557c <lfs_dir_split+0x1c>
        return res;
 80055e0:	4607      	mov	r7, r0
 80055e2:	e7cb      	b.n	800557c <lfs_dir_split+0x1c>

080055e4 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80055e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e8:	b091      	sub	sp, #68	; 0x44
 80055ea:	4607      	mov	r7, r0
 80055ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80055ee:	4690      	mov	r8, r2
 80055f0:	4699      	mov	r9, r3
 80055f2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80055f6:	f8bd b06c 	ldrh.w	fp, [sp, #108]	; 0x6c
 80055fa:	f8bd 6070 	ldrh.w	r6, [sp, #112]	; 0x70
 80055fe:	e04e      	b.n	800569e <lfs_dir_splittingcompact+0xba>
                    && size <= lfs_min(
 8005600:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8005602:	6988      	ldr	r0, [r1, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 8005604:	4403      	add	r3, r0
 8005606:	3b01      	subs	r3, #1
    return a - (a % alignment);
 8005608:	fbb3 f1f0 	udiv	r1, r3, r0
 800560c:	fb00 3111 	mls	r1, r0, r1, r3
 8005610:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 8005612:	4293      	cmp	r3, r2
 8005614:	bf28      	it	cs
 8005616:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 8005618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800561a:	429a      	cmp	r2, r3
 800561c:	d92b      	bls.n	8005676 <lfs_dir_splittingcompact+0x92>
            split = split + ((end - split) / 2);
 800561e:	eb04 0455 	add.w	r4, r4, r5, lsr #1
        while (end - split > 1) {
 8005622:	1b35      	subs	r5, r6, r4
 8005624:	2d01      	cmp	r5, #1
 8005626:	d926      	bls.n	8005676 <lfs_dir_splittingcompact+0x92>
            lfs_size_t size = 0;
 8005628:	2200      	movs	r2, #0
 800562a:	920d      	str	r2, [sp, #52]	; 0x34
            int err = lfs_dir_traverse(lfs,
 800562c:	b2a1      	uxth	r1, r4
 800562e:	ab0d      	add	r3, sp, #52	; 0x34
 8005630:	9308      	str	r3, [sp, #32]
 8005632:	4b4a      	ldr	r3, [pc, #296]	; (800575c <lfs_dir_splittingcompact+0x178>)
 8005634:	9307      	str	r3, [sp, #28]
 8005636:	424b      	negs	r3, r1
 8005638:	b21b      	sxth	r3, r3
 800563a:	9306      	str	r3, [sp, #24]
 800563c:	9605      	str	r6, [sp, #20]
 800563e:	9104      	str	r1, [sp, #16]
 8005640:	9203      	str	r2, [sp, #12]
 8005642:	4b47      	ldr	r3, [pc, #284]	; (8005760 <lfs_dir_splittingcompact+0x17c>)
 8005644:	9302      	str	r3, [sp, #8]
 8005646:	f8cd 9004 	str.w	r9, [sp, #4]
 800564a:	f8cd 8000 	str.w	r8, [sp]
 800564e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005652:	4651      	mov	r1, sl
 8005654:	4638      	mov	r0, r7
 8005656:	f7fd fa5b 	bl	8002b10 <lfs_dir_traverse>
            if (err) {
 800565a:	4603      	mov	r3, r0
 800565c:	2800      	cmp	r0, #0
 800565e:	d154      	bne.n	800570a <lfs_dir_splittingcompact+0x126>
            if (end - split < 0xff
 8005660:	2dfe      	cmp	r5, #254	; 0xfe
 8005662:	d8dc      	bhi.n	800561e <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 8005664:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005666:	69cb      	ldr	r3, [r1, #28]
                    && size <= lfs_min(
 8005668:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
                            (lfs->cfg->metadata_max
 800566c:	6c88      	ldr	r0, [r1, #72]	; 0x48
                    && size <= lfs_min(
 800566e:	2800      	cmp	r0, #0
 8005670:	d0c6      	beq.n	8005600 <lfs_dir_splittingcompact+0x1c>
 8005672:	0843      	lsrs	r3, r0, #1
 8005674:	e7c5      	b.n	8005602 <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 8005676:	455c      	cmp	r4, fp
 8005678:	d01f      	beq.n	80056ba <lfs_dir_splittingcompact+0xd6>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800567a:	b2a4      	uxth	r4, r4
 800567c:	9602      	str	r6, [sp, #8]
 800567e:	9401      	str	r4, [sp, #4]
 8005680:	f8cd a000 	str.w	sl, [sp]
 8005684:	464b      	mov	r3, r9
 8005686:	4642      	mov	r2, r8
 8005688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800568a:	4638      	mov	r0, r7
 800568c:	f7ff ff68 	bl	8005560 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 8005690:	4603      	mov	r3, r0
 8005692:	b110      	cbz	r0, 800569a <lfs_dir_splittingcompact+0xb6>
 8005694:	f110 0f1c 	cmn.w	r0, #28
 8005698:	d137      	bne.n	800570a <lfs_dir_splittingcompact+0x126>
        if (err) {
 800569a:	b913      	cbnz	r3, 80056a2 <lfs_dir_splittingcompact+0xbe>
            end = split;
 800569c:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 800569e:	465c      	mov	r4, fp
        while (end - split > 1) {
 80056a0:	e7bf      	b.n	8005622 <lfs_dir_splittingcompact+0x3e>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80056a2:	4b30      	ldr	r3, [pc, #192]	; (8005764 <lfs_dir_splittingcompact+0x180>)
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056a8:	6853      	ldr	r3, [r2, #4]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	6813      	ldr	r3, [r2, #0]
 80056ae:	f640 024c 	movw	r2, #2124	; 0x84c
 80056b2:	492d      	ldr	r1, [pc, #180]	; (8005768 <lfs_dir_splittingcompact+0x184>)
 80056b4:	482d      	ldr	r0, [pc, #180]	; (800576c <lfs_dir_splittingcompact+0x188>)
 80056b6:	f001 fb4d 	bl	8006d54 <iprintf>
    if (lfs_dir_needsrelocation(lfs, dir)
 80056ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80056bc:	4621      	mov	r1, r4
 80056be:	4638      	mov	r0, r7
 80056c0:	f7fd f83c 	bl	800273c <lfs_dir_needsrelocation>
 80056c4:	b1a8      	cbz	r0, 80056f2 <lfs_dir_splittingcompact+0x10e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80056c6:	2300      	movs	r3, #0
 80056c8:	930e      	str	r3, [sp, #56]	; 0x38
 80056ca:	2301      	movs	r3, #1
 80056cc:	930f      	str	r3, [sp, #60]	; 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80056ce:	6822      	ldr	r2, [r4, #0]
 80056d0:	b12a      	cbz	r2, 80056de <lfs_dir_splittingcompact+0xfa>
 80056d2:	6863      	ldr	r3, [r4, #4]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d002      	beq.n	80056de <lfs_dir_splittingcompact+0xfa>
 80056d8:	2a01      	cmp	r2, #1
 80056da:	d000      	beq.n	80056de <lfs_dir_splittingcompact+0xfa>
 80056dc:	b94b      	cbnz	r3, 80056f2 <lfs_dir_splittingcompact+0x10e>
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 80056de:	4638      	mov	r0, r7
 80056e0:	f7ff fb4a 	bl	8004d78 <lfs_fs_rawsize>
        if (size < 0) {
 80056e4:	1e03      	subs	r3, r0, #0
 80056e6:	db10      	blt.n	800570a <lfs_dir_splittingcompact+0x126>
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 80056e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056ea:	6a12      	ldr	r2, [r2, #32]
 80056ec:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 80056f0:	d30f      	bcc.n	8005712 <lfs_dir_splittingcompact+0x12e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80056f2:	9602      	str	r6, [sp, #8]
 80056f4:	f8cd b004 	str.w	fp, [sp, #4]
 80056f8:	f8cd a000 	str.w	sl, [sp]
 80056fc:	464b      	mov	r3, r9
 80056fe:	4642      	mov	r2, r8
 8005700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005702:	4638      	mov	r0, r7
 8005704:	f7ff fdae 	bl	8005264 <lfs_dir_compact>
 8005708:	4603      	mov	r3, r0
}
 800570a:	4618      	mov	r0, r3
 800570c:	b011      	add	sp, #68	; 0x44
 800570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8005712:	4b14      	ldr	r3, [pc, #80]	; (8005764 <lfs_dir_splittingcompact+0x180>)
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005718:	68a3      	ldr	r3, [r4, #8]
 800571a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800571e:	4912      	ldr	r1, [pc, #72]	; (8005768 <lfs_dir_splittingcompact+0x184>)
 8005720:	4813      	ldr	r0, [pc, #76]	; (8005770 <lfs_dir_splittingcompact+0x18c>)
 8005722:	f001 fb17 	bl	8006d54 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8005726:	9602      	str	r6, [sp, #8]
 8005728:	f8cd b004 	str.w	fp, [sp, #4]
 800572c:	f8cd a000 	str.w	sl, [sp]
 8005730:	464b      	mov	r3, r9
 8005732:	4642      	mov	r2, r8
 8005734:	4621      	mov	r1, r4
 8005736:	4638      	mov	r0, r7
 8005738:	f7ff ff12 	bl	8005560 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 800573c:	4603      	mov	r3, r0
 800573e:	b110      	cbz	r0, 8005746 <lfs_dir_splittingcompact+0x162>
 8005740:	f110 0f1c 	cmn.w	r0, #28
 8005744:	d1e1      	bne.n	800570a <lfs_dir_splittingcompact+0x126>
            if (err) {
 8005746:	b90b      	cbnz	r3, 800574c <lfs_dir_splittingcompact+0x168>
                end = begin;
 8005748:	465e      	mov	r6, fp
 800574a:	e7d2      	b.n	80056f2 <lfs_dir_splittingcompact+0x10e>
                LFS_WARN("Unable to expand superblock");
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <lfs_dir_splittingcompact+0x180>)
 800574e:	f640 026a 	movw	r2, #2154	; 0x86a
 8005752:	4905      	ldr	r1, [pc, #20]	; (8005768 <lfs_dir_splittingcompact+0x184>)
 8005754:	4807      	ldr	r0, [pc, #28]	; (8005774 <lfs_dir_splittingcompact+0x190>)
 8005756:	f001 fafd 	bl	8006d54 <iprintf>
 800575a:	e7ca      	b.n	80056f2 <lfs_dir_splittingcompact+0x10e>
 800575c:	08002721 	.word	0x08002721
 8005760:	400ffc00 	.word	0x400ffc00
 8005764:	080081c0 	.word	0x080081c0
 8005768:	08007ba4 	.word	0x08007ba4
 800576c:	0800828c 	.word	0x0800828c
 8005770:	080082bc 	.word	0x080082bc
 8005774:	080082ec 	.word	0x080082ec

08005778 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	b09b      	sub	sp, #108	; 0x6c
 800577e:	4680      	mov	r8, r0
 8005780:	460e      	mov	r6, r1
 8005782:	4691      	mov	r9, r2
 8005784:	461d      	mov	r5, r3
 8005786:	9f24      	ldr	r7, [sp, #144]	; 0x90
    for (int i = 0; i < attrcount; i++) {
 8005788:	2300      	movs	r3, #0
    bool hasdelete = false;
 800578a:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 800578c:	e003      	b.n	8005796 <lfs_dir_relocatingcommit+0x1e>
            dir->count += 1;
 800578e:	8ab2      	ldrh	r2, [r6, #20]
 8005790:	3201      	adds	r2, #1
 8005792:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 8005794:	3301      	adds	r3, #1
 8005796:	42bb      	cmp	r3, r7
 8005798:	da2d      	bge.n	80057f6 <lfs_dir_relocatingcommit+0x7e>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800579a:	00d8      	lsls	r0, r3, #3
 800579c:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 80057a0:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 80057a4:	0d11      	lsrs	r1, r2, #20
 80057a6:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80057aa:	f240 4e01 	movw	lr, #1025	; 0x401
 80057ae:	4572      	cmp	r2, lr
 80057b0:	d0ed      	beq.n	800578e <lfs_dir_relocatingcommit+0x16>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80057b2:	f240 4eff 	movw	lr, #1279	; 0x4ff
 80057b6:	4572      	cmp	r2, lr
 80057b8:	d00f      	beq.n	80057da <lfs_dir_relocatingcommit+0x62>
    return (tag & 0x70000000) >> 20;
 80057ba:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80057be:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 80057c2:	d1e7      	bne.n	8005794 <lfs_dir_relocatingcommit+0x1c>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 80057c4:	6862      	ldr	r2, [r4, #4]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 80057ca:	6862      	ldr	r2, [r4, #4]
 80057cc:	6852      	ldr	r2, [r2, #4]
 80057ce:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80057d0:	582a      	ldr	r2, [r5, r0]
 80057d2:	f3c2 5200 	ubfx	r2, r2, #20, #1
 80057d6:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 80057d8:	e7dc      	b.n	8005794 <lfs_dir_relocatingcommit+0x1c>
            LFS_ASSERT(dir->count > 0);
 80057da:	8ab2      	ldrh	r2, [r6, #20]
 80057dc:	b122      	cbz	r2, 80057e8 <lfs_dir_relocatingcommit+0x70>
            dir->count -= 1;
 80057de:	3a01      	subs	r2, #1
 80057e0:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 80057e2:	f04f 0c01 	mov.w	ip, #1
 80057e6:	e7d5      	b.n	8005794 <lfs_dir_relocatingcommit+0x1c>
            LFS_ASSERT(dir->count > 0);
 80057e8:	4ba5      	ldr	r3, [pc, #660]	; (8005a80 <lfs_dir_relocatingcommit+0x308>)
 80057ea:	4aa6      	ldr	r2, [pc, #664]	; (8005a84 <lfs_dir_relocatingcommit+0x30c>)
 80057ec:	f640 0182 	movw	r1, #2178	; 0x882
 80057f0:	48a5      	ldr	r0, [pc, #660]	; (8005a88 <lfs_dir_relocatingcommit+0x310>)
 80057f2:	f001 f913 	bl	8006a1c <__assert_func>
    if (hasdelete && dir->count == 0) {
 80057f6:	f1bc 0f00 	cmp.w	ip, #0
 80057fa:	d017      	beq.n	800582c <lfs_dir_relocatingcommit+0xb4>
 80057fc:	8ab3      	ldrh	r3, [r6, #20]
 80057fe:	b9ab      	cbnz	r3, 800582c <lfs_dir_relocatingcommit+0xb4>
        LFS_ASSERT(pdir);
 8005800:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005802:	2b00      	cmp	r3, #0
 8005804:	d063      	beq.n	80058ce <lfs_dir_relocatingcommit+0x156>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8005806:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8005808:	4631      	mov	r1, r6
 800580a:	4640      	mov	r0, r8
 800580c:	f7fe fd14 	bl	8004238 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 8005810:	4603      	mov	r3, r0
 8005812:	b118      	cbz	r0, 800581c <lfs_dir_relocatingcommit+0xa4>
 8005814:	f110 0f02 	cmn.w	r0, #2
 8005818:	f040 816e 	bne.w	8005af8 <lfs_dir_relocatingcommit+0x380>
        if (err != LFS_ERR_NOENT && pdir->split) {
 800581c:	f113 0f02 	cmn.w	r3, #2
 8005820:	d004      	beq.n	800582c <lfs_dir_relocatingcommit+0xb4>
 8005822:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005824:	7ddb      	ldrb	r3, [r3, #23]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f040 80ec 	bne.w	8005a04 <lfs_dir_relocatingcommit+0x28c>
    if (dir->erased) {
 800582c:	7db4      	ldrb	r4, [r6, #22]
 800582e:	2c00      	cmp	r4, #0
 8005830:	d02f      	beq.n	8005892 <lfs_dir_relocatingcommit+0x11a>
            .block = dir->pair[0],
 8005832:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 8005834:	9310      	str	r3, [sp, #64]	; 0x40
            .off = dir->off,
 8005836:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 8005838:	9311      	str	r3, [sp, #68]	; 0x44
            .ptag = dir->etag,
 800583a:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 800583c:	9212      	str	r2, [sp, #72]	; 0x48
 800583e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005842:	9213      	str	r2, [sp, #76]	; 0x4c
 8005844:	9314      	str	r3, [sp, #80]	; 0x50
            .end = (lfs->cfg->metadata_max ?
 8005846:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
 800584a:	6c93      	ldr	r3, [r2, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800584c:	2b00      	cmp	r3, #0
 800584e:	d045      	beq.n	80058dc <lfs_dir_relocatingcommit+0x164>
 8005850:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8005852:	9315      	str	r3, [sp, #84]	; 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8005854:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8005858:	ab10      	add	r3, sp, #64	; 0x40
 800585a:	9319      	str	r3, [sp, #100]	; 0x64
        int err = lfs_dir_traverse(lfs,
 800585c:	ab18      	add	r3, sp, #96	; 0x60
 800585e:	9308      	str	r3, [sp, #32]
 8005860:	4b8a      	ldr	r3, [pc, #552]	; (8005a8c <lfs_dir_relocatingcommit+0x314>)
 8005862:	9307      	str	r3, [sp, #28]
 8005864:	2300      	movs	r3, #0
 8005866:	9306      	str	r3, [sp, #24]
 8005868:	9305      	str	r3, [sp, #20]
 800586a:	9304      	str	r3, [sp, #16]
 800586c:	9303      	str	r3, [sp, #12]
 800586e:	9302      	str	r3, [sp, #8]
 8005870:	9701      	str	r7, [sp, #4]
 8005872:	9500      	str	r5, [sp, #0]
 8005874:	6933      	ldr	r3, [r6, #16]
 8005876:	68f2      	ldr	r2, [r6, #12]
 8005878:	4631      	mov	r1, r6
 800587a:	4640      	mov	r0, r8
 800587c:	f7fd f948 	bl	8002b10 <lfs_dir_traverse>
        if (err) {
 8005880:	4603      	mov	r3, r0
 8005882:	b370      	cbz	r0, 80058e2 <lfs_dir_relocatingcommit+0x16a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8005884:	f110 0f1c 	cmn.w	r0, #28
 8005888:	d003      	beq.n	8005892 <lfs_dir_relocatingcommit+0x11a>
 800588a:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800588e:	f040 8133 	bne.w	8005af8 <lfs_dir_relocatingcommit+0x380>
    rcache->block = LFS_BLOCK_NULL;
 8005892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005896:	f8c8 3010 	str.w	r3, [r8, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800589a:	8ab3      	ldrh	r3, [r6, #20]
 800589c:	9302      	str	r3, [sp, #8]
 800589e:	2300      	movs	r3, #0
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	9600      	str	r6, [sp, #0]
 80058a4:	463b      	mov	r3, r7
 80058a6:	462a      	mov	r2, r5
 80058a8:	4631      	mov	r1, r6
 80058aa:	4640      	mov	r0, r8
 80058ac:	f7ff fe9a 	bl	80055e4 <lfs_dir_splittingcompact>
    if (state < 0) {
 80058b0:	1e03      	subs	r3, r0, #0
 80058b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80058b4:	f2c0 8126 	blt.w	8005b04 <lfs_dir_relocatingcommit+0x38c>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 80058b8:	f8d9 a000 	ldr.w	sl, [r9]
 80058bc:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 80058c0:	f8d9 b004 	ldr.w	fp, [r9, #4]
 80058c4:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80058c8:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
 80058cc:	e0e7      	b.n	8005a9e <lfs_dir_relocatingcommit+0x326>
        LFS_ASSERT(pdir);
 80058ce:	4b70      	ldr	r3, [pc, #448]	; (8005a90 <lfs_dir_relocatingcommit+0x318>)
 80058d0:	4a6c      	ldr	r2, [pc, #432]	; (8005a84 <lfs_dir_relocatingcommit+0x30c>)
 80058d2:	f640 018f 	movw	r1, #2191	; 0x88f
 80058d6:	486c      	ldr	r0, [pc, #432]	; (8005a88 <lfs_dir_relocatingcommit+0x310>)
 80058d8:	f001 f8a0 	bl	8006a1c <__assert_func>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80058dc:	69d3      	ldr	r3, [r2, #28]
 80058de:	3b08      	subs	r3, #8
 80058e0:	e7b7      	b.n	8005852 <lfs_dir_relocatingcommit+0xda>
        lfs_gstate_t delta = {0};
 80058e2:	2200      	movs	r2, #0
 80058e4:	920d      	str	r2, [sp, #52]	; 0x34
 80058e6:	920e      	str	r2, [sp, #56]	; 0x38
 80058e8:	920f      	str	r2, [sp, #60]	; 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 80058ea:	f108 0e30 	add.w	lr, r8, #48	; 0x30
    for (int i = 0; i < 3; i++) {
 80058ee:	4602      	mov	r2, r0
 80058f0:	4684      	mov	ip, r0
 80058f2:	e008      	b.n	8005906 <lfs_dir_relocatingcommit+0x18e>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80058f4:	a80d      	add	r0, sp, #52	; 0x34
 80058f6:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 80058fa:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
 80058fe:	4059      	eors	r1, r3
 8005900:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    for (int i = 0; i < 3; i++) {
 8005904:	3201      	adds	r2, #1
 8005906:	2a02      	cmp	r2, #2
 8005908:	ddf4      	ble.n	80058f4 <lfs_dir_relocatingcommit+0x17c>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800590a:	f108 0e3c 	add.w	lr, r8, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
 800590e:	4662      	mov	r2, ip
 8005910:	e008      	b.n	8005924 <lfs_dir_relocatingcommit+0x1ac>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8005912:	a80d      	add	r0, sp, #52	; 0x34
 8005914:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 8005918:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
 800591c:	4059      	eors	r1, r3
 800591e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    for (int i = 0; i < 3; i++) {
 8005922:	3201      	adds	r2, #1
 8005924:	2a02      	cmp	r2, #2
 8005926:	ddf4      	ble.n	8005912 <lfs_dir_relocatingcommit+0x19a>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8005928:	f108 0e48 	add.w	lr, r8, #72	; 0x48
    for (int i = 0; i < 3; i++) {
 800592c:	4662      	mov	r2, ip
 800592e:	e008      	b.n	8005942 <lfs_dir_relocatingcommit+0x1ca>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8005930:	a80d      	add	r0, sp, #52	; 0x34
 8005932:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 8005936:	f85e 3022 	ldr.w	r3, [lr, r2, lsl #2]
 800593a:	4059      	eors	r1, r3
 800593c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    for (int i = 0; i < 3; i++) {
 8005940:	3201      	adds	r2, #1
 8005942:	2a02      	cmp	r2, #2
 8005944:	ddf4      	ble.n	8005930 <lfs_dir_relocatingcommit+0x1b8>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8005946:	4663      	mov	r3, ip
 8005948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800594a:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800594e:	f022 0203 	bic.w	r2, r2, #3
 8005952:	920d      	str	r2, [sp, #52]	; 0x34
    for (int i = 0; i < 3; i++) {
 8005954:	2b02      	cmp	r3, #2
 8005956:	dc08      	bgt.n	800596a <lfs_dir_relocatingcommit+0x1f2>
        if (((uint32_t*)a)[i] != 0) {
 8005958:	aa1a      	add	r2, sp, #104	; 0x68
 800595a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800595e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8005962:	b90a      	cbnz	r2, 8005968 <lfs_dir_relocatingcommit+0x1f0>
    for (int i = 0; i < 3; i++) {
 8005964:	3301      	adds	r3, #1
 8005966:	e7f5      	b.n	8005954 <lfs_dir_relocatingcommit+0x1dc>
            return false;
 8005968:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 800596a:	b9cc      	cbnz	r4, 80059a0 <lfs_dir_relocatingcommit+0x228>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800596c:	aa0d      	add	r2, sp, #52	; 0x34
 800596e:	4631      	mov	r1, r6
 8005970:	4640      	mov	r0, r8
 8005972:	f7fe f817 	bl	80039a4 <lfs_dir_getgstate>
            if (err) {
 8005976:	4603      	mov	r3, r0
 8005978:	2800      	cmp	r0, #0
 800597a:	f040 80bd 	bne.w	8005af8 <lfs_dir_relocatingcommit+0x380>
            err = lfs_dir_commitattr(lfs, &commit,
 800597e:	ab0d      	add	r3, sp, #52	; 0x34
 8005980:	4a44      	ldr	r2, [pc, #272]	; (8005a94 <lfs_dir_relocatingcommit+0x31c>)
 8005982:	a910      	add	r1, sp, #64	; 0x40
 8005984:	4640      	mov	r0, r8
 8005986:	f7fd fdbf 	bl	8003508 <lfs_dir_commitattr>
            if (err) {
 800598a:	4603      	mov	r3, r0
 800598c:	b140      	cbz	r0, 80059a0 <lfs_dir_relocatingcommit+0x228>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800598e:	f110 0f1c 	cmn.w	r0, #28
 8005992:	f43f af7e 	beq.w	8005892 <lfs_dir_relocatingcommit+0x11a>
 8005996:	f110 0f54 	cmn.w	r0, #84	; 0x54
 800599a:	f040 80ad 	bne.w	8005af8 <lfs_dir_relocatingcommit+0x380>
 800599e:	e778      	b.n	8005892 <lfs_dir_relocatingcommit+0x11a>
        err = lfs_dir_commitcrc(lfs, &commit);
 80059a0:	a910      	add	r1, sp, #64	; 0x40
 80059a2:	4640      	mov	r0, r8
 80059a4:	f7fd fe32 	bl	800360c <lfs_dir_commitcrc>
        if (err) {
 80059a8:	4603      	mov	r3, r0
 80059aa:	b140      	cbz	r0, 80059be <lfs_dir_relocatingcommit+0x246>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80059ac:	f110 0f1c 	cmn.w	r0, #28
 80059b0:	f43f af6f 	beq.w	8005892 <lfs_dir_relocatingcommit+0x11a>
 80059b4:	f110 0f54 	cmn.w	r0, #84	; 0x54
 80059b8:	f040 809e 	bne.w	8005af8 <lfs_dir_relocatingcommit+0x380>
 80059bc:	e769      	b.n	8005892 <lfs_dir_relocatingcommit+0x11a>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80059be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80059c0:	f8d8 1068 	ldr.w	r1, [r8, #104]	; 0x68
 80059c4:	6988      	ldr	r0, [r1, #24]
 80059c6:	fbb2 f1f0 	udiv	r1, r2, r0
 80059ca:	fb00 2111 	mls	r1, r0, r1, r2
 80059ce:	b991      	cbnz	r1, 80059f6 <lfs_dir_relocatingcommit+0x27e>
        dir->off = commit.off;
 80059d0:	60f2      	str	r2, [r6, #12]
        dir->etag = commit.ptag;
 80059d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059d4:	6132      	str	r2, [r6, #16]
        lfs->gdisk = lfs->gstate;
 80059d6:	f108 043c 	add.w	r4, r8, #60	; 0x3c
 80059da:	f108 0230 	add.w	r2, r8, #48	; 0x30
 80059de:	ca07      	ldmia	r2, {r0, r1, r2}
 80059e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80059e4:	2100      	movs	r1, #0
 80059e6:	f8c8 1048 	str.w	r1, [r8, #72]	; 0x48
 80059ea:	f8c8 104c 	str.w	r1, [r8, #76]	; 0x4c
 80059ee:	f8c8 1050 	str.w	r1, [r8, #80]	; 0x50
    int state = 0;
 80059f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80059f4:	e760      	b.n	80058b8 <lfs_dir_relocatingcommit+0x140>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80059f6:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <lfs_dir_relocatingcommit+0x320>)
 80059f8:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <lfs_dir_relocatingcommit+0x30c>)
 80059fa:	f640 01d9 	movw	r1, #2265	; 0x8d9
 80059fe:	4822      	ldr	r0, [pc, #136]	; (8005a88 <lfs_dir_relocatingcommit+0x310>)
 8005a00:	f001 f80c 	bl	8006a1c <__assert_func>
            state = LFS_OK_DROPPED;
 8005a04:	2302      	movs	r3, #2
 8005a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a08:	e756      	b.n	80058b8 <lfs_dir_relocatingcommit+0x140>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8005a0a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 8005a0e:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005a12:	4584      	cmp	ip, r0
 8005a14:	d10e      	bne.n	8005a34 <lfs_dir_relocatingcommit+0x2bc>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8005a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a1a:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8005a1c:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 8005a1e:	3301      	adds	r3, #1
 8005a20:	42bb      	cmp	r3, r7
 8005a22:	da56      	bge.n	8005ad2 <lfs_dir_relocatingcommit+0x35a>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005a24:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 8005a28:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005a2c:	f240 40ff 	movw	r0, #1279	; 0x4ff
 8005a30:	4282      	cmp	r2, r0
 8005a32:	d0ea      	beq.n	8005a0a <lfs_dir_relocatingcommit+0x292>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005a34:	f240 40ff 	movw	r0, #1279	; 0x4ff
 8005a38:	4282      	cmp	r2, r0
 8005a3a:	d011      	beq.n	8005a60 <lfs_dir_relocatingcommit+0x2e8>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005a3c:	f240 4001 	movw	r0, #1025	; 0x401
 8005a40:	4282      	cmp	r2, r0
 8005a42:	d1ec      	bne.n	8005a1e <lfs_dir_relocatingcommit+0x2a6>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8005a44:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 8005a46:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8005a4a:	428a      	cmp	r2, r1
 8005a4c:	d3e7      	bcc.n	8005a1e <lfs_dir_relocatingcommit+0x2a6>
                        d->id += 1;
 8005a4e:	3201      	adds	r2, #1
 8005a50:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005a52:	79a2      	ldrb	r2, [r4, #6]
 8005a54:	2a02      	cmp	r2, #2
 8005a56:	d1e2      	bne.n	8005a1e <lfs_dir_relocatingcommit+0x2a6>
                            ((lfs_dir_t*)d)->pos += 1;
 8005a58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a5a:	3201      	adds	r2, #1
 8005a5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a5e:	e7de      	b.n	8005a1e <lfs_dir_relocatingcommit+0x2a6>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8005a60:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 8005a62:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8005a66:	4560      	cmp	r0, ip
 8005a68:	d9e8      	bls.n	8005a3c <lfs_dir_relocatingcommit+0x2c4>
                        d->id -= 1;
 8005a6a:	3801      	subs	r0, #1
 8005a6c:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8005a6e:	79a2      	ldrb	r2, [r4, #6]
 8005a70:	2a02      	cmp	r2, #2
 8005a72:	d1d4      	bne.n	8005a1e <lfs_dir_relocatingcommit+0x2a6>
                            ((lfs_dir_t*)d)->pos -= 1;
 8005a74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a76:	3a01      	subs	r2, #1
 8005a78:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a7a:	e7d0      	b.n	8005a1e <lfs_dir_relocatingcommit+0x2a6>
                for (int i = 0; i < attrcount; i++) {
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e7cf      	b.n	8005a20 <lfs_dir_relocatingcommit+0x2a8>
 8005a80:	08008318 	.word	0x08008318
 8005a84:	08008610 	.word	0x08008610
 8005a88:	08007ba4 	.word	0x08007ba4
 8005a8c:	080035c3 	.word	0x080035c3
 8005a90:	08008328 	.word	0x08008328
 8005a94:	7ffffc0c 	.word	0x7ffffc0c
 8005a98:	0800822c 	.word	0x0800822c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005a9c:	6824      	ldr	r4, [r4, #0]
 8005a9e:	b37c      	cbz	r4, 8005b00 <lfs_dir_relocatingcommit+0x388>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005aa0:	68a3      	ldr	r3, [r4, #8]
 8005aa2:	459a      	cmp	sl, r3
 8005aa4:	d006      	beq.n	8005ab4 <lfs_dir_relocatingcommit+0x33c>
 8005aa6:	68e2      	ldr	r2, [r4, #12]
 8005aa8:	4593      	cmp	fp, r2
 8005aaa:	d003      	beq.n	8005ab4 <lfs_dir_relocatingcommit+0x33c>
 8005aac:	459b      	cmp	fp, r3
 8005aae:	d001      	beq.n	8005ab4 <lfs_dir_relocatingcommit+0x33c>
 8005ab0:	4592      	cmp	sl, r2
 8005ab2:	d1f3      	bne.n	8005a9c <lfs_dir_relocatingcommit+0x324>
            d->m = *dir;
 8005ab4:	f104 0c08 	add.w	ip, r4, #8
 8005ab8:	46b6      	mov	lr, r6
 8005aba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005abe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005ac2:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8005ac6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8005aca:	f104 0308 	add.w	r3, r4, #8
 8005ace:	454b      	cmp	r3, r9
 8005ad0:	d1d4      	bne.n	8005a7c <lfs_dir_relocatingcommit+0x304>
            while (d->id >= d->m.count && d->m.split) {
 8005ad2:	88a3      	ldrh	r3, [r4, #4]
 8005ad4:	8ba2      	ldrh	r2, [r4, #28]
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d3e0      	bcc.n	8005a9c <lfs_dir_relocatingcommit+0x324>
 8005ada:	7fe1      	ldrb	r1, [r4, #31]
 8005adc:	2900      	cmp	r1, #0
 8005ade:	d0dd      	beq.n	8005a9c <lfs_dir_relocatingcommit+0x324>
                d->id -= d->m.count;
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	80a3      	strh	r3, [r4, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8005ae4:	f104 0220 	add.w	r2, r4, #32
 8005ae8:	f104 0108 	add.w	r1, r4, #8
 8005aec:	4640      	mov	r0, r8
 8005aee:	f7fe fb95 	bl	800421c <lfs_dir_fetch>
                if (err) {
 8005af2:	4603      	mov	r3, r0
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d0ec      	beq.n	8005ad2 <lfs_dir_relocatingcommit+0x35a>
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	b01b      	add	sp, #108	; 0x6c
 8005afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return state;
 8005b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b02:	e7f9      	b.n	8005af8 <lfs_dir_relocatingcommit+0x380>
        return state;
 8005b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b06:	e7f7      	b.n	8005af8 <lfs_dir_relocatingcommit+0x380>

08005b08 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 8005b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b0c:	b0a3      	sub	sp, #140	; 0x8c
 8005b0e:	4605      	mov	r5, r0
 8005b10:	460f      	mov	r7, r1
 8005b12:	4690      	mov	r8, r2
 8005b14:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005b16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005b18:	e003      	b.n	8005b22 <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005b1a:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d012      	beq.n	8005b46 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005b20:	6824      	ldr	r4, [r4, #0]
 8005b22:	b34c      	cbz	r4, 8005b78 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8005b24:	f104 0108 	add.w	r1, r4, #8
 8005b28:	42b9      	cmp	r1, r7
 8005b2a:	d0f9      	beq.n	8005b20 <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005b2c:	68a1      	ldr	r1, [r4, #8]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	428b      	cmp	r3, r1
 8005b32:	d0f2      	beq.n	8005b1a <lfs_dir_orphaningcommit+0x12>
 8005b34:	68e0      	ldr	r0, [r4, #12]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4282      	cmp	r2, r0
 8005b3a:	d0ee      	beq.n	8005b1a <lfs_dir_orphaningcommit+0x12>
 8005b3c:	428a      	cmp	r2, r1
 8005b3e:	d0ec      	beq.n	8005b1a <lfs_dir_orphaningcommit+0x12>
 8005b40:	4298      	cmp	r0, r3
 8005b42:	d1ed      	bne.n	8005b20 <lfs_dir_orphaningcommit+0x18>
 8005b44:	e7e9      	b.n	8005b1a <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005b46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005b4c:	d0e8      	beq.n	8005b20 <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 8005b4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005b50:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d9e3      	bls.n	8005b20 <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f7fe fe22 	bl	80047a4 <lfs_file_outline>
            if (err) {
 8005b60:	4606      	mov	r6, r0
 8005b62:	2800      	cmp	r0, #0
 8005b64:	f040 81e2 	bne.w	8005f2c <lfs_dir_orphaningcommit+0x424>
            err = lfs_file_flush(lfs, f);
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f7fe ffaa 	bl	8004ac4 <lfs_file_flush>
            if (err) {
 8005b70:	4606      	mov	r6, r0
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d0d4      	beq.n	8005b20 <lfs_dir_orphaningcommit+0x18>
 8005b76:	e1d9      	b.n	8005f2c <lfs_dir_orphaningcommit+0x424>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	9316      	str	r3, [sp, #88]	; 0x58
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	9317      	str	r3, [sp, #92]	; 0x5c
    lfs_mdir_t ldir = *dir;
 8005b80:	ac0e      	add	r4, sp, #56	; 0x38
 8005b82:	463e      	mov	r6, r7
 8005b84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b88:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8005b90:	ab06      	add	r3, sp, #24
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	f8cd 9000 	str.w	r9, [sp]
 8005b98:	4643      	mov	r3, r8
 8005b9a:	463a      	mov	r2, r7
 8005b9c:	a90e      	add	r1, sp, #56	; 0x38
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f7ff fdea 	bl	8005778 <lfs_dir_relocatingcommit>
    if (state < 0) {
 8005ba4:	1e06      	subs	r6, r0, #0
 8005ba6:	f2c0 81c1 	blt.w	8005f2c <lfs_dir_orphaningcommit+0x424>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d007      	beq.n	8005bc2 <lfs_dir_orphaningcommit+0xba>
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005bb6:	4281      	cmp	r1, r0
 8005bb8:	d003      	beq.n	8005bc2 <lfs_dir_orphaningcommit+0xba>
 8005bba:	4299      	cmp	r1, r3
 8005bbc:	d001      	beq.n	8005bc2 <lfs_dir_orphaningcommit+0xba>
 8005bbe:	4290      	cmp	r0, r2
 8005bc0:	d109      	bne.n	8005bd6 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 8005bc2:	463c      	mov	r4, r7
 8005bc4:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8005bc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bce:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8005bd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 8005bd6:	2e02      	cmp	r6, #2
 8005bd8:	d001      	beq.n	8005bde <lfs_dir_orphaningcommit+0xd6>
        if (err != LFS_ERR_NOENT) {
 8005bda:	2700      	movs	r7, #0
 8005bdc:	e167      	b.n	8005eae <lfs_dir_orphaningcommit+0x3a6>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8005bde:	f105 0248 	add.w	r2, r5, #72	; 0x48
 8005be2:	4639      	mov	r1, r7
 8005be4:	4628      	mov	r0, r5
 8005be6:	f7fd fedd 	bl	80039a4 <lfs_dir_getgstate>
        if (err) {
 8005bea:	4606      	mov	r6, r0
 8005bec:	2800      	cmp	r0, #0
 8005bee:	f040 819d 	bne.w	8005f2c <lfs_dir_orphaningcommit+0x424>
        lpair[0] = pdir.pair[0];
 8005bf2:	9b06      	ldr	r3, [sp, #24]
 8005bf4:	9316      	str	r3, [sp, #88]	; 0x58
        lpair[1] = pdir.pair[1];
 8005bf6:	9b07      	ldr	r3, [sp, #28]
 8005bf8:	9317      	str	r3, [sp, #92]	; 0x5c
        lfs_pair_tole32(dir->tail);
 8005bfa:	f107 0118 	add.w	r1, r7, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005bfe:	7dfa      	ldrb	r2, [r7, #23]
 8005c00:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8005c04:	4b89      	ldr	r3, [pc, #548]	; (8005e2c <lfs_dir_orphaningcommit+0x324>)
 8005c06:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005c0a:	9318      	str	r3, [sp, #96]	; 0x60
 8005c0c:	9119      	str	r1, [sp, #100]	; 0x64
 8005c0e:	2300      	movs	r3, #0
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	2301      	movs	r3, #1
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	ab18      	add	r3, sp, #96	; 0x60
 8005c18:	aa16      	add	r2, sp, #88	; 0x58
 8005c1a:	a906      	add	r1, sp, #24
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f7ff fdab 	bl	8005778 <lfs_dir_relocatingcommit>
        if (state < 0) {
 8005c22:	1e06      	subs	r6, r0, #0
 8005c24:	f2c0 8182 	blt.w	8005f2c <lfs_dir_orphaningcommit+0x424>
        ldir = pdir;
 8005c28:	ac0e      	add	r4, sp, #56	; 0x38
 8005c2a:	af06      	add	r7, sp, #24
 8005c2c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c30:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8005c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005c38:	e7cf      	b.n	8005bda <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 8005c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c3c:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8005c3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c40:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 8005c42:	799a      	ldrb	r2, [r3, #6]
 8005c44:	2a02      	cmp	r2, #2
 8005c46:	d00d      	beq.n	8005c64 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	b1db      	cbz	r3, 8005c84 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	4291      	cmp	r1, r2
 8005c50:	d0f3      	beq.n	8005c3a <lfs_dir_orphaningcommit+0x132>
 8005c52:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005c54:	68dc      	ldr	r4, [r3, #12]
 8005c56:	4284      	cmp	r4, r0
 8005c58:	d0ef      	beq.n	8005c3a <lfs_dir_orphaningcommit+0x132>
 8005c5a:	428c      	cmp	r4, r1
 8005c5c:	d0ed      	beq.n	8005c3a <lfs_dir_orphaningcommit+0x132>
 8005c5e:	4290      	cmp	r0, r2
 8005c60:	d1ef      	bne.n	8005c42 <lfs_dir_orphaningcommit+0x13a>
 8005c62:	e7ea      	b.n	8005c3a <lfs_dir_orphaningcommit+0x132>
 8005c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c66:	428a      	cmp	r2, r1
 8005c68:	d007      	beq.n	8005c7a <lfs_dir_orphaningcommit+0x172>
 8005c6a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005c6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c6e:	42a0      	cmp	r0, r4
 8005c70:	d003      	beq.n	8005c7a <lfs_dir_orphaningcommit+0x172>
 8005c72:	4288      	cmp	r0, r1
 8005c74:	d001      	beq.n	8005c7a <lfs_dir_orphaningcommit+0x172>
 8005c76:	4294      	cmp	r4, r2
 8005c78:	d1e6      	bne.n	8005c48 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8005c7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c7c:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8005c7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c80:	631a      	str	r2, [r3, #48]	; 0x30
 8005c82:	e7e1      	b.n	8005c48 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8005c84:	aa06      	add	r2, sp, #24
 8005c86:	a916      	add	r1, sp, #88	; 0x58
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f7fe fa4b 	bl	8004124 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8005c8e:	1e04      	subs	r4, r0, #0
 8005c90:	db24      	blt.n	8005cdc <lfs_dir_orphaningcommit+0x1d4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 8005c92:	f114 0f02 	cmn.w	r4, #2
 8005c96:	bf14      	ite	ne
 8005c98:	f04f 0901 	movne.w	r9, #1
 8005c9c:	f04f 0900 	moveq.w	r9, #0
        if (tag != LFS_ERR_NOENT) {
 8005ca0:	f000 80b0 	beq.w	8005e04 <lfs_dir_orphaningcommit+0x2fc>
            int err = lfs_fs_preporphans(lfs, +1);
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f7fc fdc0 	bl	800282c <lfs_fs_preporphans>
            if (err) {
 8005cac:	4602      	mov	r2, r0
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f040 80a4 	bne.w	8005dfc <lfs_dir_orphaningcommit+0x2f4>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8005cb4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 8005cb6:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8005cb8:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 8005cbc:	d014      	beq.n	8005ce8 <lfs_dir_orphaningcommit+0x1e0>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005cbe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005cc0:	9806      	ldr	r0, [sp, #24]
 8005cc2:	4283      	cmp	r3, r0
 8005cc4:	d00f      	beq.n	8005ce6 <lfs_dir_orphaningcommit+0x1de>
 8005cc6:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38
 8005cca:	9907      	ldr	r1, [sp, #28]
 8005ccc:	458c      	cmp	ip, r1
 8005cce:	d061      	beq.n	8005d94 <lfs_dir_orphaningcommit+0x28c>
 8005cd0:	428b      	cmp	r3, r1
 8005cd2:	d061      	beq.n	8005d98 <lfs_dir_orphaningcommit+0x290>
 8005cd4:	4560      	cmp	r0, ip
 8005cd6:	d107      	bne.n	8005ce8 <lfs_dir_orphaningcommit+0x1e0>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8005cd8:	4632      	mov	r2, r6
 8005cda:	e005      	b.n	8005ce8 <lfs_dir_orphaningcommit+0x1e0>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8005cdc:	f114 0f02 	cmn.w	r4, #2
 8005ce0:	d0d7      	beq.n	8005c92 <lfs_dir_orphaningcommit+0x18a>
            return tag;
 8005ce2:	4626      	mov	r6, r4
 8005ce4:	e122      	b.n	8005f2c <lfs_dir_orphaningcommit+0x424>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8005ce6:	4632      	mov	r2, r6
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8005ce8:	f012 0f01 	tst.w	r2, #1
 8005cec:	d156      	bne.n	8005d9c <lfs_dir_orphaningcommit+0x294>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8005cee:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 8005cf0:	f240 38ff 	movw	r8, #1023	; 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8005cf4:	9b06      	ldr	r3, [sp, #24]
 8005cf6:	9304      	str	r3, [sp, #16]
 8005cf8:	9b07      	ldr	r3, [sp, #28]
 8005cfa:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8005cfc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005d00:	4598      	cmp	r8, r3
 8005d02:	d06a      	beq.n	8005dda <lfs_dir_orphaningcommit+0x2d2>
 8005d04:	ea4f 2888 	mov.w	r8, r8, lsl #10
 8005d08:	f048 439f 	orr.w	r3, r8, #1333788672	; 0x4f800000
 8005d0c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8005d10:	931a      	str	r3, [sp, #104]	; 0x68
 8005d12:	2300      	movs	r3, #0
 8005d14:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d16:	921c      	str	r2, [sp, #112]	; 0x70
 8005d18:	aa0e      	add	r2, sp, #56	; 0x38
 8005d1a:	921d      	str	r2, [sp, #116]	; 0x74
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	2302      	movs	r3, #2
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	ab1a      	add	r3, sp, #104	; 0x68
 8005d24:	aa04      	add	r2, sp, #16
 8005d26:	a906      	add	r1, sp, #24
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f7ff fd25 	bl	8005778 <lfs_dir_relocatingcommit>
            if (state < 0) {
 8005d2e:	f1b0 0800 	subs.w	r8, r0, #0
 8005d32:	db65      	blt.n	8005e00 <lfs_dir_orphaningcommit+0x2f8>
            if (state == LFS_OK_RELOCATED) {
 8005d34:	f1b8 0f01 	cmp.w	r8, #1
 8005d38:	d051      	beq.n	8005dde <lfs_dir_orphaningcommit+0x2d6>
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8005d3a:	aa06      	add	r2, sp, #24
 8005d3c:	a916      	add	r1, sp, #88	; 0x58
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f7fe fa7a 	bl	8004238 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 8005d44:	4603      	mov	r3, r0
 8005d46:	b118      	cbz	r0, 8005d50 <lfs_dir_orphaningcommit+0x248>
 8005d48:	f110 0f02 	cmn.w	r0, #2
 8005d4c:	f040 80f4 	bne.w	8005f38 <lfs_dir_orphaningcommit+0x430>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8005d50:	f114 0f02 	cmn.w	r4, #2
 8005d54:	d002      	beq.n	8005d5c <lfs_dir_orphaningcommit+0x254>
 8005d56:	f113 0f02 	cmn.w	r3, #2
 8005d5a:	d056      	beq.n	8005e0a <lfs_dir_orphaningcommit+0x302>
        if (err != LFS_ERR_NOENT) {
 8005d5c:	f113 0f02 	cmn.w	r3, #2
 8005d60:	f000 80e0 	beq.w	8005f24 <lfs_dir_orphaningcommit+0x41c>
    return lfs_tag_size(a->tag);
 8005d64:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    return tag & 0x000003ff;
 8005d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d154      	bne.n	8005e18 <lfs_dir_orphaningcommit+0x310>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8005d6e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 8005d70:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8005d72:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 8005d76:	d065      	beq.n	8005e44 <lfs_dir_orphaningcommit+0x33c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005d78:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005d7a:	9906      	ldr	r1, [sp, #24]
 8005d7c:	428b      	cmp	r3, r1
 8005d7e:	d062      	beq.n	8005e46 <lfs_dir_orphaningcommit+0x33e>
 8005d80:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8005d82:	9a07      	ldr	r2, [sp, #28]
 8005d84:	4290      	cmp	r0, r2
 8005d86:	d05e      	beq.n	8005e46 <lfs_dir_orphaningcommit+0x33e>
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d05c      	beq.n	8005e46 <lfs_dir_orphaningcommit+0x33e>
 8005d8c:	4281      	cmp	r1, r0
 8005d8e:	d05a      	beq.n	8005e46 <lfs_dir_orphaningcommit+0x33e>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8005d90:	2600      	movs	r6, #0
 8005d92:	e058      	b.n	8005e46 <lfs_dir_orphaningcommit+0x33e>
 8005d94:	4632      	mov	r2, r6
 8005d96:	e7a7      	b.n	8005ce8 <lfs_dir_orphaningcommit+0x1e0>
 8005d98:	4632      	mov	r2, r6
 8005d9a:	e7a5      	b.n	8005ce8 <lfs_dir_orphaningcommit+0x1e0>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8005d9c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
 8005d9e:	f3c3 2889 	ubfx	r8, r3, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 8005da2:	4b23      	ldr	r3, [pc, #140]	; (8005e30 <lfs_dir_orphaningcommit+0x328>)
 8005da4:	9302      	str	r3, [sp, #8]
 8005da6:	f8cd 8004 	str.w	r8, [sp, #4]
 8005daa:	9b07      	ldr	r3, [sp, #28]
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	9b06      	ldr	r3, [sp, #24]
 8005db0:	f44f 6219 	mov.w	r2, #2448	; 0x990
 8005db4:	491f      	ldr	r1, [pc, #124]	; (8005e34 <lfs_dir_orphaningcommit+0x32c>)
 8005db6:	4820      	ldr	r0, [pc, #128]	; (8005e38 <lfs_dir_orphaningcommit+0x330>)
 8005db8:	f000 ffcc 	bl	8006d54 <iprintf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f7fc fce2 	bl	800278c <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 8005dc8:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 8005dcc:	4543      	cmp	r3, r8
 8005dce:	d902      	bls.n	8005dd6 <lfs_dir_orphaningcommit+0x2ce>
                    tag -= LFS_MKTAG(0, 1, 0);
 8005dd0:	f5a4 6280 	sub.w	r2, r4, #1024	; 0x400
 8005dd4:	e78e      	b.n	8005cf4 <lfs_dir_orphaningcommit+0x1ec>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	e78c      	b.n	8005cf4 <lfs_dir_orphaningcommit+0x1ec>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e798      	b.n	8005d10 <lfs_dir_orphaningcommit+0x208>
                lpair[0] = ppair[0];
 8005dde:	9b04      	ldr	r3, [sp, #16]
 8005de0:	9316      	str	r3, [sp, #88]	; 0x58
                lpair[1] = ppair[1];
 8005de2:	9b05      	ldr	r3, [sp, #20]
 8005de4:	9317      	str	r3, [sp, #92]	; 0x5c
                ldir = pdir;
 8005de6:	ac0e      	add	r4, sp, #56	; 0x38
 8005de8:	ae06      	add	r6, sp, #24
 8005dea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005df2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8005df6:	4646      	mov	r6, r8
                orphans = true;
 8005df8:	2701      	movs	r7, #1
 8005dfa:	e058      	b.n	8005eae <lfs_dir_orphaningcommit+0x3a6>
                return err;
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	e095      	b.n	8005f2c <lfs_dir_orphaningcommit+0x424>
                return state;
 8005e00:	4646      	mov	r6, r8
 8005e02:	e093      	b.n	8005f2c <lfs_dir_orphaningcommit+0x424>
        state = 0;
 8005e04:	f04f 0800 	mov.w	r8, #0
 8005e08:	e797      	b.n	8005d3a <lfs_dir_orphaningcommit+0x232>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8005e0a:	4b0c      	ldr	r3, [pc, #48]	; (8005e3c <lfs_dir_orphaningcommit+0x334>)
 8005e0c:	4a0c      	ldr	r2, [pc, #48]	; (8005e40 <lfs_dir_orphaningcommit+0x338>)
 8005e0e:	f640 11b3 	movw	r1, #2483	; 0x9b3
 8005e12:	4808      	ldr	r0, [pc, #32]	; (8005e34 <lfs_dir_orphaningcommit+0x32c>)
 8005e14:	f000 fe02 	bl	8006a1c <__assert_func>
                err = lfs_fs_preporphans(lfs, -hasparent);
 8005e18:	f1c9 0100 	rsb	r1, r9, #0
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f7fc fd05 	bl	800282c <lfs_fs_preporphans>
                if (err) {
 8005e22:	2800      	cmp	r0, #0
 8005e24:	d0a3      	beq.n	8005d6e <lfs_dir_orphaningcommit+0x266>
                    return err;
 8005e26:	4606      	mov	r6, r0
 8005e28:	e080      	b.n	8005f2c <lfs_dir_orphaningcommit+0x424>
 8005e2a:	bf00      	nop
 8005e2c:	000ffc08 	.word	0x000ffc08
 8005e30:	080081c0 	.word	0x080081c0
 8005e34:	08007ba4 	.word	0x08007ba4
 8005e38:	0800836c 	.word	0x0800836c
 8005e3c:	080083b0 	.word	0x080083b0
 8005e40:	08008658 	.word	0x08008658
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8005e44:	2600      	movs	r6, #0
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8005e46:	f016 0f01 	tst.w	r6, #1
 8005e4a:	d153      	bne.n	8005ef4 <lfs_dir_orphaningcommit+0x3ec>
            uint16_t moveid = 0x3ff;
 8005e4c:	f240 34ff 	movw	r4, #1023	; 0x3ff
            lpair[0] = pdir.pair[0];
 8005e50:	9b06      	ldr	r3, [sp, #24]
 8005e52:	9316      	str	r3, [sp, #88]	; 0x58
            lpair[1] = pdir.pair[1];
 8005e54:	9b07      	ldr	r3, [sp, #28]
 8005e56:	9317      	str	r3, [sp, #92]	; 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005e58:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	d05f      	beq.n	8005f20 <lfs_dir_orphaningcommit+0x418>
 8005e60:	02a3      	lsls	r3, r4, #10
 8005e62:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8005e66:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8005e6a:	931e      	str	r3, [sp, #120]	; 0x78
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	911f      	str	r1, [sp, #124]	; 0x7c
 8005e70:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8005e74:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8005e78:	4b30      	ldr	r3, [pc, #192]	; (8005f3c <lfs_dir_orphaningcommit+0x434>)
 8005e7a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005e7e:	9320      	str	r3, [sp, #128]	; 0x80
 8005e80:	ab0e      	add	r3, sp, #56	; 0x38
 8005e82:	9321      	str	r3, [sp, #132]	; 0x84
 8005e84:	9101      	str	r1, [sp, #4]
 8005e86:	2302      	movs	r3, #2
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	ab1e      	add	r3, sp, #120	; 0x78
 8005e8c:	aa16      	add	r2, sp, #88	; 0x58
 8005e8e:	a906      	add	r1, sp, #24
 8005e90:	4628      	mov	r0, r5
 8005e92:	f7ff fc71 	bl	8005778 <lfs_dir_relocatingcommit>
            if (state < 0) {
 8005e96:	1e06      	subs	r6, r0, #0
 8005e98:	db48      	blt.n	8005f2c <lfs_dir_orphaningcommit+0x424>
            ldir = pdir;
 8005e9a:	ac0e      	add	r4, sp, #56	; 0x38
 8005e9c:	f10d 0c18 	add.w	ip, sp, #24
 8005ea0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ea6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8005eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8005eae:	2e01      	cmp	r6, #1
 8005eb0:	d13a      	bne.n	8005f28 <lfs_dir_orphaningcommit+0x420>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8005eb2:	4b23      	ldr	r3, [pc, #140]	; (8005f40 <lfs_dir_orphaningcommit+0x438>)
 8005eb4:	9303      	str	r3, [sp, #12]
 8005eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005eb8:	9302      	str	r3, [sp, #8]
 8005eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ec4:	f640 1263 	movw	r2, #2403	; 0x963
 8005ec8:	491e      	ldr	r1, [pc, #120]	; (8005f44 <lfs_dir_orphaningcommit+0x43c>)
 8005eca:	481f      	ldr	r0, [pc, #124]	; (8005f48 <lfs_dir_orphaningcommit+0x440>)
 8005ecc:	f000 ff42 	bl	8006d54 <iprintf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8005ed0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005ed2:	6a2b      	ldr	r3, [r5, #32]
 8005ed4:	428b      	cmp	r3, r1
 8005ed6:	d007      	beq.n	8005ee8 <lfs_dir_orphaningcommit+0x3e0>
 8005ed8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005eda:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8005edc:	4282      	cmp	r2, r0
 8005ede:	d003      	beq.n	8005ee8 <lfs_dir_orphaningcommit+0x3e0>
 8005ee0:	428a      	cmp	r2, r1
 8005ee2:	d001      	beq.n	8005ee8 <lfs_dir_orphaningcommit+0x3e0>
 8005ee4:	4298      	cmp	r0, r3
 8005ee6:	d103      	bne.n	8005ef0 <lfs_dir_orphaningcommit+0x3e8>
            lfs->root[0] = ldir.pair[0];
 8005ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eea:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 8005eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005eee:	626b      	str	r3, [r5, #36]	; 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8005ef0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005ef2:	e6aa      	b.n	8005c4a <lfs_dir_orphaningcommit+0x142>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8005ef4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
 8005ef6:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 8005efa:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <lfs_dir_orphaningcommit+0x438>)
 8005efc:	9302      	str	r3, [sp, #8]
 8005efe:	9401      	str	r4, [sp, #4]
 8005f00:	9b07      	ldr	r3, [sp, #28]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	9b06      	ldr	r3, [sp, #24]
 8005f06:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005f0a:	490e      	ldr	r1, [pc, #56]	; (8005f44 <lfs_dir_orphaningcommit+0x43c>)
 8005f0c:	480f      	ldr	r0, [pc, #60]	; (8005f4c <lfs_dir_orphaningcommit+0x444>)
 8005f0e:	f000 ff21 	bl	8006d54 <iprintf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8005f12:	2200      	movs	r2, #0
 8005f14:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f7fc fc37 	bl	800278c <lfs_fs_prepmove>
 8005f1e:	e797      	b.n	8005e50 <lfs_dir_orphaningcommit+0x348>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8005f20:	2300      	movs	r3, #0
 8005f22:	e7a2      	b.n	8005e6a <lfs_dir_orphaningcommit+0x362>
        if (err != LFS_ERR_NOENT) {
 8005f24:	4646      	mov	r6, r8
 8005f26:	e7c2      	b.n	8005eae <lfs_dir_orphaningcommit+0x3a6>
    return orphans ? LFS_OK_ORPHANED : 0;
 8005f28:	b927      	cbnz	r7, 8005f34 <lfs_dir_orphaningcommit+0x42c>
 8005f2a:	2600      	movs	r6, #0
}
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	b023      	add	sp, #140	; 0x8c
 8005f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 8005f34:	2603      	movs	r6, #3
 8005f36:	e7f9      	b.n	8005f2c <lfs_dir_orphaningcommit+0x424>
            return err;
 8005f38:	4606      	mov	r6, r0
 8005f3a:	e7f7      	b.n	8005f2c <lfs_dir_orphaningcommit+0x424>
 8005f3c:	000ffc08 	.word	0x000ffc08
 8005f40:	080081c0 	.word	0x080081c0
 8005f44:	08007ba4 	.word	0x08007ba4
 8005f48:	08008330 	.word	0x08008330
 8005f4c:	0800836c 	.word	0x0800836c

08005f50 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8005f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f54:	b0a4      	sub	sp, #144	; 0x90
    return lfs_tag_size(a->tag);
 8005f56:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
 8005f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 8119 	beq.w	8006194 <lfs_fs_deorphan+0x244>
 8005f62:	4605      	mov	r5, r0
 8005f64:	460f      	mov	r7, r1
    int pass = 0;
 8005f66:	2600      	movs	r6, #0
    while (pass < 2) {
 8005f68:	2e01      	cmp	r6, #1
 8005f6a:	f340 8107 	ble.w	800617c <lfs_fs_deorphan+0x22c>
    return lfs_tag_size(a->tag) & 0x1ff;
 8005f6e:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8005f72:	4249      	negs	r1, r1
 8005f74:	b249      	sxtb	r1, r1
 8005f76:	4628      	mov	r0, r5
 8005f78:	f7fc fc58 	bl	800282c <lfs_fs_preporphans>
 8005f7c:	4604      	mov	r4, r0
}
 8005f7e:	4620      	mov	r0, r4
 8005f80:	b024      	add	sp, #144	; 0x90
 8005f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8005f86:	aa16      	add	r2, sp, #88	; 0x58
 8005f88:	a90c      	add	r1, sp, #48	; 0x30
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f7fe f8ca 	bl	8004124 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8005f90:	1e04      	subs	r4, r0, #0
 8005f92:	db38      	blt.n	8006006 <lfs_fs_deorphan+0xb6>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8005f94:	b916      	cbnz	r6, 8005f9c <lfs_fs_deorphan+0x4c>
 8005f96:	f114 0f02 	cmn.w	r4, #2
 8005f9a:	d138      	bne.n	800600e <lfs_fs_deorphan+0xbe>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8005f9c:	2e01      	cmp	r6, #1
 8005f9e:	f040 80d1 	bne.w	8006144 <lfs_fs_deorphan+0x1f4>
 8005fa2:	f114 0f02 	cmn.w	r4, #2
 8005fa6:	f040 80cd 	bne.w	8006144 <lfs_fs_deorphan+0x1f4>
 8005faa:	2f00      	cmp	r7, #0
 8005fac:	f000 80ca 	beq.w	8006144 <lfs_fs_deorphan+0x1f4>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8005fb0:	4b79      	ldr	r3, [pc, #484]	; (8006198 <lfs_fs_deorphan+0x248>)
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fba:	f241 3238 	movw	r2, #4920	; 0x1338
 8005fbe:	4977      	ldr	r1, [pc, #476]	; (800619c <lfs_fs_deorphan+0x24c>)
 8005fc0:	4877      	ldr	r0, [pc, #476]	; (80061a0 <lfs_fs_deorphan+0x250>)
 8005fc2:	f000 fec7 	bl	8006d54 <iprintf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8005fc6:	f105 0248 	add.w	r2, r5, #72	; 0x48
 8005fca:	a90e      	add	r1, sp, #56	; 0x38
 8005fcc:	4628      	mov	r0, r5
 8005fce:	f7fd fce9 	bl	80039a4 <lfs_dir_getgstate>
                    if (err) {
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d1d2      	bne.n	8005f7e <lfs_fs_deorphan+0x2e>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8005fd8:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8005fdc:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8005fe0:	4b70      	ldr	r3, [pc, #448]	; (80061a4 <lfs_fs_deorphan+0x254>)
 8005fe2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005fe6:	9322      	str	r3, [sp, #136]	; 0x88
 8005fe8:	ab14      	add	r3, sp, #80	; 0x50
 8005fea:	9323      	str	r3, [sp, #140]	; 0x8c
 8005fec:	2301      	movs	r3, #1
 8005fee:	aa22      	add	r2, sp, #136	; 0x88
 8005ff0:	a906      	add	r1, sp, #24
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f7ff fd88 	bl	8005b08 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 8005ff8:	1e04      	subs	r4, r0, #0
 8005ffa:	dbc0      	blt.n	8005f7e <lfs_fs_deorphan+0x2e>
                    if (state == LFS_OK_ORPHANED) {
 8005ffc:	2c03      	cmp	r4, #3
 8005ffe:	f040 80ad 	bne.w	800615c <lfs_fs_deorphan+0x20c>
                        moreorphans = true;
 8006002:	46b8      	mov	r8, r7
                    continue;
 8006004:	e0aa      	b.n	800615c <lfs_fs_deorphan+0x20c>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006006:	f114 0f02 	cmn.w	r4, #2
 800600a:	d0c3      	beq.n	8005f94 <lfs_fs_deorphan+0x44>
 800600c:	e7b7      	b.n	8005f7e <lfs_fs_deorphan+0x2e>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800600e:	ab04      	add	r3, sp, #16
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	4623      	mov	r3, r4
 8006014:	4a64      	ldr	r2, [pc, #400]	; (80061a8 <lfs_fs_deorphan+0x258>)
 8006016:	a916      	add	r1, sp, #88	; 0x58
 8006018:	4628      	mov	r0, r5
 800601a:	f7fd fcb5 	bl	8003988 <lfs_dir_get>
                    if (state < 0) {
 800601e:	2800      	cmp	r0, #0
 8006020:	db7c      	blt.n	800611c <lfs_fs_deorphan+0x1cc>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8006022:	9b04      	ldr	r3, [sp, #16]
 8006024:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006026:	4293      	cmp	r3, r2
 8006028:	d028      	beq.n	800607c <lfs_fs_deorphan+0x12c>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800602a:	990d      	ldr	r1, [sp, #52]	; 0x34
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800602c:	428b      	cmp	r3, r1
 800602e:	d02b      	beq.n	8006088 <lfs_fs_deorphan+0x138>
 8006030:	4633      	mov	r3, r6
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8006032:	f013 0f01 	tst.w	r3, #1
 8006036:	d1b1      	bne.n	8005f9c <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 8006038:	4b57      	ldr	r3, [pc, #348]	; (8006198 <lfs_fs_deorphan+0x248>)
 800603a:	9303      	str	r3, [sp, #12]
 800603c:	9b05      	ldr	r3, [sp, #20]
 800603e:	9302      	str	r3, [sp, #8]
 8006040:	9b04      	ldr	r3, [sp, #16]
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800604a:	f241 320d 	movw	r2, #4877	; 0x130d
 800604e:	4953      	ldr	r1, [pc, #332]	; (800619c <lfs_fs_deorphan+0x24c>)
 8006050:	4856      	ldr	r0, [pc, #344]	; (80061ac <lfs_fs_deorphan+0x25c>)
 8006052:	f000 fe7f 	bl	8006d54 <iprintf>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8006056:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
 8006058:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800605a:	f413 6fe0 	tst.w	r3, #1792	; 0x700
 800605e:	d01c      	beq.n	800609a <lfs_fs_deorphan+0x14a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8006060:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006062:	9906      	ldr	r1, [sp, #24]
 8006064:	428b      	cmp	r3, r1
 8006066:	d032      	beq.n	80060ce <lfs_fs_deorphan+0x17e>
 8006068:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800606a:	9a07      	ldr	r2, [sp, #28]
 800606c:	4290      	cmp	r0, r2
 800606e:	d030      	beq.n	80060d2 <lfs_fs_deorphan+0x182>
 8006070:	4293      	cmp	r3, r2
 8006072:	d030      	beq.n	80060d6 <lfs_fs_deorphan+0x186>
 8006074:	4281      	cmp	r1, r0
 8006076:	d00e      	beq.n	8006096 <lfs_fs_deorphan+0x146>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8006078:	4633      	mov	r3, r6
 800607a:	e00f      	b.n	800609c <lfs_fs_deorphan+0x14c>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800607c:	9805      	ldr	r0, [sp, #20]
 800607e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006080:	4288      	cmp	r0, r1
 8006082:	d1d2      	bne.n	800602a <lfs_fs_deorphan+0xda>
 8006084:	2301      	movs	r3, #1
 8006086:	e7d4      	b.n	8006032 <lfs_fs_deorphan+0xe2>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8006088:	9b05      	ldr	r3, [sp, #20]
 800608a:	429a      	cmp	r2, r3
 800608c:	d001      	beq.n	8006092 <lfs_fs_deorphan+0x142>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800608e:	4633      	mov	r3, r6
 8006090:	e7cf      	b.n	8006032 <lfs_fs_deorphan+0xe2>
 8006092:	2301      	movs	r3, #1
 8006094:	e7cd      	b.n	8006032 <lfs_fs_deorphan+0xe2>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <lfs_fs_deorphan+0x14c>
 800609a:	4633      	mov	r3, r6
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800609c:	f013 0f01 	tst.w	r3, #1
 80060a0:	d11b      	bne.n	80060da <lfs_fs_deorphan+0x18a>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80060a2:	2300      	movs	r3, #0
 80060a4:	931e      	str	r3, [sp, #120]	; 0x78
 80060a6:	2300      	movs	r3, #0
 80060a8:	931f      	str	r3, [sp, #124]	; 0x7c
 80060aa:	4b41      	ldr	r3, [pc, #260]	; (80061b0 <lfs_fs_deorphan+0x260>)
 80060ac:	9320      	str	r3, [sp, #128]	; 0x80
 80060ae:	ab04      	add	r3, sp, #16
 80060b0:	9321      	str	r3, [sp, #132]	; 0x84
 80060b2:	2302      	movs	r3, #2
 80060b4:	aa1e      	add	r2, sp, #120	; 0x78
 80060b6:	a906      	add	r1, sp, #24
 80060b8:	4628      	mov	r0, r5
 80060ba:	f7ff fd25 	bl	8005b08 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 80060be:	1e04      	subs	r4, r0, #0
 80060c0:	f6ff af5d 	blt.w	8005f7e <lfs_fs_deorphan+0x2e>
                        if (state == LFS_OK_ORPHANED) {
 80060c4:	2c03      	cmp	r4, #3
 80060c6:	d149      	bne.n	800615c <lfs_fs_deorphan+0x20c>
                            moreorphans = true;
 80060c8:	f04f 0801 	mov.w	r8, #1
                        continue;
 80060cc:	e046      	b.n	800615c <lfs_fs_deorphan+0x20c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e7e4      	b.n	800609c <lfs_fs_deorphan+0x14c>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e7e2      	b.n	800609c <lfs_fs_deorphan+0x14c>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e7e0      	b.n	800609c <lfs_fs_deorphan+0x14c>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 80060da:	6b2c      	ldr	r4, [r5, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
 80060dc:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 80060e0:	4b2d      	ldr	r3, [pc, #180]	; (8006198 <lfs_fs_deorphan+0x248>)
 80060e2:	9302      	str	r3, [sp, #8]
 80060e4:	9401      	str	r4, [sp, #4]
 80060e6:	9b07      	ldr	r3, [sp, #28]
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	9b06      	ldr	r3, [sp, #24]
 80060ec:	f241 3218 	movw	r2, #4888	; 0x1318
 80060f0:	492a      	ldr	r1, [pc, #168]	; (800619c <lfs_fs_deorphan+0x24c>)
 80060f2:	4830      	ldr	r0, [pc, #192]	; (80061b4 <lfs_fs_deorphan+0x264>)
 80060f4:	f000 fe2e 	bl	8006d54 <iprintf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80060f8:	2200      	movs	r2, #0
 80060fa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80060fe:	4628      	mov	r0, r5
 8006100:	f7fc fb44 	bl	800278c <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006104:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006108:	429c      	cmp	r4, r3
 800610a:	d005      	beq.n	8006118 <lfs_fs_deorphan+0x1c8>
 800610c:	02a3      	lsls	r3, r4, #10
 800610e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006112:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006116:	e7c5      	b.n	80060a4 <lfs_fs_deorphan+0x154>
 8006118:	2300      	movs	r3, #0
 800611a:	e7c3      	b.n	80060a4 <lfs_fs_deorphan+0x154>
                        return state;
 800611c:	4604      	mov	r4, r0
 800611e:	e72e      	b.n	8005f7e <lfs_fs_deorphan+0x2e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <lfs_fs_deorphan+0x1d6>
 8006124:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 8006126:	bb1b      	cbnz	r3, 8006170 <lfs_fs_deorphan+0x220>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8006128:	aa0c      	add	r2, sp, #48	; 0x30
 800612a:	a90e      	add	r1, sp, #56	; 0x38
 800612c:	4628      	mov	r0, r5
 800612e:	f7fe f875 	bl	800421c <lfs_dir_fetch>
            if (err) {
 8006132:	4604      	mov	r4, r0
 8006134:	2800      	cmp	r0, #0
 8006136:	f47f af22 	bne.w	8005f7e <lfs_fs_deorphan+0x2e>
            if (!pdir.split) {
 800613a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800613e:	2b00      	cmp	r3, #0
 8006140:	f43f af21 	beq.w	8005f86 <lfs_fs_deorphan+0x36>
            pdir = dir;
 8006144:	f10d 0c18 	add.w	ip, sp, #24
 8006148:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 800614c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006150:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006154:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8006158:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800615c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006162:	d0df      	beq.n	8006124 <lfs_fs_deorphan+0x1d4>
 8006164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800616a:	d0d9      	beq.n	8006120 <lfs_fs_deorphan+0x1d0>
 800616c:	2300      	movs	r3, #0
 800616e:	e7da      	b.n	8006126 <lfs_fs_deorphan+0x1d6>
        pass = moreorphans ? 0 : pass+1;
 8006170:	f1b8 0f00 	cmp.w	r8, #0
 8006174:	d101      	bne.n	800617a <lfs_fs_deorphan+0x22a>
 8006176:	3601      	adds	r6, #1
 8006178:	e6f6      	b.n	8005f68 <lfs_fs_deorphan+0x18>
 800617a:	2600      	movs	r6, #0
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800617c:	2220      	movs	r2, #32
 800617e:	2100      	movs	r1, #0
 8006180:	a806      	add	r0, sp, #24
 8006182:	f000 fe54 	bl	8006e2e <memset>
 8006186:	2301      	movs	r3, #1
 8006188:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800618c:	930d      	str	r3, [sp, #52]	; 0x34
        bool moreorphans = false;
 800618e:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 8006192:	e7e3      	b.n	800615c <lfs_fs_deorphan+0x20c>
        return 0;
 8006194:	2400      	movs	r4, #0
 8006196:	e6f2      	b.n	8005f7e <lfs_fs_deorphan+0x2e>
 8006198:	080081c0 	.word	0x080081c0
 800619c:	08007ba4 	.word	0x08007ba4
 80061a0:	08008464 	.word	0x08008464
 80061a4:	000ffc08 	.word	0x000ffc08
 80061a8:	7ffffc00 	.word	0x7ffffc00
 80061ac:	080083d8 	.word	0x080083d8
 80061b0:	600ffc08 	.word	0x600ffc08
 80061b4:	0800841c 	.word	0x0800841c

080061b8 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 80061b8:	b510      	push	{r4, lr}
 80061ba:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80061bc:	f7ff fca4 	bl	8005b08 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 80061c0:	2800      	cmp	r0, #0
 80061c2:	db00      	blt.n	80061c6 <lfs_dir_commit+0xe>
    if (orphans) {
 80061c4:	b900      	cbnz	r0, 80061c8 <lfs_dir_commit+0x10>
}
 80061c6:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 80061c8:	2100      	movs	r1, #0
 80061ca:	4620      	mov	r0, r4
 80061cc:	f7ff fec0 	bl	8005f50 <lfs_fs_deorphan>
        if (err) {
 80061d0:	e7f9      	b.n	80061c6 <lfs_dir_commit+0xe>
	...

080061d4 <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 80061d4:	b530      	push	{r4, r5, lr}
 80061d6:	b093      	sub	sp, #76	; 0x4c
    return lfs_tag_size(a->tag) >> 9;
 80061d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 80061da:	f413 7f00 	tst.w	r3, #512	; 0x200
 80061de:	d103      	bne.n	80061e8 <lfs_fs_desuperblock+0x14>
        return 0;
 80061e0:	2500      	movs	r5, #0
}
 80061e2:	4628      	mov	r0, r5
 80061e4:	b013      	add	sp, #76	; 0x4c
 80061e6:	bd30      	pop	{r4, r5, pc}
 80061e8:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 80061ea:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <lfs_fs_desuperblock+0x80>)
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	6a03      	ldr	r3, [r0, #32]
 80061f4:	f241 2298 	movw	r2, #4760	; 0x1298
 80061f8:	4917      	ldr	r1, [pc, #92]	; (8006258 <lfs_fs_desuperblock+0x84>)
 80061fa:	4818      	ldr	r0, [pc, #96]	; (800625c <lfs_fs_desuperblock+0x88>)
 80061fc:	f000 fdaa 	bl	8006d54 <iprintf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8006200:	f104 0220 	add.w	r2, r4, #32
 8006204:	a908      	add	r1, sp, #32
 8006206:	4620      	mov	r0, r4
 8006208:	f7fe f808 	bl	800421c <lfs_dir_fetch>
    if (err) {
 800620c:	4605      	mov	r5, r0
 800620e:	2800      	cmp	r0, #0
 8006210:	d1e7      	bne.n	80061e2 <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 8006212:	4620      	mov	r0, r4
 8006214:	f7fc fa12 	bl	800263c <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 8006218:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 800621a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800621c:	69da      	ldr	r2, [r3, #28]
    lfs_superblock_t superblock = {
 800621e:	9203      	str	r2, [sp, #12]
        .block_count = lfs->cfg->block_count,
 8006220:	6a1b      	ldr	r3, [r3, #32]
    lfs_superblock_t superblock = {
 8006222:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 8006224:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8006226:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 8006228:	6f23      	ldr	r3, [r4, #112]	; 0x70
    lfs_superblock_t superblock = {
 800622a:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 800622c:	6f63      	ldr	r3, [r4, #116]	; 0x74
    lfs_superblock_t superblock = {
 800622e:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <lfs_fs_desuperblock+0x8c>)
 8006232:	9310      	str	r3, [sp, #64]	; 0x40
 8006234:	ab02      	add	r3, sp, #8
 8006236:	9311      	str	r3, [sp, #68]	; 0x44
 8006238:	2301      	movs	r3, #1
 800623a:	aa10      	add	r2, sp, #64	; 0x40
 800623c:	a908      	add	r1, sp, #32
 800623e:	4620      	mov	r0, r4
 8006240:	f7ff ffba 	bl	80061b8 <lfs_dir_commit>
    if (err) {
 8006244:	4605      	mov	r5, r0
 8006246:	2800      	cmp	r0, #0
 8006248:	d1cb      	bne.n	80061e2 <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 800624a:	2100      	movs	r1, #0
 800624c:	4620      	mov	r0, r4
 800624e:	f7fc fa95 	bl	800277c <lfs_fs_prepsuperblock>
    return 0;
 8006252:	e7c6      	b.n	80061e2 <lfs_fs_desuperblock+0xe>
 8006254:	080081c0 	.word	0x080081c0
 8006258:	08007ba4 	.word	0x08007ba4
 800625c:	08008494 	.word	0x08008494
 8006260:	20100018 	.word	0x20100018

08006264 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 8006264:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
 8006266:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006268:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800626c:	d101      	bne.n	8006272 <lfs_fs_demove+0xe>
        return 0;
 800626e:	2000      	movs	r0, #0
}
 8006270:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 8006272:	b530      	push	{r4, r5, lr}
 8006274:	b08f      	sub	sp, #60	; 0x3c
 8006276:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 8006278:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800627c:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <lfs_fs_demove+0x90>)
 800627e:	9202      	str	r2, [sp, #8]
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006288:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800628c:	491a      	ldr	r1, [pc, #104]	; (80062f8 <lfs_fs_demove+0x94>)
 800628e:	481b      	ldr	r0, [pc, #108]	; (80062fc <lfs_fs_demove+0x98>)
 8006290:	f000 fd60 	bl	8006d54 <iprintf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8006294:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    return (tag & 0x7ff00000) >> 20;
 8006296:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 800629a:	f240 42ff 	movw	r2, #1279	; 0x4ff
 800629e:	4293      	cmp	r3, r2
 80062a0:	d108      	bne.n	80062b4 <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80062a2:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80062a6:	a904      	add	r1, sp, #16
 80062a8:	4620      	mov	r0, r4
 80062aa:	f7fd ffb7 	bl	800421c <lfs_dir_fetch>
    if (err) {
 80062ae:	b140      	cbz	r0, 80062c2 <lfs_fs_demove+0x5e>
}
 80062b0:	b00f      	add	sp, #60	; 0x3c
 80062b2:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <lfs_fs_demove+0x9c>)
 80062b6:	4a13      	ldr	r2, [pc, #76]	; (8006304 <lfs_fs_demove+0xa0>)
 80062b8:	f241 21c7 	movw	r1, #4807	; 0x12c7
 80062bc:	480e      	ldr	r0, [pc, #56]	; (80062f8 <lfs_fs_demove+0x94>)
 80062be:	f000 fbad 	bl	8006a1c <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80062c2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    return (tag & 0x000ffc00) >> 10;
 80062c4:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80062c8:	2200      	movs	r2, #0
 80062ca:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80062ce:	4620      	mov	r0, r4
 80062d0:	f7fc fa5c 	bl	800278c <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80062d4:	02ab      	lsls	r3, r5, #10
 80062d6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80062da:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80062de:	930c      	str	r3, [sp, #48]	; 0x30
 80062e0:	2300      	movs	r3, #0
 80062e2:	930d      	str	r3, [sp, #52]	; 0x34
 80062e4:	2301      	movs	r3, #1
 80062e6:	aa0c      	add	r2, sp, #48	; 0x30
 80062e8:	a904      	add	r1, sp, #16
 80062ea:	4620      	mov	r0, r4
 80062ec:	f7ff ff64 	bl	80061b8 <lfs_dir_commit>
    if (err) {
 80062f0:	e7de      	b.n	80062b0 <lfs_fs_demove+0x4c>
 80062f2:	bf00      	nop
 80062f4:	080081c0 	.word	0x080081c0
 80062f8:	08007ba4 	.word	0x08007ba4
 80062fc:	080084c8 	.word	0x080084c8
 8006300:	080084fc 	.word	0x080084fc
 8006304:	0800867c 	.word	0x0800867c

08006308 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8006308:	b510      	push	{r4, lr}
 800630a:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 800630c:	f7ff ff62 	bl	80061d4 <lfs_fs_desuperblock>
    if (err) {
 8006310:	4603      	mov	r3, r0
 8006312:	b108      	cbz	r0, 8006318 <lfs_fs_forceconsistency+0x10>
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 8006318:	4620      	mov	r0, r4
 800631a:	f7ff ffa3 	bl	8006264 <lfs_fs_demove>
    if (err) {
 800631e:	4603      	mov	r3, r0
 8006320:	2800      	cmp	r0, #0
 8006322:	d1f7      	bne.n	8006314 <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 8006324:	2101      	movs	r1, #1
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff fe12 	bl	8005f50 <lfs_fs_deorphan>
 800632c:	4603      	mov	r3, r0
    if (err) {
 800632e:	e7f1      	b.n	8006314 <lfs_fs_forceconsistency+0xc>

08006330 <lfs_file_rawsync>:
    if (file->flags & LFS_F_ERRED) {
 8006330:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006332:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006336:	d001      	beq.n	800633c <lfs_file_rawsync+0xc>
        return 0;
 8006338:	2000      	movs	r0, #0
}
 800633a:	4770      	bx	lr
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800633c:	b530      	push	{r4, r5, lr}
 800633e:	b087      	sub	sp, #28
 8006340:	4605      	mov	r5, r0
 8006342:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 8006344:	f7fe fbbe 	bl	8004ac4 <lfs_file_flush>
    if (err) {
 8006348:	2800      	cmp	r0, #0
 800634a:	d132      	bne.n	80063b2 <lfs_file_rawsync+0x82>
    if ((file->flags & LFS_F_DIRTY) &&
 800634c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800634e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006352:	d032      	beq.n	80063ba <lfs_file_rawsync+0x8a>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8006354:	68a2      	ldr	r2, [r4, #8]
 8006356:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800635a:	d032      	beq.n	80063c2 <lfs_file_rawsync+0x92>
 800635c:	68e2      	ldr	r2, [r4, #12]
 800635e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006362:	d02c      	beq.n	80063be <lfs_file_rawsync+0x8e>
 8006364:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 8006366:	f012 0f01 	tst.w	r2, #1
 800636a:	d126      	bne.n	80063ba <lfs_file_rawsync+0x8a>
        if (file->flags & LFS_F_INLINE) {
 800636c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006370:	d029      	beq.n	80063c6 <lfs_file_rawsync+0x96>
            buffer = file->cache.buffer;
 8006372:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
            size = file->ctz.size;
 8006374:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 8006376:	f240 2201 	movw	r2, #513	; 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800637a:	88a3      	ldrh	r3, [r4, #4]
 800637c:	029b      	lsls	r3, r3, #10
 800637e:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 8006382:	4302      	orrs	r2, r0
 8006384:	9202      	str	r2, [sp, #8]
 8006386:	9103      	str	r1, [sp, #12]
 8006388:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800638a:	6891      	ldr	r1, [r2, #8]
 800638c:	430b      	orrs	r3, r1
 800638e:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8006392:	9304      	str	r3, [sp, #16]
 8006394:	6853      	ldr	r3, [r2, #4]
 8006396:	9305      	str	r3, [sp, #20]
 8006398:	2302      	movs	r3, #2
 800639a:	aa02      	add	r2, sp, #8
 800639c:	f104 0108 	add.w	r1, r4, #8
 80063a0:	4628      	mov	r0, r5
 80063a2:	f7ff ff09 	bl	80061b8 <lfs_dir_commit>
        if (err) {
 80063a6:	b9d0      	cbnz	r0, 80063de <lfs_file_rawsync+0xae>
        file->flags &= ~LFS_F_DIRTY;
 80063a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ae:	6323      	str	r3, [r4, #48]	; 0x30
 80063b0:	e003      	b.n	80063ba <lfs_file_rawsync+0x8a>
        file->flags |= LFS_F_ERRED;
 80063b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063b8:	6323      	str	r3, [r4, #48]	; 0x30
}
 80063ba:	b007      	add	sp, #28
 80063bc:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80063be:	2201      	movs	r2, #1
 80063c0:	e7d1      	b.n	8006366 <lfs_file_rawsync+0x36>
 80063c2:	2201      	movs	r2, #1
 80063c4:	e7cf      	b.n	8006366 <lfs_file_rawsync+0x36>
            ctz = file->ctz;
 80063c6:	466b      	mov	r3, sp
 80063c8:	f104 0228 	add.w	r2, r4, #40	; 0x28
 80063cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063d0:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 80063d4:	2008      	movs	r0, #8
            buffer = &ctz;
 80063d6:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 80063d8:	f240 2202 	movw	r2, #514	; 0x202
 80063dc:	e7cd      	b.n	800637a <lfs_file_rawsync+0x4a>
            file->flags |= LFS_F_ERRED;
 80063de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063e4:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
 80063e6:	e7e8      	b.n	80063ba <lfs_file_rawsync+0x8a>

080063e8 <lfs_file_rawclose>:
static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	4606      	mov	r6, r0
 80063ec:	460c      	mov	r4, r1
    int err = lfs_file_rawsync(lfs, file);
 80063ee:	f7ff ff9f 	bl	8006330 <lfs_file_rawsync>
 80063f2:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80063f4:	4621      	mov	r1, r4
 80063f6:	4630      	mov	r0, r6
 80063f8:	f7fc f911 	bl	800261e <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 80063fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	b10b      	cbz	r3, 8006406 <lfs_file_rawclose+0x1e>
}
 8006402:	4628      	mov	r0, r5
 8006404:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 8006406:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006408:	f000 fb2e 	bl	8006a68 <free>
    return err;
 800640c:	e7f9      	b.n	8006402 <lfs_file_rawclose+0x1a>
	...

08006410 <lfs_rawformat>:
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8006410:	b530      	push	{r4, r5, lr}
 8006412:	b097      	sub	sp, #92	; 0x5c
 8006414:	4604      	mov	r4, r0
        err = lfs_init(lfs, cfg);
 8006416:	f7fc fe39 	bl	800308c <lfs_init>
        if (err) {
 800641a:	4605      	mov	r5, r0
 800641c:	b110      	cbz	r0, 8006424 <lfs_rawformat+0x14>
}
 800641e:	4628      	mov	r0, r5
 8006420:	b017      	add	sp, #92	; 0x5c
 8006422:	bd30      	pop	{r4, r5, pc}
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8006424:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	2100      	movs	r1, #0
 800642a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800642c:	f000 fcff 	bl	8006e2e <memset>
        lfs->free.off = 0;
 8006430:	2200      	movs	r2, #0
 8006432:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006434:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8006436:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006438:	00db      	lsls	r3, r3, #3
                lfs->cfg->block_count);
 800643a:	6a09      	ldr	r1, [r1, #32]
    return (a < b) ? a : b;
 800643c:	428b      	cmp	r3, r1
 800643e:	bf28      	it	cs
 8006440:	460b      	movcs	r3, r1
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006442:	65a3      	str	r3, [r4, #88]	; 0x58
        lfs->free.i = 0;
 8006444:	65e2      	str	r2, [r4, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8006446:	4620      	mov	r0, r4
 8006448:	f7fc f920 	bl	800268c <lfs_alloc_ack>
        err = lfs_dir_alloc(lfs, &root);
 800644c:	a906      	add	r1, sp, #24
 800644e:	4620      	mov	r0, r4
 8006450:	f7fe f8cc 	bl	80045ec <lfs_dir_alloc>
        if (err) {
 8006454:	4605      	mov	r5, r0
 8006456:	b118      	cbz	r0, 8006460 <lfs_rawformat+0x50>
    lfs_deinit(lfs);
 8006458:	4620      	mov	r0, r4
 800645a:	f7fc fdf9 	bl	8003050 <lfs_deinit>
    return err;
 800645e:	e7de      	b.n	800641e <lfs_rawformat+0xe>
            .version     = lfs_fs_disk_version(lfs),
 8006460:	4620      	mov	r0, r4
 8006462:	f7fc f8eb 	bl	800263c <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 8006466:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 8006468:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800646a:	69da      	ldr	r2, [r3, #28]
        lfs_superblock_t superblock = {
 800646c:	9201      	str	r2, [sp, #4]
            .block_count = lfs->cfg->block_count,
 800646e:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8006470:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 8006472:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8006474:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 8006476:	6f23      	ldr	r3, [r4, #112]	; 0x70
        lfs_superblock_t superblock = {
 8006478:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 800647a:	6f63      	ldr	r3, [r4, #116]	; 0x74
        lfs_superblock_t superblock = {
 800647c:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800647e:	4b15      	ldr	r3, [pc, #84]	; (80064d4 <lfs_rawformat+0xc4>)
 8006480:	930e      	str	r3, [sp, #56]	; 0x38
 8006482:	2300      	movs	r3, #0
 8006484:	930f      	str	r3, [sp, #60]	; 0x3c
 8006486:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <lfs_rawformat+0xc8>)
 8006488:	9310      	str	r3, [sp, #64]	; 0x40
 800648a:	4b14      	ldr	r3, [pc, #80]	; (80064dc <lfs_rawformat+0xcc>)
 800648c:	9311      	str	r3, [sp, #68]	; 0x44
 800648e:	4b14      	ldr	r3, [pc, #80]	; (80064e0 <lfs_rawformat+0xd0>)
 8006490:	9312      	str	r3, [sp, #72]	; 0x48
 8006492:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
 8006496:	2303      	movs	r3, #3
 8006498:	aa0e      	add	r2, sp, #56	; 0x38
 800649a:	a906      	add	r1, sp, #24
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff fe8b 	bl	80061b8 <lfs_dir_commit>
        if (err) {
 80064a2:	4605      	mov	r5, r0
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d1d7      	bne.n	8006458 <lfs_rawformat+0x48>
        root.erased = false;
 80064a8:	2200      	movs	r2, #0
 80064aa:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80064ae:	4613      	mov	r3, r2
 80064b0:	a906      	add	r1, sp, #24
 80064b2:	4620      	mov	r0, r4
 80064b4:	f7ff fe80 	bl	80061b8 <lfs_dir_commit>
        if (err) {
 80064b8:	4605      	mov	r5, r0
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d1cc      	bne.n	8006458 <lfs_rawformat+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80064be:	2300      	movs	r3, #0
 80064c0:	9314      	str	r3, [sp, #80]	; 0x50
 80064c2:	2301      	movs	r3, #1
 80064c4:	9315      	str	r3, [sp, #84]	; 0x54
 80064c6:	aa14      	add	r2, sp, #80	; 0x50
 80064c8:	a906      	add	r1, sp, #24
 80064ca:	4620      	mov	r0, r4
 80064cc:	f7fd fea6 	bl	800421c <lfs_dir_fetch>
 80064d0:	4605      	mov	r5, r0
        if (err) {
 80064d2:	e7c1      	b.n	8006458 <lfs_rawformat+0x48>
 80064d4:	40100000 	.word	0x40100000
 80064d8:	0ff00008 	.word	0x0ff00008
 80064dc:	08008070 	.word	0x08008070
 80064e0:	20100018 	.word	0x20100018

080064e4 <lfs_file_rawopencfg>:
        const struct lfs_file_config *cfg) {
 80064e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064e8:	b08b      	sub	sp, #44	; 0x2c
 80064ea:	4607      	mov	r7, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	9203      	str	r2, [sp, #12]
 80064f0:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80064f2:	f013 0f02 	tst.w	r3, #2
 80064f6:	d005      	beq.n	8006504 <lfs_file_rawopencfg+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 80064f8:	f7ff ff06 	bl	8006308 <lfs_fs_forceconsistency>
        if (err) {
 80064fc:	4606      	mov	r6, r0
 80064fe:	2800      	cmp	r0, #0
 8006500:	f040 810d 	bne.w	800671e <lfs_file_rawopencfg+0x23a>
    file->cfg = cfg;
 8006504:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006506:	6523      	str	r3, [r4, #80]	; 0x50
    file->flags = flags;
 8006508:	6325      	str	r5, [r4, #48]	; 0x30
    file->pos = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	6363      	str	r3, [r4, #52]	; 0x34
    file->off = 0;
 800650e:	63e3      	str	r3, [r4, #60]	; 0x3c
    file->cache.buffer = NULL;
 8006510:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8006512:	f104 0808 	add.w	r8, r4, #8
 8006516:	1d23      	adds	r3, r4, #4
 8006518:	aa03      	add	r2, sp, #12
 800651a:	4641      	mov	r1, r8
 800651c:	4638      	mov	r0, r7
 800651e:	f7fe fde3 	bl	80050e8 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8006522:	1e06      	subs	r6, r0, #0
 8006524:	da09      	bge.n	800653a <lfs_file_rawopencfg+0x56>
 8006526:	f116 0f02 	cmn.w	r6, #2
 800652a:	f040 80f0 	bne.w	800670e <lfs_file_rawopencfg+0x22a>
 800652e:	88a2      	ldrh	r2, [r4, #4]
 8006530:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006534:	429a      	cmp	r2, r3
 8006536:	f000 80ea 	beq.w	800670e <lfs_file_rawopencfg+0x22a>
    file->type = LFS_TYPE_REG;
 800653a:	2301      	movs	r3, #1
 800653c:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800653e:	4621      	mov	r1, r4
 8006540:	4638      	mov	r0, r7
 8006542:	f7fc f877 	bl	8002634 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 8006546:	f116 0f02 	cmn.w	r6, #2
 800654a:	d019      	beq.n	8006580 <lfs_file_rawopencfg+0x9c>
    } else if (flags & LFS_O_EXCL) {
 800654c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8006550:	f040 80db 	bne.w	800670a <lfs_file_rawopencfg+0x226>
    return (tag & 0x7ff00000) >> 20;
 8006554:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8006558:	2e01      	cmp	r6, #1
 800655a:	f040 80e4 	bne.w	8006726 <lfs_file_rawopencfg+0x242>
    } else if (flags & LFS_O_TRUNC) {
 800655e:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8006562:	d042      	beq.n	80065ea <lfs_file_rawopencfg+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8006564:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8006568:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800656c:	f049 5900 	orr.w	r9, r9, #536870912	; 0x20000000
 8006570:	f449 1980 	orr.w	r9, r9, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
 8006574:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800657a:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800657c:	2500      	movs	r5, #0
 800657e:	e064      	b.n	800664a <lfs_file_rawopencfg+0x166>
        if (!(flags & LFS_O_CREAT)) {
 8006580:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006584:	f000 80c3 	beq.w	800670e <lfs_file_rawopencfg+0x22a>
        lfs_size_t nlen = strlen(path);
 8006588:	9d03      	ldr	r5, [sp, #12]
 800658a:	4628      	mov	r0, r5
 800658c:	f7f9 fe28 	bl	80001e0 <strlen>
        if (nlen > lfs->name_max) {
 8006590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006592:	4283      	cmp	r3, r0
 8006594:	d202      	bcs.n	800659c <lfs_file_rawopencfg+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 8006596:	f06f 0623 	mvn.w	r6, #35	; 0x23
 800659a:	e0b8      	b.n	800670e <lfs_file_rawopencfg+0x22a>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800659c:	88a3      	ldrh	r3, [r4, #4]
 800659e:	029b      	lsls	r3, r3, #10
 80065a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80065a8:	9204      	str	r2, [sp, #16]
 80065aa:	2200      	movs	r2, #0
 80065ac:	9205      	str	r2, [sp, #20]
 80065ae:	4318      	orrs	r0, r3
 80065b0:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 80065b4:	9006      	str	r0, [sp, #24]
 80065b6:	9507      	str	r5, [sp, #28]
 80065b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065c0:	9308      	str	r3, [sp, #32]
 80065c2:	9209      	str	r2, [sp, #36]	; 0x24
 80065c4:	2303      	movs	r3, #3
 80065c6:	aa04      	add	r2, sp, #16
 80065c8:	4641      	mov	r1, r8
 80065ca:	4638      	mov	r0, r7
 80065cc:	f7ff fdf4 	bl	80061b8 <lfs_dir_commit>
 80065d0:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80065d2:	f110 0f1c 	cmn.w	r0, #28
 80065d6:	d005      	beq.n	80065e4 <lfs_file_rawopencfg+0x100>
        if (err) {
 80065d8:	2800      	cmp	r0, #0
 80065da:	f040 8098 	bne.w	800670e <lfs_file_rawopencfg+0x22a>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80065de:	f8df 915c 	ldr.w	r9, [pc, #348]	; 800673c <lfs_file_rawopencfg+0x258>
 80065e2:	e7cb      	b.n	800657c <lfs_file_rawopencfg+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80065e4:	f06f 0623 	mvn.w	r6, #35	; 0x23
            goto cleanup;
 80065e8:	e091      	b.n	800670e <lfs_file_rawopencfg+0x22a>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80065ea:	88a3      	ldrh	r3, [r4, #4]
 80065ec:	029b      	lsls	r3, r3, #10
 80065ee:	f104 0228 	add.w	r2, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80065f2:	9200      	str	r2, [sp, #0]
 80065f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065f8:	f043 0308 	orr.w	r3, r3, #8
 80065fc:	4a4d      	ldr	r2, [pc, #308]	; (8006734 <lfs_file_rawopencfg+0x250>)
 80065fe:	4641      	mov	r1, r8
 8006600:	4638      	mov	r0, r7
 8006602:	f7fd f9c1 	bl	8003988 <lfs_dir_get>
        if (tag < 0) {
 8006606:	f1b0 0900 	subs.w	r9, r0, #0
 800660a:	dab7      	bge.n	800657c <lfs_file_rawopencfg+0x98>
            err = tag;
 800660c:	464e      	mov	r6, r9
 800660e:	e07e      	b.n	800670e <lfs_file_rawopencfg+0x22a>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8006616:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800661a:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 800661e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8006622:	88a3      	ldrh	r3, [r4, #4]
 8006624:	029b      	lsls	r3, r3, #10
 8006626:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800662a:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800662c:	6849      	ldr	r1, [r1, #4]
 800662e:	9100      	str	r1, [sp, #0]
 8006630:	4313      	orrs	r3, r2
 8006632:	4a41      	ldr	r2, [pc, #260]	; (8006738 <lfs_file_rawopencfg+0x254>)
 8006634:	4641      	mov	r1, r8
 8006636:	4638      	mov	r0, r7
 8006638:	f7fd f9a6 	bl	8003988 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 800663c:	1e06      	subs	r6, r0, #0
 800663e:	da0c      	bge.n	800665a <lfs_file_rawopencfg+0x176>
 8006640:	f116 0f02 	cmn.w	r6, #2
 8006644:	d009      	beq.n	800665a <lfs_file_rawopencfg+0x176>
 8006646:	e062      	b.n	800670e <lfs_file_rawopencfg+0x22a>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8006648:	3501      	adds	r5, #1
 800664a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	42aa      	cmp	r2, r5
 8006650:	d915      	bls.n	800667e <lfs_file_rawopencfg+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8006652:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006654:	f012 0f01 	tst.w	r2, #1
 8006658:	d1da      	bne.n	8006610 <lfs_file_rawopencfg+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800665a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800665c:	f013 0f02 	tst.w	r3, #2
 8006660:	d0f2      	beq.n	8006648 <lfs_file_rawopencfg+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8006662:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006664:	6852      	ldr	r2, [r2, #4]
 8006666:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800666a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800666e:	6891      	ldr	r1, [r2, #8]
 8006670:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006672:	4291      	cmp	r1, r2
 8006674:	d85a      	bhi.n	800672c <lfs_file_rawopencfg+0x248>
            file->flags |= LFS_F_DIRTY;
 8006676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800667a:	6323      	str	r3, [r4, #48]	; 0x30
 800667c:	e7e4      	b.n	8006648 <lfs_file_rawopencfg+0x164>
    if (file->cfg->buffer) {
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	b18b      	cbz	r3, 80066a6 <lfs_file_rawopencfg+0x1c2>
        file->cache.buffer = file->cfg->buffer;
 8006682:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8006684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006686:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006688:	21ff      	movs	r1, #255	; 0xff
 800668a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800668c:	f000 fbcf 	bl	8006e2e <memset>
    pcache->block = LFS_BLOCK_NULL;
 8006690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006694:	6423      	str	r3, [r4, #64]	; 0x40
    return (tag & 0x7ff00000) >> 20;
 8006696:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800669a:	f240 2301 	movw	r3, #513	; 0x201
 800669e:	429a      	cmp	r2, r3
 80066a0:	d00b      	beq.n	80066ba <lfs_file_rawopencfg+0x1d6>
    return 0;
 80066a2:	2600      	movs	r6, #0
 80066a4:	e03b      	b.n	800671e <lfs_file_rawopencfg+0x23a>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80066a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    return malloc(size);
 80066a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80066aa:	f000 f9d5 	bl	8006a58 <malloc>
 80066ae:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d1e7      	bne.n	8006684 <lfs_file_rawopencfg+0x1a0>
            err = LFS_ERR_NOMEM;
 80066b4:	f06f 060b 	mvn.w	r6, #11
 80066b8:	e029      	b.n	800670e <lfs_file_rawopencfg+0x22a>
        file->ctz.head = LFS_BLOCK_INLINE;
 80066ba:	f06f 0101 	mvn.w	r1, #1
 80066be:	62a1      	str	r1, [r4, #40]	; 0x28
    return tag & 0x000003ff;
 80066c0:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 80066c4:	62e2      	str	r2, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80066c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066cc:	6323      	str	r3, [r4, #48]	; 0x30
        file->cache.block = file->ctz.head;
 80066ce:	6421      	str	r1, [r4, #64]	; 0x40
        file->cache.off = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80066d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	64a3      	str	r3, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
 80066da:	b90a      	cbnz	r2, 80066e0 <lfs_file_rawopencfg+0x1fc>
    return 0;
 80066dc:	2600      	movs	r6, #0
 80066de:	e01e      	b.n	800671e <lfs_file_rawopencfg+0x23a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80066e0:	88a2      	ldrh	r2, [r4, #4]
    return (a < b) ? a : b;
 80066e2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80066e6:	428b      	cmp	r3, r1
 80066e8:	bf28      	it	cs
 80066ea:	460b      	movcs	r3, r1
 80066ec:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
                    file->cache.buffer);
 80066f0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80066f2:	9200      	str	r2, [sp, #0]
 80066f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066f8:	4a0e      	ldr	r2, [pc, #56]	; (8006734 <lfs_file_rawopencfg+0x250>)
 80066fa:	4641      	mov	r1, r8
 80066fc:	4638      	mov	r0, r7
 80066fe:	f7fd f943 	bl	8003988 <lfs_dir_get>
            if (res < 0) {
 8006702:	1e06      	subs	r6, r0, #0
 8006704:	db03      	blt.n	800670e <lfs_file_rawopencfg+0x22a>
    return 0;
 8006706:	2600      	movs	r6, #0
 8006708:	e009      	b.n	800671e <lfs_file_rawopencfg+0x23a>
        err = LFS_ERR_EXIST;
 800670a:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 800670e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006714:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_rawclose(lfs, file);
 8006716:	4621      	mov	r1, r4
 8006718:	4638      	mov	r0, r7
 800671a:	f7ff fe65 	bl	80063e8 <lfs_file_rawclose>
}
 800671e:	4630      	mov	r0, r6
 8006720:	b00b      	add	sp, #44	; 0x2c
 8006722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 8006726:	f06f 0614 	mvn.w	r6, #20
 800672a:	e7f0      	b.n	800670e <lfs_file_rawopencfg+0x22a>
                err = LFS_ERR_NOSPC;
 800672c:	f06f 061b 	mvn.w	r6, #27
 8006730:	e7ed      	b.n	800670e <lfs_file_rawopencfg+0x22a>
 8006732:	bf00      	nop
 8006734:	700ffc00 	.word	0x700ffc00
 8006738:	7ffffc00 	.word	0x7ffffc00
 800673c:	20100000 	.word	0x20100000

08006740 <lfs_file_rawopen>:
        const char *path, int flags) {
 8006740:	b510      	push	{r4, lr}
 8006742:	b082      	sub	sp, #8
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8006744:	4c02      	ldr	r4, [pc, #8]	; (8006750 <lfs_file_rawopen+0x10>)
 8006746:	9400      	str	r4, [sp, #0]
 8006748:	f7ff fecc 	bl	80064e4 <lfs_file_rawopencfg>
}
 800674c:	b002      	add	sp, #8
 800674e:	bd10      	pop	{r4, pc}
 8006750:	080086d4 	.word	0x080086d4

08006754 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8006754:	b508      	push	{r3, lr}
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 8006756:	f7ff fe5b 	bl	8006410 <lfs_rawformat>

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 800675a:	bd08      	pop	{r3, pc}

0800675c <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800675c:	b508      	push	{r3, lr}
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800675e:	f7fe fb1b 	bl	8004d98 <lfs_rawmount>

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 8006762:	bd08      	pop	{r3, pc}

08006764 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	4604      	mov	r4, r0
 8006768:	460d      	mov	r5, r1
 800676a:	4616      	mov	r6, r2
 800676c:	461f      	mov	r7, r3
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800676e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006770:	f7fb ff49 	bl	8002606 <lfs_mlist_isopen>
 8006774:	b930      	cbnz	r0, 8006784 <lfs_file_open+0x20>

    err = lfs_file_rawopen(lfs, file, path, flags);
 8006776:	463b      	mov	r3, r7
 8006778:	4632      	mov	r2, r6
 800677a:	4629      	mov	r1, r5
 800677c:	4620      	mov	r0, r4
 800677e:	f7ff ffdf 	bl	8006740 <lfs_file_rawopen>

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8006782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006784:	4b03      	ldr	r3, [pc, #12]	; (8006794 <lfs_file_open+0x30>)
 8006786:	4a04      	ldr	r2, [pc, #16]	; (8006798 <lfs_file_open+0x34>)
 8006788:	f241 61ec 	movw	r1, #5868	; 0x16ec
 800678c:	4803      	ldr	r0, [pc, #12]	; (800679c <lfs_file_open+0x38>)
 800678e:	f000 f945 	bl	8006a1c <__assert_func>
 8006792:	bf00      	nop
 8006794:	08008530 	.word	0x08008530
 8006798:	080085b0 	.word	0x080085b0
 800679c:	08007ba4 	.word	0x08007ba4

080067a0 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4604      	mov	r4, r0
 80067a4:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80067a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80067a8:	f7fb ff2d 	bl	8002606 <lfs_mlist_isopen>
 80067ac:	b120      	cbz	r0, 80067b8 <lfs_file_close+0x18>

    err = lfs_file_rawclose(lfs, file);
 80067ae:	4629      	mov	r1, r5
 80067b0:	4620      	mov	r0, r4
 80067b2:	f7ff fe19 	bl	80063e8 <lfs_file_rawclose>

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 80067b6:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80067b8:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <lfs_file_close+0x28>)
 80067ba:	4a04      	ldr	r2, [pc, #16]	; (80067cc <lfs_file_close+0x2c>)
 80067bc:	f241 7110 	movw	r1, #5904	; 0x1710
 80067c0:	4803      	ldr	r0, [pc, #12]	; (80067d0 <lfs_file_close+0x30>)
 80067c2:	f000 f92b 	bl	8006a1c <__assert_func>
 80067c6:	bf00      	nop
 80067c8:	08008568 	.word	0x08008568
 80067cc:	080085a0 	.word	0x080085a0
 80067d0:	08007ba4 	.word	0x08007ba4

080067d4 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	4604      	mov	r4, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	4616      	mov	r6, r2
 80067dc:	461f      	mov	r7, r3
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80067de:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80067e0:	f7fb ff11 	bl	8002606 <lfs_mlist_isopen>
 80067e4:	b130      	cbz	r0, 80067f4 <lfs_file_read+0x20>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 80067e6:	463b      	mov	r3, r7
 80067e8:	4632      	mov	r2, r6
 80067ea:	4629      	mov	r1, r5
 80067ec:	4620      	mov	r0, r4
 80067ee:	f7fe f9f1 	bl	8004bd4 <lfs_file_rawread>

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 80067f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80067f4:	4b03      	ldr	r3, [pc, #12]	; (8006804 <lfs_file_read+0x30>)
 80067f6:	4a04      	ldr	r2, [pc, #16]	; (8006808 <lfs_file_read+0x34>)
 80067f8:	f241 7132 	movw	r1, #5938	; 0x1732
 80067fc:	4803      	ldr	r0, [pc, #12]	; (800680c <lfs_file_read+0x38>)
 80067fe:	f000 f90d 	bl	8006a1c <__assert_func>
 8006802:	bf00      	nop
 8006804:	08008568 	.word	0x08008568
 8006808:	080086c4 	.word	0x080086c4
 800680c:	08007ba4 	.word	0x08007ba4

08006810 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	4604      	mov	r4, r0
 8006814:	460d      	mov	r5, r1
 8006816:	4616      	mov	r6, r2
 8006818:	461f      	mov	r7, r3
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800681a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800681c:	f7fb fef3 	bl	8002606 <lfs_mlist_isopen>
 8006820:	b130      	cbz	r0, 8006830 <lfs_file_write+0x20>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8006822:	463b      	mov	r3, r7
 8006824:	4632      	mov	r2, r6
 8006826:	4629      	mov	r1, r5
 8006828:	4620      	mov	r0, r4
 800682a:	f7fe fa4d 	bl	8004cc8 <lfs_file_rawwrite>

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 800682e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006830:	4b03      	ldr	r3, [pc, #12]	; (8006840 <lfs_file_write+0x30>)
 8006832:	4a04      	ldr	r2, [pc, #16]	; (8006844 <lfs_file_write+0x34>)
 8006834:	f241 7144 	movw	r1, #5956	; 0x1744
 8006838:	4803      	ldr	r0, [pc, #12]	; (8006848 <lfs_file_write+0x38>)
 800683a:	f000 f8ef 	bl	8006a1c <__assert_func>
 800683e:	bf00      	nop
 8006840:	08008568 	.word	0x08008568
 8006844:	080086a0 	.word	0x080086a0
 8006848:	08007ba4 	.word	0x08007ba4

0800684c <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800684c:	b508      	push	{r3, lr}
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 800684e:	f7fe fa31 	bl	8004cb4 <lfs_file_rawrewind>

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8006852:	bd08      	pop	{r3, pc}

08006854 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 8006854:	f04f 0c00 	mov.w	ip, #0
 8006858:	4594      	cmp	ip, r2
 800685a:	d218      	bcs.n	800688e <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800685c:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800685e:	f811 300c 	ldrb.w	r3, [r1, ip]
 8006862:	ea83 0e00 	eor.w	lr, r3, r0
 8006866:	f00e 0e0f 	and.w	lr, lr, #15
 800686a:	4c09      	ldr	r4, [pc, #36]	; (8006890 <lfs_crc+0x3c>)
 800686c:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 8006870:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8006874:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 8006878:	f003 030f 	and.w	r3, r3, #15
 800687c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006880:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 8006884:	f10c 0c01 	add.w	ip, ip, #1
 8006888:	4594      	cmp	ip, r2
 800688a:	d3e8      	bcc.n	800685e <lfs_crc+0xa>
    }

    return crc;
}
 800688c:	bd30      	pop	{r4, r5, pc}
 800688e:	4770      	bx	lr
 8006890:	080086e0 	.word	0x080086e0

08006894 <m24cxx_isconnected>:
        return M24CXX_Err;

    return M24CXX_Ok;
}

M24CXX_StatusTypeDef m24cxx_isconnected(M24CXX_HandleTypeDef *m24cxx) {
 8006894:	b508      	push	{r3, lr}

    if (HAL_I2C_IsDeviceReady(m24cxx->i2c, m24cxx->i2c_address << 1, 2, HAL_MAX_DELAY) != HAL_OK) {
 8006896:	7901      	ldrb	r1, [r0, #4]
 8006898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800689c:	2202      	movs	r2, #2
 800689e:	0049      	lsls	r1, r1, #1
 80068a0:	6800      	ldr	r0, [r0, #0]
 80068a2:	f7fb f95b 	bl	8001b5c <HAL_I2C_IsDeviceReady>
 80068a6:	b900      	cbnz	r0, 80068aa <m24cxx_isconnected+0x16>
        return M24CXX_Err;
    }

    return M24CXX_Ok;
}
 80068a8:	bd08      	pop	{r3, pc}
        return M24CXX_Err;
 80068aa:	2001      	movs	r0, #1
 80068ac:	e7fc      	b.n	80068a8 <m24cxx_isconnected+0x14>

080068ae <m24cxx_init>:
M24CXX_StatusTypeDef m24cxx_init(M24CXX_HandleTypeDef *m24cxx, I2C_HandleTypeDef *i2c, uint8_t i2c_address) {
 80068ae:	b508      	push	{r3, lr}
    m24cxx->i2c = i2c;
 80068b0:	6001      	str	r1, [r0, #0]
    m24cxx->i2c_address = i2c_address;
 80068b2:	7102      	strb	r2, [r0, #4]
    if (m24cxx_isconnected(m24cxx) != M24CXX_Ok)
 80068b4:	f7ff ffee 	bl	8006894 <m24cxx_isconnected>
 80068b8:	b900      	cbnz	r0, 80068bc <m24cxx_init+0xe>
}
 80068ba:	bd08      	pop	{r3, pc}
        return M24CXX_Err;
 80068bc:	2001      	movs	r0, #1
 80068be:	e7fc      	b.n	80068ba <m24cxx_init+0xc>

080068c0 <m24cxx_wait>:

M24CXX_StatusTypeDef m24cxx_wait(M24CXX_HandleTypeDef *m24cxx) {
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4604      	mov	r4, r0
    uint32_t start_time = HAL_GetTick();
 80068c4:	f7fa fa74 	bl	8000db0 <HAL_GetTick>
 80068c8:	4605      	mov	r5, r0
    while (m24cxx_isconnected(m24cxx) != M24CXX_Ok) {
 80068ca:	4620      	mov	r0, r4
 80068cc:	f7ff ffe2 	bl	8006894 <m24cxx_isconnected>
 80068d0:	4603      	mov	r3, r0
 80068d2:	b128      	cbz	r0, 80068e0 <m24cxx_wait+0x20>
        if (HAL_GetTick() - start_time >= M24CXX_WRITE_TIMEOUT)
 80068d4:	f7fa fa6c 	bl	8000db0 <HAL_GetTick>
 80068d8:	1b43      	subs	r3, r0, r5
 80068da:	2b63      	cmp	r3, #99	; 0x63
 80068dc:	d9f5      	bls.n	80068ca <m24cxx_wait+0xa>
            return M24CXX_Err;
 80068de:	2301      	movs	r3, #1
    }
    return M24CXX_Ok;
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	bd38      	pop	{r3, r4, r5, pc}

080068e4 <m24cxx_read>:

M24CXX_StatusTypeDef m24cxx_read(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 80068e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	b087      	sub	sp, #28
 80068ea:	4680      	mov	r8, r0
 80068ec:	9105      	str	r1, [sp, #20]
 80068ee:	4692      	mov	sl, r2
 80068f0:	469b      	mov	fp, r3

    M24CXXDBG("M24CXX read - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_READ_PAGE_SIZE;
 80068f2:	ea4f 2911 	mov.w	r9, r1, lsr #8
    uint32_t page_end = ((address + len - 1) / M24CXX_READ_PAGE_SIZE);
 80068f6:	18cf      	adds	r7, r1, r3
 80068f8:	3f01      	subs	r7, #1
 80068fa:	0a3f      	lsrs	r7, r7, #8
    uint32_t data_offset = 0;

    M24CXXDBG("Reading %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);

    for (uint32_t page = page_start; page <= page_end; ++page) {
 80068fc:	464c      	mov	r4, r9
    uint32_t data_offset = 0;
 80068fe:	2600      	movs	r6, #0
    for (uint32_t page = page_start; page <= page_end; ++page) {
 8006900:	e01a      	b.n	8006938 <m24cxx_read+0x54>

        uint32_t i2c_address, start_address, read_len;

        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 8006902:	9a05      	ldr	r2, [sp, #20]
 8006904:	e01d      	b.n	8006942 <m24cxx_read+0x5e>
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 8006906:	ebab 0506 	sub.w	r5, fp, r6
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 800690a:	f898 1004 	ldrb.w	r1, [r8, #4]
 800690e:	eb01 2112 	add.w	r1, r1, r2, lsr #8

        M24CXXDBG("Reading page %lu, i2c address = 0x%02lx start = 0x%04lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address & M24CXX_ADDRESS_MASK, read_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Read(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, read_len, HAL_MAX_DELAY);
 8006912:	0049      	lsls	r1, r1, #1
 8006914:	b289      	uxth	r1, r1
 8006916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800691a:	9302      	str	r3, [sp, #8]
 800691c:	b2ab      	uxth	r3, r5
 800691e:	9301      	str	r3, [sp, #4]
 8006920:	eb0a 0306 	add.w	r3, sl, r6
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	2301      	movs	r3, #1
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	f8d8 0000 	ldr.w	r0, [r8]
 800692e:	f7fa ffa3 	bl	8001878 <HAL_I2C_Mem_Read>

        if (result != HAL_OK) {
 8006932:	b9a8      	cbnz	r0, 8006960 <m24cxx_read+0x7c>
            M24CXXDBG("Failed to read memory");
            return M24CXX_Err;
        }

        data_offset += read_len;
 8006934:	442e      	add	r6, r5
    for (uint32_t page = page_start; page <= page_end; ++page) {
 8006936:	3401      	adds	r4, #1
 8006938:	42bc      	cmp	r4, r7
 800693a:	d80d      	bhi.n	8006958 <m24cxx_read+0x74>
        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 800693c:	454c      	cmp	r4, r9
 800693e:	d0e0      	beq.n	8006902 <m24cxx_read+0x1e>
 8006940:	0222      	lsls	r2, r4, #8
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 8006942:	42bc      	cmp	r4, r7
 8006944:	d0df      	beq.n	8006906 <m24cxx_read+0x22>
 8006946:	454c      	cmp	r4, r9
 8006948:	d002      	beq.n	8006950 <m24cxx_read+0x6c>
 800694a:	f44f 7580 	mov.w	r5, #256	; 0x100
 800694e:	e7dc      	b.n	800690a <m24cxx_read+0x26>
 8006950:	1c65      	adds	r5, r4, #1
 8006952:	ebc2 2505 	rsb	r5, r2, r5, lsl #8
 8006956:	e7d8      	b.n	800690a <m24cxx_read+0x26>

    }

    return M24CXX_Ok;
 8006958:	2000      	movs	r0, #0
}
 800695a:	b007      	add	sp, #28
 800695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return M24CXX_Err;
 8006960:	2001      	movs	r0, #1
 8006962:	e7fa      	b.n	800695a <m24cxx_read+0x76>

08006964 <m24cxx_write>:

M24CXX_StatusTypeDef m24cxx_write(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 8006964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	b087      	sub	sp, #28
 800696a:	4606      	mov	r6, r0
 800696c:	9105      	str	r1, [sp, #20]
 800696e:	4692      	mov	sl, r2
 8006970:	469b      	mov	fp, r3

    M24CXXDBG("M24CXX write - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_WRITE_PAGE_SIZE;
 8006972:	ea4f 1911 	mov.w	r9, r1, lsr #4
    uint32_t page_end = ((address + len - 1) / M24CXX_WRITE_PAGE_SIZE);
 8006976:	eb01 0803 	add.w	r8, r1, r3
 800697a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800697e:	ea4f 1818 	mov.w	r8, r8, lsr #4

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_RESET);
#endif

    for (uint32_t page = page_start; page <= page_end; ++page) {
 8006982:	464c      	mov	r4, r9
    uint32_t data_offset = 0;
 8006984:	2700      	movs	r7, #0
    for (uint32_t page = page_start; page <= page_end; ++page) {
 8006986:	e01c      	b.n	80069c2 <m24cxx_write+0x5e>

        uint32_t i2c_address, start_address, write_len;

        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 8006988:	9a05      	ldr	r2, [sp, #20]
 800698a:	e01f      	b.n	80069cc <m24cxx_write+0x68>
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 800698c:	ebab 0507 	sub.w	r5, fp, r7
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 8006990:	7931      	ldrb	r1, [r6, #4]
 8006992:	eb01 2112 	add.w	r1, r1, r2, lsr #8

        M24CXXDBG("Writing page %lu, i2c address = 0x%02lx start = 0x%04lx len masked = 0x%04lx = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address, start_address & M24CXX_ADDRESS_MASK, write_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Write(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, write_len, HAL_MAX_DELAY);
 8006996:	0049      	lsls	r1, r1, #1
 8006998:	b289      	uxth	r1, r1
 800699a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800699e:	9302      	str	r3, [sp, #8]
 80069a0:	b2ab      	uxth	r3, r5
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	eb0a 0307 	add.w	r3, sl, r7
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	2301      	movs	r3, #1
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	6830      	ldr	r0, [r6, #0]
 80069b0:	f7fa feb0 	bl	8001714 <HAL_I2C_Mem_Write>

        if (result != HAL_OK) {
 80069b4:	b9c0      	cbnz	r0, 80069e8 <m24cxx_write+0x84>
            M24CXXDBG("Failed to write memory");
            return M24CXX_Err;
        }

        data_offset += write_len;
 80069b6:	442f      	add	r7, r5

        if (m24cxx_wait(m24cxx) != M24CXX_Ok) {
 80069b8:	4630      	mov	r0, r6
 80069ba:	f7ff ff81 	bl	80068c0 <m24cxx_wait>
 80069be:	b9a8      	cbnz	r0, 80069ec <m24cxx_write+0x88>
    for (uint32_t page = page_start; page <= page_end; ++page) {
 80069c0:	3401      	adds	r4, #1
 80069c2:	4544      	cmp	r4, r8
 80069c4:	d80c      	bhi.n	80069e0 <m24cxx_write+0x7c>
        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 80069c6:	454c      	cmp	r4, r9
 80069c8:	d0de      	beq.n	8006988 <m24cxx_write+0x24>
 80069ca:	0122      	lsls	r2, r4, #4
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 80069cc:	4544      	cmp	r4, r8
 80069ce:	d0dd      	beq.n	800698c <m24cxx_write+0x28>
 80069d0:	454c      	cmp	r4, r9
 80069d2:	d001      	beq.n	80069d8 <m24cxx_write+0x74>
 80069d4:	2510      	movs	r5, #16
 80069d6:	e7db      	b.n	8006990 <m24cxx_write+0x2c>
 80069d8:	1c65      	adds	r5, r4, #1
 80069da:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80069de:	e7d7      	b.n	8006990 <m24cxx_write+0x2c>

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
#endif

    return M24CXX_Ok;
 80069e0:	2000      	movs	r0, #0
}
 80069e2:	b007      	add	sp, #28
 80069e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return M24CXX_Err;
 80069e8:	2001      	movs	r0, #1
 80069ea:	e7fa      	b.n	80069e2 <m24cxx_write+0x7e>
            return M24CXX_Err;
 80069ec:	2001      	movs	r0, #1
 80069ee:	e7f8      	b.n	80069e2 <m24cxx_write+0x7e>

080069f0 <m24cxx_erase>:

M24CXX_StatusTypeDef m24cxx_erase(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint32_t len) {
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	4605      	mov	r5, r0
 80069f6:	460e      	mov	r6, r1
 80069f8:	4614      	mov	r4, r2

    M24CXXDBG("M24CXX erase - address = 0x%04lx len = 0x%04lx", address, len);

    uint8_t buf[len];
 80069fa:	1dd3      	adds	r3, r2, #7
 80069fc:	f023 0307 	bic.w	r3, r3, #7
 8006a00:	ebad 0d03 	sub.w	sp, sp, r3

    memset(buf, 0xff, len);
 8006a04:	21ff      	movs	r1, #255	; 0xff
 8006a06:	4668      	mov	r0, sp
 8006a08:	f000 fa11 	bl	8006e2e <memset>

    M24CXX_StatusTypeDef result = m24cxx_write(m24cxx, address, (uint8_t*) &buf, len);
 8006a0c:	4623      	mov	r3, r4
 8006a0e:	466a      	mov	r2, sp
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7ff ffa6 	bl	8006964 <m24cxx_write>
    if (result != M24CXX_Ok)
        return result;

    return M24CXX_Ok;
}
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a1c <__assert_func>:
 8006a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a1e:	4614      	mov	r4, r2
 8006a20:	461a      	mov	r2, r3
 8006a22:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <__assert_func+0x2c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4605      	mov	r5, r0
 8006a28:	68d8      	ldr	r0, [r3, #12]
 8006a2a:	b14c      	cbz	r4, 8006a40 <__assert_func+0x24>
 8006a2c:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <__assert_func+0x30>)
 8006a2e:	9100      	str	r1, [sp, #0]
 8006a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a34:	4906      	ldr	r1, [pc, #24]	; (8006a50 <__assert_func+0x34>)
 8006a36:	462b      	mov	r3, r5
 8006a38:	f000 f95c 	bl	8006cf4 <fiprintf>
 8006a3c:	f000 fabe 	bl	8006fbc <abort>
 8006a40:	4b04      	ldr	r3, [pc, #16]	; (8006a54 <__assert_func+0x38>)
 8006a42:	461c      	mov	r4, r3
 8006a44:	e7f3      	b.n	8006a2e <__assert_func+0x12>
 8006a46:	bf00      	nop
 8006a48:	200000b0 	.word	0x200000b0
 8006a4c:	08008720 	.word	0x08008720
 8006a50:	0800872d 	.word	0x0800872d
 8006a54:	0800875b 	.word	0x0800875b

08006a58 <malloc>:
 8006a58:	4b02      	ldr	r3, [pc, #8]	; (8006a64 <malloc+0xc>)
 8006a5a:	4601      	mov	r1, r0
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	f000 b82b 	b.w	8006ab8 <_malloc_r>
 8006a62:	bf00      	nop
 8006a64:	200000b0 	.word	0x200000b0

08006a68 <free>:
 8006a68:	4b02      	ldr	r3, [pc, #8]	; (8006a74 <free+0xc>)
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	f000 baad 	b.w	8006fcc <_free_r>
 8006a72:	bf00      	nop
 8006a74:	200000b0 	.word	0x200000b0

08006a78 <sbrk_aligned>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	4e0e      	ldr	r6, [pc, #56]	; (8006ab4 <sbrk_aligned+0x3c>)
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	6831      	ldr	r1, [r6, #0]
 8006a80:	4605      	mov	r5, r0
 8006a82:	b911      	cbnz	r1, 8006a8a <sbrk_aligned+0x12>
 8006a84:	f000 fa3e 	bl	8006f04 <_sbrk_r>
 8006a88:	6030      	str	r0, [r6, #0]
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f000 fa39 	bl	8006f04 <_sbrk_r>
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	d00a      	beq.n	8006aac <sbrk_aligned+0x34>
 8006a96:	1cc4      	adds	r4, r0, #3
 8006a98:	f024 0403 	bic.w	r4, r4, #3
 8006a9c:	42a0      	cmp	r0, r4
 8006a9e:	d007      	beq.n	8006ab0 <sbrk_aligned+0x38>
 8006aa0:	1a21      	subs	r1, r4, r0
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	f000 fa2e 	bl	8006f04 <_sbrk_r>
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d101      	bne.n	8006ab0 <sbrk_aligned+0x38>
 8006aac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	20000250 	.word	0x20000250

08006ab8 <_malloc_r>:
 8006ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006abc:	1ccd      	adds	r5, r1, #3
 8006abe:	f025 0503 	bic.w	r5, r5, #3
 8006ac2:	3508      	adds	r5, #8
 8006ac4:	2d0c      	cmp	r5, #12
 8006ac6:	bf38      	it	cc
 8006ac8:	250c      	movcc	r5, #12
 8006aca:	2d00      	cmp	r5, #0
 8006acc:	4607      	mov	r7, r0
 8006ace:	db01      	blt.n	8006ad4 <_malloc_r+0x1c>
 8006ad0:	42a9      	cmp	r1, r5
 8006ad2:	d905      	bls.n	8006ae0 <_malloc_r+0x28>
 8006ad4:	230c      	movs	r3, #12
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	2600      	movs	r6, #0
 8006ada:	4630      	mov	r0, r6
 8006adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006bb4 <_malloc_r+0xfc>
 8006ae4:	f000 f868 	bl	8006bb8 <__malloc_lock>
 8006ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8006aec:	461c      	mov	r4, r3
 8006aee:	bb5c      	cbnz	r4, 8006b48 <_malloc_r+0x90>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4638      	mov	r0, r7
 8006af4:	f7ff ffc0 	bl	8006a78 <sbrk_aligned>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	4604      	mov	r4, r0
 8006afc:	d155      	bne.n	8006baa <_malloc_r+0xf2>
 8006afe:	f8d8 4000 	ldr.w	r4, [r8]
 8006b02:	4626      	mov	r6, r4
 8006b04:	2e00      	cmp	r6, #0
 8006b06:	d145      	bne.n	8006b94 <_malloc_r+0xdc>
 8006b08:	2c00      	cmp	r4, #0
 8006b0a:	d048      	beq.n	8006b9e <_malloc_r+0xe6>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4638      	mov	r0, r7
 8006b12:	eb04 0903 	add.w	r9, r4, r3
 8006b16:	f000 f9f5 	bl	8006f04 <_sbrk_r>
 8006b1a:	4581      	cmp	r9, r0
 8006b1c:	d13f      	bne.n	8006b9e <_malloc_r+0xe6>
 8006b1e:	6821      	ldr	r1, [r4, #0]
 8006b20:	1a6d      	subs	r5, r5, r1
 8006b22:	4629      	mov	r1, r5
 8006b24:	4638      	mov	r0, r7
 8006b26:	f7ff ffa7 	bl	8006a78 <sbrk_aligned>
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d037      	beq.n	8006b9e <_malloc_r+0xe6>
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	442b      	add	r3, r5
 8006b32:	6023      	str	r3, [r4, #0]
 8006b34:	f8d8 3000 	ldr.w	r3, [r8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d038      	beq.n	8006bae <_malloc_r+0xf6>
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	42a2      	cmp	r2, r4
 8006b40:	d12b      	bne.n	8006b9a <_malloc_r+0xe2>
 8006b42:	2200      	movs	r2, #0
 8006b44:	605a      	str	r2, [r3, #4]
 8006b46:	e00f      	b.n	8006b68 <_malloc_r+0xb0>
 8006b48:	6822      	ldr	r2, [r4, #0]
 8006b4a:	1b52      	subs	r2, r2, r5
 8006b4c:	d41f      	bmi.n	8006b8e <_malloc_r+0xd6>
 8006b4e:	2a0b      	cmp	r2, #11
 8006b50:	d917      	bls.n	8006b82 <_malloc_r+0xca>
 8006b52:	1961      	adds	r1, r4, r5
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	6025      	str	r5, [r4, #0]
 8006b58:	bf18      	it	ne
 8006b5a:	6059      	strne	r1, [r3, #4]
 8006b5c:	6863      	ldr	r3, [r4, #4]
 8006b5e:	bf08      	it	eq
 8006b60:	f8c8 1000 	streq.w	r1, [r8]
 8006b64:	5162      	str	r2, [r4, r5]
 8006b66:	604b      	str	r3, [r1, #4]
 8006b68:	4638      	mov	r0, r7
 8006b6a:	f104 060b 	add.w	r6, r4, #11
 8006b6e:	f000 f829 	bl	8006bc4 <__malloc_unlock>
 8006b72:	f026 0607 	bic.w	r6, r6, #7
 8006b76:	1d23      	adds	r3, r4, #4
 8006b78:	1af2      	subs	r2, r6, r3
 8006b7a:	d0ae      	beq.n	8006ada <_malloc_r+0x22>
 8006b7c:	1b9b      	subs	r3, r3, r6
 8006b7e:	50a3      	str	r3, [r4, r2]
 8006b80:	e7ab      	b.n	8006ada <_malloc_r+0x22>
 8006b82:	42a3      	cmp	r3, r4
 8006b84:	6862      	ldr	r2, [r4, #4]
 8006b86:	d1dd      	bne.n	8006b44 <_malloc_r+0x8c>
 8006b88:	f8c8 2000 	str.w	r2, [r8]
 8006b8c:	e7ec      	b.n	8006b68 <_malloc_r+0xb0>
 8006b8e:	4623      	mov	r3, r4
 8006b90:	6864      	ldr	r4, [r4, #4]
 8006b92:	e7ac      	b.n	8006aee <_malloc_r+0x36>
 8006b94:	4634      	mov	r4, r6
 8006b96:	6876      	ldr	r6, [r6, #4]
 8006b98:	e7b4      	b.n	8006b04 <_malloc_r+0x4c>
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	e7cc      	b.n	8006b38 <_malloc_r+0x80>
 8006b9e:	230c      	movs	r3, #12
 8006ba0:	603b      	str	r3, [r7, #0]
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	f000 f80e 	bl	8006bc4 <__malloc_unlock>
 8006ba8:	e797      	b.n	8006ada <_malloc_r+0x22>
 8006baa:	6025      	str	r5, [r4, #0]
 8006bac:	e7dc      	b.n	8006b68 <_malloc_r+0xb0>
 8006bae:	605b      	str	r3, [r3, #4]
 8006bb0:	deff      	udf	#255	; 0xff
 8006bb2:	bf00      	nop
 8006bb4:	2000024c 	.word	0x2000024c

08006bb8 <__malloc_lock>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <__malloc_lock+0x8>)
 8006bba:	f000 b9ef 	b.w	8006f9c <__retarget_lock_acquire_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	20000394 	.word	0x20000394

08006bc4 <__malloc_unlock>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <__malloc_unlock+0x8>)
 8006bc6:	f000 b9ea 	b.w	8006f9e <__retarget_lock_release_recursive>
 8006bca:	bf00      	nop
 8006bcc:	20000394 	.word	0x20000394

08006bd0 <std>:
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	b510      	push	{r4, lr}
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8006bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bde:	6083      	str	r3, [r0, #8]
 8006be0:	8181      	strh	r1, [r0, #12]
 8006be2:	6643      	str	r3, [r0, #100]	; 0x64
 8006be4:	81c2      	strh	r2, [r0, #14]
 8006be6:	6183      	str	r3, [r0, #24]
 8006be8:	4619      	mov	r1, r3
 8006bea:	2208      	movs	r2, #8
 8006bec:	305c      	adds	r0, #92	; 0x5c
 8006bee:	f000 f91e 	bl	8006e2e <memset>
 8006bf2:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <std+0x38>)
 8006bf4:	6263      	str	r3, [r4, #36]	; 0x24
 8006bf6:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <std+0x3c>)
 8006bf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <std+0x40>)
 8006bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bfe:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <std+0x44>)
 8006c00:	6224      	str	r4, [r4, #32]
 8006c02:	6323      	str	r3, [r4, #48]	; 0x30
 8006c04:	bd10      	pop	{r4, pc}
 8006c06:	bf00      	nop
 8006c08:	08006d89 	.word	0x08006d89
 8006c0c:	08006dab 	.word	0x08006dab
 8006c10:	08006de3 	.word	0x08006de3
 8006c14:	08006e07 	.word	0x08006e07

08006c18 <stdio_exit_handler>:
 8006c18:	4a02      	ldr	r2, [pc, #8]	; (8006c24 <stdio_exit_handler+0xc>)
 8006c1a:	4903      	ldr	r1, [pc, #12]	; (8006c28 <stdio_exit_handler+0x10>)
 8006c1c:	4803      	ldr	r0, [pc, #12]	; (8006c2c <stdio_exit_handler+0x14>)
 8006c1e:	f000 b87b 	b.w	8006d18 <_fwalk_sglue>
 8006c22:	bf00      	nop
 8006c24:	20000058 	.word	0x20000058
 8006c28:	08007719 	.word	0x08007719
 8006c2c:	20000064 	.word	0x20000064

08006c30 <cleanup_stdio>:
 8006c30:	6841      	ldr	r1, [r0, #4]
 8006c32:	4b0c      	ldr	r3, [pc, #48]	; (8006c64 <cleanup_stdio+0x34>)
 8006c34:	4299      	cmp	r1, r3
 8006c36:	b510      	push	{r4, lr}
 8006c38:	4604      	mov	r4, r0
 8006c3a:	d001      	beq.n	8006c40 <cleanup_stdio+0x10>
 8006c3c:	f000 fd6c 	bl	8007718 <_fflush_r>
 8006c40:	68a1      	ldr	r1, [r4, #8]
 8006c42:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <cleanup_stdio+0x38>)
 8006c44:	4299      	cmp	r1, r3
 8006c46:	d002      	beq.n	8006c4e <cleanup_stdio+0x1e>
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f000 fd65 	bl	8007718 <_fflush_r>
 8006c4e:	68e1      	ldr	r1, [r4, #12]
 8006c50:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <cleanup_stdio+0x3c>)
 8006c52:	4299      	cmp	r1, r3
 8006c54:	d004      	beq.n	8006c60 <cleanup_stdio+0x30>
 8006c56:	4620      	mov	r0, r4
 8006c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c5c:	f000 bd5c 	b.w	8007718 <_fflush_r>
 8006c60:	bd10      	pop	{r4, pc}
 8006c62:	bf00      	nop
 8006c64:	20000254 	.word	0x20000254
 8006c68:	200002bc 	.word	0x200002bc
 8006c6c:	20000324 	.word	0x20000324

08006c70 <global_stdio_init.part.0>:
 8006c70:	b510      	push	{r4, lr}
 8006c72:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <global_stdio_init.part.0+0x30>)
 8006c74:	4c0b      	ldr	r4, [pc, #44]	; (8006ca4 <global_stdio_init.part.0+0x34>)
 8006c76:	4a0c      	ldr	r2, [pc, #48]	; (8006ca8 <global_stdio_init.part.0+0x38>)
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2104      	movs	r1, #4
 8006c80:	f7ff ffa6 	bl	8006bd0 <std>
 8006c84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c88:	2201      	movs	r2, #1
 8006c8a:	2109      	movs	r1, #9
 8006c8c:	f7ff ffa0 	bl	8006bd0 <std>
 8006c90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c94:	2202      	movs	r2, #2
 8006c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c9a:	2112      	movs	r1, #18
 8006c9c:	f7ff bf98 	b.w	8006bd0 <std>
 8006ca0:	2000038c 	.word	0x2000038c
 8006ca4:	20000254 	.word	0x20000254
 8006ca8:	08006c19 	.word	0x08006c19

08006cac <__sfp_lock_acquire>:
 8006cac:	4801      	ldr	r0, [pc, #4]	; (8006cb4 <__sfp_lock_acquire+0x8>)
 8006cae:	f000 b975 	b.w	8006f9c <__retarget_lock_acquire_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	20000395 	.word	0x20000395

08006cb8 <__sfp_lock_release>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	; (8006cc0 <__sfp_lock_release+0x8>)
 8006cba:	f000 b970 	b.w	8006f9e <__retarget_lock_release_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	20000395 	.word	0x20000395

08006cc4 <__sinit>:
 8006cc4:	b510      	push	{r4, lr}
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	f7ff fff0 	bl	8006cac <__sfp_lock_acquire>
 8006ccc:	6a23      	ldr	r3, [r4, #32]
 8006cce:	b11b      	cbz	r3, 8006cd8 <__sinit+0x14>
 8006cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd4:	f7ff bff0 	b.w	8006cb8 <__sfp_lock_release>
 8006cd8:	4b04      	ldr	r3, [pc, #16]	; (8006cec <__sinit+0x28>)
 8006cda:	6223      	str	r3, [r4, #32]
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <__sinit+0x2c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1f5      	bne.n	8006cd0 <__sinit+0xc>
 8006ce4:	f7ff ffc4 	bl	8006c70 <global_stdio_init.part.0>
 8006ce8:	e7f2      	b.n	8006cd0 <__sinit+0xc>
 8006cea:	bf00      	nop
 8006cec:	08006c31 	.word	0x08006c31
 8006cf0:	2000038c 	.word	0x2000038c

08006cf4 <fiprintf>:
 8006cf4:	b40e      	push	{r1, r2, r3}
 8006cf6:	b503      	push	{r0, r1, lr}
 8006cf8:	4601      	mov	r1, r0
 8006cfa:	ab03      	add	r3, sp, #12
 8006cfc:	4805      	ldr	r0, [pc, #20]	; (8006d14 <fiprintf+0x20>)
 8006cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d02:	6800      	ldr	r0, [r0, #0]
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	f000 f9d7 	bl	80070b8 <_vfiprintf_r>
 8006d0a:	b002      	add	sp, #8
 8006d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d10:	b003      	add	sp, #12
 8006d12:	4770      	bx	lr
 8006d14:	200000b0 	.word	0x200000b0

08006d18 <_fwalk_sglue>:
 8006d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	4688      	mov	r8, r1
 8006d20:	4614      	mov	r4, r2
 8006d22:	2600      	movs	r6, #0
 8006d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d28:	f1b9 0901 	subs.w	r9, r9, #1
 8006d2c:	d505      	bpl.n	8006d3a <_fwalk_sglue+0x22>
 8006d2e:	6824      	ldr	r4, [r4, #0]
 8006d30:	2c00      	cmp	r4, #0
 8006d32:	d1f7      	bne.n	8006d24 <_fwalk_sglue+0xc>
 8006d34:	4630      	mov	r0, r6
 8006d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d3a:	89ab      	ldrh	r3, [r5, #12]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d907      	bls.n	8006d50 <_fwalk_sglue+0x38>
 8006d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d44:	3301      	adds	r3, #1
 8006d46:	d003      	beq.n	8006d50 <_fwalk_sglue+0x38>
 8006d48:	4629      	mov	r1, r5
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	47c0      	blx	r8
 8006d4e:	4306      	orrs	r6, r0
 8006d50:	3568      	adds	r5, #104	; 0x68
 8006d52:	e7e9      	b.n	8006d28 <_fwalk_sglue+0x10>

08006d54 <iprintf>:
 8006d54:	b40f      	push	{r0, r1, r2, r3}
 8006d56:	b507      	push	{r0, r1, r2, lr}
 8006d58:	4906      	ldr	r1, [pc, #24]	; (8006d74 <iprintf+0x20>)
 8006d5a:	ab04      	add	r3, sp, #16
 8006d5c:	6808      	ldr	r0, [r1, #0]
 8006d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d62:	6881      	ldr	r1, [r0, #8]
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	f000 f9a7 	bl	80070b8 <_vfiprintf_r>
 8006d6a:	b003      	add	sp, #12
 8006d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d70:	b004      	add	sp, #16
 8006d72:	4770      	bx	lr
 8006d74:	200000b0 	.word	0x200000b0

08006d78 <putchar>:
 8006d78:	4b02      	ldr	r3, [pc, #8]	; (8006d84 <putchar+0xc>)
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	6882      	ldr	r2, [r0, #8]
 8006d80:	f000 bcf2 	b.w	8007768 <_putc_r>
 8006d84:	200000b0 	.word	0x200000b0

08006d88 <__sread>:
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d90:	f000 f8a6 	bl	8006ee0 <_read_r>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	bfab      	itete	ge
 8006d98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d9c:	181b      	addge	r3, r3, r0
 8006d9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006da2:	bfac      	ite	ge
 8006da4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006da6:	81a3      	strhlt	r3, [r4, #12]
 8006da8:	bd10      	pop	{r4, pc}

08006daa <__swrite>:
 8006daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dae:	461f      	mov	r7, r3
 8006db0:	898b      	ldrh	r3, [r1, #12]
 8006db2:	05db      	lsls	r3, r3, #23
 8006db4:	4605      	mov	r5, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	4616      	mov	r6, r2
 8006dba:	d505      	bpl.n	8006dc8 <__swrite+0x1e>
 8006dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f000 f87a 	bl	8006ebc <_lseek_r>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	4632      	mov	r2, r6
 8006dd6:	463b      	mov	r3, r7
 8006dd8:	4628      	mov	r0, r5
 8006dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dde:	f000 b8a1 	b.w	8006f24 <_write_r>

08006de2 <__sseek>:
 8006de2:	b510      	push	{r4, lr}
 8006de4:	460c      	mov	r4, r1
 8006de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dea:	f000 f867 	bl	8006ebc <_lseek_r>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	bf15      	itete	ne
 8006df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dfe:	81a3      	strheq	r3, [r4, #12]
 8006e00:	bf18      	it	ne
 8006e02:	81a3      	strhne	r3, [r4, #12]
 8006e04:	bd10      	pop	{r4, pc}

08006e06 <__sclose>:
 8006e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0a:	f000 b847 	b.w	8006e9c <_close_r>

08006e0e <memcmp>:
 8006e0e:	b510      	push	{r4, lr}
 8006e10:	3901      	subs	r1, #1
 8006e12:	4402      	add	r2, r0
 8006e14:	4290      	cmp	r0, r2
 8006e16:	d101      	bne.n	8006e1c <memcmp+0xe>
 8006e18:	2000      	movs	r0, #0
 8006e1a:	e005      	b.n	8006e28 <memcmp+0x1a>
 8006e1c:	7803      	ldrb	r3, [r0, #0]
 8006e1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e22:	42a3      	cmp	r3, r4
 8006e24:	d001      	beq.n	8006e2a <memcmp+0x1c>
 8006e26:	1b18      	subs	r0, r3, r4
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	e7f2      	b.n	8006e14 <memcmp+0x6>

08006e2e <memset>:
 8006e2e:	4402      	add	r2, r0
 8006e30:	4603      	mov	r3, r0
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d100      	bne.n	8006e38 <memset+0xa>
 8006e36:	4770      	bx	lr
 8006e38:	f803 1b01 	strb.w	r1, [r3], #1
 8006e3c:	e7f9      	b.n	8006e32 <memset+0x4>

08006e3e <strchr>:
 8006e3e:	b2c9      	uxtb	r1, r1
 8006e40:	4603      	mov	r3, r0
 8006e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e46:	b11a      	cbz	r2, 8006e50 <strchr+0x12>
 8006e48:	428a      	cmp	r2, r1
 8006e4a:	d1f9      	bne.n	8006e40 <strchr+0x2>
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	4770      	bx	lr
 8006e50:	2900      	cmp	r1, #0
 8006e52:	bf18      	it	ne
 8006e54:	2300      	movne	r3, #0
 8006e56:	e7f9      	b.n	8006e4c <strchr+0xe>

08006e58 <strcspn>:
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	461e      	mov	r6, r3
 8006e5e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8006e62:	b144      	cbz	r4, 8006e76 <strcspn+0x1e>
 8006e64:	1e4a      	subs	r2, r1, #1
 8006e66:	e001      	b.n	8006e6c <strcspn+0x14>
 8006e68:	42a5      	cmp	r5, r4
 8006e6a:	d004      	beq.n	8006e76 <strcspn+0x1e>
 8006e6c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006e70:	2d00      	cmp	r5, #0
 8006e72:	d1f9      	bne.n	8006e68 <strcspn+0x10>
 8006e74:	e7f2      	b.n	8006e5c <strcspn+0x4>
 8006e76:	1a30      	subs	r0, r6, r0
 8006e78:	bd70      	pop	{r4, r5, r6, pc}

08006e7a <strspn>:
 8006e7a:	b570      	push	{r4, r5, r6, lr}
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	461e      	mov	r6, r3
 8006e80:	f813 4b01 	ldrb.w	r4, [r3], #1
 8006e84:	b13c      	cbz	r4, 8006e96 <strspn+0x1c>
 8006e86:	1e4a      	subs	r2, r1, #1
 8006e88:	e001      	b.n	8006e8e <strspn+0x14>
 8006e8a:	42a5      	cmp	r5, r4
 8006e8c:	d0f7      	beq.n	8006e7e <strspn+0x4>
 8006e8e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006e92:	2d00      	cmp	r5, #0
 8006e94:	d1f9      	bne.n	8006e8a <strspn+0x10>
 8006e96:	1a30      	subs	r0, r6, r0
 8006e98:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e9c <_close_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d06      	ldr	r5, [pc, #24]	; (8006eb8 <_close_r+0x1c>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7f9 fed1 	bl	8000c4e <_close>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_close_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_close_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	20000390 	.word	0x20000390

08006ebc <_lseek_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4d07      	ldr	r5, [pc, #28]	; (8006edc <_lseek_r+0x20>)
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	4608      	mov	r0, r1
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	602a      	str	r2, [r5, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f7f9 fec9 	bl	8000c62 <_lseek>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_lseek_r+0x1e>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_lseek_r+0x1e>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	20000390 	.word	0x20000390

08006ee0 <_read_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d07      	ldr	r5, [pc, #28]	; (8006f00 <_read_r+0x20>)
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	4611      	mov	r1, r2
 8006eea:	2200      	movs	r2, #0
 8006eec:	602a      	str	r2, [r5, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f7f9 fe9d 	bl	8000c2e <_read>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_read_r+0x1e>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_read_r+0x1e>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	20000390 	.word	0x20000390

08006f04 <_sbrk_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d06      	ldr	r5, [pc, #24]	; (8006f20 <_sbrk_r+0x1c>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	602b      	str	r3, [r5, #0]
 8006f10:	f7f9 feaa 	bl	8000c68 <_sbrk>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_sbrk_r+0x1a>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_sbrk_r+0x1a>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	20000390 	.word	0x20000390

08006f24 <_write_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d07      	ldr	r5, [pc, #28]	; (8006f44 <_write_r+0x20>)
 8006f28:	4604      	mov	r4, r0
 8006f2a:	4608      	mov	r0, r1
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	602a      	str	r2, [r5, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f7f9 fc0a 	bl	800074c <_write>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d102      	bne.n	8006f42 <_write_r+0x1e>
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <_write_r+0x1e>
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	20000390 	.word	0x20000390

08006f48 <__errno>:
 8006f48:	4b01      	ldr	r3, [pc, #4]	; (8006f50 <__errno+0x8>)
 8006f4a:	6818      	ldr	r0, [r3, #0]
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	200000b0 	.word	0x200000b0

08006f54 <__libc_init_array>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	4d0d      	ldr	r5, [pc, #52]	; (8006f8c <__libc_init_array+0x38>)
 8006f58:	4c0d      	ldr	r4, [pc, #52]	; (8006f90 <__libc_init_array+0x3c>)
 8006f5a:	1b64      	subs	r4, r4, r5
 8006f5c:	10a4      	asrs	r4, r4, #2
 8006f5e:	2600      	movs	r6, #0
 8006f60:	42a6      	cmp	r6, r4
 8006f62:	d109      	bne.n	8006f78 <__libc_init_array+0x24>
 8006f64:	4d0b      	ldr	r5, [pc, #44]	; (8006f94 <__libc_init_array+0x40>)
 8006f66:	4c0c      	ldr	r4, [pc, #48]	; (8006f98 <__libc_init_array+0x44>)
 8006f68:	f000 fd90 	bl	8007a8c <_init>
 8006f6c:	1b64      	subs	r4, r4, r5
 8006f6e:	10a4      	asrs	r4, r4, #2
 8006f70:	2600      	movs	r6, #0
 8006f72:	42a6      	cmp	r6, r4
 8006f74:	d105      	bne.n	8006f82 <__libc_init_array+0x2e>
 8006f76:	bd70      	pop	{r4, r5, r6, pc}
 8006f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7c:	4798      	blx	r3
 8006f7e:	3601      	adds	r6, #1
 8006f80:	e7ee      	b.n	8006f60 <__libc_init_array+0xc>
 8006f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f86:	4798      	blx	r3
 8006f88:	3601      	adds	r6, #1
 8006f8a:	e7f2      	b.n	8006f72 <__libc_init_array+0x1e>
 8006f8c:	08008798 	.word	0x08008798
 8006f90:	08008798 	.word	0x08008798
 8006f94:	08008798 	.word	0x08008798
 8006f98:	0800879c 	.word	0x0800879c

08006f9c <__retarget_lock_acquire_recursive>:
 8006f9c:	4770      	bx	lr

08006f9e <__retarget_lock_release_recursive>:
 8006f9e:	4770      	bx	lr

08006fa0 <memcpy>:
 8006fa0:	440a      	add	r2, r1
 8006fa2:	4291      	cmp	r1, r2
 8006fa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fa8:	d100      	bne.n	8006fac <memcpy+0xc>
 8006faa:	4770      	bx	lr
 8006fac:	b510      	push	{r4, lr}
 8006fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	d1f9      	bne.n	8006fae <memcpy+0xe>
 8006fba:	bd10      	pop	{r4, pc}

08006fbc <abort>:
 8006fbc:	b508      	push	{r3, lr}
 8006fbe:	2006      	movs	r0, #6
 8006fc0:	f000 fcc4 	bl	800794c <raise>
 8006fc4:	2001      	movs	r0, #1
 8006fc6:	f7f9 fe2c 	bl	8000c22 <_exit>
	...

08006fcc <_free_r>:
 8006fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fce:	2900      	cmp	r1, #0
 8006fd0:	d044      	beq.n	800705c <_free_r+0x90>
 8006fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd6:	9001      	str	r0, [sp, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f1a1 0404 	sub.w	r4, r1, #4
 8006fde:	bfb8      	it	lt
 8006fe0:	18e4      	addlt	r4, r4, r3
 8006fe2:	f7ff fde9 	bl	8006bb8 <__malloc_lock>
 8006fe6:	4a1e      	ldr	r2, [pc, #120]	; (8007060 <_free_r+0x94>)
 8006fe8:	9801      	ldr	r0, [sp, #4]
 8006fea:	6813      	ldr	r3, [r2, #0]
 8006fec:	b933      	cbnz	r3, 8006ffc <_free_r+0x30>
 8006fee:	6063      	str	r3, [r4, #4]
 8006ff0:	6014      	str	r4, [r2, #0]
 8006ff2:	b003      	add	sp, #12
 8006ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ff8:	f7ff bde4 	b.w	8006bc4 <__malloc_unlock>
 8006ffc:	42a3      	cmp	r3, r4
 8006ffe:	d908      	bls.n	8007012 <_free_r+0x46>
 8007000:	6825      	ldr	r5, [r4, #0]
 8007002:	1961      	adds	r1, r4, r5
 8007004:	428b      	cmp	r3, r1
 8007006:	bf01      	itttt	eq
 8007008:	6819      	ldreq	r1, [r3, #0]
 800700a:	685b      	ldreq	r3, [r3, #4]
 800700c:	1949      	addeq	r1, r1, r5
 800700e:	6021      	streq	r1, [r4, #0]
 8007010:	e7ed      	b.n	8006fee <_free_r+0x22>
 8007012:	461a      	mov	r2, r3
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	b10b      	cbz	r3, 800701c <_free_r+0x50>
 8007018:	42a3      	cmp	r3, r4
 800701a:	d9fa      	bls.n	8007012 <_free_r+0x46>
 800701c:	6811      	ldr	r1, [r2, #0]
 800701e:	1855      	adds	r5, r2, r1
 8007020:	42a5      	cmp	r5, r4
 8007022:	d10b      	bne.n	800703c <_free_r+0x70>
 8007024:	6824      	ldr	r4, [r4, #0]
 8007026:	4421      	add	r1, r4
 8007028:	1854      	adds	r4, r2, r1
 800702a:	42a3      	cmp	r3, r4
 800702c:	6011      	str	r1, [r2, #0]
 800702e:	d1e0      	bne.n	8006ff2 <_free_r+0x26>
 8007030:	681c      	ldr	r4, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	6053      	str	r3, [r2, #4]
 8007036:	440c      	add	r4, r1
 8007038:	6014      	str	r4, [r2, #0]
 800703a:	e7da      	b.n	8006ff2 <_free_r+0x26>
 800703c:	d902      	bls.n	8007044 <_free_r+0x78>
 800703e:	230c      	movs	r3, #12
 8007040:	6003      	str	r3, [r0, #0]
 8007042:	e7d6      	b.n	8006ff2 <_free_r+0x26>
 8007044:	6825      	ldr	r5, [r4, #0]
 8007046:	1961      	adds	r1, r4, r5
 8007048:	428b      	cmp	r3, r1
 800704a:	bf04      	itt	eq
 800704c:	6819      	ldreq	r1, [r3, #0]
 800704e:	685b      	ldreq	r3, [r3, #4]
 8007050:	6063      	str	r3, [r4, #4]
 8007052:	bf04      	itt	eq
 8007054:	1949      	addeq	r1, r1, r5
 8007056:	6021      	streq	r1, [r4, #0]
 8007058:	6054      	str	r4, [r2, #4]
 800705a:	e7ca      	b.n	8006ff2 <_free_r+0x26>
 800705c:	b003      	add	sp, #12
 800705e:	bd30      	pop	{r4, r5, pc}
 8007060:	2000024c 	.word	0x2000024c

08007064 <__sfputc_r>:
 8007064:	6893      	ldr	r3, [r2, #8]
 8007066:	3b01      	subs	r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	b410      	push	{r4}
 800706c:	6093      	str	r3, [r2, #8]
 800706e:	da08      	bge.n	8007082 <__sfputc_r+0x1e>
 8007070:	6994      	ldr	r4, [r2, #24]
 8007072:	42a3      	cmp	r3, r4
 8007074:	db01      	blt.n	800707a <__sfputc_r+0x16>
 8007076:	290a      	cmp	r1, #10
 8007078:	d103      	bne.n	8007082 <__sfputc_r+0x1e>
 800707a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800707e:	f000 bba7 	b.w	80077d0 <__swbuf_r>
 8007082:	6813      	ldr	r3, [r2, #0]
 8007084:	1c58      	adds	r0, r3, #1
 8007086:	6010      	str	r0, [r2, #0]
 8007088:	7019      	strb	r1, [r3, #0]
 800708a:	4608      	mov	r0, r1
 800708c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007090:	4770      	bx	lr

08007092 <__sfputs_r>:
 8007092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007094:	4606      	mov	r6, r0
 8007096:	460f      	mov	r7, r1
 8007098:	4614      	mov	r4, r2
 800709a:	18d5      	adds	r5, r2, r3
 800709c:	42ac      	cmp	r4, r5
 800709e:	d101      	bne.n	80070a4 <__sfputs_r+0x12>
 80070a0:	2000      	movs	r0, #0
 80070a2:	e007      	b.n	80070b4 <__sfputs_r+0x22>
 80070a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a8:	463a      	mov	r2, r7
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7ff ffda 	bl	8007064 <__sfputc_r>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d1f3      	bne.n	800709c <__sfputs_r+0xa>
 80070b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070b8 <_vfiprintf_r>:
 80070b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070bc:	460d      	mov	r5, r1
 80070be:	b09d      	sub	sp, #116	; 0x74
 80070c0:	4614      	mov	r4, r2
 80070c2:	4698      	mov	r8, r3
 80070c4:	4606      	mov	r6, r0
 80070c6:	b118      	cbz	r0, 80070d0 <_vfiprintf_r+0x18>
 80070c8:	6a03      	ldr	r3, [r0, #32]
 80070ca:	b90b      	cbnz	r3, 80070d0 <_vfiprintf_r+0x18>
 80070cc:	f7ff fdfa 	bl	8006cc4 <__sinit>
 80070d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070d2:	07d9      	lsls	r1, r3, #31
 80070d4:	d405      	bmi.n	80070e2 <_vfiprintf_r+0x2a>
 80070d6:	89ab      	ldrh	r3, [r5, #12]
 80070d8:	059a      	lsls	r2, r3, #22
 80070da:	d402      	bmi.n	80070e2 <_vfiprintf_r+0x2a>
 80070dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070de:	f7ff ff5d 	bl	8006f9c <__retarget_lock_acquire_recursive>
 80070e2:	89ab      	ldrh	r3, [r5, #12]
 80070e4:	071b      	lsls	r3, r3, #28
 80070e6:	d501      	bpl.n	80070ec <_vfiprintf_r+0x34>
 80070e8:	692b      	ldr	r3, [r5, #16]
 80070ea:	b99b      	cbnz	r3, 8007114 <_vfiprintf_r+0x5c>
 80070ec:	4629      	mov	r1, r5
 80070ee:	4630      	mov	r0, r6
 80070f0:	f000 fbac 	bl	800784c <__swsetup_r>
 80070f4:	b170      	cbz	r0, 8007114 <_vfiprintf_r+0x5c>
 80070f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070f8:	07dc      	lsls	r4, r3, #31
 80070fa:	d504      	bpl.n	8007106 <_vfiprintf_r+0x4e>
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007100:	b01d      	add	sp, #116	; 0x74
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	89ab      	ldrh	r3, [r5, #12]
 8007108:	0598      	lsls	r0, r3, #22
 800710a:	d4f7      	bmi.n	80070fc <_vfiprintf_r+0x44>
 800710c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800710e:	f7ff ff46 	bl	8006f9e <__retarget_lock_release_recursive>
 8007112:	e7f3      	b.n	80070fc <_vfiprintf_r+0x44>
 8007114:	2300      	movs	r3, #0
 8007116:	9309      	str	r3, [sp, #36]	; 0x24
 8007118:	2320      	movs	r3, #32
 800711a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800711e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007122:	2330      	movs	r3, #48	; 0x30
 8007124:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80072d8 <_vfiprintf_r+0x220>
 8007128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800712c:	f04f 0901 	mov.w	r9, #1
 8007130:	4623      	mov	r3, r4
 8007132:	469a      	mov	sl, r3
 8007134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007138:	b10a      	cbz	r2, 800713e <_vfiprintf_r+0x86>
 800713a:	2a25      	cmp	r2, #37	; 0x25
 800713c:	d1f9      	bne.n	8007132 <_vfiprintf_r+0x7a>
 800713e:	ebba 0b04 	subs.w	fp, sl, r4
 8007142:	d00b      	beq.n	800715c <_vfiprintf_r+0xa4>
 8007144:	465b      	mov	r3, fp
 8007146:	4622      	mov	r2, r4
 8007148:	4629      	mov	r1, r5
 800714a:	4630      	mov	r0, r6
 800714c:	f7ff ffa1 	bl	8007092 <__sfputs_r>
 8007150:	3001      	adds	r0, #1
 8007152:	f000 80a9 	beq.w	80072a8 <_vfiprintf_r+0x1f0>
 8007156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007158:	445a      	add	r2, fp
 800715a:	9209      	str	r2, [sp, #36]	; 0x24
 800715c:	f89a 3000 	ldrb.w	r3, [sl]
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 80a1 	beq.w	80072a8 <_vfiprintf_r+0x1f0>
 8007166:	2300      	movs	r3, #0
 8007168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800716c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007170:	f10a 0a01 	add.w	sl, sl, #1
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	9307      	str	r3, [sp, #28]
 8007178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800717c:	931a      	str	r3, [sp, #104]	; 0x68
 800717e:	4654      	mov	r4, sl
 8007180:	2205      	movs	r2, #5
 8007182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007186:	4854      	ldr	r0, [pc, #336]	; (80072d8 <_vfiprintf_r+0x220>)
 8007188:	f7f9 f832 	bl	80001f0 <memchr>
 800718c:	9a04      	ldr	r2, [sp, #16]
 800718e:	b9d8      	cbnz	r0, 80071c8 <_vfiprintf_r+0x110>
 8007190:	06d1      	lsls	r1, r2, #27
 8007192:	bf44      	itt	mi
 8007194:	2320      	movmi	r3, #32
 8007196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800719a:	0713      	lsls	r3, r2, #28
 800719c:	bf44      	itt	mi
 800719e:	232b      	movmi	r3, #43	; 0x2b
 80071a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071a4:	f89a 3000 	ldrb.w	r3, [sl]
 80071a8:	2b2a      	cmp	r3, #42	; 0x2a
 80071aa:	d015      	beq.n	80071d8 <_vfiprintf_r+0x120>
 80071ac:	9a07      	ldr	r2, [sp, #28]
 80071ae:	4654      	mov	r4, sl
 80071b0:	2000      	movs	r0, #0
 80071b2:	f04f 0c0a 	mov.w	ip, #10
 80071b6:	4621      	mov	r1, r4
 80071b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071bc:	3b30      	subs	r3, #48	; 0x30
 80071be:	2b09      	cmp	r3, #9
 80071c0:	d94d      	bls.n	800725e <_vfiprintf_r+0x1a6>
 80071c2:	b1b0      	cbz	r0, 80071f2 <_vfiprintf_r+0x13a>
 80071c4:	9207      	str	r2, [sp, #28]
 80071c6:	e014      	b.n	80071f2 <_vfiprintf_r+0x13a>
 80071c8:	eba0 0308 	sub.w	r3, r0, r8
 80071cc:	fa09 f303 	lsl.w	r3, r9, r3
 80071d0:	4313      	orrs	r3, r2
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	46a2      	mov	sl, r4
 80071d6:	e7d2      	b.n	800717e <_vfiprintf_r+0xc6>
 80071d8:	9b03      	ldr	r3, [sp, #12]
 80071da:	1d19      	adds	r1, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	9103      	str	r1, [sp, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	bfbb      	ittet	lt
 80071e4:	425b      	neglt	r3, r3
 80071e6:	f042 0202 	orrlt.w	r2, r2, #2
 80071ea:	9307      	strge	r3, [sp, #28]
 80071ec:	9307      	strlt	r3, [sp, #28]
 80071ee:	bfb8      	it	lt
 80071f0:	9204      	strlt	r2, [sp, #16]
 80071f2:	7823      	ldrb	r3, [r4, #0]
 80071f4:	2b2e      	cmp	r3, #46	; 0x2e
 80071f6:	d10c      	bne.n	8007212 <_vfiprintf_r+0x15a>
 80071f8:	7863      	ldrb	r3, [r4, #1]
 80071fa:	2b2a      	cmp	r3, #42	; 0x2a
 80071fc:	d134      	bne.n	8007268 <_vfiprintf_r+0x1b0>
 80071fe:	9b03      	ldr	r3, [sp, #12]
 8007200:	1d1a      	adds	r2, r3, #4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	9203      	str	r2, [sp, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	bfb8      	it	lt
 800720a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800720e:	3402      	adds	r4, #2
 8007210:	9305      	str	r3, [sp, #20]
 8007212:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80072e8 <_vfiprintf_r+0x230>
 8007216:	7821      	ldrb	r1, [r4, #0]
 8007218:	2203      	movs	r2, #3
 800721a:	4650      	mov	r0, sl
 800721c:	f7f8 ffe8 	bl	80001f0 <memchr>
 8007220:	b138      	cbz	r0, 8007232 <_vfiprintf_r+0x17a>
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	eba0 000a 	sub.w	r0, r0, sl
 8007228:	2240      	movs	r2, #64	; 0x40
 800722a:	4082      	lsls	r2, r0
 800722c:	4313      	orrs	r3, r2
 800722e:	3401      	adds	r4, #1
 8007230:	9304      	str	r3, [sp, #16]
 8007232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007236:	4829      	ldr	r0, [pc, #164]	; (80072dc <_vfiprintf_r+0x224>)
 8007238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800723c:	2206      	movs	r2, #6
 800723e:	f7f8 ffd7 	bl	80001f0 <memchr>
 8007242:	2800      	cmp	r0, #0
 8007244:	d03f      	beq.n	80072c6 <_vfiprintf_r+0x20e>
 8007246:	4b26      	ldr	r3, [pc, #152]	; (80072e0 <_vfiprintf_r+0x228>)
 8007248:	bb1b      	cbnz	r3, 8007292 <_vfiprintf_r+0x1da>
 800724a:	9b03      	ldr	r3, [sp, #12]
 800724c:	3307      	adds	r3, #7
 800724e:	f023 0307 	bic.w	r3, r3, #7
 8007252:	3308      	adds	r3, #8
 8007254:	9303      	str	r3, [sp, #12]
 8007256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007258:	443b      	add	r3, r7
 800725a:	9309      	str	r3, [sp, #36]	; 0x24
 800725c:	e768      	b.n	8007130 <_vfiprintf_r+0x78>
 800725e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007262:	460c      	mov	r4, r1
 8007264:	2001      	movs	r0, #1
 8007266:	e7a6      	b.n	80071b6 <_vfiprintf_r+0xfe>
 8007268:	2300      	movs	r3, #0
 800726a:	3401      	adds	r4, #1
 800726c:	9305      	str	r3, [sp, #20]
 800726e:	4619      	mov	r1, r3
 8007270:	f04f 0c0a 	mov.w	ip, #10
 8007274:	4620      	mov	r0, r4
 8007276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800727a:	3a30      	subs	r2, #48	; 0x30
 800727c:	2a09      	cmp	r2, #9
 800727e:	d903      	bls.n	8007288 <_vfiprintf_r+0x1d0>
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0c6      	beq.n	8007212 <_vfiprintf_r+0x15a>
 8007284:	9105      	str	r1, [sp, #20]
 8007286:	e7c4      	b.n	8007212 <_vfiprintf_r+0x15a>
 8007288:	fb0c 2101 	mla	r1, ip, r1, r2
 800728c:	4604      	mov	r4, r0
 800728e:	2301      	movs	r3, #1
 8007290:	e7f0      	b.n	8007274 <_vfiprintf_r+0x1bc>
 8007292:	ab03      	add	r3, sp, #12
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	462a      	mov	r2, r5
 8007298:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <_vfiprintf_r+0x22c>)
 800729a:	a904      	add	r1, sp, #16
 800729c:	4630      	mov	r0, r6
 800729e:	f3af 8000 	nop.w
 80072a2:	4607      	mov	r7, r0
 80072a4:	1c78      	adds	r0, r7, #1
 80072a6:	d1d6      	bne.n	8007256 <_vfiprintf_r+0x19e>
 80072a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072aa:	07d9      	lsls	r1, r3, #31
 80072ac:	d405      	bmi.n	80072ba <_vfiprintf_r+0x202>
 80072ae:	89ab      	ldrh	r3, [r5, #12]
 80072b0:	059a      	lsls	r2, r3, #22
 80072b2:	d402      	bmi.n	80072ba <_vfiprintf_r+0x202>
 80072b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072b6:	f7ff fe72 	bl	8006f9e <__retarget_lock_release_recursive>
 80072ba:	89ab      	ldrh	r3, [r5, #12]
 80072bc:	065b      	lsls	r3, r3, #25
 80072be:	f53f af1d 	bmi.w	80070fc <_vfiprintf_r+0x44>
 80072c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072c4:	e71c      	b.n	8007100 <_vfiprintf_r+0x48>
 80072c6:	ab03      	add	r3, sp, #12
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	462a      	mov	r2, r5
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <_vfiprintf_r+0x22c>)
 80072ce:	a904      	add	r1, sp, #16
 80072d0:	4630      	mov	r0, r6
 80072d2:	f000 f879 	bl	80073c8 <_printf_i>
 80072d6:	e7e4      	b.n	80072a2 <_vfiprintf_r+0x1ea>
 80072d8:	0800875c 	.word	0x0800875c
 80072dc:	08008766 	.word	0x08008766
 80072e0:	00000000 	.word	0x00000000
 80072e4:	08007093 	.word	0x08007093
 80072e8:	08008762 	.word	0x08008762

080072ec <_printf_common>:
 80072ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f0:	4616      	mov	r6, r2
 80072f2:	4699      	mov	r9, r3
 80072f4:	688a      	ldr	r2, [r1, #8]
 80072f6:	690b      	ldr	r3, [r1, #16]
 80072f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072fc:	4293      	cmp	r3, r2
 80072fe:	bfb8      	it	lt
 8007300:	4613      	movlt	r3, r2
 8007302:	6033      	str	r3, [r6, #0]
 8007304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007308:	4607      	mov	r7, r0
 800730a:	460c      	mov	r4, r1
 800730c:	b10a      	cbz	r2, 8007312 <_printf_common+0x26>
 800730e:	3301      	adds	r3, #1
 8007310:	6033      	str	r3, [r6, #0]
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	0699      	lsls	r1, r3, #26
 8007316:	bf42      	ittt	mi
 8007318:	6833      	ldrmi	r3, [r6, #0]
 800731a:	3302      	addmi	r3, #2
 800731c:	6033      	strmi	r3, [r6, #0]
 800731e:	6825      	ldr	r5, [r4, #0]
 8007320:	f015 0506 	ands.w	r5, r5, #6
 8007324:	d106      	bne.n	8007334 <_printf_common+0x48>
 8007326:	f104 0a19 	add.w	sl, r4, #25
 800732a:	68e3      	ldr	r3, [r4, #12]
 800732c:	6832      	ldr	r2, [r6, #0]
 800732e:	1a9b      	subs	r3, r3, r2
 8007330:	42ab      	cmp	r3, r5
 8007332:	dc26      	bgt.n	8007382 <_printf_common+0x96>
 8007334:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007338:	1e13      	subs	r3, r2, #0
 800733a:	6822      	ldr	r2, [r4, #0]
 800733c:	bf18      	it	ne
 800733e:	2301      	movne	r3, #1
 8007340:	0692      	lsls	r2, r2, #26
 8007342:	d42b      	bmi.n	800739c <_printf_common+0xb0>
 8007344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007348:	4649      	mov	r1, r9
 800734a:	4638      	mov	r0, r7
 800734c:	47c0      	blx	r8
 800734e:	3001      	adds	r0, #1
 8007350:	d01e      	beq.n	8007390 <_printf_common+0xa4>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	6922      	ldr	r2, [r4, #16]
 8007356:	f003 0306 	and.w	r3, r3, #6
 800735a:	2b04      	cmp	r3, #4
 800735c:	bf02      	ittt	eq
 800735e:	68e5      	ldreq	r5, [r4, #12]
 8007360:	6833      	ldreq	r3, [r6, #0]
 8007362:	1aed      	subeq	r5, r5, r3
 8007364:	68a3      	ldr	r3, [r4, #8]
 8007366:	bf0c      	ite	eq
 8007368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800736c:	2500      	movne	r5, #0
 800736e:	4293      	cmp	r3, r2
 8007370:	bfc4      	itt	gt
 8007372:	1a9b      	subgt	r3, r3, r2
 8007374:	18ed      	addgt	r5, r5, r3
 8007376:	2600      	movs	r6, #0
 8007378:	341a      	adds	r4, #26
 800737a:	42b5      	cmp	r5, r6
 800737c:	d11a      	bne.n	80073b4 <_printf_common+0xc8>
 800737e:	2000      	movs	r0, #0
 8007380:	e008      	b.n	8007394 <_printf_common+0xa8>
 8007382:	2301      	movs	r3, #1
 8007384:	4652      	mov	r2, sl
 8007386:	4649      	mov	r1, r9
 8007388:	4638      	mov	r0, r7
 800738a:	47c0      	blx	r8
 800738c:	3001      	adds	r0, #1
 800738e:	d103      	bne.n	8007398 <_printf_common+0xac>
 8007390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007398:	3501      	adds	r5, #1
 800739a:	e7c6      	b.n	800732a <_printf_common+0x3e>
 800739c:	18e1      	adds	r1, r4, r3
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	2030      	movs	r0, #48	; 0x30
 80073a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073a6:	4422      	add	r2, r4
 80073a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073b0:	3302      	adds	r3, #2
 80073b2:	e7c7      	b.n	8007344 <_printf_common+0x58>
 80073b4:	2301      	movs	r3, #1
 80073b6:	4622      	mov	r2, r4
 80073b8:	4649      	mov	r1, r9
 80073ba:	4638      	mov	r0, r7
 80073bc:	47c0      	blx	r8
 80073be:	3001      	adds	r0, #1
 80073c0:	d0e6      	beq.n	8007390 <_printf_common+0xa4>
 80073c2:	3601      	adds	r6, #1
 80073c4:	e7d9      	b.n	800737a <_printf_common+0x8e>
	...

080073c8 <_printf_i>:
 80073c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073cc:	7e0f      	ldrb	r7, [r1, #24]
 80073ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073d0:	2f78      	cmp	r7, #120	; 0x78
 80073d2:	4691      	mov	r9, r2
 80073d4:	4680      	mov	r8, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	469a      	mov	sl, r3
 80073da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073de:	d807      	bhi.n	80073f0 <_printf_i+0x28>
 80073e0:	2f62      	cmp	r7, #98	; 0x62
 80073e2:	d80a      	bhi.n	80073fa <_printf_i+0x32>
 80073e4:	2f00      	cmp	r7, #0
 80073e6:	f000 80d4 	beq.w	8007592 <_printf_i+0x1ca>
 80073ea:	2f58      	cmp	r7, #88	; 0x58
 80073ec:	f000 80c0 	beq.w	8007570 <_printf_i+0x1a8>
 80073f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073f8:	e03a      	b.n	8007470 <_printf_i+0xa8>
 80073fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073fe:	2b15      	cmp	r3, #21
 8007400:	d8f6      	bhi.n	80073f0 <_printf_i+0x28>
 8007402:	a101      	add	r1, pc, #4	; (adr r1, 8007408 <_printf_i+0x40>)
 8007404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007408:	08007461 	.word	0x08007461
 800740c:	08007475 	.word	0x08007475
 8007410:	080073f1 	.word	0x080073f1
 8007414:	080073f1 	.word	0x080073f1
 8007418:	080073f1 	.word	0x080073f1
 800741c:	080073f1 	.word	0x080073f1
 8007420:	08007475 	.word	0x08007475
 8007424:	080073f1 	.word	0x080073f1
 8007428:	080073f1 	.word	0x080073f1
 800742c:	080073f1 	.word	0x080073f1
 8007430:	080073f1 	.word	0x080073f1
 8007434:	08007579 	.word	0x08007579
 8007438:	080074a1 	.word	0x080074a1
 800743c:	08007533 	.word	0x08007533
 8007440:	080073f1 	.word	0x080073f1
 8007444:	080073f1 	.word	0x080073f1
 8007448:	0800759b 	.word	0x0800759b
 800744c:	080073f1 	.word	0x080073f1
 8007450:	080074a1 	.word	0x080074a1
 8007454:	080073f1 	.word	0x080073f1
 8007458:	080073f1 	.word	0x080073f1
 800745c:	0800753b 	.word	0x0800753b
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	1d1a      	adds	r2, r3, #4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	602a      	str	r2, [r5, #0]
 8007468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800746c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007470:	2301      	movs	r3, #1
 8007472:	e09f      	b.n	80075b4 <_printf_i+0x1ec>
 8007474:	6820      	ldr	r0, [r4, #0]
 8007476:	682b      	ldr	r3, [r5, #0]
 8007478:	0607      	lsls	r7, r0, #24
 800747a:	f103 0104 	add.w	r1, r3, #4
 800747e:	6029      	str	r1, [r5, #0]
 8007480:	d501      	bpl.n	8007486 <_printf_i+0xbe>
 8007482:	681e      	ldr	r6, [r3, #0]
 8007484:	e003      	b.n	800748e <_printf_i+0xc6>
 8007486:	0646      	lsls	r6, r0, #25
 8007488:	d5fb      	bpl.n	8007482 <_printf_i+0xba>
 800748a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800748e:	2e00      	cmp	r6, #0
 8007490:	da03      	bge.n	800749a <_printf_i+0xd2>
 8007492:	232d      	movs	r3, #45	; 0x2d
 8007494:	4276      	negs	r6, r6
 8007496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800749a:	485a      	ldr	r0, [pc, #360]	; (8007604 <_printf_i+0x23c>)
 800749c:	230a      	movs	r3, #10
 800749e:	e012      	b.n	80074c6 <_printf_i+0xfe>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	6820      	ldr	r0, [r4, #0]
 80074a4:	1d19      	adds	r1, r3, #4
 80074a6:	6029      	str	r1, [r5, #0]
 80074a8:	0605      	lsls	r5, r0, #24
 80074aa:	d501      	bpl.n	80074b0 <_printf_i+0xe8>
 80074ac:	681e      	ldr	r6, [r3, #0]
 80074ae:	e002      	b.n	80074b6 <_printf_i+0xee>
 80074b0:	0641      	lsls	r1, r0, #25
 80074b2:	d5fb      	bpl.n	80074ac <_printf_i+0xe4>
 80074b4:	881e      	ldrh	r6, [r3, #0]
 80074b6:	4853      	ldr	r0, [pc, #332]	; (8007604 <_printf_i+0x23c>)
 80074b8:	2f6f      	cmp	r7, #111	; 0x6f
 80074ba:	bf0c      	ite	eq
 80074bc:	2308      	moveq	r3, #8
 80074be:	230a      	movne	r3, #10
 80074c0:	2100      	movs	r1, #0
 80074c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074c6:	6865      	ldr	r5, [r4, #4]
 80074c8:	60a5      	str	r5, [r4, #8]
 80074ca:	2d00      	cmp	r5, #0
 80074cc:	bfa2      	ittt	ge
 80074ce:	6821      	ldrge	r1, [r4, #0]
 80074d0:	f021 0104 	bicge.w	r1, r1, #4
 80074d4:	6021      	strge	r1, [r4, #0]
 80074d6:	b90e      	cbnz	r6, 80074dc <_printf_i+0x114>
 80074d8:	2d00      	cmp	r5, #0
 80074da:	d04b      	beq.n	8007574 <_printf_i+0x1ac>
 80074dc:	4615      	mov	r5, r2
 80074de:	fbb6 f1f3 	udiv	r1, r6, r3
 80074e2:	fb03 6711 	mls	r7, r3, r1, r6
 80074e6:	5dc7      	ldrb	r7, [r0, r7]
 80074e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074ec:	4637      	mov	r7, r6
 80074ee:	42bb      	cmp	r3, r7
 80074f0:	460e      	mov	r6, r1
 80074f2:	d9f4      	bls.n	80074de <_printf_i+0x116>
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d10b      	bne.n	8007510 <_printf_i+0x148>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	07de      	lsls	r6, r3, #31
 80074fc:	d508      	bpl.n	8007510 <_printf_i+0x148>
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	6861      	ldr	r1, [r4, #4]
 8007502:	4299      	cmp	r1, r3
 8007504:	bfde      	ittt	le
 8007506:	2330      	movle	r3, #48	; 0x30
 8007508:	f805 3c01 	strble.w	r3, [r5, #-1]
 800750c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007510:	1b52      	subs	r2, r2, r5
 8007512:	6122      	str	r2, [r4, #16]
 8007514:	f8cd a000 	str.w	sl, [sp]
 8007518:	464b      	mov	r3, r9
 800751a:	aa03      	add	r2, sp, #12
 800751c:	4621      	mov	r1, r4
 800751e:	4640      	mov	r0, r8
 8007520:	f7ff fee4 	bl	80072ec <_printf_common>
 8007524:	3001      	adds	r0, #1
 8007526:	d14a      	bne.n	80075be <_printf_i+0x1f6>
 8007528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800752c:	b004      	add	sp, #16
 800752e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	f043 0320 	orr.w	r3, r3, #32
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	4833      	ldr	r0, [pc, #204]	; (8007608 <_printf_i+0x240>)
 800753c:	2778      	movs	r7, #120	; 0x78
 800753e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	6829      	ldr	r1, [r5, #0]
 8007546:	061f      	lsls	r7, r3, #24
 8007548:	f851 6b04 	ldr.w	r6, [r1], #4
 800754c:	d402      	bmi.n	8007554 <_printf_i+0x18c>
 800754e:	065f      	lsls	r7, r3, #25
 8007550:	bf48      	it	mi
 8007552:	b2b6      	uxthmi	r6, r6
 8007554:	07df      	lsls	r7, r3, #31
 8007556:	bf48      	it	mi
 8007558:	f043 0320 	orrmi.w	r3, r3, #32
 800755c:	6029      	str	r1, [r5, #0]
 800755e:	bf48      	it	mi
 8007560:	6023      	strmi	r3, [r4, #0]
 8007562:	b91e      	cbnz	r6, 800756c <_printf_i+0x1a4>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	f023 0320 	bic.w	r3, r3, #32
 800756a:	6023      	str	r3, [r4, #0]
 800756c:	2310      	movs	r3, #16
 800756e:	e7a7      	b.n	80074c0 <_printf_i+0xf8>
 8007570:	4824      	ldr	r0, [pc, #144]	; (8007604 <_printf_i+0x23c>)
 8007572:	e7e4      	b.n	800753e <_printf_i+0x176>
 8007574:	4615      	mov	r5, r2
 8007576:	e7bd      	b.n	80074f4 <_printf_i+0x12c>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	6826      	ldr	r6, [r4, #0]
 800757c:	6961      	ldr	r1, [r4, #20]
 800757e:	1d18      	adds	r0, r3, #4
 8007580:	6028      	str	r0, [r5, #0]
 8007582:	0635      	lsls	r5, r6, #24
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	d501      	bpl.n	800758c <_printf_i+0x1c4>
 8007588:	6019      	str	r1, [r3, #0]
 800758a:	e002      	b.n	8007592 <_printf_i+0x1ca>
 800758c:	0670      	lsls	r0, r6, #25
 800758e:	d5fb      	bpl.n	8007588 <_printf_i+0x1c0>
 8007590:	8019      	strh	r1, [r3, #0]
 8007592:	2300      	movs	r3, #0
 8007594:	6123      	str	r3, [r4, #16]
 8007596:	4615      	mov	r5, r2
 8007598:	e7bc      	b.n	8007514 <_printf_i+0x14c>
 800759a:	682b      	ldr	r3, [r5, #0]
 800759c:	1d1a      	adds	r2, r3, #4
 800759e:	602a      	str	r2, [r5, #0]
 80075a0:	681d      	ldr	r5, [r3, #0]
 80075a2:	6862      	ldr	r2, [r4, #4]
 80075a4:	2100      	movs	r1, #0
 80075a6:	4628      	mov	r0, r5
 80075a8:	f7f8 fe22 	bl	80001f0 <memchr>
 80075ac:	b108      	cbz	r0, 80075b2 <_printf_i+0x1ea>
 80075ae:	1b40      	subs	r0, r0, r5
 80075b0:	6060      	str	r0, [r4, #4]
 80075b2:	6863      	ldr	r3, [r4, #4]
 80075b4:	6123      	str	r3, [r4, #16]
 80075b6:	2300      	movs	r3, #0
 80075b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075bc:	e7aa      	b.n	8007514 <_printf_i+0x14c>
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	462a      	mov	r2, r5
 80075c2:	4649      	mov	r1, r9
 80075c4:	4640      	mov	r0, r8
 80075c6:	47d0      	blx	sl
 80075c8:	3001      	adds	r0, #1
 80075ca:	d0ad      	beq.n	8007528 <_printf_i+0x160>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	079b      	lsls	r3, r3, #30
 80075d0:	d413      	bmi.n	80075fa <_printf_i+0x232>
 80075d2:	68e0      	ldr	r0, [r4, #12]
 80075d4:	9b03      	ldr	r3, [sp, #12]
 80075d6:	4298      	cmp	r0, r3
 80075d8:	bfb8      	it	lt
 80075da:	4618      	movlt	r0, r3
 80075dc:	e7a6      	b.n	800752c <_printf_i+0x164>
 80075de:	2301      	movs	r3, #1
 80075e0:	4632      	mov	r2, r6
 80075e2:	4649      	mov	r1, r9
 80075e4:	4640      	mov	r0, r8
 80075e6:	47d0      	blx	sl
 80075e8:	3001      	adds	r0, #1
 80075ea:	d09d      	beq.n	8007528 <_printf_i+0x160>
 80075ec:	3501      	adds	r5, #1
 80075ee:	68e3      	ldr	r3, [r4, #12]
 80075f0:	9903      	ldr	r1, [sp, #12]
 80075f2:	1a5b      	subs	r3, r3, r1
 80075f4:	42ab      	cmp	r3, r5
 80075f6:	dcf2      	bgt.n	80075de <_printf_i+0x216>
 80075f8:	e7eb      	b.n	80075d2 <_printf_i+0x20a>
 80075fa:	2500      	movs	r5, #0
 80075fc:	f104 0619 	add.w	r6, r4, #25
 8007600:	e7f5      	b.n	80075ee <_printf_i+0x226>
 8007602:	bf00      	nop
 8007604:	0800876d 	.word	0x0800876d
 8007608:	0800877e 	.word	0x0800877e

0800760c <__sflush_r>:
 800760c:	898a      	ldrh	r2, [r1, #12]
 800760e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007612:	4605      	mov	r5, r0
 8007614:	0710      	lsls	r0, r2, #28
 8007616:	460c      	mov	r4, r1
 8007618:	d458      	bmi.n	80076cc <__sflush_r+0xc0>
 800761a:	684b      	ldr	r3, [r1, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	dc05      	bgt.n	800762c <__sflush_r+0x20>
 8007620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007622:	2b00      	cmp	r3, #0
 8007624:	dc02      	bgt.n	800762c <__sflush_r+0x20>
 8007626:	2000      	movs	r0, #0
 8007628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800762c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800762e:	2e00      	cmp	r6, #0
 8007630:	d0f9      	beq.n	8007626 <__sflush_r+0x1a>
 8007632:	2300      	movs	r3, #0
 8007634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007638:	682f      	ldr	r7, [r5, #0]
 800763a:	6a21      	ldr	r1, [r4, #32]
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	d032      	beq.n	80076a6 <__sflush_r+0x9a>
 8007640:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	075a      	lsls	r2, r3, #29
 8007646:	d505      	bpl.n	8007654 <__sflush_r+0x48>
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	1ac0      	subs	r0, r0, r3
 800764c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800764e:	b10b      	cbz	r3, 8007654 <__sflush_r+0x48>
 8007650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007652:	1ac0      	subs	r0, r0, r3
 8007654:	2300      	movs	r3, #0
 8007656:	4602      	mov	r2, r0
 8007658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800765a:	6a21      	ldr	r1, [r4, #32]
 800765c:	4628      	mov	r0, r5
 800765e:	47b0      	blx	r6
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	d106      	bne.n	8007674 <__sflush_r+0x68>
 8007666:	6829      	ldr	r1, [r5, #0]
 8007668:	291d      	cmp	r1, #29
 800766a:	d82b      	bhi.n	80076c4 <__sflush_r+0xb8>
 800766c:	4a29      	ldr	r2, [pc, #164]	; (8007714 <__sflush_r+0x108>)
 800766e:	410a      	asrs	r2, r1
 8007670:	07d6      	lsls	r6, r2, #31
 8007672:	d427      	bmi.n	80076c4 <__sflush_r+0xb8>
 8007674:	2200      	movs	r2, #0
 8007676:	6062      	str	r2, [r4, #4]
 8007678:	04d9      	lsls	r1, r3, #19
 800767a:	6922      	ldr	r2, [r4, #16]
 800767c:	6022      	str	r2, [r4, #0]
 800767e:	d504      	bpl.n	800768a <__sflush_r+0x7e>
 8007680:	1c42      	adds	r2, r0, #1
 8007682:	d101      	bne.n	8007688 <__sflush_r+0x7c>
 8007684:	682b      	ldr	r3, [r5, #0]
 8007686:	b903      	cbnz	r3, 800768a <__sflush_r+0x7e>
 8007688:	6560      	str	r0, [r4, #84]	; 0x54
 800768a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800768c:	602f      	str	r7, [r5, #0]
 800768e:	2900      	cmp	r1, #0
 8007690:	d0c9      	beq.n	8007626 <__sflush_r+0x1a>
 8007692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007696:	4299      	cmp	r1, r3
 8007698:	d002      	beq.n	80076a0 <__sflush_r+0x94>
 800769a:	4628      	mov	r0, r5
 800769c:	f7ff fc96 	bl	8006fcc <_free_r>
 80076a0:	2000      	movs	r0, #0
 80076a2:	6360      	str	r0, [r4, #52]	; 0x34
 80076a4:	e7c0      	b.n	8007628 <__sflush_r+0x1c>
 80076a6:	2301      	movs	r3, #1
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b0      	blx	r6
 80076ac:	1c41      	adds	r1, r0, #1
 80076ae:	d1c8      	bne.n	8007642 <__sflush_r+0x36>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0c5      	beq.n	8007642 <__sflush_r+0x36>
 80076b6:	2b1d      	cmp	r3, #29
 80076b8:	d001      	beq.n	80076be <__sflush_r+0xb2>
 80076ba:	2b16      	cmp	r3, #22
 80076bc:	d101      	bne.n	80076c2 <__sflush_r+0xb6>
 80076be:	602f      	str	r7, [r5, #0]
 80076c0:	e7b1      	b.n	8007626 <__sflush_r+0x1a>
 80076c2:	89a3      	ldrh	r3, [r4, #12]
 80076c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c8:	81a3      	strh	r3, [r4, #12]
 80076ca:	e7ad      	b.n	8007628 <__sflush_r+0x1c>
 80076cc:	690f      	ldr	r7, [r1, #16]
 80076ce:	2f00      	cmp	r7, #0
 80076d0:	d0a9      	beq.n	8007626 <__sflush_r+0x1a>
 80076d2:	0793      	lsls	r3, r2, #30
 80076d4:	680e      	ldr	r6, [r1, #0]
 80076d6:	bf08      	it	eq
 80076d8:	694b      	ldreq	r3, [r1, #20]
 80076da:	600f      	str	r7, [r1, #0]
 80076dc:	bf18      	it	ne
 80076de:	2300      	movne	r3, #0
 80076e0:	eba6 0807 	sub.w	r8, r6, r7
 80076e4:	608b      	str	r3, [r1, #8]
 80076e6:	f1b8 0f00 	cmp.w	r8, #0
 80076ea:	dd9c      	ble.n	8007626 <__sflush_r+0x1a>
 80076ec:	6a21      	ldr	r1, [r4, #32]
 80076ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076f0:	4643      	mov	r3, r8
 80076f2:	463a      	mov	r2, r7
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b0      	blx	r6
 80076f8:	2800      	cmp	r0, #0
 80076fa:	dc06      	bgt.n	800770a <__sflush_r+0xfe>
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007702:	81a3      	strh	r3, [r4, #12]
 8007704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007708:	e78e      	b.n	8007628 <__sflush_r+0x1c>
 800770a:	4407      	add	r7, r0
 800770c:	eba8 0800 	sub.w	r8, r8, r0
 8007710:	e7e9      	b.n	80076e6 <__sflush_r+0xda>
 8007712:	bf00      	nop
 8007714:	dfbffffe 	.word	0xdfbffffe

08007718 <_fflush_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	690b      	ldr	r3, [r1, #16]
 800771c:	4605      	mov	r5, r0
 800771e:	460c      	mov	r4, r1
 8007720:	b913      	cbnz	r3, 8007728 <_fflush_r+0x10>
 8007722:	2500      	movs	r5, #0
 8007724:	4628      	mov	r0, r5
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	b118      	cbz	r0, 8007732 <_fflush_r+0x1a>
 800772a:	6a03      	ldr	r3, [r0, #32]
 800772c:	b90b      	cbnz	r3, 8007732 <_fflush_r+0x1a>
 800772e:	f7ff fac9 	bl	8006cc4 <__sinit>
 8007732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f3      	beq.n	8007722 <_fflush_r+0xa>
 800773a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800773c:	07d0      	lsls	r0, r2, #31
 800773e:	d404      	bmi.n	800774a <_fflush_r+0x32>
 8007740:	0599      	lsls	r1, r3, #22
 8007742:	d402      	bmi.n	800774a <_fflush_r+0x32>
 8007744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007746:	f7ff fc29 	bl	8006f9c <__retarget_lock_acquire_recursive>
 800774a:	4628      	mov	r0, r5
 800774c:	4621      	mov	r1, r4
 800774e:	f7ff ff5d 	bl	800760c <__sflush_r>
 8007752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007754:	07da      	lsls	r2, r3, #31
 8007756:	4605      	mov	r5, r0
 8007758:	d4e4      	bmi.n	8007724 <_fflush_r+0xc>
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	059b      	lsls	r3, r3, #22
 800775e:	d4e1      	bmi.n	8007724 <_fflush_r+0xc>
 8007760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007762:	f7ff fc1c 	bl	8006f9e <__retarget_lock_release_recursive>
 8007766:	e7dd      	b.n	8007724 <_fflush_r+0xc>

08007768 <_putc_r>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	460d      	mov	r5, r1
 800776c:	4614      	mov	r4, r2
 800776e:	4606      	mov	r6, r0
 8007770:	b118      	cbz	r0, 800777a <_putc_r+0x12>
 8007772:	6a03      	ldr	r3, [r0, #32]
 8007774:	b90b      	cbnz	r3, 800777a <_putc_r+0x12>
 8007776:	f7ff faa5 	bl	8006cc4 <__sinit>
 800777a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800777c:	07d8      	lsls	r0, r3, #31
 800777e:	d405      	bmi.n	800778c <_putc_r+0x24>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	0599      	lsls	r1, r3, #22
 8007784:	d402      	bmi.n	800778c <_putc_r+0x24>
 8007786:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007788:	f7ff fc08 	bl	8006f9c <__retarget_lock_acquire_recursive>
 800778c:	68a3      	ldr	r3, [r4, #8]
 800778e:	3b01      	subs	r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	60a3      	str	r3, [r4, #8]
 8007794:	da05      	bge.n	80077a2 <_putc_r+0x3a>
 8007796:	69a2      	ldr	r2, [r4, #24]
 8007798:	4293      	cmp	r3, r2
 800779a:	db12      	blt.n	80077c2 <_putc_r+0x5a>
 800779c:	b2eb      	uxtb	r3, r5
 800779e:	2b0a      	cmp	r3, #10
 80077a0:	d00f      	beq.n	80077c2 <_putc_r+0x5a>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	6022      	str	r2, [r4, #0]
 80077a8:	701d      	strb	r5, [r3, #0]
 80077aa:	b2ed      	uxtb	r5, r5
 80077ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077ae:	07da      	lsls	r2, r3, #31
 80077b0:	d405      	bmi.n	80077be <_putc_r+0x56>
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	059b      	lsls	r3, r3, #22
 80077b6:	d402      	bmi.n	80077be <_putc_r+0x56>
 80077b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ba:	f7ff fbf0 	bl	8006f9e <__retarget_lock_release_recursive>
 80077be:	4628      	mov	r0, r5
 80077c0:	bd70      	pop	{r4, r5, r6, pc}
 80077c2:	4629      	mov	r1, r5
 80077c4:	4622      	mov	r2, r4
 80077c6:	4630      	mov	r0, r6
 80077c8:	f000 f802 	bl	80077d0 <__swbuf_r>
 80077cc:	4605      	mov	r5, r0
 80077ce:	e7ed      	b.n	80077ac <_putc_r+0x44>

080077d0 <__swbuf_r>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	460e      	mov	r6, r1
 80077d4:	4614      	mov	r4, r2
 80077d6:	4605      	mov	r5, r0
 80077d8:	b118      	cbz	r0, 80077e2 <__swbuf_r+0x12>
 80077da:	6a03      	ldr	r3, [r0, #32]
 80077dc:	b90b      	cbnz	r3, 80077e2 <__swbuf_r+0x12>
 80077de:	f7ff fa71 	bl	8006cc4 <__sinit>
 80077e2:	69a3      	ldr	r3, [r4, #24]
 80077e4:	60a3      	str	r3, [r4, #8]
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	071a      	lsls	r2, r3, #28
 80077ea:	d525      	bpl.n	8007838 <__swbuf_r+0x68>
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	b31b      	cbz	r3, 8007838 <__swbuf_r+0x68>
 80077f0:	6823      	ldr	r3, [r4, #0]
 80077f2:	6922      	ldr	r2, [r4, #16]
 80077f4:	1a98      	subs	r0, r3, r2
 80077f6:	6963      	ldr	r3, [r4, #20]
 80077f8:	b2f6      	uxtb	r6, r6
 80077fa:	4283      	cmp	r3, r0
 80077fc:	4637      	mov	r7, r6
 80077fe:	dc04      	bgt.n	800780a <__swbuf_r+0x3a>
 8007800:	4621      	mov	r1, r4
 8007802:	4628      	mov	r0, r5
 8007804:	f7ff ff88 	bl	8007718 <_fflush_r>
 8007808:	b9e0      	cbnz	r0, 8007844 <__swbuf_r+0x74>
 800780a:	68a3      	ldr	r3, [r4, #8]
 800780c:	3b01      	subs	r3, #1
 800780e:	60a3      	str	r3, [r4, #8]
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	6022      	str	r2, [r4, #0]
 8007816:	701e      	strb	r6, [r3, #0]
 8007818:	6962      	ldr	r2, [r4, #20]
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	429a      	cmp	r2, r3
 800781e:	d004      	beq.n	800782a <__swbuf_r+0x5a>
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	07db      	lsls	r3, r3, #31
 8007824:	d506      	bpl.n	8007834 <__swbuf_r+0x64>
 8007826:	2e0a      	cmp	r6, #10
 8007828:	d104      	bne.n	8007834 <__swbuf_r+0x64>
 800782a:	4621      	mov	r1, r4
 800782c:	4628      	mov	r0, r5
 800782e:	f7ff ff73 	bl	8007718 <_fflush_r>
 8007832:	b938      	cbnz	r0, 8007844 <__swbuf_r+0x74>
 8007834:	4638      	mov	r0, r7
 8007836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007838:	4621      	mov	r1, r4
 800783a:	4628      	mov	r0, r5
 800783c:	f000 f806 	bl	800784c <__swsetup_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	d0d5      	beq.n	80077f0 <__swbuf_r+0x20>
 8007844:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007848:	e7f4      	b.n	8007834 <__swbuf_r+0x64>
	...

0800784c <__swsetup_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	4b2a      	ldr	r3, [pc, #168]	; (80078f8 <__swsetup_r+0xac>)
 8007850:	4605      	mov	r5, r0
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	460c      	mov	r4, r1
 8007856:	b118      	cbz	r0, 8007860 <__swsetup_r+0x14>
 8007858:	6a03      	ldr	r3, [r0, #32]
 800785a:	b90b      	cbnz	r3, 8007860 <__swsetup_r+0x14>
 800785c:	f7ff fa32 	bl	8006cc4 <__sinit>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007866:	0718      	lsls	r0, r3, #28
 8007868:	d422      	bmi.n	80078b0 <__swsetup_r+0x64>
 800786a:	06d9      	lsls	r1, r3, #27
 800786c:	d407      	bmi.n	800787e <__swsetup_r+0x32>
 800786e:	2309      	movs	r3, #9
 8007870:	602b      	str	r3, [r5, #0]
 8007872:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007876:	81a3      	strh	r3, [r4, #12]
 8007878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800787c:	e034      	b.n	80078e8 <__swsetup_r+0x9c>
 800787e:	0758      	lsls	r0, r3, #29
 8007880:	d512      	bpl.n	80078a8 <__swsetup_r+0x5c>
 8007882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007884:	b141      	cbz	r1, 8007898 <__swsetup_r+0x4c>
 8007886:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800788a:	4299      	cmp	r1, r3
 800788c:	d002      	beq.n	8007894 <__swsetup_r+0x48>
 800788e:	4628      	mov	r0, r5
 8007890:	f7ff fb9c 	bl	8006fcc <_free_r>
 8007894:	2300      	movs	r3, #0
 8007896:	6363      	str	r3, [r4, #52]	; 0x34
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800789e:	81a3      	strh	r3, [r4, #12]
 80078a0:	2300      	movs	r3, #0
 80078a2:	6063      	str	r3, [r4, #4]
 80078a4:	6923      	ldr	r3, [r4, #16]
 80078a6:	6023      	str	r3, [r4, #0]
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	f043 0308 	orr.w	r3, r3, #8
 80078ae:	81a3      	strh	r3, [r4, #12]
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	b94b      	cbnz	r3, 80078c8 <__swsetup_r+0x7c>
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078be:	d003      	beq.n	80078c8 <__swsetup_r+0x7c>
 80078c0:	4621      	mov	r1, r4
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f884 	bl	80079d0 <__smakebuf_r>
 80078c8:	89a0      	ldrh	r0, [r4, #12]
 80078ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078ce:	f010 0301 	ands.w	r3, r0, #1
 80078d2:	d00a      	beq.n	80078ea <__swsetup_r+0x9e>
 80078d4:	2300      	movs	r3, #0
 80078d6:	60a3      	str	r3, [r4, #8]
 80078d8:	6963      	ldr	r3, [r4, #20]
 80078da:	425b      	negs	r3, r3
 80078dc:	61a3      	str	r3, [r4, #24]
 80078de:	6923      	ldr	r3, [r4, #16]
 80078e0:	b943      	cbnz	r3, 80078f4 <__swsetup_r+0xa8>
 80078e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078e6:	d1c4      	bne.n	8007872 <__swsetup_r+0x26>
 80078e8:	bd38      	pop	{r3, r4, r5, pc}
 80078ea:	0781      	lsls	r1, r0, #30
 80078ec:	bf58      	it	pl
 80078ee:	6963      	ldrpl	r3, [r4, #20]
 80078f0:	60a3      	str	r3, [r4, #8]
 80078f2:	e7f4      	b.n	80078de <__swsetup_r+0x92>
 80078f4:	2000      	movs	r0, #0
 80078f6:	e7f7      	b.n	80078e8 <__swsetup_r+0x9c>
 80078f8:	200000b0 	.word	0x200000b0

080078fc <_raise_r>:
 80078fc:	291f      	cmp	r1, #31
 80078fe:	b538      	push	{r3, r4, r5, lr}
 8007900:	4604      	mov	r4, r0
 8007902:	460d      	mov	r5, r1
 8007904:	d904      	bls.n	8007910 <_raise_r+0x14>
 8007906:	2316      	movs	r3, #22
 8007908:	6003      	str	r3, [r0, #0]
 800790a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007912:	b112      	cbz	r2, 800791a <_raise_r+0x1e>
 8007914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007918:	b94b      	cbnz	r3, 800792e <_raise_r+0x32>
 800791a:	4620      	mov	r0, r4
 800791c:	f000 f830 	bl	8007980 <_getpid_r>
 8007920:	462a      	mov	r2, r5
 8007922:	4601      	mov	r1, r0
 8007924:	4620      	mov	r0, r4
 8007926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792a:	f000 b817 	b.w	800795c <_kill_r>
 800792e:	2b01      	cmp	r3, #1
 8007930:	d00a      	beq.n	8007948 <_raise_r+0x4c>
 8007932:	1c59      	adds	r1, r3, #1
 8007934:	d103      	bne.n	800793e <_raise_r+0x42>
 8007936:	2316      	movs	r3, #22
 8007938:	6003      	str	r3, [r0, #0]
 800793a:	2001      	movs	r0, #1
 800793c:	e7e7      	b.n	800790e <_raise_r+0x12>
 800793e:	2400      	movs	r4, #0
 8007940:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007944:	4628      	mov	r0, r5
 8007946:	4798      	blx	r3
 8007948:	2000      	movs	r0, #0
 800794a:	e7e0      	b.n	800790e <_raise_r+0x12>

0800794c <raise>:
 800794c:	4b02      	ldr	r3, [pc, #8]	; (8007958 <raise+0xc>)
 800794e:	4601      	mov	r1, r0
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	f7ff bfd3 	b.w	80078fc <_raise_r>
 8007956:	bf00      	nop
 8007958:	200000b0 	.word	0x200000b0

0800795c <_kill_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d07      	ldr	r5, [pc, #28]	; (800797c <_kill_r+0x20>)
 8007960:	2300      	movs	r3, #0
 8007962:	4604      	mov	r4, r0
 8007964:	4608      	mov	r0, r1
 8007966:	4611      	mov	r1, r2
 8007968:	602b      	str	r3, [r5, #0]
 800796a:	f7f9 f952 	bl	8000c12 <_kill>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	d102      	bne.n	8007978 <_kill_r+0x1c>
 8007972:	682b      	ldr	r3, [r5, #0]
 8007974:	b103      	cbz	r3, 8007978 <_kill_r+0x1c>
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	bd38      	pop	{r3, r4, r5, pc}
 800797a:	bf00      	nop
 800797c:	20000390 	.word	0x20000390

08007980 <_getpid_r>:
 8007980:	f7f9 b945 	b.w	8000c0e <_getpid>

08007984 <__swhatbuf_r>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	460c      	mov	r4, r1
 8007988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798c:	2900      	cmp	r1, #0
 800798e:	b096      	sub	sp, #88	; 0x58
 8007990:	4615      	mov	r5, r2
 8007992:	461e      	mov	r6, r3
 8007994:	da0d      	bge.n	80079b2 <__swhatbuf_r+0x2e>
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	f013 0f80 	tst.w	r3, #128	; 0x80
 800799c:	f04f 0100 	mov.w	r1, #0
 80079a0:	bf0c      	ite	eq
 80079a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80079a6:	2340      	movne	r3, #64	; 0x40
 80079a8:	2000      	movs	r0, #0
 80079aa:	6031      	str	r1, [r6, #0]
 80079ac:	602b      	str	r3, [r5, #0]
 80079ae:	b016      	add	sp, #88	; 0x58
 80079b0:	bd70      	pop	{r4, r5, r6, pc}
 80079b2:	466a      	mov	r2, sp
 80079b4:	f000 f848 	bl	8007a48 <_fstat_r>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	dbec      	blt.n	8007996 <__swhatbuf_r+0x12>
 80079bc:	9901      	ldr	r1, [sp, #4]
 80079be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80079c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80079c6:	4259      	negs	r1, r3
 80079c8:	4159      	adcs	r1, r3
 80079ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ce:	e7eb      	b.n	80079a8 <__swhatbuf_r+0x24>

080079d0 <__smakebuf_r>:
 80079d0:	898b      	ldrh	r3, [r1, #12]
 80079d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079d4:	079d      	lsls	r5, r3, #30
 80079d6:	4606      	mov	r6, r0
 80079d8:	460c      	mov	r4, r1
 80079da:	d507      	bpl.n	80079ec <__smakebuf_r+0x1c>
 80079dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	6123      	str	r3, [r4, #16]
 80079e4:	2301      	movs	r3, #1
 80079e6:	6163      	str	r3, [r4, #20]
 80079e8:	b002      	add	sp, #8
 80079ea:	bd70      	pop	{r4, r5, r6, pc}
 80079ec:	ab01      	add	r3, sp, #4
 80079ee:	466a      	mov	r2, sp
 80079f0:	f7ff ffc8 	bl	8007984 <__swhatbuf_r>
 80079f4:	9900      	ldr	r1, [sp, #0]
 80079f6:	4605      	mov	r5, r0
 80079f8:	4630      	mov	r0, r6
 80079fa:	f7ff f85d 	bl	8006ab8 <_malloc_r>
 80079fe:	b948      	cbnz	r0, 8007a14 <__smakebuf_r+0x44>
 8007a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a04:	059a      	lsls	r2, r3, #22
 8007a06:	d4ef      	bmi.n	80079e8 <__smakebuf_r+0x18>
 8007a08:	f023 0303 	bic.w	r3, r3, #3
 8007a0c:	f043 0302 	orr.w	r3, r3, #2
 8007a10:	81a3      	strh	r3, [r4, #12]
 8007a12:	e7e3      	b.n	80079dc <__smakebuf_r+0xc>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	6020      	str	r0, [r4, #0]
 8007a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	9b00      	ldr	r3, [sp, #0]
 8007a20:	6163      	str	r3, [r4, #20]
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	6120      	str	r0, [r4, #16]
 8007a26:	b15b      	cbz	r3, 8007a40 <__smakebuf_r+0x70>
 8007a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	f000 f81d 	bl	8007a6c <_isatty_r>
 8007a32:	b128      	cbz	r0, 8007a40 <__smakebuf_r+0x70>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f023 0303 	bic.w	r3, r3, #3
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	81a3      	strh	r3, [r4, #12]
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	431d      	orrs	r5, r3
 8007a44:	81a5      	strh	r5, [r4, #12]
 8007a46:	e7cf      	b.n	80079e8 <__smakebuf_r+0x18>

08007a48 <_fstat_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4d07      	ldr	r5, [pc, #28]	; (8007a68 <_fstat_r+0x20>)
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4608      	mov	r0, r1
 8007a52:	4611      	mov	r1, r2
 8007a54:	602b      	str	r3, [r5, #0]
 8007a56:	f7f9 f8fd 	bl	8000c54 <_fstat>
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	d102      	bne.n	8007a64 <_fstat_r+0x1c>
 8007a5e:	682b      	ldr	r3, [r5, #0]
 8007a60:	b103      	cbz	r3, 8007a64 <_fstat_r+0x1c>
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	bd38      	pop	{r3, r4, r5, pc}
 8007a66:	bf00      	nop
 8007a68:	20000390 	.word	0x20000390

08007a6c <_isatty_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d06      	ldr	r5, [pc, #24]	; (8007a88 <_isatty_r+0x1c>)
 8007a70:	2300      	movs	r3, #0
 8007a72:	4604      	mov	r4, r0
 8007a74:	4608      	mov	r0, r1
 8007a76:	602b      	str	r3, [r5, #0]
 8007a78:	f7f9 f8f1 	bl	8000c5e <_isatty>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d102      	bne.n	8007a86 <_isatty_r+0x1a>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	b103      	cbz	r3, 8007a86 <_isatty_r+0x1a>
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	20000390 	.word	0x20000390

08007a8c <_init>:
 8007a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8e:	bf00      	nop
 8007a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a92:	bc08      	pop	{r3}
 8007a94:	469e      	mov	lr, r3
 8007a96:	4770      	bx	lr

08007a98 <_fini>:
 8007a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9a:	bf00      	nop
 8007a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9e:	bc08      	pop	{r3}
 8007aa0:	469e      	mov	lr, r3
 8007aa2:	4770      	bx	lr
