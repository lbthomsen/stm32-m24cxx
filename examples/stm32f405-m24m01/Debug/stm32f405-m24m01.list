
stm32f405-m24m01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f78  0800be04  0800be04  0001be04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd7c  0800cd7c  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd7c  0800cd7c  0001cd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd84  0800cd84  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd84  0800cd84  0001cd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd88  0800cd88  0001cd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800cd8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          000003e4  200000b4  200000b4  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000498  20000498  000200b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001256d  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021a0  00000000  00000000  00032694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fe8  00000000  00000000  00034838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dfd  00000000  00000000  00035820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002096d  00000000  00000000  0003661d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012a57  00000000  00000000  00056f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bedf5  00000000  00000000  000699e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f24  00000000  00000000  001287d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0012d6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bdec 	.word	0x0800bdec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	0800bdec 	.word	0x0800bdec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b984 	b.w	80005a0 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f81a 	bl	80002d8 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__popcountsi2>:
 80002b0:	0843      	lsrs	r3, r0, #1
 80002b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	0883      	lsrs	r3, r0, #2
 80002ba:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002c2:	4418      	add	r0, r3
 80002c4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002c8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002cc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002d0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002d4:	0e00      	lsrs	r0, r0, #24
 80002d6:	4770      	bx	lr

080002d8 <__udivmoddi4>:
 80002d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002dc:	9e08      	ldr	r6, [sp, #32]
 80002de:	460d      	mov	r5, r1
 80002e0:	4604      	mov	r4, r0
 80002e2:	460f      	mov	r7, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14a      	bne.n	800037e <__udivmoddi4+0xa6>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	4694      	mov	ip, r2
 80002ec:	d965      	bls.n	80003ba <__udivmoddi4+0xe2>
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	b143      	cbz	r3, 8000306 <__udivmoddi4+0x2e>
 80002f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f8:	f1c3 0220 	rsb	r2, r3, #32
 80002fc:	409f      	lsls	r7, r3
 80002fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000302:	4317      	orrs	r7, r2
 8000304:	409c      	lsls	r4, r3
 8000306:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030a:	fa1f f58c 	uxth.w	r5, ip
 800030e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fb0e 7711 	mls	r7, lr, r1, r7
 8000318:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800031c:	fb01 f005 	mul.w	r0, r1, r5
 8000320:	4290      	cmp	r0, r2
 8000322:	d90a      	bls.n	800033a <__udivmoddi4+0x62>
 8000324:	eb1c 0202 	adds.w	r2, ip, r2
 8000328:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800032c:	f080 811c 	bcs.w	8000568 <__udivmoddi4+0x290>
 8000330:	4290      	cmp	r0, r2
 8000332:	f240 8119 	bls.w	8000568 <__udivmoddi4+0x290>
 8000336:	3902      	subs	r1, #2
 8000338:	4462      	add	r2, ip
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	b2a4      	uxth	r4, r4
 800033e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000342:	fb0e 2210 	mls	r2, lr, r0, r2
 8000346:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034a:	fb00 f505 	mul.w	r5, r0, r5
 800034e:	42a5      	cmp	r5, r4
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x90>
 8000352:	eb1c 0404 	adds.w	r4, ip, r4
 8000356:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800035a:	f080 8107 	bcs.w	800056c <__udivmoddi4+0x294>
 800035e:	42a5      	cmp	r5, r4
 8000360:	f240 8104 	bls.w	800056c <__udivmoddi4+0x294>
 8000364:	4464      	add	r4, ip
 8000366:	3802      	subs	r0, #2
 8000368:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	2100      	movs	r1, #0
 8000370:	b11e      	cbz	r6, 800037a <__udivmoddi4+0xa2>
 8000372:	40dc      	lsrs	r4, r3
 8000374:	2300      	movs	r3, #0
 8000376:	e9c6 4300 	strd	r4, r3, [r6]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0xbc>
 8000382:	2e00      	cmp	r6, #0
 8000384:	f000 80ed 	beq.w	8000562 <__udivmoddi4+0x28a>
 8000388:	2100      	movs	r1, #0
 800038a:	e9c6 0500 	strd	r0, r5, [r6]
 800038e:	4608      	mov	r0, r1
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d149      	bne.n	8000430 <__udivmoddi4+0x158>
 800039c:	42ab      	cmp	r3, r5
 800039e:	d302      	bcc.n	80003a6 <__udivmoddi4+0xce>
 80003a0:	4282      	cmp	r2, r0
 80003a2:	f200 80f8 	bhi.w	8000596 <__udivmoddi4+0x2be>
 80003a6:	1a84      	subs	r4, r0, r2
 80003a8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	4617      	mov	r7, r2
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d0e2      	beq.n	800037a <__udivmoddi4+0xa2>
 80003b4:	e9c6 4700 	strd	r4, r7, [r6]
 80003b8:	e7df      	b.n	800037a <__udivmoddi4+0xa2>
 80003ba:	b902      	cbnz	r2, 80003be <__udivmoddi4+0xe6>
 80003bc:	deff      	udf	#255	; 0xff
 80003be:	fab2 f382 	clz	r3, r2
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	f040 8090 	bne.w	80004e8 <__udivmoddi4+0x210>
 80003c8:	1a8a      	subs	r2, r1, r2
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2101      	movs	r1, #1
 80003d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d8:	fb07 2015 	mls	r0, r7, r5, r2
 80003dc:	0c22      	lsrs	r2, r4, #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb0e f005 	mul.w	r0, lr, r5
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x124>
 80003ea:	eb1c 0202 	adds.w	r2, ip, r2
 80003ee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x122>
 80003f4:	4290      	cmp	r0, r2
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2b8>
 80003fa:	4645      	mov	r5, r8
 80003fc:	1a12      	subs	r2, r2, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb2 f0f7 	udiv	r0, r2, r7
 8000404:	fb07 2210 	mls	r2, r7, r0, r2
 8000408:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x14e>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x14c>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2c2>
 8000424:	4610      	mov	r0, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042e:	e79f      	b.n	8000370 <__udivmoddi4+0x98>
 8000430:	f1c1 0720 	rsb	r7, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa05 f401 	lsl.w	r4, r5, r1
 8000442:	fa20 f307 	lsr.w	r3, r0, r7
 8000446:	40fd      	lsrs	r5, r7
 8000448:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044c:	4323      	orrs	r3, r4
 800044e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000452:	fa1f fe8c 	uxth.w	lr, ip
 8000456:	fb09 5518 	mls	r5, r9, r8, r5
 800045a:	0c1c      	lsrs	r4, r3, #16
 800045c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000460:	fb08 f50e 	mul.w	r5, r8, lr
 8000464:	42a5      	cmp	r5, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	fa00 f001 	lsl.w	r0, r0, r1
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b0>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2b4>
 800047c:	42a5      	cmp	r5, r4
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2b4>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4464      	add	r4, ip
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	b29d      	uxth	r5, r3
 800048c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000490:	fb09 4413 	mls	r4, r9, r3, r4
 8000494:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000498:	fb03 fe0e 	mul.w	lr, r3, lr
 800049c:	45a6      	cmp	lr, r4
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1da>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2ac>
 80004aa:	45a6      	cmp	lr, r4
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2ac>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	4464      	add	r4, ip
 80004b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ba:	eba4 040e 	sub.w	r4, r4, lr
 80004be:	42ac      	cmp	r4, r5
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46ae      	mov	lr, r5
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x29c>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x298>
 80004c8:	b156      	cbz	r6, 80004e0 <__udivmoddi4+0x208>
 80004ca:	ebb0 0208 	subs.w	r2, r0, r8
 80004ce:	eb64 040e 	sbc.w	r4, r4, lr
 80004d2:	fa04 f707 	lsl.w	r7, r4, r7
 80004d6:	40ca      	lsrs	r2, r1
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	4317      	orrs	r7, r2
 80004dc:	e9c6 7400 	strd	r7, r4, [r6]
 80004e0:	4618      	mov	r0, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e8:	f1c3 0120 	rsb	r1, r3, #32
 80004ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f0:	fa20 f201 	lsr.w	r2, r0, r1
 80004f4:	fa25 f101 	lsr.w	r1, r5, r1
 80004f8:	409d      	lsls	r5, r3
 80004fa:	432a      	orrs	r2, r5
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb1 f0f7 	udiv	r0, r1, r7
 8000508:	fb07 1510 	mls	r5, r7, r0, r1
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000512:	fb00 f50e 	mul.w	r5, r0, lr
 8000516:	428d      	cmp	r5, r1
 8000518:	fa04 f403 	lsl.w	r4, r4, r3
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x258>
 800051e:	eb1c 0101 	adds.w	r1, ip, r1
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b0>
 8000528:	428d      	cmp	r5, r1
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b0>
 800052c:	3802      	subs	r0, #2
 800052e:	4461      	add	r1, ip
 8000530:	1b49      	subs	r1, r1, r5
 8000532:	b292      	uxth	r2, r2
 8000534:	fbb1 f5f7 	udiv	r5, r1, r7
 8000538:	fb07 1115 	mls	r1, r7, r5, r1
 800053c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000540:	fb05 f10e 	mul.w	r1, r5, lr
 8000544:	4291      	cmp	r1, r2
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x282>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2a8>
 8000552:	4291      	cmp	r1, r2
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2a8>
 8000556:	3d02      	subs	r5, #2
 8000558:	4462      	add	r2, ip
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0xfc>
 8000562:	4631      	mov	r1, r6
 8000564:	4630      	mov	r0, r6
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xa2>
 8000568:	4639      	mov	r1, r7
 800056a:	e6e6      	b.n	800033a <__udivmoddi4+0x62>
 800056c:	4610      	mov	r0, r2
 800056e:	e6fb      	b.n	8000368 <__udivmoddi4+0x90>
 8000570:	4548      	cmp	r0, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f0>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb65 0e0c 	sbc.w	lr, r5, ip
 800057c:	3b01      	subs	r3, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f0>
 8000580:	4645      	mov	r5, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x282>
 8000584:	462b      	mov	r3, r5
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1da>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x258>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b0>
 8000590:	3d02      	subs	r5, #2
 8000592:	4462      	add	r2, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x124>
 8000596:	4608      	mov	r0, r1
 8000598:	e70a      	b.n	80003b0 <__udivmoddi4+0xd8>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x14e>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <m24cxx_littlefs_init>:
};

lfs_t littlefs;
M24CXX_HandleTypeDef *m24cxx_handle;

int m24cxx_littlefs_init(M24CXX_HandleTypeDef *m24cxx_init) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    LFS_DBG("LittleFS Init");
    m24cxx_handle = m24cxx_init;
 80005ac:	4a0b      	ldr	r2, [pc, #44]	; (80005dc <m24cxx_littlefs_init+0x38>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]

    //littlefs_config.block_size = w25qxx_handle->sector_size;
    //littlefs_config.block_count = w25qxx_handle->sectors_in_block * w25qxx_handle->block_count;

    int err = lfs_mount(&littlefs, &littlefs_config);
 80005b2:	490b      	ldr	r1, [pc, #44]	; (80005e0 <m24cxx_littlefs_init+0x3c>)
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <m24cxx_littlefs_init+0x40>)
 80005b6:	f00a f883 	bl	800a6c0 <lfs_mount>
 80005ba:	60f8      	str	r0, [r7, #12]

    // reformat if we can't mount the filesystem
    // this should only happen on the first boot
    if (err) {
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d007      	beq.n	80005d2 <m24cxx_littlefs_init+0x2e>
        lfs_format(&littlefs, &littlefs_config);
 80005c2:	4907      	ldr	r1, [pc, #28]	; (80005e0 <m24cxx_littlefs_init+0x3c>)
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <m24cxx_littlefs_init+0x40>)
 80005c6:	f00a f865 	bl	800a694 <lfs_format>
        lfs_mount(&littlefs, &littlefs_config);
 80005ca:	4905      	ldr	r1, [pc, #20]	; (80005e0 <m24cxx_littlefs_init+0x3c>)
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <m24cxx_littlefs_init+0x40>)
 80005ce:	f00a f877 	bl	800a6c0 <lfs_mount>
    }

    return 0;
 80005d2:	2300      	movs	r3, #0

}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000148 	.word	0x20000148
 80005e0:	20000000 	.word	0x20000000
 80005e4:	200000d0 	.word	0x200000d0

080005e8 <littlefs_read>:

int littlefs_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
 80005f4:	603b      	str	r3, [r7, #0]
    LFS_DBG("LittleFS Read b = 0x%04lx o = 0x%04lx s = 0x%04lx", block, off, size);
    if (m24cxx_read(m24cxx_handle, block * littlefs_config.block_size + off, buffer, size) != M24CXX_Ok)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <littlefs_read+0x40>)
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <littlefs_read+0x44>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	fb03 f202 	mul.w	r2, r3, r2
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	18d1      	adds	r1, r2, r3
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	f00a f9e0 	bl	800a9d0 <m24cxx_read>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <littlefs_read+0x34>
        return -1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061a:	e000      	b.n	800061e <littlefs_read+0x36>
    return 0;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000148 	.word	0x20000148
 800062c:	20000000 	.word	0x20000000

08000630 <littlefs_prog>:

int littlefs_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	603b      	str	r3, [r7, #0]
    LFS_DBG("LittleFS Prog b = 0x%04lx o = 0x%04lx s = 0x%04lx", block, off, size);
    if (m24cxx_write(m24cxx_handle, block * littlefs_config.block_size + off, (void*) buffer, size) != M24CXX_Ok)
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <littlefs_prog+0x40>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <littlefs_prog+0x44>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	fb03 f202 	mul.w	r2, r3, r2
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	18d1      	adds	r1, r2, r3
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	f00a fa54 	bl	800ab00 <m24cxx_write>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <littlefs_prog+0x34>
        return -1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000662:	e000      	b.n	8000666 <littlefs_prog+0x36>
    return 0;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000148 	.word	0x20000148
 8000674:	20000000 	.word	0x20000000

08000678 <littlefs_erase>:

int littlefs_erase(const struct lfs_config *c, lfs_block_t block) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
    LFS_DBG("LittleFS Erase b = 0x%04lx", block);
    if (m24cxx_erase(m24cxx_handle, block * littlefs_config.block_size, littlefs_config.block_size) != M24CXX_Ok)
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <littlefs_erase+0x38>)
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <littlefs_erase+0x3c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	fb02 f303 	mul.w	r3, r2, r3
 8000690:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <littlefs_erase+0x3c>)
 8000692:	69d2      	ldr	r2, [r2, #28]
 8000694:	4619      	mov	r1, r3
 8000696:	f00a fadd 	bl	800ac54 <m24cxx_erase>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <littlefs_erase+0x2e>
        return -1;
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	e000      	b.n	80006a8 <littlefs_erase+0x30>
    return 0;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000148 	.word	0x20000148
 80006b4:	20000000 	.word	0x20000000

080006b8 <littlefs_sync>:

int littlefs_sync(const struct lfs_config *c) {
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    LFS_DBG("LittleFS Sync");
    return 0;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d002      	beq.n	80006e8 <_write+0x18>
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d111      	bne.n	800070c <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006f0:	68b9      	ldr	r1, [r7, #8]
 80006f2:	4809      	ldr	r0, [pc, #36]	; (8000718 <_write+0x48>)
 80006f4:	f002 ff11 	bl	800351a <HAL_UART_Transmit>
 80006f8:	4603      	mov	r3, r0
 80006fa:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d101      	bne.n	8000706 <_write+0x36>
            return len;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	e004      	b.n	8000710 <_write+0x40>
        else
            return -1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800070a:	e001      	b.n	8000710 <_write+0x40>
    }
    return -1;
 800070c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000710:	4618      	mov	r0, r3
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200001a0 	.word	0x200001a0

0800071c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BTN_Pin) // If the button
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800072c:	d102      	bne.n	8000734 <HAL_GPIO_EXTI_Callback+0x18>
    {
        do_action = 1;
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <HAL_GPIO_EXTI_Callback+0x24>)
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
    }
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	200002ec 	.word	0x200002ec

08000744 <dump_buf>:

void dump_buf(uint8_t *buf, uint32_t size) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < size; ++i) {
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	e01c      	b.n	800078e <dump_buf+0x4a>
        if (i % 16 == 0) {
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	2b00      	cmp	r3, #0
 800075c:	d103      	bne.n	8000766 <dump_buf+0x22>
            printf("0x%08lx: ", i);
 800075e:	68f9      	ldr	r1, [r7, #12]
 8000760:	480f      	ldr	r0, [pc, #60]	; (80007a0 <dump_buf+0x5c>)
 8000762:	f00a fca7 	bl	800b0b4 <iprintf>
        }
        printf("%02x ", buf[i]);
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	4619      	mov	r1, r3
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <dump_buf+0x60>)
 8000772:	f00a fc9f 	bl	800b0b4 <iprintf>
        if ((i + 1) % 16 == 0)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	2b00      	cmp	r3, #0
 8000780:	d102      	bne.n	8000788 <dump_buf+0x44>
            printf("\n");
 8000782:	200a      	movs	r0, #10
 8000784:	f00a fca8 	bl	800b0d8 <putchar>
    for (uint32_t i = 0; i < size; ++i) {
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	3301      	adds	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	d3de      	bcc.n	8000754 <dump_buf+0x10>
    }
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	0800be04 	.word	0x0800be04
 80007a4:	0800be10 	.word	0x0800be10

080007a8 <fill_buffer>:

void fill_buffer(uint8_t *buf, uint32_t size, uint8_t type) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	4613      	mov	r3, r2
 80007b4:	71fb      	strb	r3, [r7, #7]
    switch (type) {
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b03      	cmp	r3, #3
 80007ba:	d82e      	bhi.n	800081a <fill_buffer+0x72>
 80007bc:	a201      	add	r2, pc, #4	; (adr r2, 80007c4 <fill_buffer+0x1c>)
 80007be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c2:	bf00      	nop
 80007c4:	080007d5 	.word	0x080007d5
 80007c8:	080007e1 	.word	0x080007e1
 80007cc:	080007ed 	.word	0x080007ed
 80007d0:	080007f9 	.word	0x080007f9
    case 0:
        memset(buf, 0x00, size);
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	2100      	movs	r1, #0
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f00a fcd8 	bl	800b18e <memset>
        break;
 80007de:	e01c      	b.n	800081a <fill_buffer+0x72>
    case 1:
        memset(buf, 0xff, size);
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	21ff      	movs	r1, #255	; 0xff
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f00a fcd2 	bl	800b18e <memset>
        break;
 80007ea:	e016      	b.n	800081a <fill_buffer+0x72>
    case 2:
        memset(buf, 0xaa, size);
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	21aa      	movs	r1, #170	; 0xaa
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f00a fccc 	bl	800b18e <memset>
        break;
 80007f6:	e010      	b.n	800081a <fill_buffer+0x72>
    case 3:
        for (uint32_t i = 0; i < size; ++i) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e008      	b.n	8000810 <fill_buffer+0x68>
            buf[i] = (uint8_t) i;
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	4413      	add	r3, r2
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < size; ++i) {
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3f2      	bcc.n	80007fe <fill_buffer+0x56>
        }
        break;
 8000818:	bf00      	nop
    }
}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop

08000824 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800082a:	f000 fd15 	bl	8001258 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800082e:	f000 fa17 	bl	8000c60 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000832:	f000 fad5 	bl	8000de0 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000836:	f000 fa7b 	bl	8000d30 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 800083a:	f000 faa7 	bl	8000d8c <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    DBG("\n\n\n--------\nStarting");
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <main+0x64>)
 8000840:	f00a fc38 	bl	800b0b4 <iprintf>
 8000844:	200a      	movs	r0, #10
 8000846:	f00a fc47 	bl	800b0d8 <putchar>

    // Wait a few ms to get ready
    HAL_Delay(10);
 800084a:	200a      	movs	r0, #10
 800084c:	f000 fd76 	bl	800133c <HAL_Delay>

    DBG("Scanning I2C bus:");
 8000850:	480e      	ldr	r0, [pc, #56]	; (800088c <main+0x68>)
 8000852:	f00a fc2f 	bl	800b0b4 <iprintf>
 8000856:	200a      	movs	r0, #10
 8000858:	f00a fc3e 	bl	800b0d8 <putchar>
    // Go through all possible i2c addresses
    for (uint8_t i = 0; i < 128; i++) {
 800085c:	2300      	movs	r3, #0
 800085e:	77fb      	strb	r3, [r7, #31]
 8000860:	e02c      	b.n	80008bc <main+0x98>

        if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 3, 100) == HAL_OK) {
 8000862:	7ffb      	ldrb	r3, [r7, #31]
 8000864:	b29b      	uxth	r3, r3
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	b299      	uxth	r1, r3
 800086a:	2364      	movs	r3, #100	; 0x64
 800086c:	2203      	movs	r2, #3
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <main+0x6c>)
 8000870:	f001 fce6 	bl	8002240 <HAL_I2C_IsDeviceReady>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d10e      	bne.n	8000898 <main+0x74>
            // We got an ack
            printf("%2x ", i);
 800087a:	7ffb      	ldrb	r3, [r7, #31]
 800087c:	4619      	mov	r1, r3
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <main+0x70>)
 8000880:	f00a fc18 	bl	800b0b4 <iprintf>
 8000884:	e00b      	b.n	800089e <main+0x7a>
 8000886:	bf00      	nop
 8000888:	0800be18 	.word	0x0800be18
 800088c:	0800be30 	.word	0x0800be30
 8000890:	2000014c 	.word	0x2000014c
 8000894:	0800be44 	.word	0x0800be44
        } else {
            printf("-- ");
 8000898:	48bd      	ldr	r0, [pc, #756]	; (8000b90 <main+0x36c>)
 800089a:	f00a fc0b 	bl	800b0b4 <iprintf>
        }

        if (i > 0 && (i + 1) % 16 == 0)
 800089e:	7ffb      	ldrb	r3, [r7, #31]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d008      	beq.n	80008b6 <main+0x92>
 80008a4:	7ffb      	ldrb	r3, [r7, #31]
 80008a6:	3301      	adds	r3, #1
 80008a8:	f003 030f 	and.w	r3, r3, #15
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <main+0x92>
            printf("\n");
 80008b0:	200a      	movs	r0, #10
 80008b2:	f00a fc11 	bl	800b0d8 <putchar>
    for (uint8_t i = 0; i < 128; i++) {
 80008b6:	7ffb      	ldrb	r3, [r7, #31]
 80008b8:	3301      	adds	r3, #1
 80008ba:	77fb      	strb	r3, [r7, #31]
 80008bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	dace      	bge.n	8000862 <main+0x3e>

    }

    printf("\n");
 80008c4:	200a      	movs	r0, #10
 80008c6:	f00a fc07 	bl	800b0d8 <putchar>

    if (m24cxx_init(&m24cxx, &hi2c1, 0x50) != M24CXX_Ok) {
 80008ca:	2250      	movs	r2, #80	; 0x50
 80008cc:	49b1      	ldr	r1, [pc, #708]	; (8000b94 <main+0x370>)
 80008ce:	48b2      	ldr	r0, [pc, #712]	; (8000b98 <main+0x374>)
 80008d0:	f00a f820 	bl	800a914 <m24cxx_init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d007      	beq.n	80008ea <main+0xc6>
        DBG("M24CXX Failed to initialize");
 80008da:	48b0      	ldr	r0, [pc, #704]	; (8000b9c <main+0x378>)
 80008dc:	f00a fbea 	bl	800b0b4 <iprintf>
 80008e0:	200a      	movs	r0, #10
 80008e2:	f00a fbf9 	bl	800b0d8 <putchar>
        Error_Handler();
 80008e6:	f000 fae1 	bl	8000eac <Error_Handler>
    }

    //m24cxx_erase_all(&m24cxx);

    m24cxx_littlefs_init(&m24cxx);
 80008ea:	48ab      	ldr	r0, [pc, #684]	; (8000b98 <main+0x374>)
 80008ec:	f7ff fe5a 	bl	80005a4 <m24cxx_littlefs_init>

    // read current count
    uint32_t boot_count = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]

    lfs_file_open(&littlefs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 80008f4:	f240 1303 	movw	r3, #259	; 0x103
 80008f8:	4aa9      	ldr	r2, [pc, #676]	; (8000ba0 <main+0x37c>)
 80008fa:	49aa      	ldr	r1, [pc, #680]	; (8000ba4 <main+0x380>)
 80008fc:	48aa      	ldr	r0, [pc, #680]	; (8000ba8 <main+0x384>)
 80008fe:	f009 fef5 	bl	800a6ec <lfs_file_open>
    lfs_file_read(&littlefs, &file, &boot_count, sizeof(boot_count));
 8000902:	f107 0208 	add.w	r2, r7, #8
 8000906:	2304      	movs	r3, #4
 8000908:	49a6      	ldr	r1, [pc, #664]	; (8000ba4 <main+0x380>)
 800090a:	48a7      	ldr	r0, [pc, #668]	; (8000ba8 <main+0x384>)
 800090c:	f009 ff4e 	bl	800a7ac <lfs_file_read>

    // update boot count
    boot_count += 1;
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	3301      	adds	r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
    lfs_file_rewind(&littlefs, &file);
 8000916:	49a3      	ldr	r1, [pc, #652]	; (8000ba4 <main+0x380>)
 8000918:	48a3      	ldr	r0, [pc, #652]	; (8000ba8 <main+0x384>)
 800091a:	f009 ffa7 	bl	800a86c <lfs_file_rewind>
    lfs_file_write(&littlefs, &file, &boot_count, sizeof(boot_count));
 800091e:	f107 0208 	add.w	r2, r7, #8
 8000922:	2304      	movs	r3, #4
 8000924:	499f      	ldr	r1, [pc, #636]	; (8000ba4 <main+0x380>)
 8000926:	48a0      	ldr	r0, [pc, #640]	; (8000ba8 <main+0x384>)
 8000928:	f009 ff70 	bl	800a80c <lfs_file_write>

    // remember the storage is not updated until the file is closed successfully
    lfs_file_close(&littlefs, &file);
 800092c:	499d      	ldr	r1, [pc, #628]	; (8000ba4 <main+0x380>)
 800092e:	489e      	ldr	r0, [pc, #632]	; (8000ba8 <main+0x384>)
 8000930:	f009 ff10 	bl	800a754 <lfs_file_close>

    uint32_t start_uptime = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]

    lfs_file_open(&littlefs, &file, "uptime", LFS_O_RDWR | LFS_O_CREAT);
 8000938:	f240 1303 	movw	r3, #259	; 0x103
 800093c:	4a9b      	ldr	r2, [pc, #620]	; (8000bac <main+0x388>)
 800093e:	4999      	ldr	r1, [pc, #612]	; (8000ba4 <main+0x380>)
 8000940:	4899      	ldr	r0, [pc, #612]	; (8000ba8 <main+0x384>)
 8000942:	f009 fed3 	bl	800a6ec <lfs_file_open>
    lfs_file_read(&littlefs, &file, &start_uptime, sizeof(start_uptime));
 8000946:	1d3a      	adds	r2, r7, #4
 8000948:	2304      	movs	r3, #4
 800094a:	4996      	ldr	r1, [pc, #600]	; (8000ba4 <main+0x380>)
 800094c:	4896      	ldr	r0, [pc, #600]	; (8000ba8 <main+0x384>)
 800094e:	f009 ff2d 	bl	800a7ac <lfs_file_read>
    lfs_file_close(&littlefs, &file);
 8000952:	4994      	ldr	r1, [pc, #592]	; (8000ba4 <main+0x380>)
 8000954:	4894      	ldr	r0, [pc, #592]	; (8000ba8 <main+0x384>)
 8000956:	f009 fefd 	bl	800a754 <lfs_file_close>

    DBG("Boot count = %lu start uptime = %lu", boot_count, start_uptime);
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4619      	mov	r1, r3
 8000960:	4893      	ldr	r0, [pc, #588]	; (8000bb0 <main+0x38c>)
 8000962:	f00a fba7 	bl	800b0b4 <iprintf>
 8000966:	200a      	movs	r0, #10
 8000968:	f00a fbb6 	bl	800b0d8 <putchar>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    uint32_t now = 0, last_blink = 0, last_update = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

    while (1) {
        now = HAL_GetTick();
 8000978:	f000 fcd4 	bl	8001324 <HAL_GetTick>
 800097c:	6138      	str	r0, [r7, #16]

        if (now - last_blink >= 500) {
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000988:	d305      	bcc.n	8000996 <main+0x172>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800098a:	2110      	movs	r1, #16
 800098c:	4889      	ldr	r0, [pc, #548]	; (8000bb4 <main+0x390>)
 800098e:	f000 ffc0 	bl	8001912 <HAL_GPIO_TogglePin>
            last_blink = now;
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	61bb      	str	r3, [r7, #24]
        }

        if (now - last_update >= 10000) {
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	f242 720f 	movw	r2, #9999	; 0x270f
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d930      	bls.n	8000a06 <main+0x1e2>

            uint32_t total_uptime = start_uptime + now;
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	4413      	add	r3, r2
 80009aa:	603b      	str	r3, [r7, #0]

            DBG("Total uptime = %lu", total_uptime);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	4619      	mov	r1, r3
 80009b0:	4881      	ldr	r0, [pc, #516]	; (8000bb8 <main+0x394>)
 80009b2:	f00a fb7f 	bl	800b0b4 <iprintf>
 80009b6:	200a      	movs	r0, #10
 80009b8:	f00a fb8e 	bl	800b0d8 <putchar>

            uint32_t start = HAL_GetTick();
 80009bc:	f000 fcb2 	bl	8001324 <HAL_GetTick>
 80009c0:	60f8      	str	r0, [r7, #12]
            lfs_file_open(&littlefs, &file, "uptime", LFS_O_RDWR);
 80009c2:	2303      	movs	r3, #3
 80009c4:	4a79      	ldr	r2, [pc, #484]	; (8000bac <main+0x388>)
 80009c6:	4977      	ldr	r1, [pc, #476]	; (8000ba4 <main+0x380>)
 80009c8:	4877      	ldr	r0, [pc, #476]	; (8000ba8 <main+0x384>)
 80009ca:	f009 fe8f 	bl	800a6ec <lfs_file_open>
            lfs_file_rewind(&littlefs, &file);
 80009ce:	4975      	ldr	r1, [pc, #468]	; (8000ba4 <main+0x380>)
 80009d0:	4875      	ldr	r0, [pc, #468]	; (8000ba8 <main+0x384>)
 80009d2:	f009 ff4b 	bl	800a86c <lfs_file_rewind>
            lfs_file_write(&littlefs, &file, &total_uptime, sizeof(total_uptime));
 80009d6:	463a      	mov	r2, r7
 80009d8:	2304      	movs	r3, #4
 80009da:	4972      	ldr	r1, [pc, #456]	; (8000ba4 <main+0x380>)
 80009dc:	4872      	ldr	r0, [pc, #456]	; (8000ba8 <main+0x384>)
 80009de:	f009 ff15 	bl	800a80c <lfs_file_write>
            lfs_file_close(&littlefs, &file);
 80009e2:	4970      	ldr	r1, [pc, #448]	; (8000ba4 <main+0x380>)
 80009e4:	4870      	ldr	r0, [pc, #448]	; (8000ba8 <main+0x384>)
 80009e6:	f009 feb5 	bl	800a754 <lfs_file_close>
            DBG("File update took %lu ms", HAL_GetTick() - start);
 80009ea:	f000 fc9b 	bl	8001324 <HAL_GetTick>
 80009ee:	4602      	mov	r2, r0
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	4871      	ldr	r0, [pc, #452]	; (8000bbc <main+0x398>)
 80009f8:	f00a fb5c 	bl	800b0b4 <iprintf>
 80009fc:	200a      	movs	r0, #10
 80009fe:	f00a fb6b 	bl	800b0d8 <putchar>

            last_update = now;
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	617b      	str	r3, [r7, #20]
        }

        if (do_action) {
 8000a06:	4b6e      	ldr	r3, [pc, #440]	; (8000bc0 <main+0x39c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0b4      	beq.n	8000978 <main+0x154>
            do_action = 0;
 8000a0e:	4b6c      	ldr	r3, [pc, #432]	; (8000bc0 <main+0x39c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
            DBG("Do action!");
 8000a14:	486b      	ldr	r0, [pc, #428]	; (8000bc4 <main+0x3a0>)
 8000a16:	f00a fb4d 	bl	800b0b4 <iprintf>
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f00a fb5c 	bl	800b0d8 <putchar>

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a24:	4a68      	ldr	r2, [pc, #416]	; (8000bc8 <main+0x3a4>)
 8000a26:	2100      	movs	r1, #0
 8000a28:	485b      	ldr	r0, [pc, #364]	; (8000b98 <main+0x374>)
 8000a2a:	f009 ffd1 	bl	800a9d0 <m24cxx_read>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d007      	beq.n	8000a44 <main+0x220>
                DBG("Returned err");
 8000a34:	4865      	ldr	r0, [pc, #404]	; (8000bcc <main+0x3a8>)
 8000a36:	f00a fb3d 	bl	800b0b4 <iprintf>
 8000a3a:	200a      	movs	r0, #10
 8000a3c:	f00a fb4c 	bl	800b0d8 <putchar>
                Error_Handler();
 8000a40:	f000 fa34 	bl	8000eac <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a48:	485f      	ldr	r0, [pc, #380]	; (8000bc8 <main+0x3a4>)
 8000a4a:	f7ff fe7b 	bl	8000744 <dump_buf>

            fill_buffer(buf, sizeof(buf), 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a54:	485c      	ldr	r0, [pc, #368]	; (8000bc8 <main+0x3a4>)
 8000a56:	f7ff fea7 	bl	80007a8 <fill_buffer>

            if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5e:	4a5a      	ldr	r2, [pc, #360]	; (8000bc8 <main+0x3a4>)
 8000a60:	2100      	movs	r1, #0
 8000a62:	484d      	ldr	r0, [pc, #308]	; (8000b98 <main+0x374>)
 8000a64:	f00a f84c 	bl	800ab00 <m24cxx_write>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d007      	beq.n	8000a7e <main+0x25a>
                DBG("Returned err");
 8000a6e:	4857      	ldr	r0, [pc, #348]	; (8000bcc <main+0x3a8>)
 8000a70:	f00a fb20 	bl	800b0b4 <iprintf>
 8000a74:	200a      	movs	r0, #10
 8000a76:	f00a fb2f 	bl	800b0d8 <putchar>
                Error_Handler();
 8000a7a:	f000 fa17 	bl	8000eac <Error_Handler>
            }

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a82:	4a51      	ldr	r2, [pc, #324]	; (8000bc8 <main+0x3a4>)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4844      	ldr	r0, [pc, #272]	; (8000b98 <main+0x374>)
 8000a88:	f009 ffa2 	bl	800a9d0 <m24cxx_read>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d007      	beq.n	8000aa2 <main+0x27e>
                DBG("Returned err");
 8000a92:	484e      	ldr	r0, [pc, #312]	; (8000bcc <main+0x3a8>)
 8000a94:	f00a fb0e 	bl	800b0b4 <iprintf>
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f00a fb1d 	bl	800b0d8 <putchar>
                Error_Handler();
 8000a9e:	f000 fa05 	bl	8000eac <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa6:	4848      	ldr	r0, [pc, #288]	; (8000bc8 <main+0x3a4>)
 8000aa8:	f7ff fe4c 	bl	8000744 <dump_buf>

            fill_buffer(buf, sizeof(buf), 1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab2:	4845      	ldr	r0, [pc, #276]	; (8000bc8 <main+0x3a4>)
 8000ab4:	f7ff fe78 	bl	80007a8 <fill_buffer>

            if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000abc:	4a42      	ldr	r2, [pc, #264]	; (8000bc8 <main+0x3a4>)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4835      	ldr	r0, [pc, #212]	; (8000b98 <main+0x374>)
 8000ac2:	f00a f81d 	bl	800ab00 <m24cxx_write>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d007      	beq.n	8000adc <main+0x2b8>
                DBG("Returned err");
 8000acc:	483f      	ldr	r0, [pc, #252]	; (8000bcc <main+0x3a8>)
 8000ace:	f00a faf1 	bl	800b0b4 <iprintf>
 8000ad2:	200a      	movs	r0, #10
 8000ad4:	f00a fb00 	bl	800b0d8 <putchar>
                Error_Handler();
 8000ad8:	f000 f9e8 	bl	8000eac <Error_Handler>
            }

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae0:	4a39      	ldr	r2, [pc, #228]	; (8000bc8 <main+0x3a4>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	482c      	ldr	r0, [pc, #176]	; (8000b98 <main+0x374>)
 8000ae6:	f009 ff73 	bl	800a9d0 <m24cxx_read>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d007      	beq.n	8000b00 <main+0x2dc>
                DBG("Returned err");
 8000af0:	4836      	ldr	r0, [pc, #216]	; (8000bcc <main+0x3a8>)
 8000af2:	f00a fadf 	bl	800b0b4 <iprintf>
 8000af6:	200a      	movs	r0, #10
 8000af8:	f00a faee 	bl	800b0d8 <putchar>
                Error_Handler();
 8000afc:	f000 f9d6 	bl	8000eac <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b04:	4830      	ldr	r0, [pc, #192]	; (8000bc8 <main+0x3a4>)
 8000b06:	f7ff fe1d 	bl	8000744 <dump_buf>

            fill_buffer(buf, sizeof(buf), 2);
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b10:	482d      	ldr	r0, [pc, #180]	; (8000bc8 <main+0x3a4>)
 8000b12:	f7ff fe49 	bl	80007a8 <fill_buffer>

            if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1a:	4a2b      	ldr	r2, [pc, #172]	; (8000bc8 <main+0x3a4>)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	481e      	ldr	r0, [pc, #120]	; (8000b98 <main+0x374>)
 8000b20:	f009 ffee 	bl	800ab00 <m24cxx_write>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <main+0x316>
                DBG("Returned err");
 8000b2a:	4828      	ldr	r0, [pc, #160]	; (8000bcc <main+0x3a8>)
 8000b2c:	f00a fac2 	bl	800b0b4 <iprintf>
 8000b30:	200a      	movs	r0, #10
 8000b32:	f00a fad1 	bl	800b0d8 <putchar>
                Error_Handler();
 8000b36:	f000 f9b9 	bl	8000eac <Error_Handler>
            }

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3e:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <main+0x3a4>)
 8000b40:	2100      	movs	r1, #0
 8000b42:	4815      	ldr	r0, [pc, #84]	; (8000b98 <main+0x374>)
 8000b44:	f009 ff44 	bl	800a9d0 <m24cxx_read>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d007      	beq.n	8000b5e <main+0x33a>
                DBG("Returned err");
 8000b4e:	481f      	ldr	r0, [pc, #124]	; (8000bcc <main+0x3a8>)
 8000b50:	f00a fab0 	bl	800b0b4 <iprintf>
 8000b54:	200a      	movs	r0, #10
 8000b56:	f00a fabf 	bl	800b0d8 <putchar>
                Error_Handler();
 8000b5a:	f000 f9a7 	bl	8000eac <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b62:	4819      	ldr	r0, [pc, #100]	; (8000bc8 <main+0x3a4>)
 8000b64:	f7ff fdee 	bl	8000744 <dump_buf>

            fill_buffer(buf, sizeof(buf), 3);
 8000b68:	2203      	movs	r2, #3
 8000b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6e:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <main+0x3a4>)
 8000b70:	f7ff fe1a 	bl	80007a8 <fill_buffer>

            if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b78:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <main+0x3a4>)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <main+0x374>)
 8000b7e:	f009 ffbf 	bl	800ab00 <m24cxx_write>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d028      	beq.n	8000bda <main+0x3b6>
                DBG("Returned err");
 8000b88:	4810      	ldr	r0, [pc, #64]	; (8000bcc <main+0x3a8>)
 8000b8a:	f00a fa93 	bl	800b0b4 <iprintf>
 8000b8e:	e01f      	b.n	8000bd0 <main+0x3ac>
 8000b90:	0800be4c 	.word	0x0800be4c
 8000b94:	2000014c 	.word	0x2000014c
 8000b98:	200001e4 	.word	0x200001e4
 8000b9c:	0800be50 	.word	0x0800be50
 8000ba0:	0800be6c 	.word	0x0800be6c
 8000ba4:	200002f0 	.word	0x200002f0
 8000ba8:	200000d0 	.word	0x200000d0
 8000bac:	0800be78 	.word	0x0800be78
 8000bb0:	0800be80 	.word	0x0800be80
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	0800bea4 	.word	0x0800bea4
 8000bbc:	0800beb8 	.word	0x0800beb8
 8000bc0:	200002ec 	.word	0x200002ec
 8000bc4:	0800bed0 	.word	0x0800bed0
 8000bc8:	200001ec 	.word	0x200001ec
 8000bcc:	0800bedc 	.word	0x0800bedc
 8000bd0:	200a      	movs	r0, #10
 8000bd2:	f00a fa81 	bl	800b0d8 <putchar>
                Error_Handler();
 8000bd6:	f000 f969 	bl	8000eac <Error_Handler>
            }

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bde:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <main+0x430>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	481d      	ldr	r0, [pc, #116]	; (8000c58 <main+0x434>)
 8000be4:	f009 fef4 	bl	800a9d0 <m24cxx_read>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d007      	beq.n	8000bfe <main+0x3da>
                DBG("Returned err");
 8000bee:	481b      	ldr	r0, [pc, #108]	; (8000c5c <main+0x438>)
 8000bf0:	f00a fa60 	bl	800b0b4 <iprintf>
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f00a fa6f 	bl	800b0d8 <putchar>
                Error_Handler();
 8000bfa:	f000 f957 	bl	8000eac <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c02:	4814      	ldr	r0, [pc, #80]	; (8000c54 <main+0x430>)
 8000c04:	f7ff fd9e 	bl	8000744 <dump_buf>

            if (m24cxx_erase_all(&m24cxx) != M24CXX_Ok) {
 8000c08:	4813      	ldr	r0, [pc, #76]	; (8000c58 <main+0x434>)
 8000c0a:	f00a f873 	bl	800acf4 <m24cxx_erase_all>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <main+0x400>
                DBG("Returned err");
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <main+0x438>)
 8000c16:	f00a fa4d 	bl	800b0b4 <iprintf>
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f00a fa5c 	bl	800b0d8 <putchar>
                Error_Handler();
 8000c20:	f000 f944 	bl	8000eac <Error_Handler>
            }

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <main+0x430>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	480a      	ldr	r0, [pc, #40]	; (8000c58 <main+0x434>)
 8000c2e:	f009 fecf 	bl	800a9d0 <m24cxx_read>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d007      	beq.n	8000c48 <main+0x424>
                DBG("Returned err");
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <main+0x438>)
 8000c3a:	f00a fa3b 	bl	800b0b4 <iprintf>
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f00a fa4a 	bl	800b0d8 <putchar>
                Error_Handler();
 8000c44:	f000 f932 	bl	8000eac <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4c:	4801      	ldr	r0, [pc, #4]	; (8000c54 <main+0x430>)
 8000c4e:	f7ff fd79 	bl	8000744 <dump_buf>
        now = HAL_GetTick();
 8000c52:	e691      	b.n	8000978 <main+0x154>
 8000c54:	200001ec 	.word	0x200001ec
 8000c58:	200001e4 	.word	0x200001e4
 8000c5c:	0800bedc 	.word	0x0800bedc

08000c60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b094      	sub	sp, #80	; 0x50
 8000c64:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c66:	f107 0320 	add.w	r3, r7, #32
 8000c6a:	2230      	movs	r2, #48	; 0x30
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f00a fa8d 	bl	800b18e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <SystemClock_Config+0xc8>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a26      	ldr	r2, [pc, #152]	; (8000d28 <SystemClock_Config+0xc8>)
 8000c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <SystemClock_Config+0xc8>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <SystemClock_Config+0xcc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <SystemClock_Config+0xcc>)
 8000caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <SystemClock_Config+0xcc>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 50;
 8000cd4:	2332      	movs	r3, #50	; 0x32
 8000cd6:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ce0:	f107 0320 	add.w	r3, r7, #32
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 ff35 	bl	8002b54 <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x94>
        Error_Handler();
 8000cf0:	f000 f8dc 	bl	8000eac <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d04:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 f997 	bl	8003044 <HAL_RCC_ClockConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0xc0>
        Error_Handler();
 8000d1c:	f000 f8c6 	bl	8000eac <Error_Handler>
    }
}
 8000d20:	bf00      	nop
 8000d22:	3750      	adds	r7, #80	; 0x50
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40007000 	.word	0x40007000

08000d30 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d36:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <MX_I2C1_Init+0x54>)
 8000d38:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <MX_I2C1_Init+0x58>)
 8000d3e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d52:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_I2C1_Init+0x50>)
 8000d6e:	f000 fe03 	bl	8001978 <HAL_I2C_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000d78:	f000 f898 	bl	8000eac <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	2000014c 	.word	0x2000014c
 8000d84:	40005400 	.word	0x40005400
 8000d88:	00061a80 	.word	0x00061a80

08000d8c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_USART1_UART_Init+0x50>)
 8000d94:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 921600;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000d98:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000d9c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dc4:	f002 fb5c 	bl	8003480 <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8000dce:	f000 f86d 	bl	8000eac <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200001a0 	.word	0x200001a0
 8000ddc:	40011000 	.word	0x40011000

08000de0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a29      	ldr	r2, [pc, #164]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <MX_GPIO_Init+0xc8>)
 8000e50:	f000 fd46 	bl	80018e0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8000e54:	2310      	movs	r3, #16
 8000e56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e58:	2311      	movs	r3, #17
 8000e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480f      	ldr	r0, [pc, #60]	; (8000ea8 <MX_GPIO_Init+0xc8>)
 8000e6c:	f000 fb9c 	bl	80015a8 <HAL_GPIO_Init>

    /*Configure GPIO pin : BTN_Pin */
    GPIO_InitStruct.Pin = BTN_Pin;
 8000e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e76:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <MX_GPIO_Init+0xc8>)
 8000e88:	f000 fb8e 	bl	80015a8 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2017      	movs	r0, #23
 8000e92:	f000 fb52 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e96:	2017      	movs	r0, #23
 8000e98:	f000 fb6b 	bl	8001572 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_MspInit+0x4c>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_MspInit+0x4c>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800

08000f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <HAL_I2C_MspInit+0x84>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d12b      	bne.n	8000f82 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f46:	23c0      	movs	r3, #192	; 0xc0
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4a:	2312      	movs	r3, #18
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f56:	2304      	movs	r3, #4
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <HAL_I2C_MspInit+0x8c>)
 8000f62:	f000 fb21 	bl	80015a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_I2C_MspInit+0x88>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020400 	.word	0x40020400

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a19      	ldr	r2, [pc, #100]	; (800101c <HAL_UART_MspInit+0x84>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d12c      	bne.n	8001014 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fc4:	f043 0310 	orr.w	r3, r3, #16
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_UART_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ff2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001004:	2307      	movs	r3, #7
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_UART_MspInit+0x8c>)
 8001010:	f000 faca 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40011000 	.word	0x40011000
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 f942 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001080:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001084:	f000 fc60 	bl	8001948 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return 1;
 8001090:	2301      	movs	r3, #1
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_kill>:

int _kill(int pid, int sig)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010a6:	f00a f8ff 	bl	800b2a8 <__errno>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2216      	movs	r2, #22
 80010ae:	601a      	str	r2, [r3, #0]
  return -1;
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_exit>:

void _exit (int status)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffe7 	bl	800109c <_kill>
  while (1) {}    /* Make sure we hang here */
 80010ce:	e7fe      	b.n	80010ce <_exit+0x12>

080010d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	e00a      	b.n	80010f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010e2:	f3af 8000 	nop.w
 80010e6:	4601      	mov	r1, r0
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	60ba      	str	r2, [r7, #8]
 80010ee:	b2ca      	uxtb	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbf0      	blt.n	80010e2 <_read+0x12>
  }

  return len;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_close>:
  }
  return len;
}

int _close(int file)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001132:	605a      	str	r2, [r3, #4]
  return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_isatty>:

int _isatty(int file)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f00a f880 	bl	800b2a8 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20020000 	.word	0x20020000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	20000344 	.word	0x20000344
 80011dc:	20000498 	.word	0x20000498

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <SystemInit+0x20>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <SystemInit+0x20>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800123c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800120a:	490e      	ldr	r1, [pc, #56]	; (8001244 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001220:	4c0b      	ldr	r4, [pc, #44]	; (8001250 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800122e:	f7ff ffd7 	bl	80011e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001232:	f00a f83f 	bl	800b2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001236:	f7ff faf5 	bl	8000824 <main>
  bx  lr    
 800123a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800123c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001248:	0800cd8c 	.word	0x0800cd8c
  ldr r2, =_sbss
 800124c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001250:	20000498 	.word	0x20000498

08001254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC_IRQHandler>
	...

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_Init+0x40>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_Init+0x40>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_Init+0x40>)
 800127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f94f 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	200f      	movs	r0, #15
 8001288:	f000 f808 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fe14 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023c00 	.word	0x40023c00

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f967 	bl	800158e <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d8:	f000 f92f 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000004c 	.word	0x2000004c
 80012f4:	20000054 	.word	0x20000054
 80012f8:	20000050 	.word	0x20000050

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000054 	.word	0x20000054
 8001320:	20000348 	.word	0x20000348

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000348 	.word	0x20000348

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000054 	.word	0x20000054

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff29 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff3e 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff8e 	bl	8001478 <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5d 	bl	8001424 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff31 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa2 	bl	80014e0 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e16b      	b.n	800189c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 815a 	bne.w	8001896 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d005      	beq.n	80015fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b03      	cmp	r3, #3
 8001666:	d017      	beq.n	8001698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d123      	bne.n	80016ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80b4 	beq.w	8001896 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b60      	ldr	r3, [pc, #384]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a5f      	ldr	r2, [pc, #380]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800174a:	4a5b      	ldr	r2, [pc, #364]	; (80018b8 <HAL_GPIO_Init+0x310>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_GPIO_Init+0x314>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d02b      	beq.n	80017ce <HAL_GPIO_Init+0x226>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a51      	ldr	r2, [pc, #324]	; (80018c0 <HAL_GPIO_Init+0x318>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d025      	beq.n	80017ca <HAL_GPIO_Init+0x222>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a50      	ldr	r2, [pc, #320]	; (80018c4 <HAL_GPIO_Init+0x31c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d01f      	beq.n	80017c6 <HAL_GPIO_Init+0x21e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x320>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d019      	beq.n	80017c2 <HAL_GPIO_Init+0x21a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <HAL_GPIO_Init+0x324>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0x216>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <HAL_GPIO_Init+0x328>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00d      	beq.n	80017ba <HAL_GPIO_Init+0x212>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <HAL_GPIO_Init+0x32c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d007      	beq.n	80017b6 <HAL_GPIO_Init+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	; (80018d8 <HAL_GPIO_Init+0x330>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_GPIO_Init+0x20a>
 80017ae:	2307      	movs	r3, #7
 80017b0:	e00e      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017b2:	2308      	movs	r3, #8
 80017b4:	e00c      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017b6:	2306      	movs	r3, #6
 80017b8:	e00a      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ba:	2305      	movs	r3, #5
 80017bc:	e008      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017be:	2304      	movs	r3, #4
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ce:	2300      	movs	r3, #0
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4093      	lsls	r3, r2
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e0:	4935      	ldr	r1, [pc, #212]	; (80018b8 <HAL_GPIO_Init+0x310>)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_GPIO_Init+0x334>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001812:	4a32      	ldr	r2, [pc, #200]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_GPIO_Init+0x334>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <HAL_GPIO_Init+0x334>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_GPIO_Init+0x334>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3301      	adds	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b0f      	cmp	r3, #15
 80018a0:	f67f ae90 	bls.w	80015c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40013800 	.word	0x40013800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020c00 	.word	0x40020c00
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40021400 	.word	0x40021400
 80018d4:	40021800 	.word	0x40021800
 80018d8:	40021c00 	.word	0x40021c00
 80018dc:	40013c00 	.word	0x40013c00

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018fc:	e003      	b.n	8001906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	041a      	lsls	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	619a      	str	r2, [r3, #24]
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001924:	887a      	ldrh	r2, [r7, #2]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	041a      	lsls	r2, r3, #16
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43d9      	mvns	r1, r3
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	400b      	ands	r3, r1
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fed8 	bl	800071c <HAL_GPIO_EXTI_Callback>
  }
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40013c00 	.word	0x40013c00

08001978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e12b      	b.n	8001be2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fab2 	bl	8000f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2224      	movs	r2, #36	; 0x24
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019dc:	f001 fd28 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 80019e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4a81      	ldr	r2, [pc, #516]	; (8001bec <HAL_I2C_Init+0x274>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d807      	bhi.n	80019fc <HAL_I2C_Init+0x84>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a80      	ldr	r2, [pc, #512]	; (8001bf0 <HAL_I2C_Init+0x278>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	bf94      	ite	ls
 80019f4:	2301      	movls	r3, #1
 80019f6:	2300      	movhi	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e006      	b.n	8001a0a <HAL_I2C_Init+0x92>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4a7d      	ldr	r2, [pc, #500]	; (8001bf4 <HAL_I2C_Init+0x27c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	bf94      	ite	ls
 8001a04:	2301      	movls	r3, #1
 8001a06:	2300      	movhi	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0e7      	b.n	8001be2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4a78      	ldr	r2, [pc, #480]	; (8001bf8 <HAL_I2C_Init+0x280>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9b      	lsrs	r3, r3, #18
 8001a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a6a      	ldr	r2, [pc, #424]	; (8001bec <HAL_I2C_Init+0x274>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d802      	bhi.n	8001a4c <HAL_I2C_Init+0xd4>
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	e009      	b.n	8001a60 <HAL_I2C_Init+0xe8>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a52:	fb02 f303 	mul.w	r3, r2, r3
 8001a56:	4a69      	ldr	r2, [pc, #420]	; (8001bfc <HAL_I2C_Init+0x284>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	3301      	adds	r3, #1
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	430b      	orrs	r3, r1
 8001a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	495c      	ldr	r1, [pc, #368]	; (8001bec <HAL_I2C_Init+0x274>)
 8001a7c:	428b      	cmp	r3, r1
 8001a7e:	d819      	bhi.n	8001ab4 <HAL_I2C_Init+0x13c>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1e59      	subs	r1, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a8e:	1c59      	adds	r1, r3, #1
 8001a90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a94:	400b      	ands	r3, r1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00a      	beq.n	8001ab0 <HAL_I2C_Init+0x138>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1e59      	subs	r1, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aae:	e051      	b.n	8001b54 <HAL_I2C_Init+0x1dc>
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	e04f      	b.n	8001b54 <HAL_I2C_Init+0x1dc>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d111      	bne.n	8001ae0 <HAL_I2C_Init+0x168>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1e58      	subs	r0, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	440b      	add	r3, r1
 8001aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf0c      	ite	eq
 8001ad8:	2301      	moveq	r3, #1
 8001ada:	2300      	movne	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	e012      	b.n	8001b06 <HAL_I2C_Init+0x18e>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1e58      	subs	r0, r3, #1
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	0099      	lsls	r1, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Init+0x196>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e022      	b.n	8001b54 <HAL_I2C_Init+0x1dc>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10e      	bne.n	8001b34 <HAL_I2C_Init+0x1bc>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1e58      	subs	r0, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	440b      	add	r3, r1
 8001b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b32:	e00f      	b.n	8001b54 <HAL_I2C_Init+0x1dc>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1e58      	subs	r0, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	0099      	lsls	r1, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	6809      	ldr	r1, [r1, #0]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69da      	ldr	r2, [r3, #28]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6911      	ldr	r1, [r2, #16]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68d2      	ldr	r2, [r2, #12]
 8001b8e:	4311      	orrs	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	000186a0 	.word	0x000186a0
 8001bf0:	001e847f 	.word	0x001e847f
 8001bf4:	003d08ff 	.word	0x003d08ff
 8001bf8:	431bde83 	.word	0x431bde83
 8001bfc:	10624dd3 	.word	0x10624dd3

08001c00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	4608      	mov	r0, r1
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	817b      	strh	r3, [r7, #10]
 8001c12:	460b      	mov	r3, r1
 8001c14:	813b      	strh	r3, [r7, #8]
 8001c16:	4613      	mov	r3, r2
 8001c18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c1a:	f7ff fb83 	bl	8001324 <HAL_GetTick>
 8001c1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	f040 80d9 	bne.w	8001de0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2319      	movs	r3, #25
 8001c34:	2201      	movs	r2, #1
 8001c36:	496d      	ldr	r1, [pc, #436]	; (8001dec <HAL_I2C_Mem_Write+0x1ec>)
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 fdad 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c44:	2302      	movs	r3, #2
 8001c46:	e0cc      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_I2C_Mem_Write+0x56>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e0c5      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d007      	beq.n	8001c7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2221      	movs	r2, #33	; 0x21
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a3a      	ldr	r2, [r7, #32]
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4a4d      	ldr	r2, [pc, #308]	; (8001df0 <HAL_I2C_Mem_Write+0x1f0>)
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cbe:	88f8      	ldrh	r0, [r7, #6]
 8001cc0:	893a      	ldrh	r2, [r7, #8]
 8001cc2:	8979      	ldrh	r1, [r7, #10]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 fbe4 	bl	800249c <I2C_RequestMemoryWrite>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d052      	beq.n	8001d80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e081      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fe2e 	bl	8002944 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00d      	beq.n	8001d0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d107      	bne.n	8001d06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06b      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d11b      	bne.n	8001d80 <HAL_I2C_Mem_Write+0x180>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d017      	beq.n	8001d80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1aa      	bne.n	8001cde <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fe1a 	bl	80029c6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00d      	beq.n	8001db4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d107      	bne.n	8001db0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e016      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e000      	b.n	8001de2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	00100002 	.word	0x00100002
 8001df0:	ffff0000 	.word	0xffff0000

08001df4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	; 0x30
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	4611      	mov	r1, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	817b      	strh	r3, [r7, #10]
 8001e06:	460b      	mov	r3, r1
 8001e08:	813b      	strh	r3, [r7, #8]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e0e:	f7ff fa89 	bl	8001324 <HAL_GetTick>
 8001e12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	f040 8208 	bne.w	8002232 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2319      	movs	r3, #25
 8001e28:	2201      	movs	r2, #1
 8001e2a:	497b      	ldr	r1, [pc, #492]	; (8002018 <HAL_I2C_Mem_Read+0x224>)
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 fcb3 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e1fb      	b.n	8002234 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_I2C_Mem_Read+0x56>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e1f4      	b.n	8002234 <HAL_I2C_Mem_Read+0x440>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d007      	beq.n	8001e70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2222      	movs	r2, #34	; 0x22
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2240      	movs	r2, #64	; 0x40
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4a5b      	ldr	r2, [pc, #364]	; (800201c <HAL_I2C_Mem_Read+0x228>)
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eb2:	88f8      	ldrh	r0, [r7, #6]
 8001eb4:	893a      	ldrh	r2, [r7, #8]
 8001eb6:	8979      	ldrh	r1, [r7, #10]
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fb80 	bl	80025c8 <I2C_RequestMemoryRead>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e1b0      	b.n	8002234 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d113      	bne.n	8001f02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e184      	b.n	800220c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d11b      	bne.n	8001f42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e164      	b.n	800220c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d11b      	bne.n	8001f82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	e144      	b.n	800220c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f98:	e138      	b.n	800220c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	f200 80f1 	bhi.w	8002186 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d123      	bne.n	8001ff4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 fd49 	bl	8002a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e139      	b.n	8002234 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ff2:	e10b      	b.n	800220c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d14e      	bne.n	800209a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002002:	2200      	movs	r2, #0
 8002004:	4906      	ldr	r1, [pc, #24]	; (8002020 <HAL_I2C_Mem_Read+0x22c>)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fbc6 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e10e      	b.n	8002234 <HAL_I2C_Mem_Read+0x440>
 8002016:	bf00      	nop
 8002018:	00100002 	.word	0x00100002
 800201c:	ffff0000 	.word	0xffff0000
 8002020:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002098:	e0b8      	b.n	800220c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a0:	2200      	movs	r2, #0
 80020a2:	4966      	ldr	r1, [pc, #408]	; (800223c <HAL_I2C_Mem_Read+0x448>)
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fb77 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0bf      	b.n	8002234 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fc:	2200      	movs	r2, #0
 80020fe:	494f      	ldr	r1, [pc, #316]	; (800223c <HAL_I2C_Mem_Read+0x448>)
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fb49 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e091      	b.n	8002234 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002184:	e042      	b.n	800220c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fc5c 	bl	8002a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e04c      	b.n	8002234 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d118      	bne.n	800220c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	f47f aec2 	bne.w	8001f9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002232:	2302      	movs	r3, #2
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3728      	adds	r7, #40	; 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	00010004 	.word	0x00010004

08002240 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	460b      	mov	r3, r1
 800224e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff f868 	bl	8001324 <HAL_GetTick>
 8002254:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b20      	cmp	r3, #32
 8002264:	f040 8111 	bne.w	800248a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2319      	movs	r3, #25
 800226e:	2201      	movs	r2, #1
 8002270:	4988      	ldr	r1, [pc, #544]	; (8002494 <HAL_I2C_IsDeviceReady+0x254>)
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fa90 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800227e:	2302      	movs	r3, #2
 8002280:	e104      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_I2C_IsDeviceReady+0x50>
 800228c:	2302      	movs	r3, #2
 800228e:	e0fd      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d007      	beq.n	80022b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2224      	movs	r2, #36	; 0x24
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a70      	ldr	r2, [pc, #448]	; (8002498 <HAL_I2C_IsDeviceReady+0x258>)
 80022d8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fa4e 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00d      	beq.n	800231e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002310:	d103      	bne.n	800231a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e0b6      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800231e:	897b      	ldrh	r3, [r7, #10]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800232c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800232e:	f7fe fff9 	bl	8001324 <HAL_GetTick>
 8002332:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	bf0c      	ite	eq
 8002342:	2301      	moveq	r3, #1
 8002344:	2300      	movne	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002362:	e025      	b.n	80023b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002364:	f7fe ffde 	bl	8001324 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d302      	bcc.n	800237a <HAL_I2C_IsDeviceReady+0x13a>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d103      	bne.n	8002382 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	22a0      	movs	r2, #160	; 0xa0
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b02      	cmp	r3, #2
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2ba0      	cmp	r3, #160	; 0xa0
 80023ba:	d005      	beq.n	80023c8 <HAL_I2C_IsDeviceReady+0x188>
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_I2C_IsDeviceReady+0x188>
 80023c2:	7dbb      	ldrb	r3, [r7, #22]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0cd      	beq.n	8002364 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d129      	bne.n	8002432 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2319      	movs	r3, #25
 800240a:	2201      	movs	r2, #1
 800240c:	4921      	ldr	r1, [pc, #132]	; (8002494 <HAL_I2C_IsDeviceReady+0x254>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f9c2 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e036      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e02c      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002440:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800244a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2319      	movs	r3, #25
 8002452:	2201      	movs	r2, #1
 8002454:	490f      	ldr	r1, [pc, #60]	; (8002494 <HAL_I2C_IsDeviceReady+0x254>)
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f99e 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e012      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	3301      	adds	r3, #1
 800246a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	f4ff af32 	bcc.w	80022da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	00100002 	.word	0x00100002
 8002498:	ffff0000 	.word	0xffff0000

0800249c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	4608      	mov	r0, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	817b      	strh	r3, [r7, #10]
 80024ae:	460b      	mov	r3, r1
 80024b0:	813b      	strh	r3, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f960 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ec:	d103      	bne.n	80024f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e05f      	b.n	80025ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024fa:	897b      	ldrh	r3, [r7, #10]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002508:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	6a3a      	ldr	r2, [r7, #32]
 800250e:	492d      	ldr	r1, [pc, #180]	; (80025c4 <I2C_RequestMemoryWrite+0x128>)
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f998 	bl	8002846 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e04c      	b.n	80025ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	6a39      	ldr	r1, [r7, #32]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fa02 	bl	8002944 <I2C_WaitOnTXEFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b04      	cmp	r3, #4
 800254c:	d107      	bne.n	800255e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e02b      	b.n	80025ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002568:	893b      	ldrh	r3, [r7, #8]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	611a      	str	r2, [r3, #16]
 8002572:	e021      	b.n	80025b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002574:	893b      	ldrh	r3, [r7, #8]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	b29b      	uxth	r3, r3
 800257a:	b2da      	uxtb	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002584:	6a39      	ldr	r1, [r7, #32]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f9dc 	bl	8002944 <I2C_WaitOnTXEFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	2b04      	cmp	r3, #4
 8002598:	d107      	bne.n	80025aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e005      	b.n	80025ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025ae:	893b      	ldrh	r3, [r7, #8]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	00010002 	.word	0x00010002

080025c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	817b      	strh	r3, [r7, #10]
 80025da:	460b      	mov	r3, r1
 80025dc:	813b      	strh	r3, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002600:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	2200      	movs	r2, #0
 800260a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f8c2 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002628:	d103      	bne.n	8002632 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0aa      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002644:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	6a3a      	ldr	r2, [r7, #32]
 800264a:	4952      	ldr	r1, [pc, #328]	; (8002794 <I2C_RequestMemoryRead+0x1cc>)
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f8fa 	bl	8002846 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e097      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002674:	6a39      	ldr	r1, [r7, #32]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f964 	bl	8002944 <I2C_WaitOnTXEFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	2b04      	cmp	r3, #4
 8002688:	d107      	bne.n	800269a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002698:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e076      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026a4:	893b      	ldrh	r3, [r7, #8]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	611a      	str	r2, [r3, #16]
 80026ae:	e021      	b.n	80026f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026b0:	893b      	ldrh	r3, [r7, #8]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	6a39      	ldr	r1, [r7, #32]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f93e 	bl	8002944 <I2C_WaitOnTXEFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d107      	bne.n	80026e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e050      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026ea:	893b      	ldrh	r3, [r7, #8]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f6:	6a39      	ldr	r1, [r7, #32]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f923 	bl	8002944 <I2C_WaitOnTXEFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00d      	beq.n	8002720 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2b04      	cmp	r3, #4
 800270a:	d107      	bne.n	800271c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e035      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800272e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	2200      	movs	r2, #0
 8002738:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f82b 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002756:	d103      	bne.n	8002760 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e013      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002764:	897b      	ldrh	r3, [r7, #10]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	6a3a      	ldr	r2, [r7, #32]
 8002778:	4906      	ldr	r1, [pc, #24]	; (8002794 <I2C_RequestMemoryRead+0x1cc>)
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f863 	bl	8002846 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	00010002 	.word	0x00010002

08002798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a8:	e025      	b.n	80027f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b0:	d021      	beq.n	80027f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b2:	f7fe fdb7 	bl	8001324 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d116      	bne.n	80027f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f043 0220 	orr.w	r2, r3, #32
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e023      	b.n	800283e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d10d      	bne.n	800281c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	43da      	mvns	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4013      	ands	r3, r2
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	e00c      	b.n	8002836 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	bf0c      	ite	eq
 800282e:	2301      	moveq	r3, #1
 8002830:	2300      	movne	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	429a      	cmp	r2, r3
 800283a:	d0b6      	beq.n	80027aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002854:	e051      	b.n	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002864:	d123      	bne.n	80028ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002874:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800287e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f043 0204 	orr.w	r2, r3, #4
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e046      	b.n	800293c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b4:	d021      	beq.n	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b6:	f7fe fd35 	bl	8001324 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d302      	bcc.n	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d116      	bne.n	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e020      	b.n	800293c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10c      	bne.n	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e00b      	b.n	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	43da      	mvns	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4013      	ands	r3, r2
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d18d      	bne.n	8002856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002950:	e02d      	b.n	80029ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f8ce 	bl	8002af4 <I2C_IsAcknowledgeFailed>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e02d      	b.n	80029be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002968:	d021      	beq.n	80029ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7fe fcdb 	bl	8001324 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d116      	bne.n	80029ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e007      	b.n	80029be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	d1ca      	bne.n	8002952 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029d2:	e02d      	b.n	8002a30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f88d 	bl	8002af4 <I2C_IsAcknowledgeFailed>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e02d      	b.n	8002a40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ea:	d021      	beq.n	8002a30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ec:	f7fe fc9a 	bl	8001324 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d302      	bcc.n	8002a02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d116      	bne.n	8002a30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e007      	b.n	8002a40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d1ca      	bne.n	80029d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a54:	e042      	b.n	8002adc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d119      	bne.n	8002a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0210 	mvn.w	r2, #16
 8002a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e029      	b.n	8002aec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a98:	f7fe fc44 	bl	8001324 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d302      	bcc.n	8002aae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d116      	bne.n	8002adc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e007      	b.n	8002aec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b40      	cmp	r3, #64	; 0x40
 8002ae8:	d1b5      	bne.n	8002a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b0a:	d11b      	bne.n	8002b44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f043 0204 	orr.w	r2, r3, #4
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e267      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d075      	beq.n	8002c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b72:	4b88      	ldr	r3, [pc, #544]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d00c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7e:	4b85      	ldr	r3, [pc, #532]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d112      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8a:	4b82      	ldr	r3, [pc, #520]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	4b7e      	ldr	r3, [pc, #504]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05b      	beq.n	8002c5c <HAL_RCC_OscConfig+0x108>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d157      	bne.n	8002c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e242      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x74>
 8002bba:	4b76      	ldr	r3, [pc, #472]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a75      	ldr	r2, [pc, #468]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xb0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x98>
 8002bd2:	4b70      	ldr	r3, [pc, #448]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6f      	ldr	r2, [pc, #444]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b6d      	ldr	r3, [pc, #436]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a6c      	ldr	r2, [pc, #432]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xb0>
 8002bec:	4b69      	ldr	r3, [pc, #420]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a68      	ldr	r2, [pc, #416]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a65      	ldr	r2, [pc, #404]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fb8a 	bl	8001324 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fb86 	bl	8001324 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e207      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b5b      	ldr	r3, [pc, #364]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xc0>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe fb76 	bl	8001324 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fb72 	bl	8001324 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1f3      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	4b51      	ldr	r3, [pc, #324]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0xe8>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d063      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c76:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d11c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c82:	4b44      	ldr	r3, [pc, #272]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d116      	bne.n	8002cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x152>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1c7      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca6:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4937      	ldr	r1, [pc, #220]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	e03a      	b.n	8002d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc4:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <HAL_RCC_OscConfig+0x244>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fe fb2b 	bl	8001324 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fb27 	bl	8001324 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e1a8      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4925      	ldr	r1, [pc, #148]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d06:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_OscConfig+0x244>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fb0a 	bl	8001324 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d14:	f7fe fb06 	bl	8001324 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e187      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d036      	beq.n	8002dac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d016      	beq.n	8002d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_RCC_OscConfig+0x248>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4c:	f7fe faea 	bl	8001324 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d54:	f7fe fae6 	bl	8001324 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e167      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_OscConfig+0x240>)
 8002d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x200>
 8002d72:	e01b      	b.n	8002dac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_OscConfig+0x248>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7fe fad3 	bl	8001324 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d80:	e00e      	b.n	8002da0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d82:	f7fe facf 	bl	8001324 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d907      	bls.n	8002da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e150      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
 8002d94:	40023800 	.word	0x40023800
 8002d98:	42470000 	.word	0x42470000
 8002d9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da0:	4b88      	ldr	r3, [pc, #544]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ea      	bne.n	8002d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8097 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dbe:	4b81      	ldr	r3, [pc, #516]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	4b7d      	ldr	r3, [pc, #500]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a7c      	ldr	r2, [pc, #496]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b7a      	ldr	r3, [pc, #488]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de6:	2301      	movs	r3, #1
 8002de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dea:	4b77      	ldr	r3, [pc, #476]	; (8002fc8 <HAL_RCC_OscConfig+0x474>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d118      	bne.n	8002e28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df6:	4b74      	ldr	r3, [pc, #464]	; (8002fc8 <HAL_RCC_OscConfig+0x474>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a73      	ldr	r2, [pc, #460]	; (8002fc8 <HAL_RCC_OscConfig+0x474>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e02:	f7fe fa8f 	bl	8001324 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0a:	f7fe fa8b 	bl	8001324 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e10c      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_RCC_OscConfig+0x474>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x2ea>
 8002e30:	4b64      	ldr	r3, [pc, #400]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	4a63      	ldr	r2, [pc, #396]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3c:	e01c      	b.n	8002e78 <HAL_RCC_OscConfig+0x324>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b05      	cmp	r3, #5
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x30c>
 8002e46:	4b5f      	ldr	r3, [pc, #380]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a5e      	ldr	r2, [pc, #376]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
 8002e52:	4b5c      	ldr	r3, [pc, #368]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	4a5b      	ldr	r2, [pc, #364]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002e58:	f043 0301 	orr.w	r3, r3, #1
 8002e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCC_OscConfig+0x324>
 8002e60:	4b58      	ldr	r3, [pc, #352]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a57      	ldr	r2, [pc, #348]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	4b55      	ldr	r3, [pc, #340]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	4a54      	ldr	r2, [pc, #336]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002e72:	f023 0304 	bic.w	r3, r3, #4
 8002e76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d015      	beq.n	8002eac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe fa50 	bl	8001324 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7fe fa4c 	bl	8001324 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0cb      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0ee      	beq.n	8002e88 <HAL_RCC_OscConfig+0x334>
 8002eaa:	e014      	b.n	8002ed6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eac:	f7fe fa3a 	bl	8001324 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fa36 	bl	8001324 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e0b5      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eca:	4b3e      	ldr	r3, [pc, #248]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1ee      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ed6:	7dfb      	ldrb	r3, [r7, #23]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002edc:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	4a38      	ldr	r2, [pc, #224]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80a1 	beq.w	8003034 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ef2:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d05c      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d141      	bne.n	8002f8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f06:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <HAL_RCC_OscConfig+0x478>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fa0a 	bl	8001324 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe fa06 	bl	8001324 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e087      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f26:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	019b      	lsls	r3, r3, #6
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	085b      	lsrs	r3, r3, #1
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	061b      	lsls	r3, r3, #24
 8002f56:	491b      	ldr	r1, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x478>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fe f9df 	bl	8001324 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fe f9db 	bl	8001324 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e05c      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x416>
 8002f88:	e054      	b.n	8003034 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_RCC_OscConfig+0x478>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe f9c8 	bl	8001324 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe f9c4 	bl	8001324 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e045      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_OscConfig+0x470>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x444>
 8002fb6:	e03d      	b.n	8003034 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e038      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <HAL_RCC_OscConfig+0x4ec>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d028      	beq.n	8003030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d121      	bne.n	8003030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d11a      	bne.n	8003030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003008:	4293      	cmp	r3, r2
 800300a:	d111      	bne.n	8003030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	3b01      	subs	r3, #1
 800301a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d107      	bne.n	8003030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d001      	beq.n	8003034 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800

08003044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0cc      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b68      	ldr	r3, [pc, #416]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d90c      	bls.n	8003080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b65      	ldr	r3, [pc, #404]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b63      	ldr	r3, [pc, #396]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0b8      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003098:	4b59      	ldr	r3, [pc, #356]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a58      	ldr	r2, [pc, #352]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b0:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a52      	ldr	r2, [pc, #328]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030bc:	4b50      	ldr	r3, [pc, #320]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	494d      	ldr	r1, [pc, #308]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d044      	beq.n	8003164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d119      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e07f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e06f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e067      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003122:	4b37      	ldr	r3, [pc, #220]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f023 0203 	bic.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4934      	ldr	r1, [pc, #208]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003134:	f7fe f8f6 	bl	8001324 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	e00a      	b.n	8003152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313c:	f7fe f8f2 	bl	8001324 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e04f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 020c 	and.w	r2, r3, #12
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	429a      	cmp	r2, r3
 8003162:	d1eb      	bne.n	800313c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b25      	ldr	r3, [pc, #148]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d20c      	bcs.n	800318c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b22      	ldr	r3, [pc, #136]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e032      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4916      	ldr	r1, [pc, #88]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	490e      	ldr	r1, [pc, #56]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ca:	f000 f821 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	490a      	ldr	r1, [pc, #40]	; (8003204 <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	5ccb      	ldrb	r3, [r1, r3]
 80031de:	fa22 f303 	lsr.w	r3, r2, r3
 80031e2:	4a09      	ldr	r2, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe f856 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023c00 	.word	0x40023c00
 8003200:	40023800 	.word	0x40023800
 8003204:	0800cb74 	.word	0x0800cb74
 8003208:	2000004c 	.word	0x2000004c
 800320c:	20000050 	.word	0x20000050

08003210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003214:	b094      	sub	sp, #80	; 0x50
 8003216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	647b      	str	r3, [r7, #68]	; 0x44
 800321c:	2300      	movs	r3, #0
 800321e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003220:	2300      	movs	r3, #0
 8003222:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003228:	4b79      	ldr	r3, [pc, #484]	; (8003410 <HAL_RCC_GetSysClockFreq+0x200>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 030c 	and.w	r3, r3, #12
 8003230:	2b08      	cmp	r3, #8
 8003232:	d00d      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0x40>
 8003234:	2b08      	cmp	r3, #8
 8003236:	f200 80e1 	bhi.w	80033fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x34>
 800323e:	2b04      	cmp	r3, #4
 8003240:	d003      	beq.n	800324a <HAL_RCC_GetSysClockFreq+0x3a>
 8003242:	e0db      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003244:	4b73      	ldr	r3, [pc, #460]	; (8003414 <HAL_RCC_GetSysClockFreq+0x204>)
 8003246:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003248:	e0db      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800324a:	4b72      	ldr	r3, [pc, #456]	; (8003414 <HAL_RCC_GetSysClockFreq+0x204>)
 800324c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800324e:	e0d8      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003250:	4b6f      	ldr	r3, [pc, #444]	; (8003410 <HAL_RCC_GetSysClockFreq+0x200>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003258:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800325a:	4b6d      	ldr	r3, [pc, #436]	; (8003410 <HAL_RCC_GetSysClockFreq+0x200>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d063      	beq.n	800332e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003266:	4b6a      	ldr	r3, [pc, #424]	; (8003410 <HAL_RCC_GetSysClockFreq+0x200>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	099b      	lsrs	r3, r3, #6
 800326c:	2200      	movs	r2, #0
 800326e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003270:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003278:	633b      	str	r3, [r7, #48]	; 0x30
 800327a:	2300      	movs	r3, #0
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
 800327e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003282:	4622      	mov	r2, r4
 8003284:	462b      	mov	r3, r5
 8003286:	f04f 0000 	mov.w	r0, #0
 800328a:	f04f 0100 	mov.w	r1, #0
 800328e:	0159      	lsls	r1, r3, #5
 8003290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003294:	0150      	lsls	r0, r2, #5
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4621      	mov	r1, r4
 800329c:	1a51      	subs	r1, r2, r1
 800329e:	6139      	str	r1, [r7, #16]
 80032a0:	4629      	mov	r1, r5
 80032a2:	eb63 0301 	sbc.w	r3, r3, r1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032b4:	4659      	mov	r1, fp
 80032b6:	018b      	lsls	r3, r1, #6
 80032b8:	4651      	mov	r1, sl
 80032ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032be:	4651      	mov	r1, sl
 80032c0:	018a      	lsls	r2, r1, #6
 80032c2:	4651      	mov	r1, sl
 80032c4:	ebb2 0801 	subs.w	r8, r2, r1
 80032c8:	4659      	mov	r1, fp
 80032ca:	eb63 0901 	sbc.w	r9, r3, r1
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032e2:	4690      	mov	r8, r2
 80032e4:	4699      	mov	r9, r3
 80032e6:	4623      	mov	r3, r4
 80032e8:	eb18 0303 	adds.w	r3, r8, r3
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	462b      	mov	r3, r5
 80032f0:	eb49 0303 	adc.w	r3, r9, r3
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003302:	4629      	mov	r1, r5
 8003304:	028b      	lsls	r3, r1, #10
 8003306:	4621      	mov	r1, r4
 8003308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800330c:	4621      	mov	r1, r4
 800330e:	028a      	lsls	r2, r1, #10
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003316:	2200      	movs	r2, #0
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
 800331a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800331c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003320:	f7fc ffae 	bl	8000280 <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4613      	mov	r3, r2
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800332c:	e058      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332e:	4b38      	ldr	r3, [pc, #224]	; (8003410 <HAL_RCC_GetSysClockFreq+0x200>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	099b      	lsrs	r3, r3, #6
 8003334:	2200      	movs	r2, #0
 8003336:	4618      	mov	r0, r3
 8003338:	4611      	mov	r1, r2
 800333a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	2300      	movs	r3, #0
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
 8003344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003348:	4642      	mov	r2, r8
 800334a:	464b      	mov	r3, r9
 800334c:	f04f 0000 	mov.w	r0, #0
 8003350:	f04f 0100 	mov.w	r1, #0
 8003354:	0159      	lsls	r1, r3, #5
 8003356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800335a:	0150      	lsls	r0, r2, #5
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4641      	mov	r1, r8
 8003362:	ebb2 0a01 	subs.w	sl, r2, r1
 8003366:	4649      	mov	r1, r9
 8003368:	eb63 0b01 	sbc.w	fp, r3, r1
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800337c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003380:	ebb2 040a 	subs.w	r4, r2, sl
 8003384:	eb63 050b 	sbc.w	r5, r3, fp
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	00eb      	lsls	r3, r5, #3
 8003392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003396:	00e2      	lsls	r2, r4, #3
 8003398:	4614      	mov	r4, r2
 800339a:	461d      	mov	r5, r3
 800339c:	4643      	mov	r3, r8
 800339e:	18e3      	adds	r3, r4, r3
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	464b      	mov	r3, r9
 80033a4:	eb45 0303 	adc.w	r3, r5, r3
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033b6:	4629      	mov	r1, r5
 80033b8:	028b      	lsls	r3, r1, #10
 80033ba:	4621      	mov	r1, r4
 80033bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033c0:	4621      	mov	r1, r4
 80033c2:	028a      	lsls	r2, r1, #10
 80033c4:	4610      	mov	r0, r2
 80033c6:	4619      	mov	r1, r3
 80033c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ca:	2200      	movs	r2, #0
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	61fa      	str	r2, [r7, #28]
 80033d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d4:	f7fc ff54 	bl	8000280 <__aeabi_uldivmod>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4613      	mov	r3, r2
 80033de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	3301      	adds	r3, #1
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033fa:	e002      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCC_GetSysClockFreq+0x204>)
 80033fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003404:	4618      	mov	r0, r3
 8003406:	3750      	adds	r7, #80	; 0x50
 8003408:	46bd      	mov	sp, r7
 800340a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	00f42400 	.word	0x00f42400

08003418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800341c:	4b03      	ldr	r3, [pc, #12]	; (800342c <HAL_RCC_GetHCLKFreq+0x14>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	2000004c 	.word	0x2000004c

08003430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003434:	f7ff fff0 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	0a9b      	lsrs	r3, r3, #10
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	4903      	ldr	r1, [pc, #12]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003446:	5ccb      	ldrb	r3, [r1, r3]
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	0800cb84 	.word	0x0800cb84

08003458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800345c:	f7ff ffdc 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	0b5b      	lsrs	r3, r3, #13
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	4903      	ldr	r1, [pc, #12]	; (800347c <HAL_RCC_GetPCLK2Freq+0x24>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40023800 	.word	0x40023800
 800347c:	0800cb84 	.word	0x0800cb84

08003480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e03f      	b.n	8003512 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd fd76 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2224      	movs	r2, #36	; 0x24
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f929 	bl	800371c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b08a      	sub	sp, #40	; 0x28
 800351e:	af02      	add	r7, sp, #8
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b20      	cmp	r3, #32
 8003538:	d17c      	bne.n	8003634 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_UART_Transmit+0x2c>
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e075      	b.n	8003636 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_UART_Transmit+0x3e>
 8003554:	2302      	movs	r3, #2
 8003556:	e06e      	b.n	8003636 <HAL_UART_Transmit+0x11c>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2221      	movs	r2, #33	; 0x21
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800356e:	f7fd fed9 	bl	8001324 <HAL_GetTick>
 8003572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	88fa      	ldrh	r2, [r7, #6]
 800357e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003588:	d108      	bne.n	800359c <HAL_UART_Transmit+0x82>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d104      	bne.n	800359c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	e003      	b.n	80035a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035ac:	e02a      	b.n	8003604 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2200      	movs	r2, #0
 80035b6:	2180      	movs	r1, #128	; 0x80
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f840 	bl	800363e <UART_WaitOnFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e036      	b.n	8003636 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	3302      	adds	r3, #2
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	e007      	b.n	80035f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	3301      	adds	r3, #1
 80035f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1cf      	bne.n	80035ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	2140      	movs	r1, #64	; 0x40
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f810 	bl	800363e <UART_WaitOnFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e006      	b.n	8003636 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	e000      	b.n	8003636 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003634:	2302      	movs	r3, #2
  }
}
 8003636:	4618      	mov	r0, r3
 8003638:	3720      	adds	r7, #32
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b090      	sub	sp, #64	; 0x40
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	4613      	mov	r3, r2
 800364c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364e:	e050      	b.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003656:	d04c      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0x30>
 800365e:	f7fd fe61 	bl	8001324 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800366a:	429a      	cmp	r2, r3
 800366c:	d241      	bcs.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800368e:	637a      	str	r2, [r7, #52]	; 0x34
 8003690:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e5      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3314      	adds	r3, #20
 80036a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	613b      	str	r3, [r7, #16]
   return(result);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3314      	adds	r3, #20
 80036c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c2:	623a      	str	r2, [r7, #32]
 80036c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	69f9      	ldr	r1, [r7, #28]
 80036c8:	6a3a      	ldr	r2, [r7, #32]
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e5      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e00f      	b.n	8003712 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	429a      	cmp	r2, r3
 800370e:	d09f      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3740      	adds	r7, #64	; 0x40
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b0c0      	sub	sp, #256	; 0x100
 8003722:	af00      	add	r7, sp, #0
 8003724:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	68d9      	ldr	r1, [r3, #12]
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	ea40 0301 	orr.w	r3, r0, r1
 8003744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	431a      	orrs	r2, r3
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	431a      	orrs	r2, r3
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003774:	f021 010c 	bic.w	r1, r1, #12
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003782:	430b      	orrs	r3, r1
 8003784:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	6999      	ldr	r1, [r3, #24]
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	ea40 0301 	orr.w	r3, r0, r1
 80037a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b8f      	ldr	r3, [pc, #572]	; (80039e8 <UART_SetConfig+0x2cc>)
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d005      	beq.n	80037bc <UART_SetConfig+0xa0>
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b8d      	ldr	r3, [pc, #564]	; (80039ec <UART_SetConfig+0x2d0>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d104      	bne.n	80037c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037bc:	f7ff fe4c 	bl	8003458 <HAL_RCC_GetPCLK2Freq>
 80037c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037c4:	e003      	b.n	80037ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037c6:	f7ff fe33 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 80037ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d8:	f040 810c 	bne.w	80039f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037e0:	2200      	movs	r2, #0
 80037e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037ee:	4622      	mov	r2, r4
 80037f0:	462b      	mov	r3, r5
 80037f2:	1891      	adds	r1, r2, r2
 80037f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80037f6:	415b      	adcs	r3, r3
 80037f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037fe:	4621      	mov	r1, r4
 8003800:	eb12 0801 	adds.w	r8, r2, r1
 8003804:	4629      	mov	r1, r5
 8003806:	eb43 0901 	adc.w	r9, r3, r1
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800381e:	4690      	mov	r8, r2
 8003820:	4699      	mov	r9, r3
 8003822:	4623      	mov	r3, r4
 8003824:	eb18 0303 	adds.w	r3, r8, r3
 8003828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800382c:	462b      	mov	r3, r5
 800382e:	eb49 0303 	adc.w	r3, r9, r3
 8003832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003842:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003846:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800384a:	460b      	mov	r3, r1
 800384c:	18db      	adds	r3, r3, r3
 800384e:	653b      	str	r3, [r7, #80]	; 0x50
 8003850:	4613      	mov	r3, r2
 8003852:	eb42 0303 	adc.w	r3, r2, r3
 8003856:	657b      	str	r3, [r7, #84]	; 0x54
 8003858:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800385c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003860:	f7fc fd0e 	bl	8000280 <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4b61      	ldr	r3, [pc, #388]	; (80039f0 <UART_SetConfig+0x2d4>)
 800386a:	fba3 2302 	umull	r2, r3, r3, r2
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	011c      	lsls	r4, r3, #4
 8003872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800387c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003880:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003884:	4642      	mov	r2, r8
 8003886:	464b      	mov	r3, r9
 8003888:	1891      	adds	r1, r2, r2
 800388a:	64b9      	str	r1, [r7, #72]	; 0x48
 800388c:	415b      	adcs	r3, r3
 800388e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003890:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003894:	4641      	mov	r1, r8
 8003896:	eb12 0a01 	adds.w	sl, r2, r1
 800389a:	4649      	mov	r1, r9
 800389c:	eb43 0b01 	adc.w	fp, r3, r1
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b4:	4692      	mov	sl, r2
 80038b6:	469b      	mov	fp, r3
 80038b8:	4643      	mov	r3, r8
 80038ba:	eb1a 0303 	adds.w	r3, sl, r3
 80038be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038c2:	464b      	mov	r3, r9
 80038c4:	eb4b 0303 	adc.w	r3, fp, r3
 80038c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038e0:	460b      	mov	r3, r1
 80038e2:	18db      	adds	r3, r3, r3
 80038e4:	643b      	str	r3, [r7, #64]	; 0x40
 80038e6:	4613      	mov	r3, r2
 80038e8:	eb42 0303 	adc.w	r3, r2, r3
 80038ec:	647b      	str	r3, [r7, #68]	; 0x44
 80038ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038f6:	f7fc fcc3 	bl	8000280 <__aeabi_uldivmod>
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4611      	mov	r1, r2
 8003900:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <UART_SetConfig+0x2d4>)
 8003902:	fba3 2301 	umull	r2, r3, r3, r1
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2264      	movs	r2, #100	; 0x64
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	1acb      	subs	r3, r1, r3
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003916:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <UART_SetConfig+0x2d4>)
 8003918:	fba3 2302 	umull	r2, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003924:	441c      	add	r4, r3
 8003926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392a:	2200      	movs	r2, #0
 800392c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003930:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003934:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003938:	4642      	mov	r2, r8
 800393a:	464b      	mov	r3, r9
 800393c:	1891      	adds	r1, r2, r2
 800393e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003940:	415b      	adcs	r3, r3
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003948:	4641      	mov	r1, r8
 800394a:	1851      	adds	r1, r2, r1
 800394c:	6339      	str	r1, [r7, #48]	; 0x30
 800394e:	4649      	mov	r1, r9
 8003950:	414b      	adcs	r3, r1
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003960:	4659      	mov	r1, fp
 8003962:	00cb      	lsls	r3, r1, #3
 8003964:	4651      	mov	r1, sl
 8003966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396a:	4651      	mov	r1, sl
 800396c:	00ca      	lsls	r2, r1, #3
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	4603      	mov	r3, r0
 8003974:	4642      	mov	r2, r8
 8003976:	189b      	adds	r3, r3, r2
 8003978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800397c:	464b      	mov	r3, r9
 800397e:	460a      	mov	r2, r1
 8003980:	eb42 0303 	adc.w	r3, r2, r3
 8003984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003994:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800399c:	460b      	mov	r3, r1
 800399e:	18db      	adds	r3, r3, r3
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039a2:	4613      	mov	r3, r2
 80039a4:	eb42 0303 	adc.w	r3, r2, r3
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039b2:	f7fc fc65 	bl	8000280 <__aeabi_uldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <UART_SetConfig+0x2d4>)
 80039bc:	fba3 1302 	umull	r1, r3, r3, r2
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	2164      	movs	r1, #100	; 0x64
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	3332      	adds	r3, #50	; 0x32
 80039ce:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <UART_SetConfig+0x2d4>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	f003 0207 	and.w	r2, r3, #7
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4422      	add	r2, r4
 80039e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039e4:	e106      	b.n	8003bf4 <UART_SetConfig+0x4d8>
 80039e6:	bf00      	nop
 80039e8:	40011000 	.word	0x40011000
 80039ec:	40011400 	.word	0x40011400
 80039f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a06:	4642      	mov	r2, r8
 8003a08:	464b      	mov	r3, r9
 8003a0a:	1891      	adds	r1, r2, r2
 8003a0c:	6239      	str	r1, [r7, #32]
 8003a0e:	415b      	adcs	r3, r3
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
 8003a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a16:	4641      	mov	r1, r8
 8003a18:	1854      	adds	r4, r2, r1
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	eb43 0501 	adc.w	r5, r3, r1
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	00eb      	lsls	r3, r5, #3
 8003a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a2e:	00e2      	lsls	r2, r4, #3
 8003a30:	4614      	mov	r4, r2
 8003a32:	461d      	mov	r5, r3
 8003a34:	4643      	mov	r3, r8
 8003a36:	18e3      	adds	r3, r4, r3
 8003a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	eb45 0303 	adc.w	r3, r5, r3
 8003a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a62:	4629      	mov	r1, r5
 8003a64:	008b      	lsls	r3, r1, #2
 8003a66:	4621      	mov	r1, r4
 8003a68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	008a      	lsls	r2, r1, #2
 8003a70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a74:	f7fc fc04 	bl	8000280 <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4b60      	ldr	r3, [pc, #384]	; (8003c00 <UART_SetConfig+0x4e4>)
 8003a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	011c      	lsls	r4, r3, #4
 8003a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a98:	4642      	mov	r2, r8
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	1891      	adds	r1, r2, r2
 8003a9e:	61b9      	str	r1, [r7, #24]
 8003aa0:	415b      	adcs	r3, r3
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	1851      	adds	r1, r2, r1
 8003aac:	6139      	str	r1, [r7, #16]
 8003aae:	4649      	mov	r1, r9
 8003ab0:	414b      	adcs	r3, r1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac0:	4659      	mov	r1, fp
 8003ac2:	00cb      	lsls	r3, r1, #3
 8003ac4:	4651      	mov	r1, sl
 8003ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aca:	4651      	mov	r1, sl
 8003acc:	00ca      	lsls	r2, r1, #3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	189b      	adds	r3, r3, r2
 8003ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003adc:	464b      	mov	r3, r9
 8003ade:	460a      	mov	r2, r1
 8003ae0:	eb42 0303 	adc.w	r3, r2, r3
 8003ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003af2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b00:	4649      	mov	r1, r9
 8003b02:	008b      	lsls	r3, r1, #2
 8003b04:	4641      	mov	r1, r8
 8003b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0a:	4641      	mov	r1, r8
 8003b0c:	008a      	lsls	r2, r1, #2
 8003b0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b12:	f7fc fbb5 	bl	8000280 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <UART_SetConfig+0x4e4>)
 8003b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2264      	movs	r2, #100	; 0x64
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	1acb      	subs	r3, r1, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a33      	ldr	r2, [pc, #204]	; (8003c00 <UART_SetConfig+0x4e4>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b3c:	441c      	add	r4, r3
 8003b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b42:	2200      	movs	r2, #0
 8003b44:	673b      	str	r3, [r7, #112]	; 0x70
 8003b46:	677a      	str	r2, [r7, #116]	; 0x74
 8003b48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	1891      	adds	r1, r2, r2
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	415b      	adcs	r3, r3
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b5c:	4641      	mov	r1, r8
 8003b5e:	1851      	adds	r1, r2, r1
 8003b60:	6039      	str	r1, [r7, #0]
 8003b62:	4649      	mov	r1, r9
 8003b64:	414b      	adcs	r3, r1
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b74:	4659      	mov	r1, fp
 8003b76:	00cb      	lsls	r3, r1, #3
 8003b78:	4651      	mov	r1, sl
 8003b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b7e:	4651      	mov	r1, sl
 8003b80:	00ca      	lsls	r2, r1, #3
 8003b82:	4610      	mov	r0, r2
 8003b84:	4619      	mov	r1, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	4642      	mov	r2, r8
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b8e:	464b      	mov	r3, r9
 8003b90:	460a      	mov	r2, r1
 8003b92:	eb42 0303 	adc.w	r3, r2, r3
 8003b96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba2:	667a      	str	r2, [r7, #100]	; 0x64
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	008b      	lsls	r3, r1, #2
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bba:	4641      	mov	r1, r8
 8003bbc:	008a      	lsls	r2, r1, #2
 8003bbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bc2:	f7fc fb5d 	bl	8000280 <__aeabi_uldivmod>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <UART_SetConfig+0x4e4>)
 8003bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	2164      	movs	r1, #100	; 0x64
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	3332      	adds	r3, #50	; 0x32
 8003bde:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <UART_SetConfig+0x4e4>)
 8003be0:	fba2 2303 	umull	r2, r3, r2, r3
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	f003 020f 	and.w	r2, r3, #15
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4422      	add	r2, r4
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c00:	51eb851f 	.word	0x51eb851f

08003c04 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4293      	cmp	r3, r2
 8003c14:	bf38      	it	cc
 8003c16:	4613      	movcc	r3, r2
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4293      	cmp	r3, r2
 8003c34:	bf28      	it	cs
 8003c36:	4613      	movcs	r3, r2
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c56:	6839      	ldr	r1, [r7, #0]
 8003c58:	fb01 f202 	mul.w	r2, r1, r2
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	1ad3      	subs	r3, r2, r3
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	6839      	ldr	r1, [r7, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ffde 	bl	8003c44 <lfs_aligndown>
 8003c88:	4603      	mov	r3, r0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	fab3 f383 	clz	r3, r3
 8003ca2:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	fa93 f3a3 	rbit	r3, r3
 8003cc0:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7fc fae9 	bl	80002b0 <__popcountsi2>
 8003cde:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	1ad3      	subs	r3, r2, r3
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8003d0c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ffee 	bl	8003d04 <lfs_fromle32>
 8003d28:	4603      	mov	r3, r0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ffed 	bl	8003d32 <lfs_frombe32>
 8003d58:	4603      	mov	r3, r0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f007 f824 	bl	800adb8 <malloc>
 8003d70:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f007 f820 	bl	800adc8 <free>
#else
    (void)p;
#endif
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003da0:	601a      	str	r2, [r3, #0]
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68d8      	ldr	r0, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	21ff      	movs	r1, #255	; 0xff
 8003dc6:	f007 f9e2 	bl	800b18e <memset>
    pcache->block = LFS_BLOCK_NULL;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8003ddc:	b5b0      	push	{r4, r5, r7, lr}
 8003dde:	b08a      	sub	sp, #40	; 0x28
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d208      	bcs.n	8003e0c <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8003dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfe:	441a      	add	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e04:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	f240 811b 	bls.w	8004042 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8003e0c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003e10:	e11c      	b.n	800404c <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8003e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e14:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d03f      	beq.n	8003e9c <lfs_bd_read+0xc0>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d13a      	bne.n	8003e9c <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8003e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d232      	bcs.n	8003e9c <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d324      	bcc.n	8003e8a <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	1acb      	subs	r3, r1, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	4619      	mov	r1, r3
 8003e50:	69b8      	ldr	r0, [r7, #24]
 8003e52:	f7ff fee7 	bl	8003c24 <lfs_min>
 8003e56:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e62:	1acb      	subs	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	69f8      	ldr	r0, [r7, #28]
 8003e6c:	f007 fa48 	bl	800b300 <memcpy>

                data += diff;
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4413      	add	r3, r2
 8003e76:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003e88:	e0db      	b.n	8004042 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	4619      	mov	r1, r3
 8003e94:	69b8      	ldr	r0, [r7, #24]
 8003e96:	f7ff fec5 	bl	8003c24 <lfs_min>
 8003e9a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d13a      	bne.n	8003f1c <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4413      	add	r3, r2
        if (block == rcache->block &&
 8003eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d232      	bcs.n	8003f1c <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d324      	bcc.n	8003f0a <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eca:	1acb      	subs	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	69b8      	ldr	r0, [r7, #24]
 8003ed2:	f7ff fea7 	bl	8003c24 <lfs_min>
 8003ed6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ee2:	1acb      	subs	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	69f8      	ldr	r0, [r7, #28]
 8003eec:	f007 fa08 	bl	800b300 <memcpy>

                data += diff;
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	4413      	add	r3, r2
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8003f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8003f08:	e09b      	b.n	8004042 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	4619      	mov	r1, r3
 8003f14:	69b8      	ldr	r0, [r7, #24]
 8003f16:	f7ff fe85 	bl	8003c24 <lfs_min>
 8003f1a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8003f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d336      	bcc.n	8003f92 <lfs_bd_read+0x1b6>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f30:	fb01 f202 	mul.w	r2, r1, r2
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d12b      	bne.n	8003f92 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f3e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8003f40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d325      	bcc.n	8003f92 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	69b8      	ldr	r0, [r7, #24]
 8003f50:	f7ff fe78 	bl	8003c44 <lfs_aligndown>
 8003f54:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5a:	685c      	ldr	r4, [r3, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f6a:	47a0      	blx	r4
 8003f6c:	6178      	str	r0, [r7, #20]
            if (err) {
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <lfs_bd_read+0x19c>
                return err;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	e069      	b.n	800404c <lfs_bd_read+0x270>
            }

            data += diff;
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8003f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	4413      	add	r3, r2
 8003f86:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8003f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8003f90:	e057      	b.n	8004042 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d305      	bcc.n	8003faa <lfs_bd_read+0x1ce>
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <lfs_bd_read+0x278>)
 8003fa0:	4a2d      	ldr	r2, [pc, #180]	; (8004058 <lfs_bd_read+0x27c>)
 8003fa2:	216b      	movs	r1, #107	; 0x6b
 8003fa4:	482d      	ldr	r0, [pc, #180]	; (800405c <lfs_bd_read+0x280>)
 8003fa6:	f006 fee9 	bl	800ad7c <__assert_func>
        rcache->block = block;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fae:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fba:	f7ff fe43 	bl	8003c44 <lfs_aligndown>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8003fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fce:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7ff fe4b 	bl	8003c6e <lfs_alignup>
 8003fd8:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fde:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f7ff fe1e 	bl	8003c24 <lfs_min>
 8003fe8:	4602      	mov	r2, r0
                - rcache->off,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8003fee:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f7ff fe13 	bl	8003c24 <lfs_min>
 8003ffe:	4602      	mov	r2, r0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004008:	685c      	ldr	r4, [r3, #4]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6819      	ldr	r1, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	462b      	mov	r3, r5
 8004022:	47a0      	blx	r4
 8004024:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	dd05      	ble.n	8004038 <lfs_bd_read+0x25c>
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <lfs_bd_read+0x284>)
 800402e:	4a0a      	ldr	r2, [pc, #40]	; (8004058 <lfs_bd_read+0x27c>)
 8004030:	2176      	movs	r1, #118	; 0x76
 8004032:	480a      	ldr	r0, [pc, #40]	; (800405c <lfs_bd_read+0x280>)
 8004034:	f006 fea2 	bl	800ad7c <__assert_func>
        if (err) {
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <lfs_bd_read+0x266>
            return err;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	e004      	b.n	800404c <lfs_bd_read+0x270>
    while (size > 0) {
 8004042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004044:	2b00      	cmp	r3, #0
 8004046:	f47f aee4 	bne.w	8003e12 <lfs_bd_read+0x36>
        }
    }

    return 0;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bdb0      	pop	{r4, r5, r7, pc}
 8004054:	0800beec 	.word	0x0800beec
 8004058:	0800cb8c 	.word	0x0800cb8c
 800405c:	0800bf0c 	.word	0x0800bf0c
 8004060:	0800bf20 	.word	0x0800bf20

08004064 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b090      	sub	sp, #64	; 0x40
 8004068:	af04      	add	r7, sp, #16
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8004072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004074:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 800407a:	2300      	movs	r3, #0
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800407e:	e039      	b.n	80040f4 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8004080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2108      	movs	r1, #8
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fdcb 	bl	8003c24 <lfs_min>
 800408e:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	1ad1      	subs	r1, r2, r3
 8004096:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409a:	4413      	add	r3, r2
 800409c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409e:	9203      	str	r2, [sp, #12]
 80040a0:	f107 0214 	add.w	r2, r7, #20
 80040a4:	9202      	str	r2, [sp, #8]
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	460b      	mov	r3, r1
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff fe92 	bl	8003ddc <lfs_bd_read>
 80040b8:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <lfs_bd_cmp+0x60>
            return err;
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	e01c      	b.n	80040fe <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 80040c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	18d1      	adds	r1, r2, r3
 80040ca:	f107 0314 	add.w	r3, r7, #20
 80040ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d0:	4618      	mov	r0, r3
 80040d2:	f007 f84c 	bl	800b16e <memcmp>
 80040d6:	61f8      	str	r0, [r7, #28]
        if (res) {
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d006      	beq.n	80040ec <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	da01      	bge.n	80040e8 <lfs_bd_cmp+0x84>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e00a      	b.n	80040fe <lfs_bd_cmp+0x9a>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e008      	b.n	80040fe <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 80040ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	4413      	add	r3, r2
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d3c1      	bcc.n	8004080 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3730      	adds	r7, #48	; 0x30
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8004106:	b580      	push	{r7, lr}
 8004108:	b08e      	sub	sp, #56	; 0x38
 800410a:	af04      	add	r7, sp, #16
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8004118:	2300      	movs	r3, #0
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
 800411c:	e030      	b.n	8004180 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800411e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2108      	movs	r1, #8
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fd7c 	bl	8003c24 <lfs_min>
 800412c:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	1ad1      	subs	r1, r2, r3
 8004134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	4413      	add	r3, r2
 800413a:	6a3a      	ldr	r2, [r7, #32]
 800413c:	9203      	str	r2, [sp, #12]
 800413e:	f107 0214 	add.w	r2, r7, #20
 8004142:	9202      	str	r2, [sp, #8]
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	460b      	mov	r3, r1
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fe43 	bl	8003ddc <lfs_bd_read>
 8004156:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <lfs_bd_crc+0x5c>
            return err;
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	e013      	b.n	800418a <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8004162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f107 0114 	add.w	r1, r7, #20
 800416a:	6a3a      	ldr	r2, [r7, #32]
 800416c:	4618      	mov	r0, r3
 800416e:	f006 fb93 	bl	800a898 <lfs_crc>
 8004172:	4602      	mov	r2, r0
 8004174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004176:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	4413      	add	r3, r2
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
 8004180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	429a      	cmp	r2, r3
 8004186:	d3ca      	bcc.n	800411e <lfs_bd_crc+0x18>
    }

    return 0;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3728      	adds	r7, #40	; 0x28
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8004194:	b5b0      	push	{r4, r5, r7, lr}
 8004196:	b08c      	sub	sp, #48	; 0x30
 8004198:	af04      	add	r7, sp, #16
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041aa:	d061      	beq.n	8004270 <lfs_bd_flush+0xdc>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f113 0f02 	cmn.w	r3, #2
 80041b4:	d05c      	beq.n	8004270 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d305      	bcc.n	80041d0 <lfs_bd_flush+0x3c>
 80041c4:	4b2d      	ldr	r3, [pc, #180]	; (800427c <lfs_bd_flush+0xe8>)
 80041c6:	4a2e      	ldr	r2, [pc, #184]	; (8004280 <lfs_bd_flush+0xec>)
 80041c8:	21b3      	movs	r1, #179	; 0xb3
 80041ca:	482e      	ldr	r0, [pc, #184]	; (8004284 <lfs_bd_flush+0xf0>)
 80041cc:	f006 fdd6 	bl	800ad7c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f7ff fd46 	bl	8003c6e <lfs_alignup>
 80041e2:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041e8:	689c      	ldr	r4, [r3, #8]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6819      	ldr	r1, [r3, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	462b      	mov	r3, r5
 8004200:	47a0      	blx	r4
 8004202:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	dd05      	ble.n	8004216 <lfs_bd_flush+0x82>
 800420a:	4b1f      	ldr	r3, [pc, #124]	; (8004288 <lfs_bd_flush+0xf4>)
 800420c:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <lfs_bd_flush+0xec>)
 800420e:	21b7      	movs	r1, #183	; 0xb7
 8004210:	481c      	ldr	r0, [pc, #112]	; (8004284 <lfs_bd_flush+0xf0>)
 8004212:	f006 fdb3 	bl	800ad7c <__assert_func>
        if (err) {
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <lfs_bd_flush+0x8c>
            return err;
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	e028      	b.n	8004272 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d020      	beq.n	8004268 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fdb1 	bl	8003d90 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800423a:	69f8      	ldr	r0, [r7, #28]
 800423c:	9003      	str	r0, [sp, #12]
 800423e:	9102      	str	r1, [sp, #8]
 8004240:	9201      	str	r2, [sp, #4]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	2100      	movs	r1, #0
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff ff0a 	bl	8004064 <lfs_bd_cmp>
 8004250:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	da01      	bge.n	800425c <lfs_bd_flush+0xc8>
                return res;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	e00a      	b.n	8004272 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8004262:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8004266:	e004      	b.n	8004272 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff fd9f 	bl	8003dae <lfs_cache_zero>
    }

    return 0;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bdb0      	pop	{r4, r5, r7, pc}
 800427a:	bf00      	nop
 800427c:	0800bf2c 	.word	0x0800bf2c
 8004280:	0800cb98 	.word	0x0800cb98
 8004284:	0800bf0c 	.word	0x0800bf0c
 8004288:	0800bf20 	.word	0x0800bf20

0800428c <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff fd77 	bl	8003d90 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff ff73 	bl	8004194 <lfs_bd_flush>
 80042ae:	6178      	str	r0, [r7, #20]
    if (err) {
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <lfs_bd_sync+0x2e>
        return err;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	e011      	b.n	80042de <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042c4:	4610      	mov	r0, r2
 80042c6:	4798      	blx	r3
 80042c8:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	dd05      	ble.n	80042dc <lfs_bd_sync+0x50>
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <lfs_bd_sync+0x5c>)
 80042d2:	4a06      	ldr	r2, [pc, #24]	; (80042ec <lfs_bd_sync+0x60>)
 80042d4:	21dd      	movs	r1, #221	; 0xdd
 80042d6:	4806      	ldr	r0, [pc, #24]	; (80042f0 <lfs_bd_sync+0x64>)
 80042d8:	f006 fd50 	bl	800ad7c <__assert_func>
    return err;
 80042dc:	697b      	ldr	r3, [r7, #20]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	0800bf20 	.word	0x0800bf20
 80042ec:	0800cba8 	.word	0x0800cba8
 80042f0:	0800bf0c 	.word	0x0800bf0c

080042f4 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	f113 0f02 	cmn.w	r3, #2
 800430c:	d00b      	beq.n	8004326 <lfs_bd_prog+0x32>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004316:	429a      	cmp	r2, r3
 8004318:	d305      	bcc.n	8004326 <lfs_bd_prog+0x32>
 800431a:	4b47      	ldr	r3, [pc, #284]	; (8004438 <lfs_bd_prog+0x144>)
 800431c:	4a47      	ldr	r2, [pc, #284]	; (800443c <lfs_bd_prog+0x148>)
 800431e:	21e8      	movs	r1, #232	; 0xe8
 8004320:	4847      	ldr	r0, [pc, #284]	; (8004440 <lfs_bd_prog+0x14c>)
 8004322:	f006 fd2b 	bl	800ad7c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8004326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432a:	441a      	add	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	429a      	cmp	r2, r3
 8004334:	d978      	bls.n	8004428 <lfs_bd_prog+0x134>
 8004336:	4b43      	ldr	r3, [pc, #268]	; (8004444 <lfs_bd_prog+0x150>)
 8004338:	4a40      	ldr	r2, [pc, #256]	; (800443c <lfs_bd_prog+0x148>)
 800433a:	21e9      	movs	r1, #233	; 0xe9
 800433c:	4840      	ldr	r0, [pc, #256]	; (8004440 <lfs_bd_prog+0x14c>)
 800433e:	f006 fd1d 	bl	800ad7c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004348:	429a      	cmp	r2, r3
 800434a:	d151      	bne.n	80043f0 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8004350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004352:	429a      	cmp	r2, r3
 8004354:	d34c      	bcc.n	80043f0 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	4413      	add	r3, r2
                off >= pcache->off &&
 8004362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004364:	429a      	cmp	r2, r3
 8004366:	d243      	bcs.n	80043f0 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800436c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6859      	ldr	r1, [r3, #4]
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8004376:	4413      	add	r3, r2
 8004378:	4619      	mov	r1, r3
 800437a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800437c:	f7ff fc52 	bl	8003c24 <lfs_min>
 8004380:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800438c:	1acb      	subs	r3, r1, r3
 800438e:	4413      	add	r3, r2
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	69f9      	ldr	r1, [r7, #28]
 8004394:	4618      	mov	r0, r3
 8004396:	f006 ffb3 	bl	800b300 <memcpy>

            data += diff;
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	4413      	add	r3, r2
 80043a0:	61fb      	str	r3, [r7, #28]
            off += diff;
 80043a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	4413      	add	r3, r2
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 80043aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6898      	ldr	r0, [r3, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	4619      	mov	r1, r3
 80043c0:	f7ff fc20 	bl	8003c04 <lfs_max>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d127      	bne.n	8004428 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff fed8 	bl	8004194 <lfs_bd_flush>
 80043e4:	6178      	str	r0, [r7, #20]
                if (err) {
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01d      	beq.n	8004428 <lfs_bd_prog+0x134>
                    return err;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	e01f      	b.n	8004430 <lfs_bd_prog+0x13c>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f8:	d006      	beq.n	8004408 <lfs_bd_prog+0x114>
 80043fa:	4b13      	ldr	r3, [pc, #76]	; (8004448 <lfs_bd_prog+0x154>)
 80043fc:	4a0f      	ldr	r2, [pc, #60]	; (800443c <lfs_bd_prog+0x148>)
 80043fe:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004402:	480f      	ldr	r0, [pc, #60]	; (8004440 <lfs_bd_prog+0x14c>)
 8004404:	f006 fcba 	bl	800ad7c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800440c:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	4619      	mov	r1, r3
 8004416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004418:	f7ff fc14 	bl	8003c44 <lfs_aligndown>
 800441c:	4602      	mov	r2, r0
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2200      	movs	r2, #0
 8004426:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8004428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442a:	2b00      	cmp	r3, #0
 800442c:	d189      	bne.n	8004342 <lfs_bd_prog+0x4e>
    }

    return 0;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3720      	adds	r7, #32
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	0800bf54 	.word	0x0800bf54
 800443c:	0800cbb4 	.word	0x0800cbb4
 8004440:	0800bf0c 	.word	0x0800bf0c
 8004444:	0800bf90 	.word	0x0800bf90
 8004448:	0800bfb4 	.word	0x0800bfb4

0800444c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d306      	bcc.n	8004470 <lfs_bd_erase+0x24>
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <lfs_bd_erase+0x54>)
 8004464:	4a0f      	ldr	r2, [pc, #60]	; (80044a4 <lfs_bd_erase+0x58>)
 8004466:	f44f 718a 	mov.w	r1, #276	; 0x114
 800446a:	480f      	ldr	r0, [pc, #60]	; (80044a8 <lfs_bd_erase+0x5c>)
 800446c:	f006 fc86 	bl	800ad7c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800447a:	6839      	ldr	r1, [r7, #0]
 800447c:	4610      	mov	r0, r2
 800447e:	4798      	blx	r3
 8004480:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	dd06      	ble.n	8004496 <lfs_bd_erase+0x4a>
 8004488:	4b08      	ldr	r3, [pc, #32]	; (80044ac <lfs_bd_erase+0x60>)
 800448a:	4a06      	ldr	r2, [pc, #24]	; (80044a4 <lfs_bd_erase+0x58>)
 800448c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004490:	4805      	ldr	r0, [pc, #20]	; (80044a8 <lfs_bd_erase+0x5c>)
 8004492:	f006 fc73 	bl	800ad7c <__assert_func>
    return err;
 8004496:	68fb      	ldr	r3, [r7, #12]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	0800beec 	.word	0x0800beec
 80044a4:	0800cbc0 	.word	0x0800cbc0
 80044a8:	0800bf0c 	.word	0x0800bf0c
 80044ac:	0800bf20 	.word	0x0800bf20

080044b0 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3304      	adds	r3, #4
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ea:	d005      	beq.n	80044f8 <lfs_pair_isnull+0x1e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f6:	d101      	bne.n	80044fc <lfs_pair_isnull+0x22>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <lfs_pair_isnull+0x24>
 80044fc:	2300      	movs	r3, #0
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	b2db      	uxtb	r3, r3
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d017      	beq.n	8004556 <lfs_pair_cmp+0x46>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3304      	adds	r3, #4
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	3304      	adds	r3, #4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d00f      	beq.n	8004556 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	3304      	adds	r3, #4
 800453e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d008      	beq.n	8004556 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d001      	beq.n	8004556 <lfs_pair_cmp+0x46>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <lfs_pair_cmp+0x48>
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d107      	bne.n	800458a <lfs_pair_issync+0x26>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	3304      	adds	r3, #4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d00d      	beq.n	80045a6 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	3304      	adds	r3, #4
 8004592:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d108      	bne.n	80045aa <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d101      	bne.n	80045aa <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <lfs_pair_issync+0x48>
 80045aa:	2300      	movs	r3, #0
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80045be:	b590      	push	{r4, r7, lr}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fb9a 	bl	8003d04 <lfs_fromle32>
 80045d0:	4602      	mov	r2, r0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3304      	adds	r3, #4
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	1d1c      	adds	r4, r3, #4
 80045e0:	4610      	mov	r0, r2
 80045e2:	f7ff fb8f 	bl	8003d04 <lfs_fromle32>
 80045e6:	4603      	mov	r3, r0
 80045e8:	6023      	str	r3, [r4, #0]
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd90      	pop	{r4, r7, pc}

080045f2 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80045f2:	b590      	push	{r4, r7, lr}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fb8b 	bl	8003d1a <lfs_tole32>
 8004604:	4602      	mov	r2, r0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3304      	adds	r3, #4
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	1d1c      	adds	r4, r3, #4
 8004614:	4610      	mov	r0, r2
 8004616:	f7ff fb80 	bl	8003d1a <lfs_tole32>
 800461a:	4603      	mov	r3, r0
 800461c:	6023      	str	r3, [r4, #0]
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bd90      	pop	{r4, r7, pc}

08004626 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	43db      	mvns	r3, r3
 8004632:	0fdb      	lsrs	r3, r3, #31
 8004634:	b2db      	uxtb	r3, r3
}
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	059b      	lsls	r3, r3, #22
 800464e:	159b      	asrs	r3, r3, #22
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004654:	bf0c      	ite	eq
 8004656:	2301      	moveq	r3, #1
 8004658:	2300      	movne	r3, #0
 800465a:	b2db      	uxtb	r3, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	0d1b      	lsrs	r3, r3, #20
 8004674:	b29b      	uxth	r3, r3
 8004676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800467a:	b29b      	uxth	r3, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	0d1b      	lsrs	r3, r3, #20
 8004694:	b29b      	uxth	r3, r3
 8004696:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800469a:	b29b      	uxth	r3, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	0d1b      	lsrs	r3, r3, #20
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046ba:	b29b      	uxth	r3, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	0d1b      	lsrs	r3, r3, #20
 80046d4:	b2db      	uxtb	r3, r3
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ffec 	bl	80046c8 <lfs_tag_chunk>
 80046f0:	4603      	mov	r3, r0
 80046f2:	b25b      	sxtb	r3, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	0a9b      	lsrs	r3, r3, #10
 8004708:	b29b      	uxth	r3, r3
 800470a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800470e:	b29b      	uxth	r3, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ff7f 	bl	8004642 <lfs_tag_isdelete>
 8004744:	4603      	mov	r3, r0
 8004746:	461a      	mov	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ffe5 	bl	800471c <lfs_tag_size>
 8004752:	4603      	mov	r3, r0
 8004754:	3304      	adds	r3, #4
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e012      	b.n	8004794 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	6819      	ldr	r1, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	4413      	add	r3, r2
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	4403      	add	r3, r0
 800478a:	404a      	eors	r2, r1
 800478c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3301      	adds	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b02      	cmp	r3, #2
 8004798:	dde9      	ble.n	800476e <lfs_gstate_xor+0x10>
    }
}
 800479a:	bf00      	nop
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e00b      	b.n	80047ce <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <lfs_gstate_iszero+0x20>
            return false;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e006      	b.n	80047d6 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3301      	adds	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	ddf0      	ble.n	80047b6 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80047d4:	2301      	movs	r3, #1
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff ff94 	bl	800471c <lfs_tag_size>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bf14      	ite	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	2300      	moveq	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff ff81 	bl	800471c <lfs_tag_size>
 800481a:	4603      	mov	r3, r0
 800481c:	b2db      	uxtb	r3, r3
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff ff18 	bl	8004668 <lfs_tag_type1>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	bf14      	ite	ne
 800483e:	2301      	movne	r3, #1
 8004840:	2300      	moveq	r3, #0
 8004842:	b2db      	uxtb	r3, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff5f 	bl	800471c <lfs_tag_size>
 800485e:	4603      	mov	r3, r0
 8004860:	0a5b      	lsrs	r3, r3, #9
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fef0 	bl	8004668 <lfs_tag_type1>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <lfs_gstate_hasmovehere+0x30>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3304      	adds	r3, #4
 8004892:	6839      	ldr	r1, [r7, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fe3b 	bl	8004510 <lfs_pair_cmp>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <lfs_gstate_hasmovehere+0x30>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <lfs_gstate_hasmovehere+0x32>
 80048a4:	2300      	movs	r3, #0
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	b2db      	uxtb	r3, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fa1f 	bl	8003d04 <lfs_fromle32>
 80048c6:	4602      	mov	r2, r0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fa17 	bl	8003d04 <lfs_fromle32>
 80048d6:	4602      	mov	r2, r0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fa0f 	bl	8003d04 <lfs_fromle32>
 80048e6:	4602      	mov	r2, r0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	609a      	str	r2, [r3, #8]
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff fa0a 	bl	8003d1a <lfs_tole32>
 8004906:	4602      	mov	r2, r0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fa02 	bl	8003d1a <lfs_tole32>
 8004916:	4602      	mov	r2, r0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff f9fa 	bl	8003d1a <lfs_tole32>
 8004926:	4602      	mov	r2, r0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff f9df 	bl	8003d04 <lfs_fromle32>
 8004946:	4602      	mov	r2, r0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff f9d7 	bl	8003d04 <lfs_fromle32>
 8004956:	4602      	mov	r2, r0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	605a      	str	r2, [r3, #4]
}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff f9d2 	bl	8003d1a <lfs_tole32>
 8004976:	4602      	mov	r2, r0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff f9ca 	bl	8003d1a <lfs_tole32>
 8004986:	4602      	mov	r2, r0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	605a      	str	r2, [r3, #4]
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff f9af 	bl	8003d04 <lfs_fromle32>
 80049a6:	4602      	mov	r2, r0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff f9a7 	bl	8003d04 <lfs_fromle32>
 80049b6:	4602      	mov	r2, r0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	605a      	str	r2, [r3, #4]
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff f9a2 	bl	8003d1a <lfs_tole32>
 80049d6:	4602      	mov	r2, r0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff f99a 	bl	8003d1a <lfs_tole32>
 80049e6:	4602      	mov	r2, r0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	605a      	str	r2, [r3, #4]
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff f97f 	bl	8003d04 <lfs_fromle32>
 8004a06:	4602      	mov	r2, r0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff f977 	bl	8003d04 <lfs_fromle32>
 8004a16:	4602      	mov	r2, r0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff f96f 	bl	8003d04 <lfs_fromle32>
 8004a26:	4602      	mov	r2, r0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff f967 	bl	8003d04 <lfs_fromle32>
 8004a36:	4602      	mov	r2, r0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff f95f 	bl	8003d04 <lfs_fromle32>
 8004a46:	4602      	mov	r2, r0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff f957 	bl	8003d04 <lfs_fromle32>
 8004a56:	4602      	mov	r2, r0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	615a      	str	r2, [r3, #20]
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff f952 	bl	8003d1a <lfs_tole32>
 8004a76:	4602      	mov	r2, r0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff f94a 	bl	8003d1a <lfs_tole32>
 8004a86:	4602      	mov	r2, r0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff f942 	bl	8003d1a <lfs_tole32>
 8004a96:	4602      	mov	r2, r0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff f93a 	bl	8003d1a <lfs_tole32>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff f932 	bl	8003d1a <lfs_tole32>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff f92a 	bl	8003d1a <lfs_tole32>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	615a      	str	r2, [r3, #20]
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	e009      	b.n	8004af8 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d101      	bne.n	8004af2 <lfs_mlist_isopen+0x1e>
            return true;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e007      	b.n	8004b02 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f1      	bne.n	8004ae4 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3328      	adds	r3, #40	; 0x28
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e00d      	b.n	8004b3c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d105      	bne.n	8004b36 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	601a      	str	r2, [r3, #0]
            break;
 8004b34:	e007      	b.n	8004b46 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ed      	bne.n	8004b20 <lfs_mlist_remove+0x12>
        }
    }
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8004b80:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <lfs_fs_disk_version+0x18>)
    }
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	00020001 	.word	0x00020001

08004b94 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ffeb 	bl	8004b78 <lfs_fs_disk_version>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	b29b      	uxth	r3, r3

}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ffdd 	bl	8004b78 <lfs_fs_disk_version>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	b29b      	uxth	r3, r3
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	4413      	add	r3, r2
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004bec:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8004bee:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bf2:	fb01 f202 	mul.w	r2, r1, r2
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d212      	bcs.n	8004c2a <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	009a      	lsls	r2, r3, #2
 8004c0e:	440a      	add	r2, r1
 8004c10:	6811      	ldr	r1, [r2, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	f002 021f 	and.w	r2, r2, #31
 8004c18:	2001      	movs	r0, #1
 8004c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4403      	add	r3, r0
 8004c26:	430a      	orrs	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c44:	6a1a      	ldr	r2, [r3, #32]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ffe4 	bl	8004c38 <lfs_alloc_ack>
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8004c82:	e04f      	b.n	8004d24 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c88:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c98:	1e5a      	subs	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d132      	bne.n	8004d24 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004cca:	6a12      	ldr	r2, [r2, #32]
 8004ccc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cd0:	fb01 f202 	mul.w	r2, r1, r2
 8004cd4:	1a9a      	subs	r2, r3, r2
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8004cda:	e009      	b.n	8004cf0 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cea:	1e5a      	subs	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d011      	beq.n	8004d20 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	2101      	movs	r1, #1
 8004d16:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1a:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1dd      	bne.n	8004cdc <lfs_alloc+0x64>
                }

                return 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e050      	b.n	8004dc6 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d1a9      	bne.n	8004c84 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10f      	bne.n	8004d58 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d40:	4413      	add	r3, r2
 8004d42:	4a23      	ldr	r2, [pc, #140]	; (8004dd0 <lfs_alloc+0x158>)
 8004d44:	9200      	str	r2, [sp, #0]
 8004d46:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004d4a:	4922      	ldr	r1, [pc, #136]	; (8004dd4 <lfs_alloc+0x15c>)
 8004d4c:	4822      	ldr	r0, [pc, #136]	; (8004dd8 <lfs_alloc+0x160>)
 8004d4e:	f006 f9b1 	bl	800b0b4 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8004d52:	f06f 031b 	mvn.w	r3, #27
 8004d56:	e036      	b.n	8004dc6 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d60:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d66:	6a12      	ldr	r2, [r2, #32]
 8004d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d6c:	fb01 f202 	mul.w	r2, r1, r2
 8004d70:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	00da      	lsls	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d82:	4619      	mov	r1, r3
 8004d84:	4610      	mov	r0, r2
 8004d86:	f7fe ff4d 	bl	8003c24 <lfs_min>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	461a      	mov	r2, r3
 8004da2:	2100      	movs	r1, #0
 8004da4:	f006 f9f3 	bl	800b18e <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8004da8:	2301      	movs	r3, #1
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	490b      	ldr	r1, [pc, #44]	; (8004ddc <lfs_alloc+0x164>)
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f004 fe60 	bl	8009a74 <lfs_fs_rawtraverse>
 8004db4:	60f8      	str	r0, [r7, #12]
        if (err) {
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f43f af62 	beq.w	8004c82 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff ff49 	bl	8004c56 <lfs_alloc_drop>
            return err;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	0800c000 	.word	0x0800c000
 8004dd4:	0800bf0c 	.word	0x0800bf0c
 8004dd8:	0800bfd8 	.word	0x0800bfd8
 8004ddc:	08004bcb 	.word	0x08004bcb

08004de0 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b08f      	sub	sp, #60	; 0x3c
 8004de4:	af04      	add	r7, sp, #16
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	333c      	adds	r3, #60	; 0x3c
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fd34 	bl	8004874 <lfs_gstate_hasmovehere>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 80ba 	beq.w	8004f88 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fc71 	bl	80046fc <lfs_tag_id>
 8004e1a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80b3 	beq.w	8004f88 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fc68 	bl	80046fc <lfs_tag_id>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	461c      	mov	r4, r3
 8004e30:	6838      	ldr	r0, [r7, #0]
 8004e32:	f7ff fc63 	bl	80046fc <lfs_tag_id>
 8004e36:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	f200 80a5 	bhi.w	8004f88 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004e44:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8004e46:	e09f      	b.n	8004f88 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff fc73 	bl	8004736 <lfs_tag_dsize>
 8004e50:	4602      	mov	r2, r0
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8004e5c:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8004e62:	2204      	movs	r2, #4
 8004e64:	9203      	str	r2, [sp, #12]
 8004e66:	f107 0210 	add.w	r2, r7, #16
 8004e6a:	9202      	str	r2, [sp, #8]
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6e:	9201      	str	r2, [sp, #4]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2304      	movs	r3, #4
 8004e74:	460a      	mov	r2, r1
 8004e76:	2100      	movs	r1, #0
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7fe ffaf 	bl	8003ddc <lfs_bd_read>
 8004e7e:	61b8      	str	r0, [r7, #24]
        if (err) {
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <lfs_dir_getslice+0xaa>
            return err;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	e08a      	b.n	8004fa0 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe ff50 	bl	8003d32 <lfs_frombe32>
 8004e92:	4602      	mov	r2, r0
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	4053      	eors	r3, r2
 8004e98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e9c:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff fc2c 	bl	80046fc <lfs_tag_id>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d02b      	beq.n	8004f02 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004eaa:	69f8      	ldr	r0, [r7, #28]
 8004eac:	f7ff fbdc 	bl	8004668 <lfs_tag_type1>
 8004eb0:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8004eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb6:	d124      	bne.n	8004f02 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8004eb8:	69f8      	ldr	r0, [r7, #28]
 8004eba:	f7ff fc1f 	bl	80046fc <lfs_tag_id>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	461c      	mov	r4, r3
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fc17 	bl	80046fc <lfs_tag_id>
 8004ece:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8004ed0:	429c      	cmp	r4, r3
 8004ed2:	d816      	bhi.n	8004f02 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	1ad2      	subs	r2, r2, r3
 8004eda:	4b33      	ldr	r3, [pc, #204]	; (8004fa8 <lfs_dir_getslice+0x1c8>)
 8004edc:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8004ede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d102      	bne.n	8004ef2 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8004eec:	f06f 0301 	mvn.w	r3, #1
 8004ef0:	e056      	b.n	8004fa0 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8004ef2:	69f8      	ldr	r0, [r7, #28]
 8004ef4:	f7ff fbf5 	bl	80046e2 <lfs_tag_splice>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	029a      	lsls	r2, r3, #10
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	4413      	add	r3, r2
 8004f00:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	401a      	ands	r2, r3
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	1ac9      	subs	r1, r1, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	400b      	ands	r3, r1
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d138      	bne.n	8004f88 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8004f16:	69f8      	ldr	r0, [r7, #28]
 8004f18:	f7ff fb93 	bl	8004642 <lfs_tag_isdelete>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8004f22:	f06f 0301 	mvn.w	r3, #1
 8004f26:	e03b      	b.n	8004fa0 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8004f28:	69f8      	ldr	r0, [r7, #28]
 8004f2a:	f7ff fbf7 	bl	800471c <lfs_tag_size>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fe76 	bl	8003c24 <lfs_min>
 8004f38:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8004f3a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f44:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8004f46:	3204      	adds	r2, #4
 8004f48:	6979      	ldr	r1, [r7, #20]
 8004f4a:	9103      	str	r1, [sp, #12]
 8004f4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f4e:	9102      	str	r1, [sp, #8]
 8004f50:	9201      	str	r2, [sp, #4]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4602      	mov	r2, r0
 8004f58:	2100      	movs	r1, #0
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f7fe ff3e 	bl	8003ddc <lfs_bd_read>
 8004f60:	61b8      	str	r0, [r7, #24]
            if (err) {
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <lfs_dir_getslice+0x18c>
                return err;
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	e019      	b.n	8004fa0 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8004f6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	18d0      	adds	r0, r2, r3
 8004f72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	f006 f907 	bl	800b18e <memset>

            return tag + gdiff;
 8004f80:	6a3a      	ldr	r2, [r7, #32]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	e00b      	b.n	8004fa0 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fbd3 	bl	8004736 <lfs_tag_dsize>
 8004f90:	4603      	mov	r3, r0
 8004f92:	3304      	adds	r3, #4
 8004f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f96:	429a      	cmp	r2, r3
 8004f98:	f4bf af56 	bcs.w	8004e48 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8004f9c:	f06f 0301 	mvn.w	r3, #1
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	372c      	adds	r7, #44	; 0x2c
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}
 8004fa8:	000ffc00 	.word	0x000ffc00

08004fac <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af04      	add	r7, sp, #16
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8004fba:	6838      	ldr	r0, [r7, #0]
 8004fbc:	f7ff fbae 	bl	800471c <lfs_tag_size>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	9302      	str	r3, [sp, #8]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff ff04 	bl	8004de0 <lfs_dir_getslice>
 8004fd8:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b08c      	sub	sp, #48	; 0x30
 8004fe6:	af04      	add	r7, sp, #16
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
 8004fee:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8004ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff8:	441a      	add	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	429a      	cmp	r2, r3
 8005002:	f240 80c0 	bls.w	8005186 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8005006:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800500a:	e0c1      	b.n	8005190 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800500c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500e:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d03f      	beq.n	8005096 <lfs_dir_getread+0xb4>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f113 0f02 	cmn.w	r3, #2
 800501e:	d13a      	bne.n	8005096 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800502a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800502c:	429a      	cmp	r2, r3
 800502e:	d232      	bcs.n	8005096 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005036:	429a      	cmp	r2, r3
 8005038:	d324      	bcc.n	8005084 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6859      	ldr	r1, [r3, #4]
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	1acb      	subs	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	4619      	mov	r1, r3
 800504a:	69b8      	ldr	r0, [r7, #24]
 800504c:	f7fe fdea 	bl	8003c24 <lfs_min>
 8005050:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800505c:	1acb      	subs	r3, r1, r3
 800505e:	4413      	add	r3, r2
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	4619      	mov	r1, r3
 8005064:	69f8      	ldr	r0, [r7, #28]
 8005066:	f006 f94b 	bl	800b300 <memcpy>

                data += diff;
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	4413      	add	r3, r2
 8005070:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	4413      	add	r3, r2
 8005078:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800507a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8005082:	e080      	b.n	8005186 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	4619      	mov	r1, r3
 800508e:	69b8      	ldr	r0, [r7, #24]
 8005090:	f7fe fdc8 	bl	8003c24 <lfs_min>
 8005094:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f113 0f02 	cmn.w	r3, #2
 800509e:	d13a      	bne.n	8005116 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 80050aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d232      	bcs.n	8005116 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d324      	bcc.n	8005104 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c4:	1acb      	subs	r3, r1, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	4619      	mov	r1, r3
 80050ca:	69b8      	ldr	r0, [r7, #24]
 80050cc:	f7fe fdaa 	bl	8003c24 <lfs_min>
 80050d0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050dc:	1acb      	subs	r3, r1, r3
 80050de:	4413      	add	r3, r2
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4619      	mov	r1, r3
 80050e4:	69f8      	ldr	r0, [r7, #28]
 80050e6:	f006 f90b 	bl	800b300 <memcpy>

                data += diff;
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	4413      	add	r3, r2
 80050f0:	61fb      	str	r3, [r7, #28]
                off += diff;
 80050f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	4413      	add	r3, r2
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80050fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8005102:	e040      	b.n	8005186 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	4619      	mov	r1, r3
 800510e:	69b8      	ldr	r0, [r7, #24]
 8005110:	f7fe fd88 	bl	8003c24 <lfs_min>
 8005114:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	f06f 0201 	mvn.w	r2, #1
 800511c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	4619      	mov	r1, r3
 8005126:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005128:	f7fe fd8c 	bl	8003c44 <lfs_aligndown>
 800512c:	4602      	mov	r2, r0
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8005132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	441a      	add	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	4619      	mov	r1, r3
 8005140:	4610      	mov	r0, r2
 8005142:	f7fe fd94 	bl	8003c6e <lfs_alignup>
 8005146:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800514e:	4619      	mov	r1, r3
 8005150:	4610      	mov	r0, r2
 8005152:	f7fe fd67 	bl	8003c24 <lfs_min>
 8005156:	4602      	mov	r2, r0
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	6889      	ldr	r1, [r1, #8]
 8005168:	9102      	str	r1, [sp, #8]
 800516a:	9201      	str	r2, [sp, #4]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff fe33 	bl	8004de0 <lfs_dir_getslice>
 800517a:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b00      	cmp	r3, #0
 8005180:	da01      	bge.n	8005186 <lfs_dir_getread+0x1a4>
            return err;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	e004      	b.n	8005190 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8005186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005188:	2b00      	cmp	r3, #0
 800518a:	f47f af3f 	bne.w	800500c <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8005198:	b590      	push	{r4, r7, lr}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <lfs_dir_traverse_filter+0x1e>
 80051b2:	4b24      	ldr	r3, [pc, #144]	; (8005244 <lfs_dir_traverse_filter+0xac>)
 80051b4:	e000      	b.n	80051b8 <lfs_dir_traverse_filter+0x20>
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80051b8:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	405a      	eors	r2, r3
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fa37 	bl	8004642 <lfs_tag_isdelete>
 80051d4:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10c      	bne.n	80051f4 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a19      	ldr	r2, [pc, #100]	; (8005244 <lfs_dir_traverse_filter+0xac>)
 80051de:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	4b19      	ldr	r3, [pc, #100]	; (800524c <lfs_dir_traverse_filter+0xb4>)
 80051e6:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80051e8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80051ec:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d104      	bne.n	80051fe <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
        return true;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e01e      	b.n	800523c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80051fe:	68b8      	ldr	r0, [r7, #8]
 8005200:	f7ff fa32 	bl	8004668 <lfs_tag_type1>
 8005204:	4603      	mov	r3, r0
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520a:	d116      	bne.n	800523a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800520c:	68b8      	ldr	r0, [r7, #8]
 800520e:	f7ff fa75 	bl	80046fc <lfs_tag_id>
 8005212:	4603      	mov	r3, r0
 8005214:	461c      	mov	r4, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff fa6e 	bl	80046fc <lfs_tag_id>
 8005220:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005222:	429c      	cmp	r4, r3
 8005224:	d809      	bhi.n	800523a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005226:	68b8      	ldr	r0, [r7, #8]
 8005228:	f7ff fa5b 	bl	80046e2 <lfs_tag_splice>
 800522c:	4603      	mov	r3, r0
 800522e:	029a      	lsls	r2, r3, #10
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	441a      	add	r2, r3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	601a      	str	r2, [r3, #0]
    }

    return false;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	bd90      	pop	{r4, r7, pc}
 8005244:	7ffffc00 	.word	0x7ffffc00
 8005248:	700ffc00 	.word	0x700ffc00
 800524c:	000ffc00 	.word	0x000ffc00

08005250 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8005250:	b590      	push	{r4, r7, lr}
 8005252:	b0c1      	sub	sp, #260	; 0x104
 8005254:	af04      	add	r7, sp, #16
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8005264:	6838      	ldr	r0, [r7, #0]
 8005266:	f7ff fa66 	bl	8004736 <lfs_tag_dsize>
 800526a:	4602      	mov	r2, r0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	441a      	add	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	429a      	cmp	r2, r3
 8005276:	d237      	bcs.n	80052e8 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8005278:	6838      	ldr	r0, [r7, #0]
 800527a:	f7ff fa5c 	bl	8004736 <lfs_tag_dsize>
 800527e:	4602      	mov	r2, r0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4413      	add	r3, r2
 8005284:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8005286:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 800528c:	2204      	movs	r2, #4
 800528e:	9203      	str	r2, [sp, #12]
 8005290:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005294:	9202      	str	r2, [sp, #8]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	9201      	str	r2, [sp, #4]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2304      	movs	r3, #4
 800529e:	460a      	mov	r2, r1
 80052a0:	2100      	movs	r1, #0
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7fe fd9a 	bl	8003ddc <lfs_bd_read>
 80052a8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 80052ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <lfs_dir_traverse+0x6a>
                    return err;
 80052b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b8:	e3a6      	b.n	8005a08 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 80052ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe fd38 	bl	8003d32 <lfs_frombe32>
 80052c2:	4602      	mov	r2, r0
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	4053      	eors	r3, r2
 80052c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052cc:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 80052da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80052de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 80052e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	e01b      	b.n	8005320 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	dd13      	ble.n	8005318 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 80052f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 80052f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8005302:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005306:	3308      	adds	r3, #8
 8005308:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 800530c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005310:	3b01      	subs	r3, #1
 8005312:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005316:	e003      	b.n	8005320 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 800531e:	e2a2      	b.n	8005866 <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8005320:	4b7e      	ldr	r3, [pc, #504]	; (800551c <lfs_dir_traverse+0x2cc>)
 8005322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8005326:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800532c:	405a      	eors	r2, r3
 800532e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005332:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005336:	400b      	ands	r3, r1
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	f040 8285 	bne.w	800584a <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8005340:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8005344:	f7ff f9da 	bl	80046fc <lfs_tag_id>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 80f0 	beq.w	8005530 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8005350:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005354:	2b02      	cmp	r3, #2
 8005356:	d906      	bls.n	8005366 <lfs_dir_traverse+0x116>
 8005358:	4b71      	ldr	r3, [pc, #452]	; (8005520 <lfs_dir_traverse+0x2d0>)
 800535a:	4a72      	ldr	r2, [pc, #456]	; (8005524 <lfs_dir_traverse+0x2d4>)
 800535c:	f240 3193 	movw	r1, #915	; 0x393
 8005360:	4871      	ldr	r0, [pc, #452]	; (8005528 <lfs_dir_traverse+0x2d8>)
 8005362:	f005 fd0b 	bl	800ad7c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8005366:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005368:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800536c:	4613      	mov	r3, r2
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	33f0      	adds	r3, #240	; 0xf0
 8005376:	443b      	add	r3, r7
 8005378:	3b98      	subs	r3, #152	; 0x98
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005382:	4613      	mov	r3, r2
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	33f0      	adds	r3, #240	; 0xf0
 800538c:	443b      	add	r3, r7
 800538e:	3b94      	subs	r3, #148	; 0x94
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005398:	4613      	mov	r3, r2
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	33f0      	adds	r3, #240	; 0xf0
 80053a2:	443b      	add	r3, r7
 80053a4:	3b90      	subs	r3, #144	; 0x90
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053ae:	4613      	mov	r3, r2
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	33f0      	adds	r3, #240	; 0xf0
 80053b8:	443b      	add	r3, r7
 80053ba:	3b8c      	subs	r3, #140	; 0x8c
 80053bc:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053c6:	4613      	mov	r3, r2
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	33f0      	adds	r3, #240	; 0xf0
 80053d0:	443b      	add	r3, r7
 80053d2:	3b88      	subs	r3, #136	; 0x88
 80053d4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053de:	4613      	mov	r3, r2
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	1a9b      	subs	r3, r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	33f0      	adds	r3, #240	; 0xf0
 80053e8:	443b      	add	r3, r7
 80053ea:	3b84      	subs	r3, #132	; 0x84
 80053ec:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80053f6:	4613      	mov	r3, r2
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	33f0      	adds	r3, #240	; 0xf0
 8005400:	443b      	add	r3, r7
 8005402:	3b80      	subs	r3, #128	; 0x80
 8005404:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800540e:	4613      	mov	r3, r2
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	1a9b      	subs	r3, r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	33f0      	adds	r3, #240	; 0xf0
 8005418:	443b      	add	r3, r7
 800541a:	3b7c      	subs	r3, #124	; 0x7c
 800541c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8005420:	801a      	strh	r2, [r3, #0]
 8005422:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	33f0      	adds	r3, #240	; 0xf0
 8005430:	443b      	add	r3, r7
 8005432:	3b7a      	subs	r3, #122	; 0x7a
 8005434:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800543e:	4613      	mov	r3, r2
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	33f0      	adds	r3, #240	; 0xf0
 8005448:	443b      	add	r3, r7
 800544a:	3b78      	subs	r3, #120	; 0x78
 800544c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005456:	4613      	mov	r3, r2
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	33f0      	adds	r3, #240	; 0xf0
 8005460:	443b      	add	r3, r7
 8005462:	3b74      	subs	r3, #116	; 0x74
 8005464:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800546e:	4613      	mov	r3, r2
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	33f0      	adds	r3, #240	; 0xf0
 8005478:	443b      	add	r3, r7
 800547a:	3b70      	subs	r3, #112	; 0x70
 800547c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005486:	4613      	mov	r3, r2
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	33f0      	adds	r3, #240	; 0xf0
 8005490:	443b      	add	r3, r7
 8005492:	3b6c      	subs	r3, #108	; 0x6c
 8005494:	6019      	str	r1, [r3, #0]
 8005496:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	33f0      	adds	r3, #240	; 0xf0
 80054a4:	443b      	add	r3, r7
 80054a6:	3b68      	subs	r3, #104	; 0x68
 80054a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80054b2:	4613      	mov	r3, r2
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	33f0      	adds	r3, #240	; 0xf0
 80054bc:	443b      	add	r3, r7
 80054be:	3b68      	subs	r3, #104	; 0x68
 80054c0:	3304      	adds	r3, #4
 80054c2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80054c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054ca:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80054ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80054d2:	3301      	adds	r3, #1
 80054d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 80054f6:	4b0d      	ldr	r3, [pc, #52]	; (800552c <lfs_dir_traverse+0x2dc>)
 80054f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 80054fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005500:	1e5a      	subs	r2, r3, #1
 8005502:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005506:	4613      	mov	r3, r2
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	1a9b      	subs	r3, r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	3328      	adds	r3, #40	; 0x28
 8005510:	440b      	add	r3, r1
 8005512:	3304      	adds	r3, #4
 8005514:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8005518:	e19e      	b.n	8005858 <lfs_dir_traverse+0x608>
 800551a:	bf00      	nop
 800551c:	7ff00000 	.word	0x7ff00000
 8005520:	0800c004 	.word	0x0800c004
 8005524:	0800cbd0 	.word	0x0800cbd0
 8005528:	0800bf0c 	.word	0x0800bf0c
 800552c:	08005199 	.word	0x08005199
            }
        }

popped:
 8005530:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8005532:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8005536:	f7ff f8e1 	bl	80046fc <lfs_tag_id>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d015      	beq.n	800556c <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8005540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff f8da 	bl	80046fc <lfs_tag_id>
 8005548:	4603      	mov	r3, r0
 800554a:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800554c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8005550:	4293      	cmp	r3, r2
 8005552:	f200 817c 	bhi.w	800584e <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8005556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff f8cf 	bl	80046fc <lfs_tag_id>
 800555e:	4603      	mov	r3, r0
 8005560:	461a      	mov	r2, r3
 8005562:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8005566:	4293      	cmp	r3, r2
 8005568:	f240 8171 	bls.w	800584e <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800556c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff f89a 	bl	80046a8 <lfs_tag_type3>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	f43f ae74 	beq.w	8005264 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800557c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff f892 	bl	80046a8 <lfs_tag_type3>
 8005584:	4603      	mov	r3, r0
 8005586:	461a      	mov	r2, r3
 8005588:	f240 1301 	movw	r3, #257	; 0x101
 800558c:	429a      	cmp	r2, r3
 800558e:	f040 80e0 	bne.w	8005752 <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8005592:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005596:	4ab1      	ldr	r2, [pc, #708]	; (800585c <lfs_dir_traverse+0x60c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	f000 815a 	beq.w	8005852 <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800559e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80055a2:	4613      	mov	r3, r2
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	33f0      	adds	r3, #240	; 0xf0
 80055ac:	443b      	add	r3, r7
 80055ae:	3b98      	subs	r3, #152	; 0x98
 80055b0:	4618      	mov	r0, r3
 80055b2:	233c      	movs	r3, #60	; 0x3c
 80055b4:	461a      	mov	r2, r3
 80055b6:	2100      	movs	r1, #0
 80055b8:	f005 fde9 	bl	800b18e <memset>
 80055bc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80055c0:	4613      	mov	r3, r2
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	33f0      	adds	r3, #240	; 0xf0
 80055ca:	443b      	add	r3, r7
 80055cc:	3b98      	subs	r3, #152	; 0x98
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80055d6:	4613      	mov	r3, r2
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	33f0      	adds	r3, #240	; 0xf0
 80055e0:	443b      	add	r3, r7
 80055e2:	3b94      	subs	r3, #148	; 0x94
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80055ec:	4613      	mov	r3, r2
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	33f0      	adds	r3, #240	; 0xf0
 80055f6:	443b      	add	r3, r7
 80055f8:	3b90      	subs	r3, #144	; 0x90
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005602:	4613      	mov	r3, r2
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	33f0      	adds	r3, #240	; 0xf0
 800560c:	443b      	add	r3, r7
 800560e:	3b8c      	subs	r3, #140	; 0x8c
 8005610:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800561a:	4613      	mov	r3, r2
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	33f0      	adds	r3, #240	; 0xf0
 8005624:	443b      	add	r3, r7
 8005626:	3b88      	subs	r3, #136	; 0x88
 8005628:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005632:	4613      	mov	r3, r2
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	33f0      	adds	r3, #240	; 0xf0
 800563c:	443b      	add	r3, r7
 800563e:	3b84      	subs	r3, #132	; 0x84
 8005640:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800564a:	4613      	mov	r3, r2
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	33f0      	adds	r3, #240	; 0xf0
 8005654:	443b      	add	r3, r7
 8005656:	3b80      	subs	r3, #128	; 0x80
 8005658:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005662:	4613      	mov	r3, r2
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	33f0      	adds	r3, #240	; 0xf0
 800566c:	443b      	add	r3, r7
 800566e:	3b7c      	subs	r3, #124	; 0x7c
 8005670:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8005674:	801a      	strh	r2, [r3, #0]
 8005676:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800567a:	4613      	mov	r3, r2
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	33f0      	adds	r3, #240	; 0xf0
 8005684:	443b      	add	r3, r7
 8005686:	3b7a      	subs	r3, #122	; 0x7a
 8005688:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	33f0      	adds	r3, #240	; 0xf0
 800569c:	443b      	add	r3, r7
 800569e:	3b78      	subs	r3, #120	; 0x78
 80056a0:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80056a4:	801a      	strh	r2, [r3, #0]
 80056a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80056aa:	4613      	mov	r3, r2
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	33f0      	adds	r3, #240	; 0xf0
 80056b4:	443b      	add	r3, r7
 80056b6:	3b74      	subs	r3, #116	; 0x74
 80056b8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80056c2:	4613      	mov	r3, r2
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	33f0      	adds	r3, #240	; 0xf0
 80056cc:	443b      	add	r3, r7
 80056ce:	3b70      	subs	r3, #112	; 0x70
 80056d0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80056d4:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80056d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056da:	3301      	adds	r3, #1
 80056dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80056e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff f81a 	bl	800471c <lfs_tag_size>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80056ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff f803 	bl	80046fc <lfs_tag_id>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 80056fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005700:	60bb      	str	r3, [r7, #8]
            off = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800570a:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800570c:	2300      	movs	r3, #0
 800570e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8005718:	4b51      	ldr	r3, [pc, #324]	; (8005860 <lfs_dir_traverse+0x610>)
 800571a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800571e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005722:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8005726:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800572a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 800572e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8005732:	3301      	adds	r3, #1
 8005734:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8005738:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 800573c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	b29a      	uxth	r2, r3
 8005744:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005748:	4413      	add	r3, r2
 800574a:	b29b      	uxth	r3, r3
 800574c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8005750:	e588      	b.n	8005264 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8005752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005754:	4618      	mov	r0, r3
 8005756:	f7fe ffa7 	bl	80046a8 <lfs_tag_type3>
 800575a:	4603      	mov	r3, r0
 800575c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8005760:	d159      	bne.n	8005816 <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8005762:	2300      	movs	r3, #0
 8005764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005768:	e04b      	b.n	8005802 <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 800576a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8005772:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005776:	4613      	mov	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	461a      	mov	r2, r3
 8005780:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005784:	4413      	add	r3, r2
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800578c:	051c      	lsls	r4, r3, #20
 800578e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005790:	4618      	mov	r0, r3
 8005792:	f7fe ffb3 	bl	80046fc <lfs_tag_id>
 8005796:	4603      	mov	r3, r0
 8005798:	461a      	mov	r2, r3
 800579a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800579e:	4413      	add	r3, r2
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	ea44 0103 	orr.w	r1, r4, r3
 80057a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80057aa:	4613      	mov	r3, r2
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	461a      	mov	r2, r3
 80057b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057b8:	4413      	add	r3, r2
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80057be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80057c2:	4613      	mov	r3, r2
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	461a      	mov	r2, r3
 80057cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057d0:	4413      	add	r3, r2
 80057d2:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80057d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057d8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80057dc:	4798      	blx	r3
 80057de:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80057e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da02      	bge.n	80057f0 <lfs_dir_traverse+0x5a0>
                    return res;
 80057ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057ee:	e10b      	b.n	8005a08 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 80057f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d12e      	bne.n	8005856 <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80057f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fc:	3301      	adds	r3, #1
 80057fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005804:	4618      	mov	r0, r3
 8005806:	f7fe ff89 	bl	800471c <lfs_tag_size>
 800580a:	4602      	mov	r2, r0
 800580c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005810:	4293      	cmp	r3, r2
 8005812:	d3aa      	bcc.n	800576a <lfs_dir_traverse+0x51a>
 8005814:	e526      	b.n	8005264 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8005816:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800581a:	029a      	lsls	r2, r3, #10
 800581c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800581e:	18d1      	adds	r1, r2, r3
 8005820:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005824:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005828:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800582c:	4798      	blx	r3
 800582e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8005832:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005836:	2b00      	cmp	r3, #0
 8005838:	da02      	bge.n	8005840 <lfs_dir_traverse+0x5f0>
                return res;
 800583a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800583e:	e0e3      	b.n	8005a08 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8005840:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10d      	bne.n	8005864 <lfs_dir_traverse+0x614>
 8005848:	e50c      	b.n	8005264 <lfs_dir_traverse+0x14>
                continue;
 800584a:	bf00      	nop
 800584c:	e50a      	b.n	8005264 <lfs_dir_traverse+0x14>
            continue;
 800584e:	bf00      	nop
 8005850:	e508      	b.n	8005264 <lfs_dir_traverse+0x14>
                continue;
 8005852:	bf00      	nop
 8005854:	e506      	b.n	8005264 <lfs_dir_traverse+0x14>
                    break;
 8005856:	bf00      	nop
        {
 8005858:	e504      	b.n	8005264 <lfs_dir_traverse+0x14>
 800585a:	bf00      	nop
 800585c:	08005199 	.word	0x08005199
 8005860:	600ffc00 	.word	0x600ffc00
                break;
 8005864:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8005866:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 80ca 	beq.w	8005a04 <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8005870:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005874:	1e5a      	subs	r2, r3, #1
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	33f0      	adds	r3, #240	; 0xf0
 8005880:	443b      	add	r3, r7
 8005882:	3b98      	subs	r3, #152	; 0x98
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8005888:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800588c:	1e5a      	subs	r2, r3, #1
 800588e:	4613      	mov	r3, r2
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	1a9b      	subs	r3, r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	33f0      	adds	r3, #240	; 0xf0
 8005898:	443b      	add	r3, r7
 800589a:	3b94      	subs	r3, #148	; 0x94
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80058a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058a4:	1e5a      	subs	r2, r3, #1
 80058a6:	4613      	mov	r3, r2
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	33f0      	adds	r3, #240	; 0xf0
 80058b0:	443b      	add	r3, r7
 80058b2:	3b90      	subs	r3, #144	; 0x90
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80058b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058bc:	1e5a      	subs	r2, r3, #1
 80058be:	4613      	mov	r3, r2
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	33f0      	adds	r3, #240	; 0xf0
 80058c8:	443b      	add	r3, r7
 80058ca:	3b8c      	subs	r3, #140	; 0x8c
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80058d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058d6:	1e5a      	subs	r2, r3, #1
 80058d8:	4613      	mov	r3, r2
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	33f0      	adds	r3, #240	; 0xf0
 80058e2:	443b      	add	r3, r7
 80058e4:	3b88      	subs	r3, #136	; 0x88
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80058ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	4613      	mov	r3, r2
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	33f0      	adds	r3, #240	; 0xf0
 80058fc:	443b      	add	r3, r7
 80058fe:	3b84      	subs	r3, #132	; 0x84
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8005906:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800590a:	1e5a      	subs	r2, r3, #1
 800590c:	4613      	mov	r3, r2
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	33f0      	adds	r3, #240	; 0xf0
 8005916:	443b      	add	r3, r7
 8005918:	3b80      	subs	r3, #128	; 0x80
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8005920:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005924:	1e5a      	subs	r2, r3, #1
 8005926:	4613      	mov	r3, r2
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	33f0      	adds	r3, #240	; 0xf0
 8005930:	443b      	add	r3, r7
 8005932:	3b7c      	subs	r3, #124	; 0x7c
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800593a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800593e:	1e5a      	subs	r2, r3, #1
 8005940:	4613      	mov	r3, r2
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	1a9b      	subs	r3, r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	33f0      	adds	r3, #240	; 0xf0
 800594a:	443b      	add	r3, r7
 800594c:	3b7a      	subs	r3, #122	; 0x7a
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8005954:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005958:	1e5a      	subs	r2, r3, #1
 800595a:	4613      	mov	r3, r2
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	33f0      	adds	r3, #240	; 0xf0
 8005964:	443b      	add	r3, r7
 8005966:	3b78      	subs	r3, #120	; 0x78
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 800596e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	4613      	mov	r3, r2
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	1a9b      	subs	r3, r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	33f0      	adds	r3, #240	; 0xf0
 800597e:	443b      	add	r3, r7
 8005980:	3b74      	subs	r3, #116	; 0x74
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8005988:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800598c:	1e5a      	subs	r2, r3, #1
 800598e:	4613      	mov	r3, r2
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	33f0      	adds	r3, #240	; 0xf0
 8005998:	443b      	add	r3, r7
 800599a:	3b70      	subs	r3, #112	; 0x70
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80059a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059a6:	1e5a      	subs	r2, r3, #1
 80059a8:	4613      	mov	r3, r2
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	33f0      	adds	r3, #240	; 0xf0
 80059b2:	443b      	add	r3, r7
 80059b4:	3b6c      	subs	r3, #108	; 0x6c
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80059ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	4613      	mov	r3, r2
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	1a9b      	subs	r3, r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	33f0      	adds	r3, #240	; 0xf0
 80059ca:	443b      	add	r3, r7
 80059cc:	3b68      	subs	r3, #104	; 0x68
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80059d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059d8:	1e5a      	subs	r2, r3, #1
 80059da:	4613      	mov	r3, r2
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	33f0      	adds	r3, #240	; 0xf0
 80059e4:	443b      	add	r3, r7
 80059e6:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80059ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80059ee:	3204      	adds	r2, #4
 80059f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059f4:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80059f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059fc:	3b01      	subs	r3, #1
 80059fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8005a02:	e596      	b.n	8005532 <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 8005a04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	37f4      	adds	r7, #244	; 0xf4
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd90      	pop	{r4, r7, pc}

08005a10 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8005a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a12:	b0a5      	sub	sp, #148	; 0x94
 8005a14:	af04      	add	r7, sp, #16
 8005a16:	6178      	str	r0, [r7, #20]
 8005a18:	6139      	str	r1, [r7, #16]
 8005a1a:	60fa      	str	r2, [r7, #12]
 8005a1c:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a22:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d207      	bcs.n	8005a42 <lfs_dir_fetchmatch+0x32>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3304      	adds	r3, #4
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d302      	bcc.n	8005a48 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 8005a42:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005a46:	e3a4      	b.n	8006192 <lfs_dir_fetchmatch+0x782>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8005a48:	2300      	movs	r3, #0
 8005a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8005a54:	2300      	movs	r3, #0
 8005a56:	677b      	str	r3, [r7, #116]	; 0x74
 8005a58:	e05a      	b.n	8005b10 <lfs_dir_fetchmatch+0x100>
        int err = lfs_bd_read(lfs,
 8005a5a:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8005a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8005a64:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8005a66:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8005a6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005a6c:	0092      	lsls	r2, r2, #2
 8005a6e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8005a70:	2104      	movs	r1, #4
 8005a72:	9103      	str	r1, [sp, #12]
 8005a74:	9202      	str	r2, [sp, #8]
 8005a76:	2200      	movs	r2, #0
 8005a78:	9201      	str	r2, [sp, #4]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	4602      	mov	r2, r0
 8005a80:	2100      	movs	r1, #0
 8005a82:	6978      	ldr	r0, [r7, #20]
 8005a84:	f7fe f9aa 	bl	8003ddc <lfs_bd_read>
 8005a88:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8005a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	3378      	adds	r3, #120	; 0x78
 8005a90:	f107 0208 	add.w	r2, r7, #8
 8005a94:	4413      	add	r3, r2
 8005a96:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe f932 	bl	8003d04 <lfs_fromle32>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	3378      	adds	r3, #120	; 0x78
 8005aa8:	f107 0108 	add.w	r1, r7, #8
 8005aac:	440b      	add	r3, r1
 8005aae:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8005ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <lfs_dir_fetchmatch+0xb4>
 8005ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005abe:	d001      	beq.n	8005ac4 <lfs_dir_fetchmatch+0xb4>
            return err;
 8005ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac2:	e366      	b.n	8006192 <lfs_dir_fetchmatch+0x782>
        }

        if (err != LFS_ERR_CORRUPT &&
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005aca:	d01e      	beq.n	8005b0a <lfs_dir_fetchmatch+0xfa>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8005acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	3378      	adds	r3, #120	; 0x78
 8005ad2:	f107 0208 	add.w	r2, r7, #8
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8005adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ade:	3301      	adds	r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	bfb8      	it	lt
 8005ae8:	425b      	neglt	r3, r3
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	3378      	adds	r3, #120	; 0x78
 8005aee:	f107 0108 	add.w	r1, r7, #8
 8005af2:	440b      	add	r3, r1
 8005af4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005af8:	4619      	mov	r1, r3
 8005afa:	4610      	mov	r0, r2
 8005afc:	f7fe f8f4 	bl	8003ce8 <lfs_scmp>
 8005b00:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	dd01      	ble.n	8005b0a <lfs_dir_fetchmatch+0xfa>
            r = i;
 8005b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b08:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8005b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	677b      	str	r3, [r7, #116]	; 0x74
 8005b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	dda1      	ble.n	8005a5a <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8005b16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	bfb8      	it	lt
 8005b20:	425b      	neglt	r3, r3
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8005b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b30:	3301      	adds	r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	bfb8      	it	lt
 8005b3a:	425b      	neglt	r3, r3
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8005b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	bfb8      	it	lt
 8005b52:	425b      	neglt	r3, r3
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	3378      	adds	r3, #120	; 0x78
 8005b58:	f107 0208 	add.w	r2, r7, #8
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b70:	e2fb      	b.n	800616a <lfs_dir_fetchmatch+0x75a>
        lfs_off_t off = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b7a:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8005b82:	4aa9      	ldr	r2, [pc, #676]	; (8005e28 <lfs_dir_fetchmatch+0x418>)
 8005b84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b8c:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 8005b96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b98:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe f8b5 	bl	8003d1a <lfs_tole32>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	2204      	movs	r2, #4
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bc2:	f004 fe69 	bl	800a898 <lfs_crc>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe f898 	bl	8003d04 <lfs_fromle32>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8005bda:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005bdc:	f7fe fdab 	bl	8004736 <lfs_tag_dsize>
 8005be0:	4602      	mov	r2, r0
 8005be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be4:	4413      	add	r3, r2
 8005be6:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 8005be8:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bee:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2204      	movs	r2, #4
 8005bf6:	9203      	str	r2, [sp, #12]
 8005bf8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005bfc:	9202      	str	r2, [sp, #8]
 8005bfe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c00:	9201      	str	r2, [sp, #4]
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	4603      	mov	r3, r0
 8005c06:	460a      	mov	r2, r1
 8005c08:	2100      	movs	r1, #0
 8005c0a:	6978      	ldr	r0, [r7, #20]
 8005c0c:	f7fe f8e6 	bl	8003ddc <lfs_bd_read>
 8005c10:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8005c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d006      	beq.n	8005c26 <lfs_dir_fetchmatch+0x216>
                if (err == LFS_ERR_CORRUPT) {
 8005c18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c1a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005c1e:	f000 81d6 	beq.w	8005fce <lfs_dir_fetchmatch+0x5be>
                    // can't continue?
                    break;
                }
                return err;
 8005c22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c24:	e2b5      	b.n	8006192 <lfs_dir_fetchmatch+0x782>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f004 fe32 	bl	800a898 <lfs_crc>
 8005c34:	4603      	mov	r3, r0
 8005c36:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fe f879 	bl	8003d32 <lfs_frombe32>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c44:	4053      	eors	r3, r2
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe fceb 	bl	8004626 <lfs_tag_isvalid>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f083 0301 	eor.w	r3, r3, #1
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <lfs_dir_fetchmatch+0x264>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8005c5c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005c5e:	f7fe fd13 	bl	8004688 <lfs_tag_type2>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005c68:	bf0c      	ite	eq
 8005c6a:	2301      	moveq	r3, #1
 8005c6c:	2300      	movne	r3, #0
 8005c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 8005c72:	e1bb      	b.n	8005fec <lfs_dir_fetchmatch+0x5dc>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe fd5d 	bl	8004736 <lfs_tag_dsize>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c80:	441a      	add	r2, r3
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	f200 81a2 	bhi.w	8005fd2 <lfs_dir_fetchmatch+0x5c2>
                break;
            }

            ptag = tag;
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe fcf7 	bl	8004688 <lfs_tag_type2>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005ca0:	d15e      	bne.n	8005d60 <lfs_dir_fetchmatch+0x350>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8005ca2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ca8:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cb0:	3204      	adds	r2, #4
 8005cb2:	2104      	movs	r1, #4
 8005cb4:	9103      	str	r1, [sp, #12]
 8005cb6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005cba:	9102      	str	r1, [sp, #8]
 8005cbc:	9201      	str	r2, [sp, #4]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	6978      	ldr	r0, [r7, #20]
 8005cc8:	f7fe f888 	bl	8003ddc <lfs_bd_read>
 8005ccc:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8005cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d006      	beq.n	8005ce2 <lfs_dir_fetchmatch+0x2d2>
                    if (err == LFS_ERR_CORRUPT) {
 8005cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cd6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005cda:	f000 817c 	beq.w	8005fd6 <lfs_dir_fetchmatch+0x5c6>
                        break;
                    }
                    return err;
 8005cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 8005ce0:	e257      	b.n	8006192 <lfs_dir_fetchmatch+0x782>
                }
                dcrc = lfs_fromle32(dcrc);
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fe f80d 	bl	8003d04 <lfs_fromle32>
 8005cea:	4603      	mov	r3, r0
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 8005cee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	f040 8171 	bne.w	8005fda <lfs_dir_fetchmatch+0x5ca>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe fce4 	bl	80046c8 <lfs_tag_chunk>
 8005d00:	4603      	mov	r3, r0
 8005d02:	07db      	lsls	r3, r3, #31
 8005d04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d06:	4053      	eors	r3, r2
 8005d08:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005d12:	2204      	movs	r2, #4
 8005d14:	4618      	mov	r0, r3
 8005d16:	f004 fdbf 	bl	800a898 <lfs_crc>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8005d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d22:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8005d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fe fd05 	bl	8004736 <lfs_tag_dsize>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d30:	441a      	add	r2, r3
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d3a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8005d42:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8005d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8005d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8005d56:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8005d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d5e:	e73c      	b.n	8005bda <lfs_dir_fetchmatch+0x1ca>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8005d60:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	681c      	ldr	r4, [r3, #0]
 8005d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d70:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe fcde 	bl	8004736 <lfs_tag_dsize>
 8005d7a:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8005d7c:	3b04      	subs	r3, #4
 8005d7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005d82:	9203      	str	r2, [sp, #12]
 8005d84:	9302      	str	r3, [sp, #8]
 8005d86:	9501      	str	r5, [sp, #4]
 8005d88:	9400      	str	r4, [sp, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	2100      	movs	r1, #0
 8005d90:	6978      	ldr	r0, [r7, #20]
 8005d92:	f7fe f9b8 	bl	8004106 <lfs_bd_crc>
 8005d96:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8005d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d006      	beq.n	8005dac <lfs_dir_fetchmatch+0x39c>
                if (err == LFS_ERR_CORRUPT) {
 8005d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005da0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005da4:	f000 811b 	beq.w	8005fde <lfs_dir_fetchmatch+0x5ce>
                    break;
                }
                return err;
 8005da8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005daa:	e1f2      	b.n	8006192 <lfs_dir_fetchmatch+0x782>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe fc5a 	bl	8004668 <lfs_tag_type1>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d113      	bne.n	8005de2 <lfs_dir_fetchmatch+0x3d2>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8005dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe fc9d 	bl	80046fc <lfs_tag_id>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	f200 80b6 	bhi.w	8005f3c <lfs_dir_fetchmatch+0x52c>
                    tempcount = lfs_tag_id(tag) + 1;
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe fc92 	bl	80046fc <lfs_tag_id>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	3301      	adds	r3, #1
 8005ddc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005de0:	e0ac      	b.n	8005f3c <lfs_dir_fetchmatch+0x52c>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe fc3f 	bl	8004668 <lfs_tag_type1>
 8005dea:	4603      	mov	r3, r0
 8005dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df0:	d13a      	bne.n	8005e68 <lfs_dir_fetchmatch+0x458>
                tempcount += lfs_tag_splice(tag);
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe fc74 	bl	80046e2 <lfs_tag_splice>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005e02:	4413      	add	r3, r2
 8005e04:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8005e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e0a:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <lfs_dir_fetchmatch+0x41c>)
 8005e0c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8005e0e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8005e12:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8005e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d109      	bne.n	8005e30 <lfs_dir_fetchmatch+0x420>
                    tempbesttag |= 0x80000000;
 8005e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e22:	663b      	str	r3, [r7, #96]	; 0x60
 8005e24:	e08a      	b.n	8005f3c <lfs_dir_fetchmatch+0x52c>
 8005e26:	bf00      	nop
 8005e28:	0800c044 	.word	0x0800c044
 8005e2c:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8005e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e36:	f000 8081 	beq.w	8005f3c <lfs_dir_fetchmatch+0x52c>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fe fc5d 	bl	80046fc <lfs_tag_id>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461c      	mov	r4, r3
 8005e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe fc57 	bl	80046fc <lfs_tag_id>
 8005e4e:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8005e50:	429c      	cmp	r4, r3
 8005e52:	d873      	bhi.n	8005f3c <lfs_dir_fetchmatch+0x52c>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fe fc43 	bl	80046e2 <lfs_tag_splice>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	029a      	lsls	r2, r3, #10
 8005e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e62:	4413      	add	r3, r2
 8005e64:	663b      	str	r3, [r7, #96]	; 0x60
 8005e66:	e069      	b.n	8005f3c <lfs_dir_fetchmatch+0x52c>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fe fbfc 	bl	8004668 <lfs_tag_type1>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e76:	d132      	bne.n	8005ede <lfs_dir_fetchmatch+0x4ce>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe fc24 	bl	80046c8 <lfs_tag_chunk>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bf14      	ite	ne
 8005e8a:	2301      	movne	r3, #1
 8005e8c:	2300      	moveq	r3, #0
 8005e8e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 8005e92:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e98:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ea0:	3204      	adds	r2, #4
 8005ea2:	2108      	movs	r1, #8
 8005ea4:	9103      	str	r1, [sp, #12]
 8005ea6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005eaa:	9102      	str	r1, [sp, #8]
 8005eac:	9201      	str	r2, [sp, #4]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	4623      	mov	r3, r4
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	6978      	ldr	r0, [r7, #20]
 8005eb8:	f7fd ff90 	bl	8003ddc <lfs_bd_read>
 8005ebc:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8005ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d006      	beq.n	8005ed2 <lfs_dir_fetchmatch+0x4c2>
                    if (err == LFS_ERR_CORRUPT) {
 8005ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ec6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005eca:	f000 808a 	beq.w	8005fe2 <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return err;
 8005ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ed0:	e15f      	b.n	8006192 <lfs_dir_fetchmatch+0x782>
                }
                lfs_pair_fromle32(temptail);
 8005ed2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fb71 	bl	80045be <lfs_pair_fromle32>
 8005edc:	e02e      	b.n	8005f3c <lfs_dir_fetchmatch+0x52c>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe fbe1 	bl	80046a8 <lfs_tag_type3>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d124      	bne.n	8005f3c <lfs_dir_fetchmatch+0x52c>
                err = lfs_bd_read(lfs,
 8005ef2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ef8:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f00:	3204      	adds	r2, #4
 8005f02:	2108      	movs	r1, #8
 8005f04:	9103      	str	r1, [sp, #12]
 8005f06:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005f0a:	9102      	str	r1, [sp, #8]
 8005f0c:	9201      	str	r2, [sp, #4]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	4623      	mov	r3, r4
 8005f12:	4602      	mov	r2, r0
 8005f14:	2100      	movs	r1, #0
 8005f16:	6978      	ldr	r0, [r7, #20]
 8005f18:	f7fd ff60 	bl	8003ddc <lfs_bd_read>
 8005f1c:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8005f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <lfs_dir_fetchmatch+0x51c>
                    if (err == LFS_ERR_CORRUPT) {
 8005f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f26:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005f2a:	d05c      	beq.n	8005fe6 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8005f2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fe fcff 	bl	8004934 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8005f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f42:	405a      	eors	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f47f ae46 	bne.w	8005bda <lfs_dir_fetchmatch+0x1ca>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005f4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005f54:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8005f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f58:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5c:	f107 0220 	add.w	r2, r7, #32
 8005f60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f64:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8005f68:	4798      	blx	r3
 8005f6a:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8005f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da05      	bge.n	8005f7e <lfs_dir_fetchmatch+0x56e>
                    if (res == LFS_ERR_CORRUPT) {
 8005f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f74:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005f78:	d037      	beq.n	8005fea <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                    return res;
 8005f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8005f7c:	e109      	b.n	8006192 <lfs_dir_fetchmatch+0x782>
                }

                if (res == LFS_CMP_EQ) {
 8005f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <lfs_dir_fetchmatch+0x57a>
                    // found a match
                    tempbesttag = tag;
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	663b      	str	r3, [r7, #96]	; 0x60
 8005f88:	e627      	b.n	8005bda <lfs_dir_fetchmatch+0x1ca>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8005f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f8e:	405a      	eors	r2, r3
 8005f90:	4b82      	ldr	r3, [pc, #520]	; (800619c <lfs_dir_fetchmatch+0x78c>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d103      	bne.n	8005fa0 <lfs_dir_fetchmatch+0x590>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8005f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f9e:	e61c      	b.n	8005bda <lfs_dir_fetchmatch+0x1ca>
                } else if (res == LFS_CMP_GT &&
 8005fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	f47f ae19 	bne.w	8005bda <lfs_dir_fetchmatch+0x1ca>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fba6 	bl	80046fc <lfs_tag_id>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	461c      	mov	r4, r3
 8005fb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe fba0 	bl	80046fc <lfs_tag_id>
 8005fbc:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8005fbe:	429c      	cmp	r4, r3
 8005fc0:	f63f ae0b 	bhi.w	8005bda <lfs_dir_fetchmatch+0x1ca>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fca:	663b      	str	r3, [r7, #96]	; 0x60
 8005fcc:	e605      	b.n	8005bda <lfs_dir_fetchmatch+0x1ca>
                    break;
 8005fce:	bf00      	nop
 8005fd0:	e00c      	b.n	8005fec <lfs_dir_fetchmatch+0x5dc>
                break;
 8005fd2:	bf00      	nop
 8005fd4:	e00a      	b.n	8005fec <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005fd6:	bf00      	nop
 8005fd8:	e008      	b.n	8005fec <lfs_dir_fetchmatch+0x5dc>
                    break;
 8005fda:	bf00      	nop
 8005fdc:	e006      	b.n	8005fec <lfs_dir_fetchmatch+0x5dc>
                    break;
 8005fde:	bf00      	nop
 8005fe0:	e004      	b.n	8005fec <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005fe2:	bf00      	nop
 8005fe4:	e002      	b.n	8005fec <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005fe6:	bf00      	nop
 8005fe8:	e000      	b.n	8005fec <lfs_dir_fetchmatch+0x5dc>
                        break;
 8005fea:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d000      	beq.n	8005ff6 <lfs_dir_fetchmatch+0x5e6>
 8005ff4:	e017      	b.n	8006026 <lfs_dir_fetchmatch+0x616>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe fa59 	bl	80044b0 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8005ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006000:	3301      	adds	r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	bfb8      	it	lt
 800600a:	425b      	neglt	r3, r3
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	3378      	adds	r3, #120	; 0x78
 8006010:	f107 0208 	add.w	r2, r7, #8
 8006014:	4413      	add	r3, r2
 8006016:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800601e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006020:	3301      	adds	r3, #1
 8006022:	673b      	str	r3, [r7, #112]	; 0x70
 8006024:	e0a1      	b.n	800616a <lfs_dir_fetchmatch+0x75a>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2200      	movs	r2, #0
 800602a:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 800602c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006030:	2b00      	cmp	r3, #0
 8006032:	d03a      	beq.n	80060aa <lfs_dir_fetchmatch+0x69a>
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800603c:	6992      	ldr	r2, [r2, #24]
 800603e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006042:	fb01 f202 	mul.w	r2, r1, r2
 8006046:	1a9b      	subs	r3, r3, r2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d12e      	bne.n	80060aa <lfs_dir_fetchmatch+0x69a>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 800604c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006050:	2b00      	cmp	r3, #0
 8006052:	d02a      	beq.n	80060aa <lfs_dir_fetchmatch+0x69a>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8006054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006058:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 800605a:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006060:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	68d2      	ldr	r2, [r2, #12]
 800606a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800606c:	f107 001c 	add.w	r0, r7, #28
 8006070:	9003      	str	r0, [sp, #12]
 8006072:	9102      	str	r1, [sp, #8]
 8006074:	9201      	str	r2, [sp, #4]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	462b      	mov	r3, r5
 800607a:	4622      	mov	r2, r4
 800607c:	2100      	movs	r1, #0
 800607e:	6978      	ldr	r0, [r7, #20]
 8006080:	f7fe f841 	bl	8004106 <lfs_bd_crc>
 8006084:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8006086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <lfs_dir_fetchmatch+0x688>
 800608c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800608e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006092:	d001      	beq.n	8006098 <lfs_dir_fetchmatch+0x688>
                    return err;
 8006094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006096:	e07c      	b.n	8006192 <lfs_dir_fetchmatch+0x782>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8006098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	429a      	cmp	r2, r3
 800609e:	bf0c      	ite	eq
 80060a0:	2301      	moveq	r3, #1
 80060a2:	2300      	movne	r3, #0
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	333c      	adds	r3, #60	; 0x3c
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4611      	mov	r1, r2
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fbde 	bl	8004874 <lfs_gstate_hasmovehere>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d028      	beq.n	8006110 <lfs_dir_fetchmatch+0x700>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe fb1a 	bl	80046fc <lfs_tag_id>
 80060c8:	4603      	mov	r3, r0
 80060ca:	461c      	mov	r4, r3
 80060cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fb14 	bl	80046fc <lfs_tag_id>
 80060d4:	4603      	mov	r3, r0
 80060d6:	429c      	cmp	r4, r3
 80060d8:	d104      	bne.n	80060e4 <lfs_dir_fetchmatch+0x6d4>
                besttag |= 0x80000000;
 80060da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060e2:	e015      	b.n	8006110 <lfs_dir_fetchmatch+0x700>
            } else if (besttag != -1 &&
 80060e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060ea:	d011      	beq.n	8006110 <lfs_dir_fetchmatch+0x700>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fb03 	bl	80046fc <lfs_tag_id>
 80060f6:	4603      	mov	r3, r0
 80060f8:	461c      	mov	r4, r3
 80060fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe fafd 	bl	80046fc <lfs_tag_id>
 8006102:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8006104:	429c      	cmp	r4, r3
 8006106:	d203      	bcs.n	8006110 <lfs_dir_fetchmatch+0x700>
                besttag -= LFS_MKTAG(0, 1, 0);
 8006108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800610a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800610e:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8006110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006114:	2b00      	cmp	r3, #0
 8006116:	d010      	beq.n	800613a <lfs_dir_fetchmatch+0x72a>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8006118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe faee 	bl	80046fc <lfs_tag_id>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	8a9b      	ldrh	r3, [r3, #20]
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f7fd fd7a 	bl	8003c24 <lfs_min>
 8006130:	4603      	mov	r3, r0
 8006132:	b29a      	uxth	r2, r3
 8006134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006138:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 800613a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800613c:	4618      	mov	r0, r3
 800613e:	f7fe fa72 	bl	8004626 <lfs_tag_isvalid>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <lfs_dir_fetchmatch+0x73c>
            return besttag;
 8006148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800614a:	e022      	b.n	8006192 <lfs_dir_fetchmatch+0x782>
        } else if (lfs_tag_id(besttag) < dir->count) {
 800614c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fad4 	bl	80046fc <lfs_tag_id>
 8006154:	4603      	mov	r3, r0
 8006156:	461a      	mov	r2, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	8a9b      	ldrh	r3, [r3, #20]
 800615c:	429a      	cmp	r2, r3
 800615e:	d202      	bcs.n	8006166 <lfs_dir_fetchmatch+0x756>
            return LFS_ERR_NOENT;
 8006160:	f06f 0301 	mvn.w	r3, #1
 8006164:	e015      	b.n	8006192 <lfs_dir_fetchmatch+0x782>
        } else {
            return 0;
 8006166:	2300      	movs	r3, #0
 8006168:	e013      	b.n	8006192 <lfs_dir_fetchmatch+0x782>
    for (int i = 0; i < 2; i++) {
 800616a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800616c:	2b01      	cmp	r3, #1
 800616e:	f77f ad00 	ble.w	8005b72 <lfs_dir_fetchmatch+0x162>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	4909      	ldr	r1, [pc, #36]	; (80061a0 <lfs_dir_fetchmatch+0x790>)
 800617c:	9101      	str	r1, [sp, #4]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	f240 5235 	movw	r2, #1333	; 0x535
 8006186:	4907      	ldr	r1, [pc, #28]	; (80061a4 <lfs_dir_fetchmatch+0x794>)
 8006188:	4807      	ldr	r0, [pc, #28]	; (80061a8 <lfs_dir_fetchmatch+0x798>)
 800618a:	f004 ff93 	bl	800b0b4 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800618e:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8006192:	4618      	mov	r0, r3
 8006194:	3784      	adds	r7, #132	; 0x84
 8006196:	46bd      	mov	sp, r7
 8006198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800619a:	bf00      	nop
 800619c:	7ffffc00 	.word	0x7ffffc00
 80061a0:	0800c000 	.word	0x0800c000
 80061a4:	0800bf0c 	.word	0x0800bf0c
 80061a8:	0800c00c 	.word	0x0800c00c

080061ac <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af04      	add	r7, sp, #16
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 80061b8:	2300      	movs	r3, #0
 80061ba:	9303      	str	r3, [sp, #12]
 80061bc:	2300      	movs	r3, #0
 80061be:	9302      	str	r3, [sp, #8]
 80061c0:	2300      	movs	r3, #0
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7ff fc1c 	bl	8005a10 <lfs_dir_fetchmatch>
 80061d8:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	; 0x28
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 80061f0:	f107 0310 	add.w	r3, r7, #16
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	4b12      	ldr	r3, [pc, #72]	; (8006240 <lfs_dir_getgstate+0x5c>)
 80061f8:	4a12      	ldr	r2, [pc, #72]	; (8006244 <lfs_dir_getgstate+0x60>)
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7fe fed5 	bl	8004fac <lfs_dir_get>
 8006202:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	da05      	bge.n	8006216 <lfs_dir_getgstate+0x32>
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f113 0f02 	cmn.w	r3, #2
 8006210:	d001      	beq.n	8006216 <lfs_dir_getgstate+0x32>
        return res;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	e00f      	b.n	8006236 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f113 0f02 	cmn.w	r3, #2
 800621c:	d00a      	beq.n	8006234 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800621e:	f107 0310 	add.w	r3, r7, #16
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe fb46 	bl	80048b4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8006228:	f107 0310 	add.w	r3, r7, #16
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fe fa95 	bl	800475e <lfs_gstate_xor>
    }

    return 0;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	7ff0000c 	.word	0x7ff0000c
 8006244:	7ff00000 	.word	0x7ff00000

08006248 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006248:	b590      	push	{r4, r7, lr}
 800624a:	b08f      	sub	sp, #60	; 0x3c
 800624c:	af04      	add	r7, sp, #16
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	689c      	ldr	r4, [r3, #8]
 8006266:	68b8      	ldr	r0, [r7, #8]
 8006268:	f7fe fa58 	bl	800471c <lfs_tag_size>
 800626c:	4603      	mov	r3, r0
 800626e:	4619      	mov	r1, r3
 8006270:	4620      	mov	r0, r4
 8006272:	f7fd fcd7 	bl	8003c24 <lfs_min>
 8006276:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8006278:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8006282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006284:	6849      	ldr	r1, [r1, #4]
 8006286:	69b8      	ldr	r0, [r7, #24]
 8006288:	9003      	str	r0, [sp, #12]
 800628a:	9102      	str	r1, [sp, #8]
 800628c:	9201      	str	r2, [sp, #4]
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	4622      	mov	r2, r4
 8006294:	2100      	movs	r1, #0
 8006296:	6a38      	ldr	r0, [r7, #32]
 8006298:	f7fd fee4 	bl	8004064 <lfs_bd_cmp>
 800629c:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <lfs_dir_find_match+0x60>
        return res;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	e014      	b.n	80062d2 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	689c      	ldr	r4, [r3, #8]
 80062ac:	68b8      	ldr	r0, [r7, #8]
 80062ae:	f7fe fa35 	bl	800471c <lfs_tag_size>
 80062b2:	4603      	mov	r3, r0
 80062b4:	429c      	cmp	r4, r3
 80062b6:	d00b      	beq.n	80062d0 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	689c      	ldr	r4, [r3, #8]
 80062bc:	68b8      	ldr	r0, [r7, #8]
 80062be:	f7fe fa2d 	bl	800471c <lfs_tag_size>
 80062c2:	4603      	mov	r3, r0
 80062c4:	429c      	cmp	r4, r3
 80062c6:	d201      	bcs.n	80062cc <lfs_dir_find_match+0x84>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e002      	b.n	80062d2 <lfs_dir_find_match+0x8a>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e000      	b.n	80062d2 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	372c      	adds	r7, #44	; 0x2c
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd90      	pop	{r4, r7, pc}
	...

080062dc <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 80062dc:	b590      	push	{r4, r7, lr}
 80062de:	b093      	sub	sp, #76	; 0x4c
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <lfs_dir_find+0x22>
        *id = 0x3ff;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80062fc:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 80062fe:	4b6e      	ldr	r3, [pc, #440]	; (80064b8 <lfs_dir_find+0x1dc>)
 8006300:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8006312:	496a      	ldr	r1, [pc, #424]	; (80064bc <lfs_dir_find+0x1e0>)
 8006314:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006316:	f004 ff60 	bl	800b1da <strspn>
 800631a:	4602      	mov	r2, r0
 800631c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631e:	4413      	add	r3, r2
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8006322:	4966      	ldr	r1, [pc, #408]	; (80064bc <lfs_dir_find+0x1e0>)
 8006324:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006326:	f004 ff47 	bl	800b1b8 <strcspn>
 800632a:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	2b01      	cmp	r3, #1
 8006330:	d105      	bne.n	800633e <lfs_dir_find+0x62>
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	781a      	ldrb	r2, [r3, #0]
 8006336:	4b62      	ldr	r3, [pc, #392]	; (80064c0 <lfs_dir_find+0x1e4>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d00a      	beq.n	8006354 <lfs_dir_find+0x78>
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	2b02      	cmp	r3, #2
 8006342:	d10c      	bne.n	800635e <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8006344:	2202      	movs	r2, #2
 8006346:	495f      	ldr	r1, [pc, #380]	; (80064c4 <lfs_dir_find+0x1e8>)
 8006348:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800634a:	f004 ff10 	bl	800b16e <memcmp>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <lfs_dir_find+0x82>
            name += namelen;
 8006354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	4413      	add	r3, r2
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800635c:	e7d9      	b.n	8006312 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800635e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	4413      	add	r3, r2
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8006366:	2301      	movs	r3, #1
 8006368:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800636a:	4954      	ldr	r1, [pc, #336]	; (80064bc <lfs_dir_find+0x1e0>)
 800636c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800636e:	f004 ff34 	bl	800b1da <strspn>
 8006372:	4602      	mov	r2, r0
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	4413      	add	r3, r2
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800637a:	4950      	ldr	r1, [pc, #320]	; (80064bc <lfs_dir_find+0x1e0>)
 800637c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800637e:	f004 ff1b 	bl	800b1b8 <strcspn>
 8006382:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01d      	beq.n	80063c6 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d112      	bne.n	80063b6 <lfs_dir_find+0xda>
 8006390:	2202      	movs	r2, #2
 8006392:	494c      	ldr	r1, [pc, #304]	; (80064c4 <lfs_dir_find+0x1e8>)
 8006394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006396:	f004 feea 	bl	800b16e <memcmp>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <lfs_dir_find+0xda>
                depth -= 1;
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	3b01      	subs	r3, #1
 80063a4:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d107      	bne.n	80063bc <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 80063ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	4413      	add	r3, r2
 80063b2:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 80063b4:	e7ad      	b.n	8006312 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	3301      	adds	r3, #1
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 80063bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	4413      	add	r3, r2
 80063c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 80063c4:	e7d1      	b.n	800636a <lfs_dir_find+0x8e>
                break;
 80063c6:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <lfs_dir_find+0xf8>
            return tag;
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	e06c      	b.n	80064ae <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063d8:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fe f963 	bl	80046a8 <lfs_tag_type3>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d002      	beq.n	80063ee <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 80063e8:	f06f 0313 	mvn.w	r3, #19
 80063ec:	e05f      	b.n	80064ae <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe f983 	bl	80046fc <lfs_tag_id>
 80063f6:	4603      	mov	r3, r0
 80063f8:	461a      	mov	r2, r3
 80063fa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80063fe:	429a      	cmp	r2, r3
 8006400:	d01c      	beq.n	800643c <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe f979 	bl	80046fc <lfs_tag_id>
 800640a:	4603      	mov	r3, r0
 800640c:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800640e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006412:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800641a:	9200      	str	r2, [sp, #0]
 800641c:	4a2a      	ldr	r2, [pc, #168]	; (80064c8 <lfs_dir_find+0x1ec>)
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f7fe fdc3 	bl	8004fac <lfs_dir_get>
 8006426:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	2b00      	cmp	r3, #0
 800642c:	da01      	bge.n	8006432 <lfs_dir_find+0x156>
                return res;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	e03d      	b.n	80064ae <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	3318      	adds	r3, #24
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe f8c1 	bl	80045be <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8006442:	212f      	movs	r1, #47	; 0x2f
 8006444:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006446:	f004 feaa 	bl	800b19e <strchr>
 800644a:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <lfs_dir_find+0x178>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	e000      	b.n	8006456 <lfs_dir_find+0x17a>
 8006454:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	613a      	str	r2, [r7, #16]
 800645a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800645c:	617a      	str	r2, [r7, #20]
 800645e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006460:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8006462:	f107 0210 	add.w	r2, r7, #16
 8006466:	9203      	str	r2, [sp, #12]
 8006468:	4a18      	ldr	r2, [pc, #96]	; (80064cc <lfs_dir_find+0x1f0>)
 800646a:	9202      	str	r2, [sp, #8]
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8006476:	4622      	mov	r2, r4
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff fac8 	bl	8005a10 <lfs_dir_fetchmatch>
 8006480:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	2b00      	cmp	r3, #0
 8006486:	da01      	bge.n	800648c <lfs_dir_find+0x1b0>
                return tag;
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	e010      	b.n	80064ae <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8006492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	4413      	add	r3, r2
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800649a:	e73a      	b.n	8006312 <lfs_dir_find+0x36>
            if (!dir->split) {
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	7ddb      	ldrb	r3, [r3, #23]
 80064a0:	f083 0301 	eor.w	r3, r3, #1
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0c8      	beq.n	800643c <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80064aa:	f06f 0301 	mvn.w	r3, #1
    }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	373c      	adds	r7, #60	; 0x3c
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd90      	pop	{r4, r7, pc}
 80064b6:	bf00      	nop
 80064b8:	002ffc00 	.word	0x002ffc00
 80064bc:	0800c04c 	.word	0x0800c04c
 80064c0:	0800c050 	.word	0x0800c050
 80064c4:	0800c054 	.word	0x0800c054
 80064c8:	700ffc00 	.word	0x700ffc00
 80064cc:	08006249 	.word	0x08006249

080064d0 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80064d0:	b590      	push	{r4, r7, lr}
 80064d2:	b08b      	sub	sp, #44	; 0x2c
 80064d4:	af04      	add	r7, sp, #16
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f103 0010 	add.w	r0, r3, #16
 80064e4:	68fc      	ldr	r4, [r7, #12]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	6852      	ldr	r2, [r2, #4]
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	9103      	str	r1, [sp, #12]
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	9102      	str	r1, [sp, #8]
 80064f6:	9201      	str	r2, [sp, #4]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	2300      	movs	r3, #0
 80064fc:	4622      	mov	r2, r4
 80064fe:	4601      	mov	r1, r0
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7fd fef7 	bl	80042f4 <lfs_bd_prog>
 8006506:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <lfs_dir_commitprog+0x42>
        return err;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	e010      	b.n	8006534 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4618      	mov	r0, r3
 800651c:	f004 f9bc 	bl	800a898 <lfs_crc>
 8006520:	4602      	mov	r2, r0
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	441a      	add	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	605a      	str	r2, [r3, #4]
    return 0;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	bd90      	pop	{r4, r7, pc}

0800653c <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800653c:	b590      	push	{r4, r7, lr}
 800653e:	b08f      	sub	sp, #60	; 0x3c
 8006540:	af04      	add	r7, sp, #16
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fe f8f3 	bl	8004736 <lfs_tag_dsize>
 8006550:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	441a      	add	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	429a      	cmp	r2, r3
 8006560:	d902      	bls.n	8006568 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8006562:	f06f 031b 	mvn.w	r3, #27
 8006566:	e065      	b.n	8006634 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	4053      	eors	r3, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f7fd fbe8 	bl	8003d4a <lfs_tobe32>
 800657a:	4603      	mov	r3, r0
 800657c:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800657e:	f107 0214 	add.w	r2, r7, #20
 8006582:	2304      	movs	r3, #4
 8006584:	68b9      	ldr	r1, [r7, #8]
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff ffa2 	bl	80064d0 <lfs_dir_commitprog>
 800658c:	61f8      	str	r0, [r7, #28]
    if (err) {
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <lfs_dir_commitattr+0x5c>
        return err;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	e04d      	b.n	8006634 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	db0c      	blt.n	80065b8 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	3b04      	subs	r3, #4
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7ff ff92 	bl	80064d0 <lfs_dir_commitprog>
 80065ac:	61f8      	str	r0, [r7, #28]
        if (err) {
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d039      	beq.n	8006628 <lfs_dir_commitattr+0xec>
            return err;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	e03d      	b.n	8006634 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80065bc:	2300      	movs	r3, #0
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
 80065c0:	e02d      	b.n	800661e <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80065c2:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80065c4:	6a3a      	ldr	r2, [r7, #32]
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80065ca:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80065d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d6:	440a      	add	r2, r1
 80065d8:	2101      	movs	r1, #1
 80065da:	9103      	str	r1, [sp, #12]
 80065dc:	f107 0113 	add.w	r1, r7, #19
 80065e0:	9102      	str	r1, [sp, #8]
 80065e2:	9201      	str	r2, [sp, #4]
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	4623      	mov	r3, r4
 80065e8:	4602      	mov	r2, r0
 80065ea:	2100      	movs	r1, #0
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7fd fbf5 	bl	8003ddc <lfs_bd_read>
 80065f2:	61f8      	str	r0, [r7, #28]
            if (err) {
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <lfs_dir_commitattr+0xc2>
                return err;
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	e01a      	b.n	8006634 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 80065fe:	f107 0213 	add.w	r2, r7, #19
 8006602:	2301      	movs	r3, #1
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f7ff ff62 	bl	80064d0 <lfs_dir_commitprog>
 800660c:	61f8      	str	r0, [r7, #28]
            if (err) {
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <lfs_dir_commitattr+0xdc>
                return err;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	e00d      	b.n	8006634 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	3301      	adds	r3, #1
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	3b04      	subs	r3, #4
 8006622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006624:	429a      	cmp	r2, r3
 8006626:	d3cc      	bcc.n	80065c2 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	609a      	str	r2, [r3, #8]
    return 0;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	372c      	adds	r7, #44	; 0x2c
 8006638:	46bd      	mov	sp, r7
 800663a:	bd90      	pop	{r4, r7, pc}

0800663c <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b097      	sub	sp, #92	; 0x5c
 8006640:	af04      	add	r7, sp, #16
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800664a:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006652:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f7fd fae4 	bl	8003c24 <lfs_min>
 800665c:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006662:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 8006664:	4619      	mov	r1, r3
 8006666:	4610      	mov	r0, r2
 8006668:	f7fd fb01 	bl	8003c6e <lfs_alignup>
 800666c:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8006676:	e0fe      	b.n	8006876 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	3b04      	subs	r3, #4
 8006682:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006686:	4618      	mov	r0, r3
 8006688:	f7fd facc 	bl	8003c24 <lfs_min>
 800668c:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	4413      	add	r3, r2
        lfs_off_t noff = (
 8006694:	3304      	adds	r3, #4
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8006698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	429a      	cmp	r2, r3
 800669e:	d206      	bcs.n	80066ae <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	3b14      	subs	r3, #20
 80066a4:	4619      	mov	r1, r3
 80066a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80066a8:	f7fd fabc 	bl	8003c24 <lfs_min>
 80066ac:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = -1;
 80066ae:	23ff      	movs	r3, #255	; 0xff
 80066b0:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80066b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d35f      	bcc.n	800677a <lfs_dir_commitcrc+0x13e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066be:	69da      	ldr	r2, [r3, #28]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d855      	bhi.n	800677a <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 80066ce:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066d4:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2201      	movs	r2, #1
 80066dc:	9203      	str	r2, [sp, #12]
 80066de:	f107 021b 	add.w	r2, r7, #27
 80066e2:	9202      	str	r2, [sp, #8]
 80066e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066e6:	9201      	str	r2, [sp, #4]
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	4603      	mov	r3, r0
 80066ec:	460a      	mov	r2, r1
 80066ee:	2100      	movs	r1, #0
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7fd fb73 	bl	8003ddc <lfs_bd_read>
 80066f6:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <lfs_dir_commitcrc+0xce>
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006704:	d001      	beq.n	800670a <lfs_dir_commitcrc+0xce>
                return err;
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	e101      	b.n	800690e <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800670e:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006716:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8006718:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800671e:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	f107 0108 	add.w	r1, r7, #8
 800672a:	3104      	adds	r1, #4
 800672c:	9103      	str	r1, [sp, #12]
 800672e:	9202      	str	r2, [sp, #8]
 8006730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006732:	9201      	str	r2, [sp, #4]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	4623      	mov	r3, r4
 8006738:	4602      	mov	r2, r0
 800673a:	2100      	movs	r1, #0
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7fd fce2 	bl	8004106 <lfs_bd_crc>
 8006742:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <lfs_dir_commitcrc+0x11a>
 800674a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006750:	d001      	beq.n	8006756 <lfs_dir_commitcrc+0x11a>
                    return err;
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	e0db      	b.n	800690e <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 8006756:	f107 0308 	add.w	r3, r7, #8
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe f902 	bl	8004964 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8006760:	f107 0308 	add.w	r3, r7, #8
 8006764:	4a6c      	ldr	r2, [pc, #432]	; (8006918 <lfs_dir_commitcrc+0x2dc>)
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff fee7 	bl	800653c <lfs_dir_commitattr>
 800676e:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8006770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <lfs_dir_commitcrc+0x13e>
                    return err;
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	e0c9      	b.n	800690e <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 800677a:	7efb      	ldrb	r3, [r7, #27]
 800677c:	43db      	mvns	r3, r3
 800677e:	b2db      	uxtb	r3, r3
 8006780:	09db      	lsrs	r3, r3, #7
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006788:	051a      	lsls	r2, r3, #20
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006790:	1acb      	subs	r3, r1, r3
 8006792:	3b04      	subs	r3, #4
 8006794:	4313      	orrs	r3, r2
 8006796:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800679a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	4053      	eors	r3, r2
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fd face 	bl	8003d4a <lfs_tobe32>
 80067ae:	4603      	mov	r3, r0
 80067b0:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f107 0110 	add.w	r1, r7, #16
 80067ba:	2204      	movs	r2, #4
 80067bc:	4618      	mov	r0, r3
 80067be:	f004 f86b 	bl	800a898 <lfs_crc>
 80067c2:	4602      	mov	r2, r0
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fd faa4 	bl	8003d1a <lfs_tole32>
 80067d2:	4603      	mov	r3, r0
 80067d4:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f103 0010 	add.w	r0, r3, #16
 80067dc:	687c      	ldr	r4, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	6852      	ldr	r2, [r2, #4]
 80067e6:	2108      	movs	r1, #8
 80067e8:	9103      	str	r1, [sp, #12]
 80067ea:	f107 0110 	add.w	r1, r7, #16
 80067ee:	9102      	str	r1, [sp, #8]
 80067f0:	9201      	str	r2, [sp, #4]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	2300      	movs	r3, #0
 80067f6:	4622      	mov	r2, r4
 80067f8:	4601      	mov	r1, r0
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7fd fd7a 	bl	80042f4 <lfs_bd_prog>
 8006800:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <lfs_dir_commitcrc+0x1d0>
            return err;
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	e080      	b.n	800690e <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800680c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	3304      	adds	r3, #4
 8006818:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006824:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8006826:	7efb      	ldrb	r3, [r7, #27]
 8006828:	43db      	mvns	r3, r3
 800682a:	061b      	lsls	r3, r3, #24
 800682c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	405a      	eors	r2, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800683e:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8006840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	429a      	cmp	r2, r3
 8006846:	d208      	bcs.n	800685a <lfs_dir_commitcrc+0x21e>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	695a      	ldr	r2, [r3, #20]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	4413      	add	r3, r2
 8006854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006856:	429a      	cmp	r2, r3
 8006858:	d30d      	bcc.n	8006876 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f103 0110 	add.w	r1, r3, #16
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	2300      	movs	r3, #0
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7fd fd11 	bl	800428c <lfs_bd_sync>
 800686a:	6238      	str	r0, [r7, #32]
            if (err) {
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <lfs_dir_commitcrc+0x23a>
                return err;
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	e04b      	b.n	800690e <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800687c:	429a      	cmp	r2, r3
 800687e:	f63f aefb 	bhi.w	8006678 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 8006888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800688c:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006892:	1d1c      	adds	r4, r3, #4
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800689a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800689c:	1a8a      	subs	r2, r1, r2
 800689e:	f107 011c 	add.w	r1, r7, #28
 80068a2:	9103      	str	r1, [sp, #12]
 80068a4:	9202      	str	r2, [sp, #8]
 80068a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a8:	9201      	str	r2, [sp, #4]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	4623      	mov	r3, r4
 80068ae:	4602      	mov	r2, r0
 80068b0:	2100      	movs	r1, #0
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fd fc27 	bl	8004106 <lfs_bd_crc>
 80068b8:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <lfs_dir_commitcrc+0x288>
        return err;
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	e024      	b.n	800690e <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d002      	beq.n	80068d2 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 80068cc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80068d0:	e01d      	b.n	800690e <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f107 021c 	add.w	r2, r7, #28
 80068dc:	9203      	str	r2, [sp, #12]
 80068de:	2204      	movs	r2, #4
 80068e0:	9202      	str	r2, [sp, #8]
 80068e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068e4:	9201      	str	r2, [sp, #4]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	2304      	movs	r3, #4
 80068ea:	460a      	mov	r2, r1
 80068ec:	2100      	movs	r1, #0
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fd fc09 	bl	8004106 <lfs_bd_crc>
 80068f4:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <lfs_dir_commitcrc+0x2c4>
        return err;
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	e006      	b.n	800690e <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8006906:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800690a:	e000      	b.n	800690e <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	374c      	adds	r7, #76	; 0x4c
 8006912:	46bd      	mov	sp, r7
 8006914:	bd90      	pop	{r4, r7, pc}
 8006916:	bf00      	nop
 8006918:	5ffffc08 	.word	0x5ffffc08

0800691c <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b08a      	sub	sp, #40	; 0x28
 8006920:	af04      	add	r7, sp, #16
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8006926:	2300      	movs	r3, #0
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	e016      	b.n	800695a <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	3301      	adds	r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	bfb8      	it	lt
 8006938:	425b      	neglt	r3, r3
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	4413      	add	r3, r2
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fe f998 	bl	8004c78 <lfs_alloc>
 8006948:	60f8      	str	r0, [r7, #12]
        if (err) {
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <lfs_dir_alloc+0x38>
            return err;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	e058      	b.n	8006a06 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	3301      	adds	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b01      	cmp	r3, #1
 800695e:	dde5      	ble.n	800692c <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2200      	movs	r2, #0
 8006964:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8006970:	2004      	movs	r0, #4
 8006972:	9003      	str	r0, [sp, #12]
 8006974:	9202      	str	r2, [sp, #8]
 8006976:	2200      	movs	r2, #0
 8006978:	9201      	str	r2, [sp, #4]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	2304      	movs	r3, #4
 800697e:	460a      	mov	r2, r1
 8006980:	2100      	movs	r1, #0
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fd fa2a 	bl	8003ddc <lfs_bd_read>
 8006988:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	4618      	mov	r0, r3
 8006990:	f7fd f9b8 	bl	8003d04 <lfs_fromle32>
 8006994:	4602      	mov	r2, r0
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <lfs_dir_alloc+0x90>
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80069a6:	d001      	beq.n	80069ac <lfs_dir_alloc+0x90>
        return err;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	e02c      	b.n	8006a06 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dd0e      	ble.n	80069d4 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	3301      	adds	r3, #1
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	4619      	mov	r1, r3
 80069c8:	4610      	mov	r0, r2
 80069ca:	f7fd f950 	bl	8003c6e <lfs_alignup>
 80069ce:	4602      	mov	r2, r0
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2204      	movs	r2, #4
 80069d8:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069e0:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2200      	movs	r2, #0
 80069e6:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069ee:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069f6:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2200      	movs	r2, #0
 80069fc:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2200      	movs	r2, #0
 8006a02:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b092      	sub	sp, #72	; 0x48
 8006a12:	af04      	add	r7, sp, #16
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8006a1c:	f107 0310 	add.w	r3, r7, #16
 8006a20:	4619      	mov	r1, r3
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f7ff ff7a 	bl	800691c <lfs_dir_alloc>
 8006a28:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <lfs_dir_split+0x26>
        return err;
 8006a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a32:	e03c      	b.n	8006aae <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	7ddb      	ldrb	r3, [r3, #23]
 8006a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8006a48:	f107 0110 	add.w	r1, r7, #16
 8006a4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a50:	9302      	str	r3, [sp, #8]
 8006a52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a56:	9301      	str	r3, [sp, #4]
 8006a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f879 	bl	8006b58 <lfs_dir_compact>
 8006a66:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	da01      	bge.n	8006a72 <lfs_dir_split+0x64>
        return res;
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	e01d      	b.n	8006aae <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2201      	movs	r2, #1
 8006a82:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3320      	adds	r3, #32
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	f7fd fd3f 	bl	8004510 <lfs_pair_cmp>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <lfs_dir_split+0x9e>
 8006a98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3738      	adds	r7, #56	; 0x38
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b086      	sub	sp, #24
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8006ac6:	68b8      	ldr	r0, [r7, #8]
 8006ac8:	f7fd fe35 	bl	8004736 <lfs_tag_dsize>
 8006acc:	4602      	mov	r2, r0
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	441a      	add	r2, r3
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	601a      	str	r2, [r3, #0]
    return 0;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b086      	sub	sp, #24
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	6859      	ldr	r1, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	f7ff fd1d 	bl	800653c <lfs_dir_commitattr>
 8006b02:	4603      	mov	r3, r0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	dd11      	ble.n	8006b44 <lfs_dir_needsrelocation+0x38>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	3301      	adds	r3, #1
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b2c:	3201      	adds	r2, #1
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b36:	fb01 f202 	mul.w	r2, r1, r2
 8006b3a:	1a9b      	subs	r3, r3, r2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <lfs_dir_needsrelocation+0x38>
 8006b40:	2301      	movs	r3, #1
 8006b42:	e000      	b.n	8006b46 <lfs_dir_needsrelocation+0x3a>
 8006b44:	2300      	movs	r3, #0
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b0a4      	sub	sp, #144	; 0x90
 8006b5c:	af0a      	add	r7, sp, #40	; 0x28
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8006b66:	2300      	movs	r3, #0
 8006b68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff ffcc 	bl	8006b0c <lfs_dir_needsrelocation>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8006b84:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00e      	beq.n	8006baa <lfs_dir_compact+0x52>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	657a      	str	r2, [r7, #84]	; 0x54
 8006b92:	2201      	movs	r2, #1
 8006b94:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b96:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fd fcb7 	bl	8004510 <lfs_pair_cmp>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f040 8155 	bne.w	8006e54 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	643b      	str	r3, [r7, #64]	; 0x40
 8006bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8006bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <lfs_dir_compact+0x80>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd4:	3b08      	subs	r3, #8
 8006bd6:	e003      	b.n	8006be0 <lfs_dir_compact+0x88>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8006be0:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	4619      	mov	r1, r3
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7fd fc2f 	bl	800444c <lfs_bd_erase>
 8006bee:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8006bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d006      	beq.n	8006c04 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8006bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bf8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006bfc:	f000 812c 	beq.w	8006e58 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8006c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c02:	e188      	b.n	8006f16 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fd f886 	bl	8003d1a <lfs_tole32>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8006c1a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006c1e:	2304      	movs	r3, #4
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fc55 	bl	80064d0 <lfs_dir_commitprog>
 8006c26:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fd f869 	bl	8003d04 <lfs_fromle32>
 8006c32:	4602      	mov	r2, r0
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	609a      	str	r2, [r3, #8]
            if (err) {
 8006c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d006      	beq.n	8006c4c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8006c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c40:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006c44:	f000 810a 	beq.w	8006e5c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8006c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c4a:	e164      	b.n	8006f16 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8006c4c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006c50:	425b      	negs	r3, r3
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	637a      	str	r2, [r7, #52]	; 0x34
 8006c5a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006c5e:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8006c60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006c64:	9208      	str	r2, [sp, #32]
 8006c66:	4aae      	ldr	r2, [pc, #696]	; (8006f20 <lfs_dir_compact+0x3c8>)
 8006c68:	9207      	str	r2, [sp, #28]
 8006c6a:	9306      	str	r3, [sp, #24]
 8006c6c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8006c70:	9305      	str	r3, [sp, #20]
 8006c72:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006c76:	9304      	str	r3, [sp, #16]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9303      	str	r3, [sp, #12]
 8006c7c:	4ba9      	ldr	r3, [pc, #676]	; (8006f24 <lfs_dir_compact+0x3cc>)
 8006c7e:	9302      	str	r3, [sp, #8]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f7fe fadd 	bl	8005250 <lfs_dir_traverse>
 8006c96:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8006c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d006      	beq.n	8006cac <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8006c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ca0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006ca4:	f000 80dc 	beq.w	8006e60 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8006ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006caa:	e134      	b.n	8006f16 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	3318      	adds	r3, #24
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fd fc12 	bl	80044da <lfs_pair_isnull>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f083 0301 	eor.w	r3, r3, #1
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d022      	beq.n	8006d08 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	3318      	adds	r3, #24
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fd fc93 	bl	80045f2 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	7ddb      	ldrb	r3, [r3, #23]
 8006cd0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006cd4:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8006cd6:	4a94      	ldr	r2, [pc, #592]	; (8006f28 <lfs_dir_compact+0x3d0>)
 8006cd8:	431a      	orrs	r2, r3
                        dir->tail);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8006cde:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff fc2a 	bl	800653c <lfs_dir_commitattr>
 8006ce8:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	3318      	adds	r3, #24
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fd fc65 	bl	80045be <lfs_pair_fromle32>
                if (err) {
 8006cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d006      	beq.n	8006d08 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8006cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cfc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006d00:	f000 80b0 	beq.w	8006e64 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8006d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d06:	e106      	b.n	8006f16 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8006d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8006d14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d18:	f083 0301 	eor.w	r3, r3, #1
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d011      	beq.n	8006d46 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fd fd15 	bl	800475e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fd fd0c 	bl	800475e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006d4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fd fd03 	bl	800475e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8006d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff fa39 	bl	80061e4 <lfs_dir_getgstate>
 8006d72:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8006d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <lfs_dir_compact+0x226>
                return err;
 8006d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d7c:	e0cb      	b.n	8006f16 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8006d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fd fd10 	bl	80047a8 <lfs_gstate_iszero>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f083 0301 	eor.w	r3, r3, #1
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d016      	beq.n	8006dc2 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8006d94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fd fdab 	bl	80048f4 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8006d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006da2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006da6:	4a61      	ldr	r2, [pc, #388]	; (8006f2c <lfs_dir_compact+0x3d4>)
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff fbc7 	bl	800653c <lfs_dir_commitattr>
 8006dae:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8006db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8006db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006dbc:	d054      	beq.n	8006e68 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8006dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc0:	e0a9      	b.n	8006f16 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8006dc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7ff fc37 	bl	800663c <lfs_dir_commitcrc>
 8006dce:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8006dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8006dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006ddc:	d046      	beq.n	8006e6c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8006dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006de0:	e099      	b.n	8006f16 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8006de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006de8:	6992      	ldr	r2, [r2, #24]
 8006dea:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dee:	fb01 f202 	mul.w	r2, r1, r2
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d006      	beq.n	8006e06 <lfs_dir_compact+0x2ae>
 8006df8:	4b4d      	ldr	r3, [pc, #308]	; (8006f30 <lfs_dir_compact+0x3d8>)
 8006dfa:	4a4e      	ldr	r2, [pc, #312]	; (8006f34 <lfs_dir_compact+0x3dc>)
 8006dfc:	f240 71e2 	movw	r1, #2018	; 0x7e2
 8006e00:	484d      	ldr	r0, [pc, #308]	; (8006f38 <lfs_dir_compact+0x3e0>)
 8006e02:	f003 ffbb 	bl	800ad7c <__assert_func>
            lfs_pair_swap(dir->pair);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fd fb51 	bl	80044b0 <lfs_pair_swap>
            dir->count = end - begin;
 8006e0e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8006e12:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8006e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8006e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3348      	adds	r3, #72	; 0x48
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	605a      	str	r2, [r3, #4]
 8006e34:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8006e36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e3a:	f083 0301 	eor.w	r3, r3, #1
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d065      	beq.n	8006f10 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	333c      	adds	r3, #60	; 0x3c
 8006e4a:	3230      	adds	r2, #48	; 0x30
 8006e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8006e52:	e05d      	b.n	8006f10 <lfs_dir_compact+0x3b8>
        goto relocate;
 8006e54:	bf00      	nop
 8006e56:	e00a      	b.n	8006e6e <lfs_dir_compact+0x316>
                    goto relocate;
 8006e58:	bf00      	nop
 8006e5a:	e008      	b.n	8006e6e <lfs_dir_compact+0x316>
                    goto relocate;
 8006e5c:	bf00      	nop
 8006e5e:	e006      	b.n	8006e6e <lfs_dir_compact+0x316>
                    goto relocate;
 8006e60:	bf00      	nop
 8006e62:	e004      	b.n	8006e6e <lfs_dir_compact+0x316>
                        goto relocate;
 8006e64:	bf00      	nop
 8006e66:	e002      	b.n	8006e6e <lfs_dir_compact+0x316>
                        goto relocate;
 8006e68:	bf00      	nop
 8006e6a:	e000      	b.n	8006e6e <lfs_dir_compact+0x316>
                    goto relocate;
 8006e6c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3310      	adds	r3, #16
 8006e78:	4619      	mov	r1, r3
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7fc ff88 	bl	8003d90 <lfs_cache_drop>
        if (!tired) {
 8006e80:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006e84:	f083 0301 	eor.w	r3, r3, #1
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d009      	beq.n	8006ea2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	4a2a      	ldr	r2, [pc, #168]	; (8006f3c <lfs_dir_compact+0x3e4>)
 8006e94:	9200      	str	r2, [sp, #0]
 8006e96:	f240 72f4 	movw	r2, #2036	; 0x7f4
 8006e9a:	4927      	ldr	r1, [pc, #156]	; (8006f38 <lfs_dir_compact+0x3e0>)
 8006e9c:	4828      	ldr	r0, [pc, #160]	; (8006f40 <lfs_dir_compact+0x3e8>)
 8006e9e:	f004 f909 	bl	800b0b4 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	617a      	str	r2, [r7, #20]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	61ba      	str	r2, [r7, #24]
 8006eac:	f107 0214 	add.w	r2, r7, #20
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fd fb2c 	bl	8004510 <lfs_pair_cmp>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10c      	bne.n	8006ed8 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	4a1e      	ldr	r2, [pc, #120]	; (8006f3c <lfs_dir_compact+0x3e4>)
 8006ec4:	9200      	str	r2, [sp, #0]
 8006ec6:	f240 72f9 	movw	r2, #2041	; 0x7f9
 8006eca:	491b      	ldr	r1, [pc, #108]	; (8006f38 <lfs_dir_compact+0x3e0>)
 8006ecc:	481d      	ldr	r0, [pc, #116]	; (8006f44 <lfs_dir_compact+0x3ec>)
 8006ece:	f004 f8f1 	bl	800b0b4 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8006ed2:	f06f 031b 	mvn.w	r3, #27
 8006ed6:	e01e      	b.n	8006f16 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	3304      	adds	r3, #4
 8006edc:	4619      	mov	r1, r3
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7fd feca 	bl	8004c78 <lfs_alloc>
 8006ee4:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8006ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00c      	beq.n	8006f06 <lfs_dir_compact+0x3ae>
 8006eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006eee:	f113 0f1c 	cmn.w	r3, #28
 8006ef2:	d106      	bne.n	8006f02 <lfs_dir_compact+0x3aa>
 8006ef4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006ef8:	f083 0301 	eor.w	r3, r3, #1
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <lfs_dir_compact+0x3ae>
            return err;
 8006f02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f04:	e007      	b.n	8006f16 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8006f06:	2300      	movs	r3, #0
 8006f08:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 8006f0c:	bf00      	nop
    while (true) {
 8006f0e:	e64c      	b.n	8006baa <lfs_dir_compact+0x52>
        break;
 8006f10:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8006f12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3768      	adds	r7, #104	; 0x68
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	08006ae3 	.word	0x08006ae3
 8006f24:	400ffc00 	.word	0x400ffc00
 8006f28:	000ffc08 	.word	0x000ffc08
 8006f2c:	7ffffc0c 	.word	0x7ffffc0c
 8006f30:	0800c058 	.word	0x0800c058
 8006f34:	0800cbe4 	.word	0x0800cbe4
 8006f38:	0800bf0c 	.word	0x0800bf0c
 8006f3c:	0800c000 	.word	0x0800c000
 8006f40:	0800c080 	.word	0x0800c080
 8006f44:	0800c0a4 	.word	0x0800c0a4

08006f48 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8006f48:	b590      	push	{r4, r7, lr}
 8006f4a:	b097      	sub	sp, #92	; 0x5c
 8006f4c:	af0a      	add	r7, sp, #40	; 0x28
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8006f56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8006f5c:	e058      	b.n	8007010 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8006f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f68:	b292      	uxth	r2, r2
 8006f6a:	4252      	negs	r2, r2
 8006f6c:	b292      	uxth	r2, r2
 8006f6e:	b212      	sxth	r2, r2
 8006f70:	f107 0118 	add.w	r1, r7, #24
 8006f74:	9108      	str	r1, [sp, #32]
 8006f76:	4979      	ldr	r1, [pc, #484]	; (800715c <lfs_dir_splittingcompact+0x214>)
 8006f78:	9107      	str	r1, [sp, #28]
 8006f7a:	9206      	str	r2, [sp, #24]
 8006f7c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006f80:	9205      	str	r2, [sp, #20]
 8006f82:	9304      	str	r3, [sp, #16]
 8006f84:	2300      	movs	r3, #0
 8006f86:	9303      	str	r3, [sp, #12]
 8006f88:	4b75      	ldr	r3, [pc, #468]	; (8007160 <lfs_dir_splittingcompact+0x218>)
 8006f8a:	9302      	str	r3, [sp, #8]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f98:	2200      	movs	r2, #0
 8006f9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f7fe f957 	bl	8005250 <lfs_dir_traverse>
 8006fa2:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <lfs_dir_splittingcompact+0x66>
                return err;
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	e0d1      	b.n	8007152 <lfs_dir_splittingcompact+0x20a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8006fae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2bfe      	cmp	r3, #254	; 0xfe
 8006fb8:	d822      	bhi.n	8007000 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fbe:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8006fc0:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8006fd4:	085b      	lsrs	r3, r3, #1
 8006fd6:	e003      	b.n	8006fe0 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fdc:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8006fde:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fe4:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fc fe40 	bl	8003c6e <lfs_alignup>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f7fc fe16 	bl	8003c24 <lfs_min>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d20e      	bcs.n	800701e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8007000:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	085b      	lsrs	r3, r3, #1
 800700a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700c:	4413      	add	r3, r2
 800700e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8007010:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b01      	cmp	r3, #1
 800701a:	d8a0      	bhi.n	8006f5e <lfs_dir_splittingcompact+0x16>
 800701c:	e000      	b.n	8007020 <lfs_dir_splittingcompact+0xd8>
                break;
 800701e:	bf00      	nop
        }

        if (split == begin) {
 8007020:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007026:	429a      	cmp	r2, r3
 8007028:	d02d      	beq.n	8007086 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	b29b      	uxth	r3, r3
 800702e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007032:	9202      	str	r2, [sp, #8]
 8007034:	9301      	str	r3, [sp, #4]
 8007036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f7ff fce4 	bl	8006a0e <lfs_dir_split>
 8007046:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <lfs_dir_splittingcompact+0x112>
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	f113 0f1c 	cmn.w	r3, #28
 8007054:	d001      	beq.n	800705a <lfs_dir_splittingcompact+0x112>
            return err;
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	e07b      	b.n	8007152 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00e      	beq.n	800707e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	493e      	ldr	r1, [pc, #248]	; (8007164 <lfs_dir_splittingcompact+0x21c>)
 800706a:	9101      	str	r1, [sp, #4]
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	4613      	mov	r3, r2
 8007070:	f640 024c 	movw	r2, #2124	; 0x84c
 8007074:	493c      	ldr	r1, [pc, #240]	; (8007168 <lfs_dir_splittingcompact+0x220>)
 8007076:	483d      	ldr	r0, [pc, #244]	; (800716c <lfs_dir_splittingcompact+0x224>)
 8007078:	f004 f81c 	bl	800b0b4 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 800707c:	e004      	b.n	8007088 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 800707e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007080:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8007084:	e767      	b.n	8006f56 <lfs_dir_splittingcompact+0xe>
            break;
 8007086:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff fd3e 	bl	8006b0c <lfs_dir_needsrelocation>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d04e      	beq.n	8007134 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2200      	movs	r2, #0
 800709a:	613a      	str	r2, [r7, #16]
 800709c:	2201      	movs	r2, #1
 800709e:	617a      	str	r2, [r7, #20]
 80070a0:	f107 0210 	add.w	r2, r7, #16
 80070a4:	4611      	mov	r1, r2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fd fa32 	bl	8004510 <lfs_pair_cmp>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d140      	bne.n	8007134 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f003 fad4 	bl	800a660 <lfs_fs_rawsize>
 80070b8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	da01      	bge.n	80070c4 <lfs_dir_splittingcompact+0x17c>
            return size;
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	e046      	b.n	8007152 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	085a      	lsrs	r2, r3, #1
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d930      	bls.n	8007134 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	4a23      	ldr	r2, [pc, #140]	; (8007164 <lfs_dir_splittingcompact+0x21c>)
 80070d8:	9200      	str	r2, [sp, #0]
 80070da:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80070de:	4922      	ldr	r1, [pc, #136]	; (8007168 <lfs_dir_splittingcompact+0x220>)
 80070e0:	4823      	ldr	r0, [pc, #140]	; (8007170 <lfs_dir_splittingcompact+0x228>)
 80070e2:	f003 ffe7 	bl	800b0b4 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80070e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80070ea:	9302      	str	r3, [sp, #8]
 80070ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	68b9      	ldr	r1, [r7, #8]
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7ff fc86 	bl	8006a0e <lfs_dir_split>
 8007102:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <lfs_dir_splittingcompact+0x1ce>
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	f113 0f1c 	cmn.w	r3, #28
 8007110:	d001      	beq.n	8007116 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	e01d      	b.n	8007152 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 800711c:	4b11      	ldr	r3, [pc, #68]	; (8007164 <lfs_dir_splittingcompact+0x21c>)
 800711e:	f640 026a 	movw	r2, #2154	; 0x86a
 8007122:	4911      	ldr	r1, [pc, #68]	; (8007168 <lfs_dir_splittingcompact+0x220>)
 8007124:	4813      	ldr	r0, [pc, #76]	; (8007174 <lfs_dir_splittingcompact+0x22c>)
 8007126:	f003 ffc5 	bl	800b0b4 <iprintf>
 800712a:	e003      	b.n	8007134 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 800712c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007130:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8007134:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007138:	9302      	str	r3, [sp, #8]
 800713a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff fd04 	bl	8006b58 <lfs_dir_compact>
 8007150:	4603      	mov	r3, r0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3734      	adds	r7, #52	; 0x34
 8007156:	46bd      	mov	sp, r7
 8007158:	bd90      	pop	{r4, r7, pc}
 800715a:	bf00      	nop
 800715c:	08006ab7 	.word	0x08006ab7
 8007160:	400ffc00 	.word	0x400ffc00
 8007164:	0800c000 	.word	0x0800c000
 8007168:	0800bf0c 	.word	0x0800bf0c
 800716c:	0800c0dc 	.word	0x0800c0dc
 8007170:	0800c10c 	.word	0x0800c10c
 8007174:	0800c13c 	.word	0x0800c13c

08007178 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8007178:	b5b0      	push	{r4, r5, r7, lr}
 800717a:	b0a6      	sub	sp, #152	; 0x98
 800717c:	af0a      	add	r7, sp, #40	; 0x28
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
    int state = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 800718a:	2300      	movs	r3, #0
 800718c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8007190:	2300      	movs	r3, #0
 8007192:	667b      	str	r3, [r7, #100]	; 0x64
 8007194:	e06d      	b.n	8007272 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8007196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	4413      	add	r3, r2
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fd fa81 	bl	80046a8 <lfs_tag_type3>
 80071a6:	4603      	mov	r3, r0
 80071a8:	461a      	mov	r2, r3
 80071aa:	f240 4301 	movw	r3, #1025	; 0x401
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d106      	bne.n	80071c0 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	8a9b      	ldrh	r3, [r3, #20]
 80071b6:	3301      	adds	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	829a      	strh	r2, [r3, #20]
 80071be:	e055      	b.n	800726c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80071c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	4413      	add	r3, r2
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fd fa6c 	bl	80046a8 <lfs_tag_type3>
 80071d0:	4603      	mov	r3, r0
 80071d2:	461a      	mov	r2, r3
 80071d4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80071d8:	429a      	cmp	r2, r3
 80071da:	d114      	bne.n	8007206 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	8a9b      	ldrh	r3, [r3, #20]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d106      	bne.n	80071f2 <lfs_dir_relocatingcommit+0x7a>
 80071e4:	4ba4      	ldr	r3, [pc, #656]	; (8007478 <lfs_dir_relocatingcommit+0x300>)
 80071e6:	4aa5      	ldr	r2, [pc, #660]	; (800747c <lfs_dir_relocatingcommit+0x304>)
 80071e8:	f640 0182 	movw	r1, #2178	; 0x882
 80071ec:	48a4      	ldr	r0, [pc, #656]	; (8007480 <lfs_dir_relocatingcommit+0x308>)
 80071ee:	f003 fdc5 	bl	800ad7c <__assert_func>
            dir->count -= 1;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	8a9b      	ldrh	r3, [r3, #20]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8007204:	e032      	b.n	800726c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8007206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	4413      	add	r3, r2
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd fa29 	bl	8004668 <lfs_tag_type1>
 8007216:	4603      	mov	r3, r0
 8007218:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800721c:	d126      	bne.n	800726c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800721e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	4413      	add	r3, r2
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800722e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4413      	add	r3, r2
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800723e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	4413      	add	r3, r2
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f7fd fa3d 	bl	80046c8 <lfs_tag_chunk>
 800724e:	4603      	mov	r3, r0
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	bf14      	ite	ne
 8007258:	2301      	movne	r3, #1
 800725a:	2300      	moveq	r3, #0
 800725c:	b2da      	uxtb	r2, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	3318      	adds	r3, #24
 8007266:	4618      	mov	r0, r3
 8007268:	f7fd f9a9 	bl	80045be <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800726c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800726e:	3301      	adds	r3, #1
 8007270:	667b      	str	r3, [r7, #100]	; 0x64
 8007272:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007278:	429a      	cmp	r2, r3
 800727a:	db8c      	blt.n	8007196 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800727c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007280:	2b00      	cmp	r3, #0
 8007282:	d02b      	beq.n	80072dc <lfs_dir_relocatingcommit+0x164>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	8a9b      	ldrh	r3, [r3, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d127      	bne.n	80072dc <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 800728c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007290:	2b00      	cmp	r3, #0
 8007292:	d106      	bne.n	80072a2 <lfs_dir_relocatingcommit+0x12a>
 8007294:	4b7b      	ldr	r3, [pc, #492]	; (8007484 <lfs_dir_relocatingcommit+0x30c>)
 8007296:	4a79      	ldr	r2, [pc, #484]	; (800747c <lfs_dir_relocatingcommit+0x304>)
 8007298:	f640 018f 	movw	r1, #2191	; 0x88f
 800729c:	4878      	ldr	r0, [pc, #480]	; (8007480 <lfs_dir_relocatingcommit+0x308>)
 800729e:	f003 fd6d 	bl	800ad7c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80072a8:	4619      	mov	r1, r3
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f002 fd32 	bl	8009d14 <lfs_fs_pred>
 80072b0:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 80072b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <lfs_dir_relocatingcommit+0x14c>
 80072b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072ba:	f113 0f02 	cmn.w	r3, #2
 80072be:	d001      	beq.n	80072c4 <lfs_dir_relocatingcommit+0x14c>
            return err;
 80072c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072c2:	e204      	b.n	80076ce <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 80072c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072c6:	f113 0f02 	cmn.w	r3, #2
 80072ca:	d007      	beq.n	80072dc <lfs_dir_relocatingcommit+0x164>
 80072cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072d0:	7ddb      	ldrb	r3, [r3, #23]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 80072d6:	2302      	movs	r3, #2
 80072d8:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 80072da:	e121      	b.n	8007520 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	7d9b      	ldrb	r3, [r3, #22]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 80fb 	beq.w	80074dc <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 80072ea:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 80072f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80072f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8007302:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <lfs_dir_relocatingcommit+0x1a0>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007314:	3b08      	subs	r3, #8
 8007316:	e003      	b.n	8007320 <lfs_dir_relocatingcommit+0x1a8>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8007320:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	3318      	adds	r3, #24
 8007326:	4618      	mov	r0, r3
 8007328:	f7fd f963 	bl	80045f2 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	62bb      	str	r3, [r7, #40]	; 0x28
 8007338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 800733e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007342:	9308      	str	r3, [sp, #32]
 8007344:	4b50      	ldr	r3, [pc, #320]	; (8007488 <lfs_dir_relocatingcommit+0x310>)
 8007346:	9307      	str	r3, [sp, #28]
 8007348:	2300      	movs	r3, #0
 800734a:	9306      	str	r3, [sp, #24]
 800734c:	2300      	movs	r3, #0
 800734e:	9305      	str	r3, [sp, #20]
 8007350:	2300      	movs	r3, #0
 8007352:	9304      	str	r3, [sp, #16]
 8007354:	2300      	movs	r3, #0
 8007356:	9303      	str	r3, [sp, #12]
 8007358:	2300      	movs	r3, #0
 800735a:	9302      	str	r3, [sp, #8]
 800735c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	460b      	mov	r3, r1
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f7fd ff70 	bl	8005250 <lfs_dir_traverse>
 8007370:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	3318      	adds	r3, #24
 8007376:	4618      	mov	r0, r3
 8007378:	f7fd f921 	bl	80045be <lfs_pair_fromle32>
        if (err) {
 800737c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8007382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007384:	f113 0f1c 	cmn.w	r3, #28
 8007388:	f000 80aa 	beq.w	80074e0 <lfs_dir_relocatingcommit+0x368>
 800738c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800738e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007392:	f000 80a5 	beq.w	80074e0 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8007396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007398:	e199      	b.n	80076ce <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800739a:	f107 031c 	add.w	r3, r7, #28
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	605a      	str	r2, [r3, #4]
 80073a4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073ac:	f107 031c 	add.w	r3, r7, #28
 80073b0:	4611      	mov	r1, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fd f9d3 	bl	800475e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80073be:	f107 031c 	add.w	r3, r7, #28
 80073c2:	4611      	mov	r1, r2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fd f9ca 	bl	800475e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80073d0:	f107 031c 	add.w	r3, r7, #28
 80073d4:	4611      	mov	r1, r2
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fd f9c1 	bl	800475e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80073e2:	f023 0303 	bic.w	r3, r3, #3
 80073e6:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 80073e8:	f107 031c 	add.w	r3, r7, #28
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fd f9db 	bl	80047a8 <lfs_gstate_iszero>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f083 0301 	eor.w	r3, r3, #1
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d027      	beq.n	800744e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80073fe:	f107 031c 	add.w	r3, r7, #28
 8007402:	461a      	mov	r2, r3
 8007404:	68b9      	ldr	r1, [r7, #8]
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f7fe feec 	bl	80061e4 <lfs_dir_getgstate>
 800740c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 800740e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8007414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007416:	e15a      	b.n	80076ce <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8007418:	f107 031c 	add.w	r3, r7, #28
 800741c:	4618      	mov	r0, r3
 800741e:	f7fd fa69 	bl	80048f4 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8007422:	f107 031c 	add.w	r3, r7, #28
 8007426:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800742a:	4a18      	ldr	r2, [pc, #96]	; (800748c <lfs_dir_relocatingcommit+0x314>)
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f7ff f885 	bl	800653c <lfs_dir_commitattr>
 8007432:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8007434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800743a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800743c:	f113 0f1c 	cmn.w	r3, #28
 8007440:	d050      	beq.n	80074e4 <lfs_dir_relocatingcommit+0x36c>
 8007442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007444:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007448:	d04c      	beq.n	80074e4 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800744a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800744c:	e13f      	b.n	80076ce <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800744e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007452:	4619      	mov	r1, r3
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f7ff f8f1 	bl	800663c <lfs_dir_commitcrc>
 800745a:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 800745c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800745e:	2b00      	cmp	r3, #0
 8007460:	d016      	beq.n	8007490 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8007462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007464:	f113 0f1c 	cmn.w	r3, #28
 8007468:	d03e      	beq.n	80074e8 <lfs_dir_relocatingcommit+0x370>
 800746a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800746c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007470:	d03a      	beq.n	80074e8 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8007472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007474:	e12b      	b.n	80076ce <lfs_dir_relocatingcommit+0x556>
 8007476:	bf00      	nop
 8007478:	0800c168 	.word	0x0800c168
 800747c:	0800cbf4 	.word	0x0800cbf4
 8007480:	0800bf0c 	.word	0x0800bf0c
 8007484:	0800c178 	.word	0x0800c178
 8007488:	08006ae3 	.word	0x08006ae3
 800748c:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8007490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007496:	6992      	ldr	r2, [r2, #24]
 8007498:	fbb3 f1f2 	udiv	r1, r3, r2
 800749c:	fb01 f202 	mul.w	r2, r1, r2
 80074a0:	1a9b      	subs	r3, r3, r2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d006      	beq.n	80074b4 <lfs_dir_relocatingcommit+0x33c>
 80074a6:	4b8c      	ldr	r3, [pc, #560]	; (80076d8 <lfs_dir_relocatingcommit+0x560>)
 80074a8:	4a8c      	ldr	r2, [pc, #560]	; (80076dc <lfs_dir_relocatingcommit+0x564>)
 80074aa:	f640 01d9 	movw	r1, #2265	; 0x8d9
 80074ae:	488c      	ldr	r0, [pc, #560]	; (80076e0 <lfs_dir_relocatingcommit+0x568>)
 80074b0:	f003 fc64 	bl	800ad7c <__assert_func>
        dir->off = commit.off;
 80074b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80074ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	333c      	adds	r3, #60	; 0x3c
 80074c6:	3230      	adds	r2, #48	; 0x30
 80074c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80074ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3348      	adds	r3, #72	; 0x48
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	605a      	str	r2, [r3, #4]
 80074d8:	609a      	str	r2, [r3, #8]
 80074da:	e021      	b.n	8007520 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80074dc:	bf00      	nop
 80074de:	e004      	b.n	80074ea <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80074e0:	bf00      	nop
 80074e2:	e002      	b.n	80074ea <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 80074e4:	bf00      	nop
 80074e6:	e000      	b.n	80074ea <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80074e8:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3310      	adds	r3, #16
 80074ee:	4619      	mov	r1, r3
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7fc fc4d 	bl	8003d90 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	8a9b      	ldrh	r3, [r3, #20]
 80074fa:	9302      	str	r3, [sp, #8]
 80074fc:	2300      	movs	r3, #0
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	68b9      	ldr	r1, [r7, #8]
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff fd1b 	bl	8006f48 <lfs_dir_splittingcompact>
 8007512:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8007514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007516:	2b00      	cmp	r3, #0
 8007518:	da01      	bge.n	800751e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800751a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751c:	e0d7      	b.n	80076ce <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 800751e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	64bb      	str	r3, [r7, #72]	; 0x48
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3304      	adds	r3, #4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007532:	663b      	str	r3, [r7, #96]	; 0x60
 8007534:	e0c6      	b.n	80076c4 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8007536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007538:	3308      	adds	r3, #8
 800753a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800753e:	4611      	mov	r1, r2
 8007540:	4618      	mov	r0, r3
 8007542:	f7fc ffe5 	bl	8004510 <lfs_pair_cmp>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	f040 80b8 	bne.w	80076be <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 800754e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	f103 0408 	add.w	r4, r3, #8
 8007556:	4615      	mov	r5, r2
 8007558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800755a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8007564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007566:	3308      	adds	r3, #8
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	429a      	cmp	r2, r3
 800756c:	f000 809d 	beq.w	80076aa <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 8007570:	2300      	movs	r3, #0
 8007572:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007574:	e07b      	b.n	800766e <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8007576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4413      	add	r3, r2
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4618      	mov	r0, r3
 8007582:	f7fd f891 	bl	80046a8 <lfs_tag_type3>
 8007586:	4603      	mov	r3, r0
 8007588:	461a      	mov	r2, r3
 800758a:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800758e:	429a      	cmp	r2, r3
 8007590:	d115      	bne.n	80075be <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8007592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007594:	889c      	ldrh	r4, [r3, #4]
 8007596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	4413      	add	r3, r2
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fd f8ab 	bl	80046fc <lfs_tag_id>
 80075a6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80075a8:	429c      	cmp	r4, r3
 80075aa:	d108      	bne.n	80075be <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80075ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075b2:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80075b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075ba:	60da      	str	r2, [r3, #12]
 80075bc:	e054      	b.n	8007668 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80075be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	4413      	add	r3, r2
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fd f86d 	bl	80046a8 <lfs_tag_type3>
 80075ce:	4603      	mov	r3, r0
 80075d0:	461a      	mov	r2, r3
 80075d2:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d11c      	bne.n	8007614 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80075da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075dc:	889c      	ldrh	r4, [r3, #4]
 80075de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	4413      	add	r3, r2
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fd f887 	bl	80046fc <lfs_tag_id>
 80075ee:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80075f0:	429c      	cmp	r4, r3
 80075f2:	d90f      	bls.n	8007614 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 80075f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075f6:	889b      	ldrh	r3, [r3, #4]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075fe:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8007600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007602:	799b      	ldrb	r3, [r3, #6]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d12f      	bne.n	8007668 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8007608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800760a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760c:	1e5a      	subs	r2, r3, #1
 800760e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007610:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8007612:	e029      	b.n	8007668 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8007614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	4413      	add	r3, r2
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7fd f842 	bl	80046a8 <lfs_tag_type3>
 8007624:	4603      	mov	r3, r0
 8007626:	461a      	mov	r2, r3
 8007628:	f240 4301 	movw	r3, #1025	; 0x401
 800762c:	429a      	cmp	r2, r3
 800762e:	d11b      	bne.n	8007668 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8007630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007632:	889c      	ldrh	r4, [r3, #4]
 8007634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	4413      	add	r3, r2
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f7fd f85c 	bl	80046fc <lfs_tag_id>
 8007644:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8007646:	429c      	cmp	r4, r3
 8007648:	d30e      	bcc.n	8007668 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 800764a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800764c:	889b      	ldrh	r3, [r3, #4]
 800764e:	3301      	adds	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007654:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8007656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007658:	799b      	ldrb	r3, [r3, #6]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d104      	bne.n	8007668 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 800765e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007666:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8007668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800766a:	3301      	adds	r3, #1
 800766c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800766e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007670:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007674:	429a      	cmp	r2, r3
 8007676:	f6ff af7e 	blt.w	8007576 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800767a:	e016      	b.n	80076aa <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 800767c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800767e:	889a      	ldrh	r2, [r3, #4]
 8007680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007682:	8b9b      	ldrh	r3, [r3, #28]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	b29a      	uxth	r2, r3
 8007688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800768a:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800768c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800768e:	f103 0108 	add.w	r1, r3, #8
 8007692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007694:	3320      	adds	r3, #32
 8007696:	461a      	mov	r2, r3
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7fe fd87 	bl	80061ac <lfs_dir_fetch>
 800769e:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 80076a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <lfs_dir_relocatingcommit+0x532>
                    return err;
 80076a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a8:	e011      	b.n	80076ce <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 80076aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ac:	889a      	ldrh	r2, [r3, #4]
 80076ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076b0:	8b9b      	ldrh	r3, [r3, #28]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d303      	bcc.n	80076be <lfs_dir_relocatingcommit+0x546>
 80076b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076b8:	7fdb      	ldrb	r3, [r3, #31]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1de      	bne.n	800767c <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80076be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	663b      	str	r3, [r7, #96]	; 0x60
 80076c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f47f af35 	bne.w	8007536 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 80076cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3770      	adds	r7, #112	; 0x70
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bdb0      	pop	{r4, r5, r7, pc}
 80076d6:	bf00      	nop
 80076d8:	0800c058 	.word	0x0800c058
 80076dc:	0800cbf4 	.word	0x0800cbf4
 80076e0:	0800bf0c 	.word	0x0800bf0c

080076e4 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80076e4:	b5b0      	push	{r4, r5, r7, lr}
 80076e6:	b0bc      	sub	sp, #240	; 0xf0
 80076e8:	af04      	add	r7, sp, #16
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076fa:	e045      	b.n	8007788 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80076fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007700:	3308      	adds	r3, #8
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	429a      	cmp	r2, r3
 8007706:	d03a      	beq.n	800777e <lfs_dir_orphaningcommit+0x9a>
 8007708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800770c:	3308      	adds	r3, #8
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	4611      	mov	r1, r2
 8007712:	4618      	mov	r0, r3
 8007714:	f7fc fefc 	bl	8004510 <lfs_pair_cmp>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d12f      	bne.n	800777e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800771e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007722:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8007724:	2b01      	cmp	r3, #1
 8007726:	d12a      	bne.n	800777e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d023      	beq.n	800777e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8007736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800773a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007742:	429a      	cmp	r2, r3
 8007744:	d91b      	bls.n	800777e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8007746:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fff0 	bl	8008730 <lfs_file_outline>
 8007750:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8007754:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <lfs_dir_orphaningcommit+0x7e>
                return err;
 800775c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007760:	e2ad      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8007762:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f001 f804 	bl	8008774 <lfs_file_flush>
 800776c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8007770:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8007778:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800777c:	e29f      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800777e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1b5      	bne.n	80076fc <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80077a6:	461d      	mov	r5, r3
 80077a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80077b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80077ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80077be:	9301      	str	r3, [sp, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f7ff fcd6 	bl	8007178 <lfs_dir_relocatingcommit>
 80077cc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 80077d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da02      	bge.n	80077de <lfs_dir_orphaningcommit+0xfa>
        return state;
 80077d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077dc:	e26f      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80077e4:	4611      	mov	r1, r2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fc fe92 	bl	8004510 <lfs_pair_cmp>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	461d      	mov	r5, r3
 80077f6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80077fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007802:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8007806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800780a:	2b02      	cmp	r3, #2
 800780c:	d14a      	bne.n	80078a4 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3348      	adds	r3, #72	; 0x48
 8007812:	461a      	mov	r2, r3
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f7fe fce4 	bl	80061e4 <lfs_dir_getgstate>
 800781c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8007820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8007828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800782c:	e247      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800782e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8007834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	3318      	adds	r3, #24
 800783e:	4618      	mov	r0, r3
 8007840:	f7fc fed7 	bl	80045f2 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	7ddb      	ldrb	r3, [r3, #23]
 8007848:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800784c:	051a      	lsls	r2, r3, #20
 800784e:	4bc2      	ldr	r3, [pc, #776]	; (8007b58 <lfs_dir_orphaningcommit+0x474>)
 8007850:	4313      	orrs	r3, r2
 8007852:	667b      	str	r3, [r7, #100]	; 0x64
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	3318      	adds	r3, #24
 8007858:	66bb      	str	r3, [r7, #104]	; 0x68
 800785a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800785e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8007862:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007866:	2000      	movs	r0, #0
 8007868:	9001      	str	r0, [sp, #4]
 800786a:	2001      	movs	r0, #1
 800786c:	9000      	str	r0, [sp, #0]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f7ff fc82 	bl	8007178 <lfs_dir_relocatingcommit>
 8007874:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	3318      	adds	r3, #24
 800787c:	4618      	mov	r0, r3
 800787e:	f7fc fe9e 	bl	80045be <lfs_pair_fromle32>
        if (state < 0) {
 8007882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007886:	2b00      	cmp	r3, #0
 8007888:	da02      	bge.n	8007890 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800788a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800788e:	e216      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8007890:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8007894:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8007898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800789a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800789c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80078a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80078a4:	2300      	movs	r3, #0
 80078a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 80078aa:	e1fc      	b.n	8007ca6 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80078ac:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80078b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078b4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80078b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078bc:	4ca7      	ldr	r4, [pc, #668]	; (8007b5c <lfs_dir_orphaningcommit+0x478>)
 80078be:	9403      	str	r4, [sp, #12]
 80078c0:	9102      	str	r1, [sp, #8]
 80078c2:	9201      	str	r2, [sp, #4]
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	4603      	mov	r3, r0
 80078c8:	f640 1263 	movw	r2, #2403	; 0x963
 80078cc:	49a4      	ldr	r1, [pc, #656]	; (8007b60 <lfs_dir_orphaningcommit+0x47c>)
 80078ce:	48a5      	ldr	r0, [pc, #660]	; (8007b64 <lfs_dir_orphaningcommit+0x480>)
 80078d0:	f003 fbf0 	bl	800b0b4 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f103 0220 	add.w	r2, r3, #32
 80078e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80078e4:	4611      	mov	r1, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fc fe12 	bl	8004510 <lfs_pair_cmp>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d107      	bne.n	8007902 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 80078f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 80078fa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007906:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800790a:	e037      	b.n	800797c <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800790c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007910:	f103 0208 	add.w	r2, r3, #8
 8007914:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007918:	4611      	mov	r1, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f7fc fdf8 	bl	8004510 <lfs_pair_cmp>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d109      	bne.n	800793a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8007926:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800792a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800792e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8007930:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007934:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007938:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800793a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800793e:	799b      	ldrb	r3, [r3, #6]
 8007940:	2b02      	cmp	r3, #2
 8007942:	d116      	bne.n	8007972 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8007944:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007948:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800794c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007950:	4611      	mov	r1, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f7fc fddc 	bl	8004510 <lfs_pair_cmp>
 8007958:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800795a:	2b00      	cmp	r3, #0
 800795c:	d109      	bne.n	8007972 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800795e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007962:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007966:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8007968:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800796c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007970:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007972:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800797c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1c3      	bne.n	800790c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8007984:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007988:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800798c:	4619      	mov	r1, r3
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f002 fa72 	bl	8009e78 <lfs_fs_parent>
 8007994:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8007998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800799c:	2b00      	cmp	r3, #0
 800799e:	da07      	bge.n	80079b0 <lfs_dir_orphaningcommit+0x2cc>
 80079a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079a4:	f113 0f02 	cmn.w	r3, #2
 80079a8:	d002      	beq.n	80079b0 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80079aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079ae:	e186      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80079b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079b4:	f113 0f02 	cmn.w	r3, #2
 80079b8:	bf14      	ite	ne
 80079ba:	2301      	movne	r3, #1
 80079bc:	2300      	moveq	r3, #0
 80079be:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 80079c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079c6:	f113 0f02 	cmn.w	r3, #2
 80079ca:	f000 809e 	beq.w	8007b0a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80079ce:	2101      	movs	r1, #1
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f002 fae9 	bl	8009fa8 <lfs_fs_preporphans>
 80079d6:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 80079da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <lfs_dir_orphaningcommit+0x304>
                return err;
 80079e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079e6:	e16a      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80079e8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80079ec:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3330      	adds	r3, #48	; 0x30
 80079f4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80079f8:	4611      	mov	r1, r2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fc ff3a 	bl	8004874 <lfs_gstate_hasmovehere>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d02d      	beq.n	8007a62 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fc fe76 	bl	80046fc <lfs_tag_id>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8007a16:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007a18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a1a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8007a1e:	484f      	ldr	r0, [pc, #316]	; (8007b5c <lfs_dir_orphaningcommit+0x478>)
 8007a20:	9002      	str	r0, [sp, #8]
 8007a22:	9201      	str	r2, [sp, #4]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	460b      	mov	r3, r1
 8007a28:	f44f 6219 	mov.w	r2, #2448	; 0x990
 8007a2c:	494c      	ldr	r1, [pc, #304]	; (8007b60 <lfs_dir_orphaningcommit+0x47c>)
 8007a2e:	484e      	ldr	r0, [pc, #312]	; (8007b68 <lfs_dir_orphaningcommit+0x484>)
 8007a30:	f003 fb40 	bl	800b0b4 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007a34:	2200      	movs	r2, #0
 8007a36:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f002 fb04 	bl	800a048 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8007a40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fc fe59 	bl	80046fc <lfs_tag_id>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d205      	bcs.n	8007a62 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8007a56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a5a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007a5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8007a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a64:	657b      	str	r3, [r7, #84]	; 0x54
 8007a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a68:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8007a6a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fc fdbf 	bl	80045f2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8007a74:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007a78:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d007      	beq.n	8007a90 <lfs_dir_orphaningcommit+0x3ac>
 8007a80:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8007a84:	029b      	lsls	r3, r3, #10
 8007a86:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8007a8a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007a8e:	e000      	b.n	8007a92 <lfs_dir_orphaningcommit+0x3ae>
 8007a90:	2300      	movs	r3, #0
 8007a92:	647b      	str	r3, [r7, #68]	; 0x44
 8007a94:	2300      	movs	r3, #0
 8007a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a9e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8007aa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007aa8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8007aac:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	9001      	str	r0, [sp, #4]
 8007ab4:	2002      	movs	r0, #2
 8007ab6:	9000      	str	r0, [sp, #0]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f7ff fb5d 	bl	8007178 <lfs_dir_relocatingcommit>
 8007abe:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8007ac2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fc fd79 	bl	80045be <lfs_pair_fromle32>
            if (state < 0) {
 8007acc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	da02      	bge.n	8007ada <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8007ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ad8:	e0f1      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8007ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d113      	bne.n	8007b0a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8007ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8007ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8007aee:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8007af2:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8007af6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007afa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007afe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007b08:	e0cd      	b.n	8007ca6 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8007b0a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007b0e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007b12:	4619      	mov	r1, r3
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f002 f8fd 	bl	8009d14 <lfs_fs_pred>
 8007b1a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8007b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d007      	beq.n	8007b36 <lfs_dir_orphaningcommit+0x452>
 8007b26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b2a:	f113 0f02 	cmn.w	r3, #2
 8007b2e:	d002      	beq.n	8007b36 <lfs_dir_orphaningcommit+0x452>
            return err;
 8007b30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b34:	e0c3      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8007b36:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d01a      	beq.n	8007b74 <lfs_dir_orphaningcommit+0x490>
 8007b3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b42:	f113 0f02 	cmn.w	r3, #2
 8007b46:	d115      	bne.n	8007b74 <lfs_dir_orphaningcommit+0x490>
 8007b48:	4b08      	ldr	r3, [pc, #32]	; (8007b6c <lfs_dir_orphaningcommit+0x488>)
 8007b4a:	4a09      	ldr	r2, [pc, #36]	; (8007b70 <lfs_dir_orphaningcommit+0x48c>)
 8007b4c:	f640 11b3 	movw	r1, #2483	; 0x9b3
 8007b50:	4803      	ldr	r0, [pc, #12]	; (8007b60 <lfs_dir_orphaningcommit+0x47c>)
 8007b52:	f003 f913 	bl	800ad7c <__assert_func>
 8007b56:	bf00      	nop
 8007b58:	000ffc08 	.word	0x000ffc08
 8007b5c:	0800c000 	.word	0x0800c000
 8007b60:	0800bf0c 	.word	0x0800bf0c
 8007b64:	0800c180 	.word	0x0800c180
 8007b68:	0800c1bc 	.word	0x0800c1bc
 8007b6c:	0800c200 	.word	0x0800c200
 8007b70:	0800cc10 	.word	0x0800cc10

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8007b74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b78:	f113 0f02 	cmn.w	r3, #2
 8007b7c:	f000 8093 	beq.w	8007ca6 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3330      	adds	r3, #48	; 0x30
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fc fe2c 	bl	80047e2 <lfs_gstate_hasorphans>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d011      	beq.n	8007bb4 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8007b90:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8007b94:	425b      	negs	r3, r3
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	b25b      	sxtb	r3, r3
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f002 fa03 	bl	8009fa8 <lfs_fs_preporphans>
 8007ba2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8007ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8007bae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bb2:	e084      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8007bb4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007bb8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3330      	adds	r3, #48	; 0x30
 8007bc0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fc fe54 	bl	8004874 <lfs_gstate_hasmovehere>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01c      	beq.n	8007c0c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fc fd90 	bl	80046fc <lfs_tag_id>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8007be2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007be6:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8007bea:	4837      	ldr	r0, [pc, #220]	; (8007cc8 <lfs_dir_orphaningcommit+0x5e4>)
 8007bec:	9002      	str	r0, [sp, #8]
 8007bee:	9201      	str	r2, [sp, #4]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007bf8:	4934      	ldr	r1, [pc, #208]	; (8007ccc <lfs_dir_orphaningcommit+0x5e8>)
 8007bfa:	4835      	ldr	r0, [pc, #212]	; (8007cd0 <lfs_dir_orphaningcommit+0x5ec>)
 8007bfc:	f003 fa5a 	bl	800b0b4 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007c00:	2200      	movs	r2, #0
 8007c02:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f002 fa1e 	bl	800a048 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8007c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8007c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8007c18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fc fce8 	bl	80045f2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8007c22:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8007c26:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d007      	beq.n	8007c3e <lfs_dir_orphaningcommit+0x55a>
 8007c2e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8007c32:	029b      	lsls	r3, r3, #10
 8007c34:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8007c38:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007c3c:	e000      	b.n	8007c40 <lfs_dir_orphaningcommit+0x55c>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
 8007c42:	2300      	movs	r3, #0
 8007c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c46:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8007c4a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007c4e:	051a      	lsls	r2, r3, #20
 8007c50:	4b20      	ldr	r3, [pc, #128]	; (8007cd4 <lfs_dir_orphaningcommit+0x5f0>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c60:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8007c64:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007c68:	2000      	movs	r0, #0
 8007c6a:	9001      	str	r0, [sp, #4]
 8007c6c:	2002      	movs	r0, #2
 8007c6e:	9000      	str	r0, [sp, #0]
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7ff fa81 	bl	8007178 <lfs_dir_relocatingcommit>
 8007c76:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8007c7a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fc fc9d 	bl	80045be <lfs_pair_fromle32>
            if (state < 0) {
 8007c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	da02      	bge.n	8007c92 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8007c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c90:	e015      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8007c92:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8007c96:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8007c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007ca2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8007ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	f43f adfe 	beq.w	80078ac <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8007cb0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <lfs_dir_orphaningcommit+0x5d8>
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e000      	b.n	8007cbe <lfs_dir_orphaningcommit+0x5da>
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	37e0      	adds	r7, #224	; 0xe0
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	0800c000 	.word	0x0800c000
 8007ccc:	0800bf0c 	.word	0x0800bf0c
 8007cd0:	0800c1bc 	.word	0x0800c1bc
 8007cd4:	000ffc08 	.word	0x000ffc08

08007cd8 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	68b9      	ldr	r1, [r7, #8]
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7ff fcf9 	bl	80076e4 <lfs_dir_orphaningcommit>
 8007cf2:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da01      	bge.n	8007cfe <lfs_dir_commit+0x26>
        return orphans;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	e00d      	b.n	8007d1a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d009      	beq.n	8007d18 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8007d04:	2100      	movs	r1, #0
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f002 fac2 	bl	800a290 <lfs_fs_deorphan>
 8007d0c:	6138      	str	r0, [r7, #16]
        if (err) {
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <lfs_dir_commit+0x40>
            return err;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	e000      	b.n	8007d1a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8007d22:	b590      	push	{r4, r7, lr}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	3b08      	subs	r3, #8
 8007d3a:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d44:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <lfs_ctz_index+0x2e>
        return 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e01c      	b.n	8007d8a <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fb ffbb 	bl	8003cd0 <lfs_popc>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	1ad2      	subs	r2, r2, r3
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6a:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	fb02 f303 	mul.w	r3, r2, r3
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	1ad4      	subs	r4, r2, r3
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7fb ffa9 	bl	8003cd0 <lfs_popc>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	1ae2      	subs	r2, r4, r3
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	601a      	str	r2, [r3, #0]
    return i;
 8007d88:	68fb      	ldr	r3, [r7, #12]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd90      	pop	{r4, r7, pc}

08007d92 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8007d92:	b590      	push	{r4, r7, lr}
 8007d94:	b08f      	sub	sp, #60	; 0x3c
 8007d96:	af04      	add	r7, sp, #16
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d108      	bne.n	8007db8 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8007da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dac:	601a      	str	r2, [r3, #0]
        *off = 0;
 8007dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
        return 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	e053      	b.n	8007e60 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	617b      	str	r3, [r7, #20]
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff ffac 	bl	8007d22 <lfs_ctz_index>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8007dce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7ff ffa4 	bl	8007d22 <lfs_ctz_index>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8007dde:	e034      	b.n	8007e4a <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8007de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	3301      	adds	r3, #1
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fb ff52 	bl	8003c92 <lfs_npw2>
 8007dee:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8007df0:	1e5c      	subs	r4, r3, #1
 8007df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007df4:	f7fb ff5d 	bl	8003cb2 <lfs_ctz>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f7fb ff11 	bl	8003c24 <lfs_min>
 8007e02:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	0092      	lsls	r2, r2, #2
 8007e0a:	2104      	movs	r1, #4
 8007e0c:	9103      	str	r1, [sp, #12]
 8007e0e:	4639      	mov	r1, r7
 8007e10:	9102      	str	r1, [sp, #8]
 8007e12:	9201      	str	r2, [sp, #4]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	2304      	movs	r3, #4
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	68b9      	ldr	r1, [r7, #8]
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7fb ffdd 	bl	8003ddc <lfs_bd_read>
 8007e22:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fb ff6c 	bl	8003d04 <lfs_fromle32>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	603b      	str	r3, [r7, #0]
        if (err) {
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <lfs_ctz_find+0xa8>
            return err;
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	e012      	b.n	8007e60 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8007e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d8c6      	bhi.n	8007de0 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e56:	601a      	str	r2, [r3, #0]
    *off = pos;
 8007e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e5c:	601a      	str	r2, [r3, #0]
    return 0;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	372c      	adds	r7, #44	; 0x2c
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd90      	pop	{r4, r7, pc}

08007e68 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b092      	sub	sp, #72	; 0x48
 8007e6c:	af04      	add	r7, sp, #16
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8007e76:	f107 0320 	add.w	r3, r7, #32
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7fc fefb 	bl	8004c78 <lfs_alloc>
 8007e82:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <lfs_ctz_extend+0x26>
            return err;
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	e0e9      	b.n	8008062 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	4619      	mov	r1, r3
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7fc fada 	bl	800444c <lfs_bd_erase>
 8007e98:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d006      	beq.n	8007eae <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8007ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007ea6:	f000 80cb 	beq.w	8008040 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	e0d9      	b.n	8008062 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8007eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d107      	bne.n	8007ec4 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8007eb4:	6a3a      	ldr	r2, [r7, #32]
 8007eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb8:	601a      	str	r2, [r3, #0]
                *off = 0;
 8007eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	601a      	str	r2, [r3, #0]
                return 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e0ce      	b.n	8008062 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8007ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8007eca:	f107 031c 	add.w	r3, r7, #28
 8007ece:	4619      	mov	r1, r3
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff ff26 	bl	8007d22 <lfs_ctz_index>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	3301      	adds	r3, #1
 8007ede:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ee4:	69da      	ldr	r2, [r3, #28]
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d044      	beq.n	8007f76 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8007eec:	2300      	movs	r3, #0
 8007eee:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef0:	e035      	b.n	8007f5e <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef6:	1ad2      	subs	r2, r2, r3
 8007ef8:	2301      	movs	r3, #1
 8007efa:	9303      	str	r3, [sp, #12]
 8007efc:	f107 0317 	add.w	r3, r7, #23
 8007f00:	9302      	str	r3, [sp, #8]
 8007f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	2100      	movs	r1, #0
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7fb ff63 	bl	8003ddc <lfs_bd_read>
 8007f16:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8007f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <lfs_ctz_extend+0xba>
                        return err;
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	e09f      	b.n	8008062 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	2201      	movs	r2, #1
 8007f26:	9203      	str	r2, [sp, #12]
 8007f28:	f107 0217 	add.w	r2, r7, #23
 8007f2c:	9202      	str	r2, [sp, #8]
 8007f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f30:	9201      	str	r2, [sp, #4]
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	2301      	movs	r3, #1
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7fc f9da 	bl	80042f4 <lfs_bd_prog>
 8007f40:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007f4e:	d101      	bne.n	8007f54 <lfs_ctz_extend+0xec>
                            goto relocate;
 8007f50:	bf00      	nop
                    goto relocate;
 8007f52:	e075      	b.n	8008040 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8007f56:	e084      	b.n	8008062 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8007f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d3c5      	bcc.n	8007ef2 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8007f66:	6a3a      	ldr	r2, [r7, #32]
 8007f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f6a:	601a      	str	r2, [r3, #0]
                *off = noff;
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f70:	601a      	str	r2, [r3, #0]
                return 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e075      	b.n	8008062 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	3301      	adds	r3, #1
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8007f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f7e:	f7fb fe98 	bl	8003cb2 <lfs_ctz>
 8007f82:	4603      	mov	r3, r0
 8007f84:	3301      	adds	r3, #1
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f90:	e049      	b.n	8008026 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fb fec0 	bl	8003d1a <lfs_tole32>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa2:	0092      	lsls	r2, r2, #2
 8007fa4:	2104      	movs	r1, #4
 8007fa6:	9103      	str	r1, [sp, #12]
 8007fa8:	f107 0118 	add.w	r1, r7, #24
 8007fac:	9102      	str	r1, [sp, #8]
 8007fae:	9201      	str	r2, [sp, #4]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f7fc f99b 	bl	80042f4 <lfs_bd_prog>
 8007fbe:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fb fe9e 	bl	8003d04 <lfs_fromle32>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	61bb      	str	r3, [r7, #24]
                if (err) {
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d005      	beq.n	8007fde <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8007fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007fd8:	d034      	beq.n	8008044 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	e041      	b.n	8008062 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d01b      	beq.n	8008020 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fec:	0092      	lsls	r2, r2, #2
 8007fee:	2104      	movs	r1, #4
 8007ff0:	9103      	str	r1, [sp, #12]
 8007ff2:	f107 0118 	add.w	r1, r7, #24
 8007ff6:	9102      	str	r1, [sp, #8]
 8007ff8:	9201      	str	r2, [sp, #4]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	2100      	movs	r1, #0
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7fb feea 	bl	8003ddc <lfs_bd_read>
 8008008:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	4618      	mov	r0, r3
 800800e:	f7fb fe79 	bl	8003d04 <lfs_fromle32>
 8008012:	4603      	mov	r3, r0
 8008014:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <lfs_ctz_extend+0x1b8>
                        return err;
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	e020      	b.n	8008062 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	3301      	adds	r3, #1
 8008024:	633b      	str	r3, [r7, #48]	; 0x30
 8008026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	429a      	cmp	r2, r3
 800802c:	d3b1      	bcc.n	8007f92 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800802e:	6a3a      	ldr	r2, [r7, #32]
 8008030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008032:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	009a      	lsls	r2, r3, #2
 8008038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800803a:	601a      	str	r2, [r3, #0]
            return 0;
 800803c:	2300      	movs	r3, #0
 800803e:	e010      	b.n	8008062 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8008040:	bf00      	nop
 8008042:	e000      	b.n	8008046 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8008044:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	4a08      	ldr	r2, [pc, #32]	; (800806c <lfs_ctz_extend+0x204>)
 800804a:	9200      	str	r2, [sp, #0]
 800804c:	f640 327d 	movw	r2, #2941	; 0xb7d
 8008050:	4907      	ldr	r1, [pc, #28]	; (8008070 <lfs_ctz_extend+0x208>)
 8008052:	4808      	ldr	r0, [pc, #32]	; (8008074 <lfs_ctz_extend+0x20c>)
 8008054:	f003 f82e 	bl	800b0b4 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8008058:	68b9      	ldr	r1, [r7, #8]
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f7fb fe98 	bl	8003d90 <lfs_cache_drop>
    while (true) {
 8008060:	e709      	b.n	8007e76 <lfs_ctz_extend+0xe>
    }
}
 8008062:	4618      	mov	r0, r3
 8008064:	3738      	adds	r7, #56	; 0x38
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	0800c000 	.word	0x0800c000
 8008070:	0800bf0c 	.word	0x0800bf0c
 8008074:	0800c080 	.word	0x0800c080

08008078 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8008078:	b580      	push	{r7, lr}
 800807a:	b090      	sub	sp, #64	; 0x40
 800807c:	af04      	add	r7, sp, #16
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
 8008084:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <lfs_ctz_traverse+0x18>
        return 0;
 800808c:	2300      	movs	r3, #0
 800808e:	e06b      	b.n	8008168 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	3b01      	subs	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
 8008096:	f107 031c 	add.w	r3, r7, #28
 800809a:	4619      	mov	r1, r3
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff fe40 	bl	8007d22 <lfs_ctz_index>
 80080a2:	4603      	mov	r3, r0
 80080a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 80080a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80080ac:	4798      	blx	r3
 80080ae:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <lfs_ctz_traverse+0x42>
            return err;
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	e056      	b.n	8008168 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 80080ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <lfs_ctz_traverse+0x4c>
            return 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e051      	b.n	8008168 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	f003 0301 	and.w	r3, r3, #1
 80080ca:	f1c3 0302 	rsb	r3, r3, #2
 80080ce:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 80080d0:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 80080d2:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 80080d4:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 80080d6:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	f107 0314 	add.w	r3, r7, #20
 80080de:	9302      	str	r3, [sp, #8]
 80080e0:	2300      	movs	r3, #0
 80080e2:	9301      	str	r3, [sp, #4]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	4613      	mov	r3, r2
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f7fb fe74 	bl	8003ddc <lfs_bd_read>
 80080f4:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fb fe03 	bl	8003d04 <lfs_fromle32>
 80080fe:	4603      	mov	r3, r0
 8008100:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	4618      	mov	r0, r3
 8008106:	f7fb fdfd 	bl	8003d04 <lfs_fromle32>
 800810a:	4603      	mov	r3, r0
 800810c:	61bb      	str	r3, [r7, #24]
        if (err) {
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <lfs_ctz_traverse+0xa0>
            return err;
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	e027      	b.n	8008168 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8008118:	2300      	movs	r3, #0
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28
 800811c:	e012      	b.n	8008144 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	3330      	adds	r3, #48	; 0x30
 8008124:	443b      	add	r3, r7
 8008126:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800812a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812c:	4611      	mov	r1, r2
 800812e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008130:	4798      	blx	r3
 8008132:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <lfs_ctz_traverse+0xc6>
                return err;
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	e014      	b.n	8008168 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	3301      	adds	r3, #1
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	3b01      	subs	r3, #1
 8008148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800814a:	429a      	cmp	r2, r3
 800814c:	dbe7      	blt.n	800811e <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	3b01      	subs	r3, #1
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	3330      	adds	r3, #48	; 0x30
 8008156:	443b      	add	r3, r7
 8008158:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800815c:	603b      	str	r3, [r7, #0]
        index -= count;
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8008166:	e79e      	b.n	80080a6 <lfs_ctz_traverse+0x2e>
    }
}
 8008168:	4618      	mov	r0, r3
 800816a:	3730      	adds	r7, #48	; 0x30
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8008170:	b5b0      	push	{r4, r5, r7, lr}
 8008172:	b09a      	sub	sp, #104	; 0x68
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d008      	beq.n	800819a <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f002 fa31 	bl	800a5f0 <lfs_fs_forceconsistency>
 800818e:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8008190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <lfs_file_rawopencfg+0x2a>
            return err;
 8008196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008198:	e1b0      	b.n	80084fc <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800819e:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2200      	movs	r2, #0
 80081aa:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2200      	movs	r2, #0
 80081b0:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2200      	movs	r2, #0
 80081b6:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f103 0108 	add.w	r1, r3, #8
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	3304      	adds	r3, #4
 80081c2:	1d3a      	adds	r2, r7, #4
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7fe f889 	bl	80062dc <lfs_dir_find>
 80081ca:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 80081cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da0c      	bge.n	80081ec <lfs_file_rawopencfg+0x7c>
 80081d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081d4:	f113 0f02 	cmn.w	r3, #2
 80081d8:	d105      	bne.n	80081e6 <lfs_file_rawopencfg+0x76>
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	889b      	ldrh	r3, [r3, #4]
 80081de:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d102      	bne.n	80081ec <lfs_file_rawopencfg+0x7c>
        err = tag;
 80081e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081e8:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80081ea:	e17c      	b.n	80084e6 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2201      	movs	r2, #1
 80081f0:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80081f2:	68b9      	ldr	r1, [r7, #8]
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7fc fcac 	bl	8004b52 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80081fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081fc:	f113 0f02 	cmn.w	r3, #2
 8008200:	d14e      	bne.n	80082a0 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008208:	2b00      	cmp	r3, #0
 800820a:	d103      	bne.n	8008214 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 800820c:	f06f 0301 	mvn.w	r3, #1
 8008210:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8008212:	e168      	b.n	80084e6 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4618      	mov	r0, r3
 8008218:	f7f7 ffda 	bl	80001d0 <strlen>
 800821c:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008222:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008224:	429a      	cmp	r2, r3
 8008226:	d903      	bls.n	8008230 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8008228:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800822c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800822e:	e15a      	b.n	80084e6 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f103 0108 	add.w	r1, r3, #8
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	889b      	ldrh	r3, [r3, #4]
 800823a:	029b      	lsls	r3, r3, #10
 800823c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008246:	2300      	movs	r3, #0
 8008248:	633b      	str	r3, [r7, #48]	; 0x30
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	889b      	ldrh	r3, [r3, #4]
 800824e:	029a      	lsls	r2, r3, #10
 8008250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008252:	4313      	orrs	r3, r2
 8008254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008258:	637b      	str	r3, [r7, #52]	; 0x34
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	63bb      	str	r3, [r7, #56]	; 0x38
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	889b      	ldrh	r3, [r3, #4]
 8008262:	029b      	lsls	r3, r3, #10
 8008264:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800826c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800826e:	2300      	movs	r3, #0
 8008270:	643b      	str	r3, [r7, #64]	; 0x40
 8008272:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008276:	2303      	movs	r3, #3
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f7ff fd2d 	bl	8007cd8 <lfs_dir_commit>
 800827e:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8008280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008282:	f113 0f1c 	cmn.w	r3, #28
 8008286:	d001      	beq.n	800828c <lfs_file_rawopencfg+0x11c>
 8008288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800828a:	e001      	b.n	8008290 <lfs_file_rawopencfg+0x120>
 800828c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8008290:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8008292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008294:	2b00      	cmp	r3, #0
 8008296:	f040 8125 	bne.w	80084e4 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800829a:	4b9a      	ldr	r3, [pc, #616]	; (8008504 <lfs_file_rawopencfg+0x394>)
 800829c:	65bb      	str	r3, [r7, #88]	; 0x58
 800829e:	e044      	b.n	800832a <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 80082aa:	f06f 0310 	mvn.w	r3, #16
 80082ae:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80082b0:	e119      	b.n	80084e6 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80082b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fc f9f7 	bl	80046a8 <lfs_tag_type3>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d003      	beq.n	80082c8 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 80082c0:	f06f 0314 	mvn.w	r3, #20
 80082c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80082c6:	e10e      	b.n	80084e6 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00e      	beq.n	80082f0 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	889b      	ldrh	r3, [r3, #4]
 80082d6:	029b      	lsls	r3, r3, #10
 80082d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082e0:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	631a      	str	r2, [r3, #48]	; 0x30
 80082ee:	e01c      	b.n	800832a <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	889b      	ldrh	r3, [r3, #4]
 80082fa:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80082fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008300:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008308:	9200      	str	r2, [sp, #0]
 800830a:	4a7f      	ldr	r2, [pc, #508]	; (8008508 <lfs_file_rawopencfg+0x398>)
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f7fc fe4d 	bl	8004fac <lfs_dir_get>
 8008312:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8008314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008316:	2b00      	cmp	r3, #0
 8008318:	da02      	bge.n	8008320 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 800831a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800831c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800831e:	e0e2      	b.n	80084e6 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	3328      	adds	r3, #40	; 0x28
 8008324:	4618      	mov	r0, r3
 8008326:	f7fc fb35 	bl	8004994 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800832a:	2300      	movs	r3, #0
 800832c:	657b      	str	r3, [r7, #84]	; 0x54
 800832e:	e063      	b.n	80083f8 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	d03c      	beq.n	80083b6 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008346:	6859      	ldr	r1, [r3, #4]
 8008348:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800834a:	4613      	mov	r3, r2
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	440b      	add	r3, r1
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800835a:	051a      	lsls	r2, r3, #20
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	889b      	ldrh	r3, [r3, #4]
 8008360:	029b      	lsls	r3, r3, #10
 8008362:	ea42 0103 	orr.w	r1, r2, r3
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836a:	6858      	ldr	r0, [r3, #4]
 800836c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800836e:	4613      	mov	r3, r2
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4403      	add	r3, r0
 8008378:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800837a:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008382:	6859      	ldr	r1, [r3, #4]
 8008384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008386:	4613      	mov	r3, r2
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	4603      	mov	r3, r0
 8008396:	4a5d      	ldr	r2, [pc, #372]	; (800850c <lfs_file_rawopencfg+0x39c>)
 8008398:	4621      	mov	r1, r4
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f7fc fe06 	bl	8004fac <lfs_dir_get>
 80083a0:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 80083a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	da06      	bge.n	80083b6 <lfs_file_rawopencfg+0x246>
 80083a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083aa:	f113 0f02 	cmn.w	r3, #2
 80083ae:	d002      	beq.n	80083b6 <lfs_file_rawopencfg+0x246>
                err = res;
 80083b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083b2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80083b4:	e097      	b.n	80084e6 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d017      	beq.n	80083f2 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c6:	6859      	ldr	r1, [r3, #4]
 80083c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083ca:	4613      	mov	r3, r2
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	689a      	ldr	r2, [r3, #8]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083da:	429a      	cmp	r2, r3
 80083dc:	d903      	bls.n	80083e6 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 80083de:	f06f 031b 	mvn.w	r3, #27
 80083e2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80083e4:	e07f      	b.n	80084e6 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80083f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083f4:	3301      	adds	r3, #1
 80083f6:	657b      	str	r3, [r7, #84]	; 0x54
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008400:	429a      	cmp	r2, r3
 8008402:	d395      	bcc.n	8008330 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d005      	beq.n	800841a <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	64da      	str	r2, [r3, #76]	; 0x4c
 8008418:	e010      	b.n	800843c <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800841e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008420:	4618      	mov	r0, r3
 8008422:	f7fb fc9e 	bl	8003d62 <lfs_malloc>
 8008426:	4602      	mov	r2, r0
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8008434:	f06f 030b 	mvn.w	r3, #11
 8008438:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800843a:	e054      	b.n	80084e6 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	3340      	adds	r3, #64	; 0x40
 8008440:	4619      	mov	r1, r3
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7fb fcb3 	bl	8003dae <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8008448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800844a:	4618      	mov	r0, r3
 800844c:	f7fc f92c 	bl	80046a8 <lfs_tag_type3>
 8008450:	4603      	mov	r3, r0
 8008452:	461a      	mov	r2, r3
 8008454:	f240 2301 	movw	r3, #513	; 0x201
 8008458:	429a      	cmp	r2, r3
 800845a:	d141      	bne.n	80084e0 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f06f 0201 	mvn.w	r2, #1
 8008462:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8008464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008466:	4618      	mov	r0, r3
 8008468:	f7fc f958 	bl	800471c <lfs_tag_size>
 800846c:	4602      	mov	r2, r0
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008476:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2200      	movs	r2, #0
 800848a:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849a:	2b00      	cmp	r3, #0
 800849c:	d020      	beq.n	80084e0 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	889b      	ldrh	r3, [r3, #4]
 80084a8:	029c      	lsls	r4, r3, #10
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ae:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fb fbb6 	bl	8003c24 <lfs_min>
 80084b8:	4603      	mov	r3, r0
 80084ba:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80084bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	4613      	mov	r3, r2
 80084c8:	4a0f      	ldr	r2, [pc, #60]	; (8008508 <lfs_file_rawopencfg+0x398>)
 80084ca:	4629      	mov	r1, r5
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f7fc fd6d 	bl	8004fac <lfs_dir_get>
 80084d2:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 80084d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da02      	bge.n	80084e0 <lfs_file_rawopencfg+0x370>
                err = res;
 80084da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80084de:	e002      	b.n	80084e6 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	e00b      	b.n	80084fc <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 80084e4:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 80084f2:	68b9      	ldr	r1, [r7, #8]
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 f823 	bl	8008540 <lfs_file_rawclose>
    return err;
 80084fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3760      	adds	r7, #96	; 0x60
 8008500:	46bd      	mov	sp, r7
 8008502:	bdb0      	pop	{r4, r5, r7, pc}
 8008504:	20100000 	.word	0x20100000
 8008508:	700ffc00 	.word	0x700ffc00
 800850c:	7ffffc00 	.word	0x7ffffc00

08008510 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af02      	add	r7, sp, #8
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 800851e:	4b07      	ldr	r3, [pc, #28]	; (800853c <lfs_file_rawopen+0x2c>)
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	68b9      	ldr	r1, [r7, #8]
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff fe21 	bl	8008170 <lfs_file_rawopencfg>
 800852e:	6178      	str	r0, [r7, #20]
    return err;
 8008530:	697b      	ldr	r3, [r7, #20]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	0800cc28 	.word	0x0800cc28

08008540 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f9e5 	bl	800891c <lfs_file_rawsync>
 8008552:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7fc fad9 	bl	8004b0e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d104      	bne.n	8008570 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856a:	4618      	mov	r0, r3
 800856c:	f7fb fc05 	bl	8003d7a <lfs_free>
    }

    return err;
 8008570:	68fb      	ldr	r3, [r7, #12]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800857c:	b590      	push	{r4, r7, lr}
 800857e:	b08d      	sub	sp, #52	; 0x34
 8008580:	af06      	add	r7, sp, #24
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8008586:	f107 030c 	add.w	r3, r7, #12
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7fc fb73 	bl	8004c78 <lfs_alloc>
 8008592:	6138      	str	r0, [r7, #16]
        if (err) {
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <lfs_file_relocate+0x22>
            return err;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	e0bb      	b.n	8008716 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fb ff52 	bl	800444c <lfs_bd_erase>
 80085a8:	6138      	str	r0, [r7, #16]
        if (err) {
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d006      	beq.n	80085be <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80085b6:	f000 809b 	beq.w	80086f0 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	e0ab      	b.n	8008716 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	e069      	b.n	8008698 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d027      	beq.n	8008620 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	f103 0008 	add.w	r0, r3, #8
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	889b      	ldrh	r3, [r3, #4]
 80085e8:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80085ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085f2:	2101      	movs	r1, #1
 80085f4:	9105      	str	r1, [sp, #20]
 80085f6:	f107 010b 	add.w	r1, r7, #11
 80085fa:	9104      	str	r1, [sp, #16]
 80085fc:	6979      	ldr	r1, [r7, #20]
 80085fe:	9103      	str	r1, [sp, #12]
 8008600:	9302      	str	r3, [sp, #8]
 8008602:	4b47      	ldr	r3, [pc, #284]	; (8008720 <lfs_file_relocate+0x1a4>)
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	9200      	str	r2, [sp, #0]
 8008608:	4623      	mov	r3, r4
 800860a:	2200      	movs	r2, #0
 800860c:	4601      	mov	r1, r0
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7fc fce7 	bl	8004fe2 <lfs_dir_getread>
 8008614:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01e      	beq.n	800865a <lfs_file_relocate+0xde>
                    return err;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	e07a      	b.n	8008716 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8008626:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	1ad4      	subs	r4, r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008634:	2201      	movs	r2, #1
 8008636:	9203      	str	r2, [sp, #12]
 8008638:	f107 020b 	add.w	r2, r7, #11
 800863c:	9202      	str	r2, [sp, #8]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	9201      	str	r2, [sp, #4]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	4623      	mov	r3, r4
 8008646:	4602      	mov	r2, r0
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7fb fbc7 	bl	8003ddc <lfs_bd_read>
 800864e:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <lfs_file_relocate+0xde>
                    return err;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	e05d      	b.n	8008716 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f103 0110 	add.w	r1, r3, #16
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2201      	movs	r2, #1
 8008666:	9203      	str	r2, [sp, #12]
 8008668:	f107 020b 	add.w	r2, r7, #11
 800866c:	9202      	str	r2, [sp, #8]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	9201      	str	r2, [sp, #4]
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	2301      	movs	r3, #1
 8008676:	4602      	mov	r2, r0
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7fb fe3b 	bl	80042f4 <lfs_bd_prog>
 800867e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d005      	beq.n	8008692 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800868c:	d032      	beq.n	80086f4 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	e041      	b.n	8008716 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	3301      	adds	r3, #1
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d390      	bcc.n	80085c4 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	69d9      	ldr	r1, [r3, #28]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b0:	461a      	mov	r2, r3
 80086b2:	f002 fe25 	bl	800b300 <memcpy>
        file->cache.block = lfs->pcache.block;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691a      	ldr	r2, [r3, #16]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	695a      	ldr	r2, [r3, #20]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3310      	adds	r3, #16
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7fb fb6a 	bl	8003dae <lfs_cache_zero>

        file->block = nblock;
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e012      	b.n	8008716 <lfs_file_relocate+0x19a>
                goto relocate;
 80086f0:	bf00      	nop
 80086f2:	e000      	b.n	80086f6 <lfs_file_relocate+0x17a>
                    goto relocate;
 80086f4:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4a0a      	ldr	r2, [pc, #40]	; (8008724 <lfs_file_relocate+0x1a8>)
 80086fa:	9200      	str	r2, [sp, #0]
 80086fc:	f640 42b3 	movw	r2, #3251	; 0xcb3
 8008700:	4909      	ldr	r1, [pc, #36]	; (8008728 <lfs_file_relocate+0x1ac>)
 8008702:	480a      	ldr	r0, [pc, #40]	; (800872c <lfs_file_relocate+0x1b0>)
 8008704:	f002 fcd6 	bl	800b0b4 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3310      	adds	r3, #16
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7fb fb3e 	bl	8003d90 <lfs_cache_drop>
    while (true) {
 8008714:	e737      	b.n	8008586 <lfs_file_relocate+0xa>
    }
}
 8008716:	4618      	mov	r0, r3
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	bd90      	pop	{r4, r7, pc}
 800871e:	bf00      	nop
 8008720:	fff7fc00 	.word	0xfff7fc00
 8008724:	0800c000 	.word	0x0800c000
 8008728:	0800bf0c 	.word	0x0800bf0c
 800872c:	0800c080 	.word	0x0800c080

08008730 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7fc fa78 	bl	8004c38 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7ff ff16 	bl	800857c <lfs_file_relocate>
 8008750:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <lfs_file_outline+0x2c>
        return err;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	e006      	b.n	800876a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008760:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8008774:	b590      	push	{r4, r7, lr}
 8008776:	b09f      	sub	sp, #124	; 0x7c
 8008778:	af02      	add	r7, sp, #8
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d011      	beq.n	80087ae <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d105      	bne.n	80087a2 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	3340      	adds	r3, #64	; 0x40
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7fb faf7 	bl	8003d90 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80a4 	beq.w	8008904 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c0:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d176      	bne.n	80088bc <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80087ce:	f107 030c 	add.w	r3, r7, #12
 80087d2:	2254      	movs	r2, #84	; 0x54
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f002 fcd9 	bl	800b18e <memset>
                .ctz.head = file->ctz.head,
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80087e0:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80087e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80087e8:	2301      	movs	r3, #1
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80087f0:	643b      	str	r3, [r7, #64]	; 0x40
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80087f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80087fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fb fac4 	bl	8003d90 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8008808:	e02b      	b.n	8008862 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800880a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800880e:	f107 010c 	add.w	r1, r7, #12
 8008812:	2301      	movs	r3, #1
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f90d 	bl	8008a34 <lfs_file_flushedread>
 800881a:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800881c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800881e:	2b00      	cmp	r3, #0
 8008820:	da01      	bge.n	8008826 <lfs_file_flush+0xb2>
                    return res;
 8008822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008824:	e06f      	b.n	8008906 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8008826:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800882a:	2301      	movs	r3, #1
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fa08 	bl	8008c44 <lfs_file_flushedwrite>
 8008834:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8008836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008838:	2b00      	cmp	r3, #0
 800883a:	da01      	bge.n	8008840 <lfs_file_flush+0xcc>
                    return res;
 800883c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800883e:	e062      	b.n	8008906 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008848:	d00b      	beq.n	8008862 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800884a:	f107 030c 	add.w	r3, r7, #12
 800884e:	3340      	adds	r3, #64	; 0x40
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7fb fa9c 	bl	8003d90 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7fb fa97 	bl	8003d90 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886a:	429a      	cmp	r2, r3
 800886c:	d3cd      	bcc.n	800880a <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	2301      	movs	r3, #1
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7fb fc8b 	bl	8004194 <lfs_bd_flush>
 800887e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8008880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008882:	2b00      	cmp	r3, #0
 8008884:	d026      	beq.n	80088d4 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8008886:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008888:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800888c:	d001      	beq.n	8008892 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800888e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008890:	e039      	b.n	8008906 <lfs_file_flush+0x192>
                        goto relocate;
 8008892:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	4a1d      	ldr	r2, [pc, #116]	; (8008910 <lfs_file_flush+0x19c>)
 800889a:	9200      	str	r2, [sp, #0]
 800889c:	f640 5202 	movw	r2, #3330	; 0xd02
 80088a0:	491c      	ldr	r1, [pc, #112]	; (8008914 <lfs_file_flush+0x1a0>)
 80088a2:	481d      	ldr	r0, [pc, #116]	; (8008918 <lfs_file_flush+0x1a4>)
 80088a4:	f002 fc06 	bl	800b0b4 <iprintf>
                err = lfs_file_relocate(lfs, file);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fe66 	bl	800857c <lfs_file_relocate>
 80088b0:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80088b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0da      	beq.n	800886e <lfs_file_flush+0xfa>
                    return err;
 80088b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088ba:	e024      	b.n	8008906 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	4619      	mov	r1, r3
 80088c6:	4610      	mov	r0, r2
 80088c8:	f7fb f99c 	bl	8003c04 <lfs_max>
 80088cc:	4602      	mov	r2, r0
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	635a      	str	r2, [r3, #52]	; 0x34
 80088d2:	e000      	b.n	80088d6 <lfs_file_flush+0x162>
                break;
 80088d4:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008902:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3774      	adds	r7, #116	; 0x74
 800890a:	46bd      	mov	sp, r7
 800890c:	bd90      	pop	{r4, r7, pc}
 800890e:	bf00      	nop
 8008910:	0800c000 	.word	0x0800c000
 8008914:	0800bf0c 	.word	0x0800bf0c
 8008918:	0800c080 	.word	0x0800c080

0800891c <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800891c:	b580      	push	{r7, lr}
 800891e:	b090      	sub	sp, #64	; 0x40
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8008932:	2300      	movs	r3, #0
 8008934:	e07a      	b.n	8008a2c <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff ff1b 	bl	8008774 <lfs_file_flush>
 800893e:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	2b00      	cmp	r3, #0
 8008944:	d007      	beq.n	8008956 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	e06a      	b.n	8008a2c <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d063      	beq.n	8008a2a <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	3308      	adds	r3, #8
 8008966:	4618      	mov	r0, r3
 8008968:	f7fb fdb7 	bl	80044da <lfs_pair_isnull>
 800896c:	4603      	mov	r3, r0
 800896e:	f083 0301 	eor.w	r3, r3, #1
 8008972:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8008974:	2b00      	cmp	r3, #0
 8008976:	d058      	beq.n	8008a2a <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d009      	beq.n	8008998 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8008984:	f240 2301 	movw	r3, #513	; 0x201
 8008988:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898e:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	637b      	str	r3, [r7, #52]	; 0x34
 8008996:	e014      	b.n	80089c2 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8008998:	f240 2302 	movw	r3, #514	; 0x202
 800899c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089a4:	3228      	adds	r2, #40	; 0x28
 80089a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80089aa:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80089ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fc f806 	bl	80049c4 <lfs_ctz_tole32>
            buffer = &ctz;
 80089b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089bc:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 80089be:	2308      	movs	r3, #8
 80089c0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	f103 0108 	add.w	r1, r3, #8
 80089c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80089ca:	051a      	lsls	r2, r3, #20
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	889b      	ldrh	r3, [r3, #4]
 80089d0:	029b      	lsls	r3, r3, #10
 80089d2:	431a      	orrs	r2, r3
 80089d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d6:	4313      	orrs	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	61fb      	str	r3, [r7, #28]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	889b      	ldrh	r3, [r3, #4]
 80089e2:	029a      	lsls	r2, r3, #10
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80089f0:	623b      	str	r3, [r7, #32]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	627b      	str	r3, [r7, #36]	; 0x24
 80089fa:	f107 0218 	add.w	r2, r7, #24
 80089fe:	2302      	movs	r3, #2
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff f969 	bl	8007cd8 <lfs_dir_commit>
 8008a06:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d007      	beq.n	8008a1e <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	e006      	b.n	8008a2c <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3740      	adds	r7, #64	; 0x40
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008a34:	b5b0      	push	{r4, r5, r7, lr}
 8008a36:	b090      	sub	sp, #64	; 0x40
 8008a38:	af06      	add	r7, sp, #24
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d301      	bcc.n	8008a5a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	e0b7      	b.n	8008bca <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	4619      	mov	r1, r3
 8008a66:	6838      	ldr	r0, [r7, #0]
 8008a68:	f7fb f8dc 	bl	8003c24 <lfs_min>
 8008a6c:	6038      	str	r0, [r7, #0]
    nsize = size;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8008a72:	e0a5      	b.n	8008bc0 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d006      	beq.n	8008a8e <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a88:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d130      	bne.n	8008af0 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d11c      	bne.n	8008ad4 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008aac:	68b9      	ldr	r1, [r7, #8]
 8008aae:	3138      	adds	r1, #56	; 0x38
 8008ab0:	68b8      	ldr	r0, [r7, #8]
 8008ab2:	303c      	adds	r0, #60	; 0x3c
 8008ab4:	9003      	str	r0, [sp, #12]
 8008ab6:	9102      	str	r1, [sp, #8]
 8008ab8:	9201      	str	r2, [sp, #4]
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	462b      	mov	r3, r5
 8008abe:	4622      	mov	r2, r4
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f7ff f965 	bl	8007d92 <lfs_ctz_find>
 8008ac8:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d009      	beq.n	8008ae4 <lfs_file_flushedread+0xb0>
                    return err;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	e07a      	b.n	8008bca <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f06f 0201 	mvn.w	r2, #1
 8008ada:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008af4:	69da      	ldr	r2, [r3, #28]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	4619      	mov	r1, r3
 8008afe:	6a38      	ldr	r0, [r7, #32]
 8008b00:	f7fb f890 	bl	8003c24 <lfs_min>
 8008b04:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d026      	beq.n	8008b60 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	f103 0408 	add.w	r4, r3, #8
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b22:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	889b      	ldrh	r3, [r3, #4]
 8008b28:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8008b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b32:	68b9      	ldr	r1, [r7, #8]
 8008b34:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8008b36:	69b8      	ldr	r0, [r7, #24]
 8008b38:	9005      	str	r0, [sp, #20]
 8008b3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b3c:	9004      	str	r0, [sp, #16]
 8008b3e:	9103      	str	r1, [sp, #12]
 8008b40:	9302      	str	r3, [sp, #8]
 8008b42:	4b24      	ldr	r3, [pc, #144]	; (8008bd4 <lfs_file_flushedread+0x1a0>)
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	9200      	str	r2, [sp, #0]
 8008b48:	462b      	mov	r3, r5
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	4621      	mov	r1, r4
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f7fc fa47 	bl	8004fe2 <lfs_dir_getread>
 8008b54:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01d      	beq.n	8008b98 <lfs_file_flushedread+0x164>
                return err;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	e034      	b.n	8008bca <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b6a:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008b74:	69b9      	ldr	r1, [r7, #24]
 8008b76:	9103      	str	r1, [sp, #12]
 8008b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b7a:	9102      	str	r1, [sp, #8]
 8008b7c:	9201      	str	r2, [sp, #4]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	4623      	mov	r3, r4
 8008b82:	4602      	mov	r2, r0
 8008b84:	2100      	movs	r1, #0
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f7fb f928 	bl	8003ddc <lfs_bd_read>
 8008b8c:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <lfs_file_flushedread+0x164>
                return err;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	e018      	b.n	8008bca <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	441a      	add	r2, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	441a      	add	r2, r3
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8008bb8:	6a3a      	ldr	r2, [r7, #32]
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f47f af56 	bne.w	8008a74 <lfs_file_flushedread+0x40>
    }

    return size;
 8008bc8:	683b      	ldr	r3, [r7, #0]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3728      	adds	r7, #40	; 0x28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	fff7fc00 	.word	0xfff7fc00

08008bd8 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
 8008be4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d106      	bne.n	8008c00 <lfs_file_rawread+0x28>
 8008bf2:	4b11      	ldr	r3, [pc, #68]	; (8008c38 <lfs_file_rawread+0x60>)
 8008bf4:	4a11      	ldr	r2, [pc, #68]	; (8008c3c <lfs_file_rawread+0x64>)
 8008bf6:	f640 518d 	movw	r1, #3469	; 0xd8d
 8008bfa:	4811      	ldr	r0, [pc, #68]	; (8008c40 <lfs_file_rawread+0x68>)
 8008bfc:	f002 f8be 	bl	800ad7c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d009      	beq.n	8008c20 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8008c0c:	68b9      	ldr	r1, [r7, #8]
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f7ff fdb0 	bl	8008774 <lfs_file_flush>
 8008c14:	6178      	str	r0, [r7, #20]
        if (err) {
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <lfs_file_rawread+0x48>
            return err;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	e006      	b.n	8008c2e <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f7ff ff04 	bl	8008a34 <lfs_file_flushedread>
 8008c2c:	4603      	mov	r3, r0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	0800c228 	.word	0x0800c228
 8008c3c:	0800cc34 	.word	0x0800cc34
 8008c40:	0800bf0c 	.word	0x0800bf0c

08008c44 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008c44:	b5b0      	push	{r4, r5, r7, lr}
 8008c46:	b090      	sub	sp, #64	; 0x40
 8008c48:	af04      	add	r7, sp, #16
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 810e 	beq.w	8008e84 <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	441a      	add	r2, r3
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f7fa ffc4 	bl	8003c04 <lfs_max>
 8008c7c:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d004      	beq.n	8008c98 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8008c94:	08db      	lsrs	r3, r3, #3
 8008c96:	e003      	b.n	8008ca0 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c9c:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8008c9e:	08db      	lsrs	r3, r3, #3
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	4610      	mov	r0, r2
 8008ca4:	f7fa ffbe 	bl	8003c24 <lfs_min>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	4619      	mov	r1, r3
 8008cac:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8008cb0:	f7fa ffb8 	bl	8003c24 <lfs_min>
 8008cb4:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8008cb6:	429c      	cmp	r4, r3
 8008cb8:	f240 80e4 	bls.w	8008e84 <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8008cbc:	68b9      	ldr	r1, [r7, #8]
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f7ff fd36 	bl	8008730 <lfs_file_outline>
 8008cc4:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 80db 	beq.w	8008e84 <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	e0d7      	b.n	8008e8e <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d006      	beq.n	8008cf8 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cf2:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d16d      	bne.n	8008dd4 <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d159      	bne.n	8008db8 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d12f      	bne.n	8008d70 <lfs_file_flushedwrite+0x12c>
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d02b      	beq.n	8008d70 <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008d2a:	3a01      	subs	r2, #1
 8008d2c:	68b9      	ldr	r1, [r7, #8]
 8008d2e:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8008d30:	2000      	movs	r0, #0
 8008d32:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008d34:	f107 0010 	add.w	r0, r7, #16
 8008d38:	9003      	str	r0, [sp, #12]
 8008d3a:	9102      	str	r1, [sp, #8]
 8008d3c:	9201      	str	r2, [sp, #4]
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	462b      	mov	r3, r5
 8008d42:	4622      	mov	r2, r4
 8008d44:	2100      	movs	r1, #0
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff f823 	bl	8007d92 <lfs_ctz_find>
 8008d4c:	6238      	str	r0, [r7, #32]
                    if (err) {
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d007      	beq.n	8008d64 <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d58:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8008d60:	6a3b      	ldr	r3, [r7, #32]
 8008d62:	e094      	b.n	8008e8e <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	3340      	adds	r3, #64	; 0x40
 8008d68:	4619      	mov	r1, r3
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f7fb f81f 	bl	8003dae <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f7fb ff61 	bl	8004c38 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008d7c:	68fc      	ldr	r4, [r7, #12]
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	3238      	adds	r2, #56	; 0x38
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	313c      	adds	r1, #60	; 0x3c
 8008d8e:	9102      	str	r1, [sp, #8]
 8008d90:	9201      	str	r2, [sp, #4]
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	462b      	mov	r3, r5
 8008d96:	4622      	mov	r2, r4
 8008d98:	4601      	mov	r1, r0
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f7ff f864 	bl	8007e68 <lfs_ctz_extend>
 8008da0:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00f      	beq.n	8008dc8 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	e06a      	b.n	8008e8e <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f06f 0201 	mvn.w	r2, #1
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dcc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dd8:	69da      	ldr	r2, [r3, #28]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	4619      	mov	r1, r3
 8008de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008de4:	f7fa ff1e 	bl	8003c24 <lfs_min>
 8008de8:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008df0:	68fc      	ldr	r4, [r7, #12]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008dfa:	69b9      	ldr	r1, [r7, #24]
 8008dfc:	9103      	str	r1, [sp, #12]
 8008dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e00:	9102      	str	r1, [sp, #8]
 8008e02:	9201      	str	r2, [sp, #4]
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	2301      	movs	r3, #1
 8008e08:	4622      	mov	r2, r4
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7fb fa71 	bl	80042f4 <lfs_bd_prog>
 8008e12:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d01c      	beq.n	8008e54 <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008e20:	d007      	beq.n	8008e32 <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	e02d      	b.n	8008e8e <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 8008e32:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8008e34:	68b9      	ldr	r1, [r7, #8]
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f7ff fba0 	bl	800857c <lfs_file_relocate>
 8008e3c:	6178      	str	r0, [r7, #20]
            if (err) {
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0d2      	beq.n	8008dea <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e48:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	e01c      	b.n	8008e8e <lfs_file_flushedwrite+0x24a>
            break;
 8008e54:	bf00      	nop
            }
        }

        file->pos += diff;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	441a      	add	r2, r3
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	441a      	add	r2, r3
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8008e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	4413      	add	r3, r2
 8008e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8008e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f7fb feda 	bl	8004c38 <lfs_alloc_ack>
    while (nsize > 0) {
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f47f af29 	bne.w	8008cde <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8008e8c:	683b      	ldr	r3, [r7, #0]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3730      	adds	r7, #48	; 0x30
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e98 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08a      	sub	sp, #40	; 0x28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d106      	bne.n	8008ec0 <lfs_file_rawwrite+0x28>
 8008eb2:	4b38      	ldr	r3, [pc, #224]	; (8008f94 <lfs_file_rawwrite+0xfc>)
 8008eb4:	4a38      	ldr	r2, [pc, #224]	; (8008f98 <lfs_file_rawwrite+0x100>)
 8008eb6:	f640 51f8 	movw	r1, #3576	; 0xdf8
 8008eba:	4838      	ldr	r0, [pc, #224]	; (8008f9c <lfs_file_rawwrite+0x104>)
 8008ebc:	f001 ff5e 	bl	800ad7c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d009      	beq.n	8008ee0 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7ff fc50 	bl	8008774 <lfs_file_flush>
 8008ed4:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <lfs_file_rawwrite+0x48>
            return err;
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	e055      	b.n	8008f8c <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d009      	beq.n	8008f00 <lfs_file_rawwrite+0x68>
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d203      	bcs.n	8008f00 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	441a      	add	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d902      	bls.n	8008f16 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8008f10:	f06f 031a 	mvn.w	r3, #26
 8008f14:	e03a      	b.n	8008f8c <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d121      	bne.n	8008f66 <lfs_file_rawwrite+0xce>
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d91b      	bls.n	8008f66 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f32:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8008f3c:	e00e      	b.n	8008f5c <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8008f3e:	2300      	movs	r3, #0
 8008f40:	75fb      	strb	r3, [r7, #23]
 8008f42:	f107 0217 	add.w	r2, r7, #23
 8008f46:	2301      	movs	r3, #1
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f7ff fe7a 	bl	8008c44 <lfs_file_flushedwrite>
 8008f50:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	da01      	bge.n	8008f5c <lfs_file_rawwrite+0xc4>
                return res;
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	e017      	b.n	8008f8c <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f60:	6a3a      	ldr	r2, [r7, #32]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d8eb      	bhi.n	8008f3e <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7ff fe69 	bl	8008c44 <lfs_file_flushedwrite>
 8008f72:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da01      	bge.n	8008f7e <lfs_file_rawwrite+0xe6>
        return nsize;
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	e006      	b.n	8008f8c <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f82:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8008f8a:	69bb      	ldr	r3, [r7, #24]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3728      	adds	r7, #40	; 0x28
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	0800c258 	.word	0x0800c258
 8008f98:	0800cc48 	.word	0x0800cc48
 8008f9c:	0800bf0c 	.word	0x0800bf0c

08008fa0 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08c      	sub	sp, #48	; 0x30
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d102      	bne.n	8008fc0 <lfs_file_rawseek+0x20>
        npos = off;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fbe:	e025      	b.n	800900c <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d10f      	bne.n	8008fe6 <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fca:	461a      	mov	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4413      	add	r3, r2
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	da02      	bge.n	8008fda <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8008fd4:	f06f 0315 	mvn.w	r3, #21
 8008fd8:	e067      	b.n	80090aa <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fe4:	e012      	b.n	800900c <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d10f      	bne.n	800900c <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8008fec:	68b9      	ldr	r1, [r7, #8]
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 f875 	bl	80090de <lfs_file_rawsize>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	da02      	bge.n	8009008 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8009002:	f06f 0315 	mvn.w	r3, #21
 8009006:	e050      	b.n	80090aa <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8009008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009012:	429a      	cmp	r2, r3
 8009014:	d902      	bls.n	800901c <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8009016:	f06f 0315 	mvn.w	r3, #21
 800901a:	e046      	b.n	80090aa <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009022:	429a      	cmp	r2, r3
 8009024:	d101      	bne.n	800902a <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8009026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009028:	e03f      	b.n	80090aa <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8009032:	2b00      	cmp	r3, #0
 8009034:	d12b      	bne.n	800908e <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903a:	61bb      	str	r3, [r7, #24]
 800903c:	f107 0318 	add.w	r3, r7, #24
 8009040:	4619      	mov	r1, r3
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7fe fe6d 	bl	8007d22 <lfs_ctz_index>
 8009048:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 800904e:	f107 0314 	add.w	r3, r7, #20
 8009052:	4619      	mov	r1, r3
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f7fe fe64 	bl	8007d22 <lfs_ctz_index>
 800905a:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 800905c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	429a      	cmp	r2, r3
 8009062:	d114      	bne.n	800908e <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	429a      	cmp	r2, r3
 800906c:	d80f      	bhi.n	800908e <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009076:	441a      	add	r2, r3
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	429a      	cmp	r2, r3
 800907c:	d907      	bls.n	800908e <lfs_file_rawseek+0xee>
            file->pos = npos;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009082:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	e00d      	b.n	80090aa <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f7ff fb6f 	bl	8008774 <lfs_file_flush>
 8009096:	61f8      	str	r0, [r7, #28]
    if (err) {
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <lfs_file_rawseek+0x102>
        return err;
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	e003      	b.n	80090aa <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090a6:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3730      	adds	r7, #48	; 0x30
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <lfs_file_rawrewind>:
static lfs_soff_t lfs_file_rawtell(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 80090bc:	2300      	movs	r3, #0
 80090be:	2200      	movs	r2, #0
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff ff6c 	bl	8008fa0 <lfs_file_rawseek>
 80090c8:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	da01      	bge.n	80090d4 <lfs_file_rawrewind+0x22>
        return (int)res;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	e000      	b.n	80090d6 <lfs_file_rawrewind+0x24>
    }

    return 0;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d009      	beq.n	8009108 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	f7fa fd80 	bl	8003c04 <lfs_max>
 8009104:	4603      	mov	r3, r0
 8009106:	e001      	b.n	800910c <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	; 0x30
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d106      	bne.n	8009140 <lfs_init+0x2c>
 8009132:	4b98      	ldr	r3, [pc, #608]	; (8009394 <lfs_init+0x280>)
 8009134:	4a98      	ldr	r2, [pc, #608]	; (8009398 <lfs_init+0x284>)
 8009136:	f241 0115 	movw	r1, #4117	; 0x1015
 800913a:	4898      	ldr	r0, [pc, #608]	; (800939c <lfs_init+0x288>)
 800913c:	f001 fe1e 	bl	800ad7c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d106      	bne.n	8009158 <lfs_init+0x44>
 800914a:	4b95      	ldr	r3, [pc, #596]	; (80093a0 <lfs_init+0x28c>)
 800914c:	4a92      	ldr	r2, [pc, #584]	; (8009398 <lfs_init+0x284>)
 800914e:	f241 0116 	movw	r1, #4118	; 0x1016
 8009152:	4892      	ldr	r0, [pc, #584]	; (800939c <lfs_init+0x288>)
 8009154:	f001 fe12 	bl	800ad7c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915e:	2b00      	cmp	r3, #0
 8009160:	d106      	bne.n	8009170 <lfs_init+0x5c>
 8009162:	4b90      	ldr	r3, [pc, #576]	; (80093a4 <lfs_init+0x290>)
 8009164:	4a8c      	ldr	r2, [pc, #560]	; (8009398 <lfs_init+0x284>)
 8009166:	f241 0117 	movw	r1, #4119	; 0x1017
 800916a:	488c      	ldr	r0, [pc, #560]	; (800939c <lfs_init+0x288>)
 800916c:	f001 fe06 	bl	800ad7c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800917a:	6952      	ldr	r2, [r2, #20]
 800917c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009180:	fb01 f202 	mul.w	r2, r1, r2
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	2b00      	cmp	r3, #0
 8009188:	d006      	beq.n	8009198 <lfs_init+0x84>
 800918a:	4b87      	ldr	r3, [pc, #540]	; (80093a8 <lfs_init+0x294>)
 800918c:	4a82      	ldr	r2, [pc, #520]	; (8009398 <lfs_init+0x284>)
 800918e:	f241 011b 	movw	r1, #4123	; 0x101b
 8009192:	4882      	ldr	r0, [pc, #520]	; (800939c <lfs_init+0x288>)
 8009194:	f001 fdf2 	bl	800ad7c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80091a2:	6992      	ldr	r2, [r2, #24]
 80091a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80091a8:	fb01 f202 	mul.w	r2, r1, r2
 80091ac:	1a9b      	subs	r3, r3, r2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d006      	beq.n	80091c0 <lfs_init+0xac>
 80091b2:	4b7e      	ldr	r3, [pc, #504]	; (80093ac <lfs_init+0x298>)
 80091b4:	4a78      	ldr	r2, [pc, #480]	; (8009398 <lfs_init+0x284>)
 80091b6:	f241 011c 	movw	r1, #4124	; 0x101c
 80091ba:	4878      	ldr	r0, [pc, #480]	; (800939c <lfs_init+0x288>)
 80091bc:	f001 fdde 	bl	800ad7c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80091ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80091cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80091d0:	fb01 f202 	mul.w	r2, r1, r2
 80091d4:	1a9b      	subs	r3, r3, r2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d006      	beq.n	80091e8 <lfs_init+0xd4>
 80091da:	4b75      	ldr	r3, [pc, #468]	; (80093b0 <lfs_init+0x29c>)
 80091dc:	4a6e      	ldr	r2, [pc, #440]	; (8009398 <lfs_init+0x284>)
 80091de:	f241 011d 	movw	r1, #4125	; 0x101d
 80091e2:	486e      	ldr	r0, [pc, #440]	; (800939c <lfs_init+0x288>)
 80091e4:	f001 fdca 	bl	800ad7c <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	2b7f      	cmp	r3, #127	; 0x7f
 80091f0:	d806      	bhi.n	8009200 <lfs_init+0xec>
 80091f2:	4b70      	ldr	r3, [pc, #448]	; (80093b4 <lfs_init+0x2a0>)
 80091f4:	4a68      	ldr	r2, [pc, #416]	; (8009398 <lfs_init+0x284>)
 80091f6:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80091fa:	4868      	ldr	r0, [pc, #416]	; (800939c <lfs_init+0x288>)
 80091fc:	f001 fdbe 	bl	800ad7c <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	3b08      	subs	r3, #8
 8009208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800920c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009210:	4618      	mov	r0, r3
 8009212:	f7fa fd3e 	bl	8003c92 <lfs_npw2>
 8009216:	4603      	mov	r3, r0
 8009218:	009a      	lsls	r2, r3, #2
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	429a      	cmp	r2, r3
 8009222:	d906      	bls.n	8009232 <lfs_init+0x11e>
 8009224:	4b64      	ldr	r3, [pc, #400]	; (80093b8 <lfs_init+0x2a4>)
 8009226:	4a5c      	ldr	r2, [pc, #368]	; (8009398 <lfs_init+0x284>)
 8009228:	f241 0123 	movw	r1, #4131	; 0x1023
 800922c:	485b      	ldr	r0, [pc, #364]	; (800939c <lfs_init+0x288>)
 800922e:	f001 fda5 	bl	800ad7c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	2b00      	cmp	r3, #0
 800923a:	d106      	bne.n	800924a <lfs_init+0x136>
 800923c:	4b5f      	ldr	r3, [pc, #380]	; (80093bc <lfs_init+0x2a8>)
 800923e:	4a56      	ldr	r2, [pc, #344]	; (8009398 <lfs_init+0x284>)
 8009240:	f241 012c 	movw	r1, #4140	; 0x102c
 8009244:	4855      	ldr	r0, [pc, #340]	; (800939c <lfs_init+0x288>)
 8009246:	f001 fd99 	bl	800ad7c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800924e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <lfs_init+0x14c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60da      	str	r2, [r3, #12]
 800925e:	e010      	b.n	8009282 <lfs_init+0x16e>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009266:	4618      	mov	r0, r3
 8009268:	f7fa fd7b 	bl	8003d62 <lfs_malloc>
 800926c:	4602      	mov	r2, r0
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d103      	bne.n	8009282 <lfs_init+0x16e>
            err = LFS_ERR_NOMEM;
 800927a:	f06f 030b 	mvn.w	r3, #11
 800927e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8009280:	e0ff      	b.n	8009482 <lfs_init+0x36e>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009288:	2b00      	cmp	r3, #0
 800928a:	d005      	beq.n	8009298 <lfs_init+0x184>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	61da      	str	r2, [r3, #28]
 8009296:	e010      	b.n	80092ba <lfs_init+0x1a6>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800929c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fa fd5f 	bl	8003d62 <lfs_malloc>
 80092a4:	4602      	mov	r2, r0
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d103      	bne.n	80092ba <lfs_init+0x1a6>
            err = LFS_ERR_NOMEM;
 80092b2:	f06f 030b 	mvn.w	r3, #11
 80092b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80092b8:	e0e3      	b.n	8009482 <lfs_init+0x36e>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7fa fd75 	bl	8003dae <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3310      	adds	r3, #16
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7fa fd6f 	bl	8003dae <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d106      	bne.n	80092e8 <lfs_init+0x1d4>
 80092da:	4b39      	ldr	r3, [pc, #228]	; (80093c0 <lfs_init+0x2ac>)
 80092dc:	4a2e      	ldr	r2, [pc, #184]	; (8009398 <lfs_init+0x284>)
 80092de:	f241 014a 	movw	r1, #4170	; 0x104a
 80092e2:	482e      	ldr	r0, [pc, #184]	; (800939c <lfs_init+0x288>)
 80092e4:	f001 fd4a 	bl	800ad7c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ee:	f003 0307 	and.w	r3, r3, #7
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d106      	bne.n	8009304 <lfs_init+0x1f0>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	2b00      	cmp	r3, #0
 8009302:	d006      	beq.n	8009312 <lfs_init+0x1fe>
 8009304:	4b2f      	ldr	r3, [pc, #188]	; (80093c4 <lfs_init+0x2b0>)
 8009306:	4a24      	ldr	r2, [pc, #144]	; (8009398 <lfs_init+0x284>)
 8009308:	f241 014b 	movw	r1, #4171	; 0x104b
 800930c:	4823      	ldr	r0, [pc, #140]	; (800939c <lfs_init+0x288>)
 800930e:	f001 fd35 	bl	800ad7c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <lfs_init+0x214>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	665a      	str	r2, [r3, #100]	; 0x64
 8009326:	e010      	b.n	800934a <lfs_init+0x236>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	4618      	mov	r0, r3
 8009330:	f7fa fd17 	bl	8003d62 <lfs_malloc>
 8009334:	4602      	mov	r2, r0
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800933e:	2b00      	cmp	r3, #0
 8009340:	d103      	bne.n	800934a <lfs_init+0x236>
            err = LFS_ERR_NOMEM;
 8009342:	f06f 030b 	mvn.w	r3, #11
 8009346:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8009348:	e09b      	b.n	8009482 <lfs_init+0x36e>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800934e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009350:	2bff      	cmp	r3, #255	; 0xff
 8009352:	d906      	bls.n	8009362 <lfs_init+0x24e>
 8009354:	4b1c      	ldr	r3, [pc, #112]	; (80093c8 <lfs_init+0x2b4>)
 8009356:	4a10      	ldr	r2, [pc, #64]	; (8009398 <lfs_init+0x284>)
 8009358:	f241 0158 	movw	r1, #4184	; 0x1058
 800935c:	480f      	ldr	r0, [pc, #60]	; (800939c <lfs_init+0x288>)
 800935e:	f001 fd0d 	bl	800ad7c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d102      	bne.n	800937a <lfs_init+0x266>
        lfs->name_max = LFS_NAME_MAX;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	22ff      	movs	r2, #255	; 0xff
 8009378:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800937e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	da25      	bge.n	80093d0 <lfs_init+0x2bc>
 8009384:	4b11      	ldr	r3, [pc, #68]	; (80093cc <lfs_init+0x2b8>)
 8009386:	4a04      	ldr	r2, [pc, #16]	; (8009398 <lfs_init+0x284>)
 8009388:	f241 015e 	movw	r1, #4190	; 0x105e
 800938c:	4803      	ldr	r0, [pc, #12]	; (800939c <lfs_init+0x288>)
 800938e:	f001 fcf5 	bl	800ad7c <__assert_func>
 8009392:	bf00      	nop
 8009394:	0800c288 	.word	0x0800c288
 8009398:	0800cc5c 	.word	0x0800cc5c
 800939c:	0800bf0c 	.word	0x0800bf0c
 80093a0:	0800c2a4 	.word	0x0800c2a4
 80093a4:	0800c2c0 	.word	0x0800c2c0
 80093a8:	0800c2dc 	.word	0x0800c2dc
 80093ac:	0800c30c 	.word	0x0800c30c
 80093b0:	0800c33c 	.word	0x0800c33c
 80093b4:	0800c370 	.word	0x0800c370
 80093b8:	0800c38c 	.word	0x0800c38c
 80093bc:	0800c3d8 	.word	0x0800c3d8
 80093c0:	0800c3f4 	.word	0x0800c3f4
 80093c4:	0800c414 	.word	0x0800c414
 80093c8:	0800c468 	.word	0x0800c468
 80093cc:	0800c484 	.word	0x0800c484
    lfs->file_max = lfs->cfg->file_max;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d103      	bne.n	80093ea <lfs_init+0x2d6>
        lfs->file_max = LFS_FILE_MAX;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80093e8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d906      	bls.n	8009406 <lfs_init+0x2f2>
 80093f8:	4b26      	ldr	r3, [pc, #152]	; (8009494 <lfs_init+0x380>)
 80093fa:	4a27      	ldr	r2, [pc, #156]	; (8009498 <lfs_init+0x384>)
 80093fc:	f241 0164 	movw	r1, #4196	; 0x1064
 8009400:	4826      	ldr	r0, [pc, #152]	; (800949c <lfs_init+0x388>)
 8009402:	f001 fcbb 	bl	800ad7c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800940a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009414:	2b00      	cmp	r3, #0
 8009416:	d103      	bne.n	8009420 <lfs_init+0x30c>
        lfs->attr_max = LFS_ATTR_MAX;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800941e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	429a      	cmp	r2, r3
 800942e:	d906      	bls.n	800943e <lfs_init+0x32a>
 8009430:	4b1b      	ldr	r3, [pc, #108]	; (80094a0 <lfs_init+0x38c>)
 8009432:	4a19      	ldr	r2, [pc, #100]	; (8009498 <lfs_init+0x384>)
 8009434:	f241 016a 	movw	r1, #4202	; 0x106a
 8009438:	4818      	ldr	r0, [pc, #96]	; (800949c <lfs_init+0x388>)
 800943a:	f001 fc9f 	bl	800ad7c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009444:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800944c:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	333c      	adds	r3, #60	; 0x3c
 800945e:	2200      	movs	r2, #0
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	605a      	str	r2, [r3, #4]
 8009464:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	3330      	adds	r3, #48	; 0x30
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	605a      	str	r2, [r3, #4]
 8009470:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3348      	adds	r3, #72	; 0x48
 8009476:	2200      	movs	r2, #0
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	605a      	str	r2, [r3, #4]
 800947c:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800947e:	2300      	movs	r3, #0
 8009480:	e003      	b.n	800948a <lfs_init+0x376>

cleanup:
    lfs_deinit(lfs);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f80e 	bl	80094a4 <lfs_deinit>
    return err;
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800948a:	4618      	mov	r0, r3
 800948c:	3730      	adds	r7, #48	; 0x30
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	0800c4a8 	.word	0x0800c4a8
 8009498:	0800cc5c 	.word	0x0800cc5c
 800949c:	0800bf0c 	.word	0x0800bf0c
 80094a0:	0800c4c4 	.word	0x0800c4c4

080094a4 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d104      	bne.n	80094c0 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fa fc5d 	bl	8003d7a <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d104      	bne.n	80094d4 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fa fc53 	bl	8003d7a <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d104      	bne.n	80094e8 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fa fc49 	bl	8003d7a <lfs_free>
    }

    return 0;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b0a0      	sub	sp, #128	; 0x80
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
    int err = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff fe05 	bl	8009114 <lfs_init>
 800950a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800950c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <lfs_rawformat+0x22>
            return err;
 8009512:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009514:	e084      	b.n	8009620 <lfs_rawformat+0x12c>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800951e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009520:	461a      	mov	r2, r3
 8009522:	2100      	movs	r1, #0
 8009524:	f001 fe33 	bl	800b18e <memset>
        lfs->free.off = 0;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009534:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800953a:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800953c:	4619      	mov	r1, r3
 800953e:	4610      	mov	r0, r2
 8009540:	f7fa fb70 	bl	8003c24 <lfs_min>
 8009544:	4602      	mov	r2, r0
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7fb fb71 	bl	8004c38 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8009556:	f107 030c 	add.w	r3, r7, #12
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f7fd f9dd 	bl	800691c <lfs_dir_alloc>
 8009562:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009564:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009566:	2b00      	cmp	r3, #0
 8009568:	d151      	bne.n	800960e <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7fb fb04 	bl	8004b78 <lfs_fs_disk_version>
 8009570:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8009572:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009578:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 800957a:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009580:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8009582:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8009588:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800958e:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8009594:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8009596:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800959a:	4618      	mov	r0, r3
 800959c:	f7fb fa62 	bl	8004a64 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80095a0:	4b21      	ldr	r3, [pc, #132]	; (8009628 <lfs_rawformat+0x134>)
 80095a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095a4:	2300      	movs	r3, #0
 80095a6:	653b      	str	r3, [r7, #80]	; 0x50
 80095a8:	4b20      	ldr	r3, [pc, #128]	; (800962c <lfs_rawformat+0x138>)
 80095aa:	657b      	str	r3, [r7, #84]	; 0x54
 80095ac:	4b20      	ldr	r3, [pc, #128]	; (8009630 <lfs_rawformat+0x13c>)
 80095ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80095b0:	4b20      	ldr	r3, [pc, #128]	; (8009634 <lfs_rawformat+0x140>)
 80095b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80095b8:	663b      	str	r3, [r7, #96]	; 0x60
 80095ba:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80095be:	f107 010c 	add.w	r1, r7, #12
 80095c2:	2303      	movs	r3, #3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7fe fb87 	bl	8007cd8 <lfs_dir_commit>
 80095ca:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80095cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d11f      	bne.n	8009612 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80095d2:	2300      	movs	r3, #0
 80095d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80095d8:	f107 010c 	add.w	r1, r7, #12
 80095dc:	2300      	movs	r3, #0
 80095de:	2200      	movs	r2, #0
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7fe fb79 	bl	8007cd8 <lfs_dir_commit>
 80095e6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80095e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d113      	bne.n	8009616 <lfs_rawformat+0x122>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80095ee:	2300      	movs	r3, #0
 80095f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095f2:	2301      	movs	r3, #1
 80095f4:	633b      	str	r3, [r7, #48]	; 0x30
 80095f6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80095fa:	f107 030c 	add.w	r3, r7, #12
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7fc fdd3 	bl	80061ac <lfs_dir_fetch>
 8009606:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009608:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800960a:	2b00      	cmp	r3, #0
 800960c:	e004      	b.n	8009618 <lfs_rawformat+0x124>
            goto cleanup;
 800960e:	bf00      	nop
 8009610:	e002      	b.n	8009618 <lfs_rawformat+0x124>
            goto cleanup;
 8009612:	bf00      	nop
 8009614:	e000      	b.n	8009618 <lfs_rawformat+0x124>
            goto cleanup;
 8009616:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7ff ff43 	bl	80094a4 <lfs_deinit>
    return err;
 800961e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8009620:	4618      	mov	r0, r3
 8009622:	3780      	adds	r7, #128	; 0x80
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	40100000 	.word	0x40100000
 800962c:	0ff00008 	.word	0x0ff00008
 8009630:	0800c4f4 	.word	0x0800c4f4
 8009634:	20100018 	.word	0x20100018

08009638 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8009638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800963a:	b09f      	sub	sp, #124	; 0x7c
 800963c:	af04      	add	r7, sp, #16
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fd65 	bl	8009114 <lfs_init>
 800964a:	6678      	str	r0, [r7, #100]	; 0x64
    if (err) {
 800964c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <lfs_rawmount+0x1e>
        return err;
 8009652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009654:	e1f5      	b.n	8009a42 <lfs_rawmount+0x40a>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009656:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800965a:	2220      	movs	r2, #32
 800965c:	2100      	movs	r1, #0
 800965e:	4618      	mov	r0, r3
 8009660:	f001 fd95 	bl	800b18e <memset>
 8009664:	2301      	movs	r3, #1
 8009666:	653b      	str	r3, [r7, #80]	; 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009668:	4aa3      	ldr	r2, [pc, #652]	; (80098f8 <lfs_rawmount+0x2c0>)
 800966a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800966e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009672:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009676:	2301      	movs	r3, #1
 8009678:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 800967a:	2301      	movs	r3, #1
 800967c:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 800967e:	e17f      	b.n	8009980 <lfs_rawmount+0x348>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8009680:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009684:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009688:	3318      	adds	r3, #24
 800968a:	4611      	mov	r1, r2
 800968c:	4618      	mov	r0, r3
 800968e:	f7fa ff69 	bl	8004564 <lfs_pair_issync>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00a      	beq.n	80096ae <lfs_rawmount+0x76>
            LFS_WARN("Cycle detected in tail list");
 8009698:	4b98      	ldr	r3, [pc, #608]	; (80098fc <lfs_rawmount+0x2c4>)
 800969a:	f44f 5287 	mov.w	r2, #4320	; 0x10e0
 800969e:	4998      	ldr	r1, [pc, #608]	; (8009900 <lfs_rawmount+0x2c8>)
 80096a0:	4898      	ldr	r0, [pc, #608]	; (8009904 <lfs_rawmount+0x2cc>)
 80096a2:	f001 fd07 	bl	800b0b4 <iprintf>
            err = LFS_ERR_CORRUPT;
 80096a6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80096aa:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 80096ac:	e1c5      	b.n	8009a3a <lfs_rawmount+0x402>
        }
        if (tortoise_i == tortoise_period) {
 80096ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d108      	bne.n	80096c8 <lfs_rawmount+0x90>
            tortoise[0] = dir.tail[0];
 80096b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise[1] = dir.tail[1];
 80096ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096bc:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise_i = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 80096c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 80096c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096ca:	3301      	adds	r3, #1
 80096cc:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	623b      	str	r3, [r7, #32]
 80096d2:	4b8d      	ldr	r3, [pc, #564]	; (8009908 <lfs_rawmount+0x2d0>)
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
 80096d6:	2308      	movs	r3, #8
 80096d8:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80096da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80096de:	f103 0218 	add.w	r2, r3, #24
 80096e2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80096e6:	f107 0320 	add.w	r3, r7, #32
 80096ea:	9303      	str	r3, [sp, #12]
 80096ec:	4b87      	ldr	r3, [pc, #540]	; (800990c <lfs_rawmount+0x2d4>)
 80096ee:	9302      	str	r3, [sp, #8]
 80096f0:	2300      	movs	r3, #0
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	4b86      	ldr	r3, [pc, #536]	; (8009910 <lfs_rawmount+0x2d8>)
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	4b86      	ldr	r3, [pc, #536]	; (8009914 <lfs_rawmount+0x2dc>)
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7fc f988 	bl	8005a10 <lfs_dir_fetchmatch>
 8009700:	65b8      	str	r0, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8009702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009704:	2b00      	cmp	r3, #0
 8009706:	da02      	bge.n	800970e <lfs_rawmount+0xd6>
            err = tag;
 8009708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800970a:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 800970c:	e195      	b.n	8009a3a <lfs_rawmount+0x402>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800970e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 8128 	beq.w	8009966 <lfs_rawmount+0x32e>
 8009716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009718:	4618      	mov	r0, r3
 800971a:	f7fa ff92 	bl	8004642 <lfs_tag_isdelete>
 800971e:	4603      	mov	r3, r0
 8009720:	f083 0301 	eor.w	r3, r3, #1
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 811d 	beq.w	8009966 <lfs_rawmount+0x32e>
            // update root
            lfs->root[0] = dir.pair[0];
 800972c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8009732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8009738:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800973c:	f107 0308 	add.w	r3, r7, #8
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	4b75      	ldr	r3, [pc, #468]	; (8009918 <lfs_rawmount+0x2e0>)
 8009744:	4a73      	ldr	r2, [pc, #460]	; (8009914 <lfs_rawmount+0x2dc>)
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7fb fc30 	bl	8004fac <lfs_dir_get>
 800974c:	65b8      	str	r0, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800974e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009750:	2b00      	cmp	r3, #0
 8009752:	da02      	bge.n	800975a <lfs_rawmount+0x122>
                err = tag;
 8009754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009756:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8009758:	e16f      	b.n	8009a3a <lfs_rawmount+0x402>
            }
            lfs_superblock_fromle32(&superblock);
 800975a:	f107 0308 	add.w	r3, r7, #8
 800975e:	4618      	mov	r0, r3
 8009760:	f7fb f948 	bl	80049f4 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	0c1b      	lsrs	r3, r3, #16
 8009768:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7fb fa0e 	bl	8004b94 <lfs_fs_disk_version_major>
 8009778:	4603      	mov	r3, r0
 800977a:	461a      	mov	r2, r3
 800977c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009780:	4293      	cmp	r3, r2
 8009782:	d108      	bne.n	8009796 <lfs_rawmount+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7fb fa13 	bl	8004bb0 <lfs_fs_disk_version_minor>
 800978a:	4603      	mov	r3, r0
 800978c:	461a      	mov	r2, r3
 800978e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009792:	4293      	cmp	r3, r2
 8009794:	d91d      	bls.n	80097d2 <lfs_rawmount+0x19a>
                LFS_ERROR("Invalid version "
 8009796:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 800979a:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7fb f9f8 	bl	8004b94 <lfs_fs_disk_version_major>
 80097a4:	4603      	mov	r3, r0
 80097a6:	461e      	mov	r6, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7fb fa01 	bl	8004bb0 <lfs_fs_disk_version_minor>
 80097ae:	4603      	mov	r3, r0
 80097b0:	461a      	mov	r2, r3
 80097b2:	4b52      	ldr	r3, [pc, #328]	; (80098fc <lfs_rawmount+0x2c4>)
 80097b4:	9303      	str	r3, [sp, #12]
 80097b6:	9202      	str	r2, [sp, #8]
 80097b8:	9601      	str	r6, [sp, #4]
 80097ba:	9400      	str	r4, [sp, #0]
 80097bc:	462b      	mov	r3, r5
 80097be:	f241 120e 	movw	r2, #4366	; 0x110e
 80097c2:	494f      	ldr	r1, [pc, #316]	; (8009900 <lfs_rawmount+0x2c8>)
 80097c4:	4855      	ldr	r0, [pc, #340]	; (800991c <lfs_rawmount+0x2e4>)
 80097c6:	f001 fc75 	bl	800b0b4 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80097ca:	f06f 0315 	mvn.w	r3, #21
 80097ce:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80097d0:	e0c8      	b.n	8009964 <lfs_rawmount+0x32c>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7fb f9ec 	bl	8004bb0 <lfs_fs_disk_version_minor>
 80097d8:	4603      	mov	r3, r0
 80097da:	461a      	mov	r2, r3
 80097dc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d21d      	bcs.n	8009820 <lfs_rawmount+0x1e8>
                LFS_DEBUG("Found older minor version "
 80097e4:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 80097e8:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7fb f9d1 	bl	8004b94 <lfs_fs_disk_version_major>
 80097f2:	4603      	mov	r3, r0
 80097f4:	461e      	mov	r6, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7fb f9da 	bl	8004bb0 <lfs_fs_disk_version_minor>
 80097fc:	4603      	mov	r3, r0
 80097fe:	461a      	mov	r2, r3
 8009800:	4b3e      	ldr	r3, [pc, #248]	; (80098fc <lfs_rawmount+0x2c4>)
 8009802:	9303      	str	r3, [sp, #12]
 8009804:	9202      	str	r2, [sp, #8]
 8009806:	9601      	str	r6, [sp, #4]
 8009808:	9400      	str	r4, [sp, #0]
 800980a:	462b      	mov	r3, r5
 800980c:	f241 121c 	movw	r2, #4380	; 0x111c
 8009810:	493b      	ldr	r1, [pc, #236]	; (8009900 <lfs_rawmount+0x2c8>)
 8009812:	4843      	ldr	r0, [pc, #268]	; (8009920 <lfs_rawmount+0x2e8>)
 8009814:	f001 fc4e 	bl	800b0b4 <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 8009818:	2101      	movs	r1, #1
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fbae 	bl	8009f7c <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d018      	beq.n	8009858 <lfs_rawmount+0x220>
                if (superblock.name_max > lfs->name_max) {
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800982c:	429a      	cmp	r2, r3
 800982e:	d910      	bls.n	8009852 <lfs_rawmount+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009836:	4931      	ldr	r1, [pc, #196]	; (80098fc <lfs_rawmount+0x2c4>)
 8009838:	9101      	str	r1, [sp, #4]
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	4613      	mov	r3, r2
 800983e:	f241 122a 	movw	r2, #4394	; 0x112a
 8009842:	492f      	ldr	r1, [pc, #188]	; (8009900 <lfs_rawmount+0x2c8>)
 8009844:	4837      	ldr	r0, [pc, #220]	; (8009924 <lfs_rawmount+0x2ec>)
 8009846:	f001 fc35 	bl	800b0b4 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800984a:	f06f 0315 	mvn.w	r3, #21
 800984e:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8009850:	e088      	b.n	8009964 <lfs_rawmount+0x32c>
                }

                lfs->name_max = superblock.name_max;
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d018      	beq.n	8009890 <lfs_rawmount+0x258>
                if (superblock.file_max > lfs->file_max) {
 800985e:	69ba      	ldr	r2, [r7, #24]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009864:	429a      	cmp	r2, r3
 8009866:	d910      	bls.n	800988a <lfs_rawmount+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8009868:	69ba      	ldr	r2, [r7, #24]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800986e:	4923      	ldr	r1, [pc, #140]	; (80098fc <lfs_rawmount+0x2c4>)
 8009870:	9101      	str	r1, [sp, #4]
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	4613      	mov	r3, r2
 8009876:	f241 1235 	movw	r2, #4405	; 0x1135
 800987a:	4921      	ldr	r1, [pc, #132]	; (8009900 <lfs_rawmount+0x2c8>)
 800987c:	482a      	ldr	r0, [pc, #168]	; (8009928 <lfs_rawmount+0x2f0>)
 800987e:	f001 fc19 	bl	800b0b4 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8009882:	f06f 0315 	mvn.w	r3, #21
 8009886:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8009888:	e06c      	b.n	8009964 <lfs_rawmount+0x32c>
                }

                lfs->file_max = superblock.file_max;
 800988a:	69ba      	ldr	r2, [r7, #24]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d018      	beq.n	80098c8 <lfs_rawmount+0x290>
                if (superblock.attr_max > lfs->attr_max) {
 8009896:	69fa      	ldr	r2, [r7, #28]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800989c:	429a      	cmp	r2, r3
 800989e:	d910      	bls.n	80098c2 <lfs_rawmount+0x28a>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098a6:	4915      	ldr	r1, [pc, #84]	; (80098fc <lfs_rawmount+0x2c4>)
 80098a8:	9101      	str	r1, [sp, #4]
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	4613      	mov	r3, r2
 80098ae:	f44f 528a 	mov.w	r2, #4416	; 0x1140
 80098b2:	4913      	ldr	r1, [pc, #76]	; (8009900 <lfs_rawmount+0x2c8>)
 80098b4:	481d      	ldr	r0, [pc, #116]	; (800992c <lfs_rawmount+0x2f4>)
 80098b6:	f001 fbfd 	bl	800b0b4 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80098ba:	f06f 0315 	mvn.w	r3, #21
 80098be:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 80098c0:	e050      	b.n	8009964 <lfs_rawmount+0x32c>
                }

                lfs->attr_max = superblock.attr_max;
 80098c2:	69fa      	ldr	r2, [r7, #28]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d02f      	beq.n	8009934 <lfs_rawmount+0x2fc>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	4907      	ldr	r1, [pc, #28]	; (80098fc <lfs_rawmount+0x2c4>)
 80098de:	9101      	str	r1, [sp, #4]
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	4613      	mov	r3, r2
 80098e4:	f241 124a 	movw	r2, #4426	; 0x114a
 80098e8:	4905      	ldr	r1, [pc, #20]	; (8009900 <lfs_rawmount+0x2c8>)
 80098ea:	4811      	ldr	r0, [pc, #68]	; (8009930 <lfs_rawmount+0x2f8>)
 80098ec:	f001 fbe2 	bl	800b0b4 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80098f0:	f06f 0315 	mvn.w	r3, #21
 80098f4:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80098f6:	e035      	b.n	8009964 <lfs_rawmount+0x32c>
 80098f8:	0800c044 	.word	0x0800c044
 80098fc:	0800c000 	.word	0x0800c000
 8009900:	0800bf0c 	.word	0x0800bf0c
 8009904:	0800c500 	.word	0x0800c500
 8009908:	0800c4f4 	.word	0x0800c4f4
 800990c:	08006249 	.word	0x08006249
 8009910:	0ff00008 	.word	0x0ff00008
 8009914:	7ffffc00 	.word	0x7ffffc00
 8009918:	20100018 	.word	0x20100018
 800991c:	0800c52c 	.word	0x0800c52c
 8009920:	0800c564 	.word	0x0800c564
 8009924:	0800c5a4 	.word	0x0800c5a4
 8009928:	0800c5d8 	.word	0x0800c5d8
 800992c:	0800c60c 	.word	0x0800c60c
 8009930:	0800c640 	.word	0x0800c640
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	429a      	cmp	r2, r3
 800993e:	d012      	beq.n	8009966 <lfs_rawmount+0x32e>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	4940      	ldr	r1, [pc, #256]	; (8009a4c <lfs_rawmount+0x414>)
 800994a:	9101      	str	r1, [sp, #4]
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	4613      	mov	r3, r2
 8009950:	f241 1251 	movw	r2, #4433	; 0x1151
 8009954:	493e      	ldr	r1, [pc, #248]	; (8009a50 <lfs_rawmount+0x418>)
 8009956:	483f      	ldr	r0, [pc, #252]	; (8009a54 <lfs_rawmount+0x41c>)
 8009958:	f001 fbac 	bl	800b0b4 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 800995c:	f06f 0315 	mvn.w	r3, #21
 8009960:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8009962:	bf00      	nop
            goto cleanup;
 8009964:	e069      	b.n	8009a3a <lfs_rawmount+0x402>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800996c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7fc fc36 	bl	80061e4 <lfs_dir_getgstate>
 8009978:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 800997a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800997c:	2b00      	cmp	r3, #0
 800997e:	d15b      	bne.n	8009a38 <lfs_rawmount+0x400>
    while (!lfs_pair_isnull(dir.tail)) {
 8009980:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009984:	3318      	adds	r3, #24
 8009986:	4618      	mov	r0, r3
 8009988:	f7fa fda7 	bl	80044da <lfs_pair_isnull>
 800998c:	4603      	mov	r3, r0
 800998e:	f083 0301 	eor.w	r3, r3, #1
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b00      	cmp	r3, #0
 8009996:	f47f ae73 	bne.w	8009680 <lfs_rawmount+0x48>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	3320      	adds	r3, #32
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fa fd9b 	bl	80044da <lfs_pair_isnull>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <lfs_rawmount+0x37a>
        err = LFS_ERR_INVAL;
 80099aa:	f06f 0315 	mvn.w	r3, #21
 80099ae:	667b      	str	r3, [r7, #100]	; 0x64
        goto cleanup;
 80099b0:	e043      	b.n	8009a3a <lfs_rawmount+0x402>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3330      	adds	r3, #48	; 0x30
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fa fef6 	bl	80047a8 <lfs_gstate_iszero>
 80099bc:	4603      	mov	r3, r0
 80099be:	f083 0301 	eor.w	r3, r3, #1
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d010      	beq.n	80099ea <lfs_rawmount+0x3b2>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80099d4:	481d      	ldr	r0, [pc, #116]	; (8009a4c <lfs_rawmount+0x414>)
 80099d6:	9002      	str	r0, [sp, #8]
 80099d8:	9201      	str	r2, [sp, #4]
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	460b      	mov	r3, r1
 80099de:	f241 1267 	movw	r2, #4455	; 0x1167
 80099e2:	491b      	ldr	r1, [pc, #108]	; (8009a50 <lfs_rawmount+0x418>)
 80099e4:	481c      	ldr	r0, [pc, #112]	; (8009a58 <lfs_rawmount+0x420>)
 80099e6:	f001 fb65 	bl	800b0b4 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fa fe19 	bl	8004626 <lfs_tag_isvalid>
 80099f4:	4603      	mov	r3, r0
 80099f6:	f083 0301 	eor.w	r3, r3, #1
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	461a      	mov	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a02:	441a      	add	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	333c      	adds	r3, #60	; 0x3c
 8009a0e:	3230      	adds	r2, #48	; 0x30
 8009a10:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a12:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009a1e:	6a12      	ldr	r2, [r2, #32]
 8009a20:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a24:	fb01 f202 	mul.w	r2, r1, r2
 8009a28:	1a9a      	subs	r2, r3, r2
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7fb f911 	bl	8004c56 <lfs_alloc_drop>

    return 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	e004      	b.n	8009a42 <lfs_rawmount+0x40a>
            goto cleanup;
 8009a38:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f80e 	bl	8009a5c <lfs_rawunmount>
    return err;
 8009a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	376c      	adds	r7, #108	; 0x6c
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	0800c000 	.word	0x0800c000
 8009a50:	0800bf0c 	.word	0x0800bf0c
 8009a54:	0800c674 	.word	0x0800c674
 8009a58:	0800c6a4 	.word	0x0800c6a4

08009a5c <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff fd1d 	bl	80094a4 <lfs_deinit>
 8009a6a:	4603      	mov	r3, r0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8009a74:	b590      	push	{r4, r7, lr}
 8009a76:	b0a1      	sub	sp, #132	; 0x84
 8009a78:	af04      	add	r7, sp, #16
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a86:	2220      	movs	r2, #32
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f001 fb7f 	bl	800b18e <memset>
 8009a90:	2301      	movs	r3, #1
 8009a92:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009a94:	4a9a      	ldr	r2, [pc, #616]	; (8009d00 <lfs_fs_rawtraverse+0x28c>)
 8009a96:	f107 031c 	add.w	r3, r7, #28
 8009a9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a9e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8009aaa:	e0c0      	b.n	8009c2e <lfs_fs_rawtraverse+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8009aac:	f107 021c 	add.w	r2, r7, #28
 8009ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ab4:	3318      	adds	r3, #24
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fa fd53 	bl	8004564 <lfs_pair_issync>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d009      	beq.n	8009ad8 <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 8009ac4:	4b8f      	ldr	r3, [pc, #572]	; (8009d04 <lfs_fs_rawtraverse+0x290>)
 8009ac6:	f241 12be 	movw	r2, #4542	; 0x11be
 8009aca:	498f      	ldr	r1, [pc, #572]	; (8009d08 <lfs_fs_rawtraverse+0x294>)
 8009acc:	488f      	ldr	r0, [pc, #572]	; (8009d0c <lfs_fs_rawtraverse+0x298>)
 8009ace:	f001 faf1 	bl	800b0b4 <iprintf>
            return LFS_ERR_CORRUPT;
 8009ad2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009ad6:	e10f      	b.n	8009cf8 <lfs_fs_rawtraverse+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8009ad8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d108      	bne.n	8009af2 <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 8009ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae2:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8009ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ae6:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 8009aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009aee:	005b      	lsls	r3, r3, #1
 8009af0:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 8009af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009af4:	3301      	adds	r3, #1
 8009af6:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 8009af8:	2300      	movs	r3, #0
 8009afa:	667b      	str	r3, [r7, #100]	; 0x64
 8009afc:	e013      	b.n	8009b26 <lfs_fs_rawtraverse+0xb2>
            int err = cb(data, dir.tail[i]);
 8009afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b00:	3306      	adds	r3, #6
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	3370      	adds	r3, #112	; 0x70
 8009b06:	443b      	add	r3, r7
 8009b08:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	4611      	mov	r1, r2
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	4798      	blx	r3
 8009b14:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 8009b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <lfs_fs_rawtraverse+0xac>
                return err;
 8009b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b1e:	e0eb      	b.n	8009cf8 <lfs_fs_rawtraverse+0x284>
        for (int i = 0; i < 2; i++) {
 8009b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b22:	3301      	adds	r3, #1
 8009b24:	667b      	str	r3, [r7, #100]	; 0x64
 8009b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	dde8      	ble.n	8009afe <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8009b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b30:	f103 0218 	add.w	r2, r3, #24
 8009b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b38:	4619      	mov	r1, r3
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f7fc fb36 	bl	80061ac <lfs_dir_fetch>
 8009b40:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8009b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <lfs_fs_rawtraverse+0xd8>
            return err;
 8009b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b4a:	e0d5      	b.n	8009cf8 <lfs_fs_rawtraverse+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009b52:	e067      	b.n	8009c24 <lfs_fs_rawtraverse+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8009b54:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009b58:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8009b5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b5e:	f043 0308 	orr.w	r3, r3, #8
 8009b62:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009b66:	f107 0214 	add.w	r2, r7, #20
 8009b6a:	9200      	str	r2, [sp, #0]
 8009b6c:	4a68      	ldr	r2, [pc, #416]	; (8009d10 <lfs_fs_rawtraverse+0x29c>)
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f7fb fa1c 	bl	8004fac <lfs_dir_get>
 8009b74:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 8009b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	da05      	bge.n	8009b88 <lfs_fs_rawtraverse+0x114>
                if (tag == LFS_ERR_NOENT) {
 8009b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b7e:	f113 0f02 	cmn.w	r3, #2
 8009b82:	d049      	beq.n	8009c18 <lfs_fs_rawtraverse+0x1a4>
                    continue;
                }
                return tag;
 8009b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b86:	e0b7      	b.n	8009cf8 <lfs_fs_rawtraverse+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 8009b88:	f107 0314 	add.w	r3, r7, #20
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fa ff01 	bl	8004994 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8009b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7fa fd87 	bl	80046a8 <lfs_tag_type3>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f240 2302 	movw	r3, #514	; 0x202
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d113      	bne.n	8009bce <lfs_fs_rawtraverse+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8009ba6:	68f9      	ldr	r1, [r7, #12]
 8009ba8:	6978      	ldr	r0, [r7, #20]
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	9202      	str	r2, [sp, #8]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	9201      	str	r2, [sp, #4]
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	460a      	mov	r2, r1
 8009bba:	2100      	movs	r1, #0
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f7fe fa5b 	bl	8008078 <lfs_ctz_traverse>
 8009bc2:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8009bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d027      	beq.n	8009c1a <lfs_fs_rawtraverse+0x1a6>
                    return err;
 8009bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bcc:	e094      	b.n	8009cf8 <lfs_fs_rawtraverse+0x284>
                }
            } else if (includeorphans &&
 8009bce:	78fb      	ldrb	r3, [r7, #3]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d022      	beq.n	8009c1a <lfs_fs_rawtraverse+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8009bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fa fd66 	bl	80046a8 <lfs_tag_type3>
 8009bdc:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8009bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009be2:	d11a      	bne.n	8009c1a <lfs_fs_rawtraverse+0x1a6>
                for (int i = 0; i < 2; i++) {
 8009be4:	2300      	movs	r3, #0
 8009be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009be8:	e012      	b.n	8009c10 <lfs_fs_rawtraverse+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 8009bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	f107 0214 	add.w	r2, r7, #20
 8009bf2:	4413      	add	r3, r2
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	4798      	blx	r3
 8009bfe:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 8009c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <lfs_fs_rawtraverse+0x196>
                        return err;
 8009c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c08:	e076      	b.n	8009cf8 <lfs_fs_rawtraverse+0x284>
                for (int i = 0; i < 2; i++) {
 8009c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	dde9      	ble.n	8009bea <lfs_fs_rawtraverse+0x176>
 8009c16:	e000      	b.n	8009c1a <lfs_fs_rawtraverse+0x1a6>
                    continue;
 8009c18:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8009c1a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009c1e:	3301      	adds	r3, #1
 8009c20:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009c24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c26:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d392      	bcc.n	8009b54 <lfs_fs_rawtraverse+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 8009c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c32:	3318      	adds	r3, #24
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fa fc50 	bl	80044da <lfs_pair_isnull>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f083 0301 	eor.w	r3, r3, #1
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f47f af32 	bne.w	8009aac <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c4e:	e04f      	b.n	8009cf0 <lfs_fs_rawtraverse+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8009c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c52:	799b      	ldrb	r3, [r3, #6]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d147      	bne.n	8009ce8 <lfs_fs_rawtraverse+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8009c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d01d      	beq.n	8009ca0 <lfs_fs_rawtraverse+0x22c>
 8009c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d117      	bne.n	8009ca0 <lfs_fs_rawtraverse+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c72:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c7a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8009c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	9202      	str	r2, [sp, #8]
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	9201      	str	r2, [sp, #4]
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	4623      	mov	r3, r4
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f7fe f9f2 	bl	8008078 <lfs_ctz_traverse>
 8009c94:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8009c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d001      	beq.n	8009ca0 <lfs_fs_rawtraverse+0x22c>
                return err;
 8009c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c9e:	e02b      	b.n	8009cf8 <lfs_fs_rawtraverse+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8009ca0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01e      	beq.n	8009cea <lfs_fs_rawtraverse+0x276>
 8009cac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d118      	bne.n	8009cea <lfs_fs_rawtraverse+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cba:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cc2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	9202      	str	r2, [sp, #8]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	9201      	str	r2, [sp, #4]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	4623      	mov	r3, r4
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f7fe f9ce 	bl	8008078 <lfs_ctz_traverse>
 8009cdc:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8009cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d002      	beq.n	8009cea <lfs_fs_rawtraverse+0x276>
                return err;
 8009ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ce6:	e007      	b.n	8009cf8 <lfs_fs_rawtraverse+0x284>
            continue;
 8009ce8:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1ac      	bne.n	8009c50 <lfs_fs_rawtraverse+0x1dc>
            }
        }
    }
#endif

    return 0;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3774      	adds	r7, #116	; 0x74
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd90      	pop	{r4, r7, pc}
 8009d00:	0800c044 	.word	0x0800c044
 8009d04:	0800c000 	.word	0x0800c000
 8009d08:	0800bf0c 	.word	0x0800bf0c
 8009d0c:	0800c500 	.word	0x0800c500
 8009d10:	700ffc00 	.word	0x700ffc00

08009d14 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b08a      	sub	sp, #40	; 0x28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009d2c:	4a2d      	ldr	r2, [pc, #180]	; (8009de4 <lfs_fs_pred+0xd0>)
 8009d2e:	f107 0314 	add.w	r3, r7, #20
 8009d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d36:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8009d42:	e03e      	b.n	8009dc2 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	3318      	adds	r3, #24
 8009d48:	f107 0214 	add.w	r2, r7, #20
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fa fc08 	bl	8004564 <lfs_pair_issync>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d009      	beq.n	8009d6e <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8009d5a:	4b23      	ldr	r3, [pc, #140]	; (8009de8 <lfs_fs_pred+0xd4>)
 8009d5c:	f241 221c 	movw	r2, #4636	; 0x121c
 8009d60:	4922      	ldr	r1, [pc, #136]	; (8009dec <lfs_fs_pred+0xd8>)
 8009d62:	4823      	ldr	r0, [pc, #140]	; (8009df0 <lfs_fs_pred+0xdc>)
 8009d64:	f001 f9a6 	bl	800b0b4 <iprintf>
            return LFS_ERR_CORRUPT;
 8009d68:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009d6c:	e036      	b.n	8009ddc <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8009d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d10a      	bne.n	8009d8c <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8009d82:	2300      	movs	r3, #0
 8009d84:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	3301      	adds	r3, #1
 8009d90:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	3318      	adds	r3, #24
 8009d96:	68b9      	ldr	r1, [r7, #8]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fa fbb9 	bl	8004510 <lfs_pair_cmp>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <lfs_fs_pred+0x94>
            return 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	e019      	b.n	8009ddc <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3318      	adds	r3, #24
 8009dac:	461a      	mov	r2, r3
 8009dae:	6879      	ldr	r1, [r7, #4]
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7fc f9fb 	bl	80061ac <lfs_dir_fetch>
 8009db6:	61f8      	str	r0, [r7, #28]
        if (err) {
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <lfs_fs_pred+0xae>
            return err;
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	e00c      	b.n	8009ddc <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3318      	adds	r3, #24
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fa fb87 	bl	80044da <lfs_pair_isnull>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f083 0301 	eor.w	r3, r3, #1
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1b5      	bne.n	8009d44 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8009dd8:	f06f 0301 	mvn.w	r3, #1
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3728      	adds	r7, #40	; 0x28
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	0800c044 	.word	0x0800c044
 8009de8:	0800c000 	.word	0x0800c000
 8009dec:	0800bf0c 	.word	0x0800bf0c
 8009df0:	0800c500 	.word	0x0800c500

08009df4 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8009df4:	b5b0      	push	{r4, r5, r7, lr}
 8009df6:	b08e      	sub	sp, #56	; 0x38
 8009df8:	af04      	add	r7, sp, #16
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8009e14:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e1a:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	69fa      	ldr	r2, [r7, #28]
 8009e22:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8009e24:	2108      	movs	r1, #8
 8009e26:	9103      	str	r1, [sp, #12]
 8009e28:	f107 0110 	add.w	r1, r7, #16
 8009e2c:	9102      	str	r1, [sp, #8]
 8009e2e:	9201      	str	r2, [sp, #4]
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	462b      	mov	r3, r5
 8009e34:	4622      	mov	r2, r4
 8009e36:	4601      	mov	r1, r0
 8009e38:	6a38      	ldr	r0, [r7, #32]
 8009e3a:	f7f9 ffcf 	bl	8003ddc <lfs_bd_read>
 8009e3e:	61b8      	str	r0, [r7, #24]
    if (err) {
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <lfs_fs_parent_match+0x56>
        return err;
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	e012      	b.n	8009e70 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8009e4a:	f107 0310 	add.w	r3, r7, #16
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fa fbb5 	bl	80045be <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	1d1a      	adds	r2, r3, #4
 8009e58:	f107 0310 	add.w	r3, r7, #16
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fa fb56 	bl	8004510 <lfs_pair_cmp>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	bf14      	ite	ne
 8009e6a:	2301      	movne	r3, #1
 8009e6c:	2300      	moveq	r3, #0
 8009e6e:	b2db      	uxtb	r3, r3
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3728      	adds	r7, #40	; 0x28
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bdb0      	pop	{r4, r5, r7, pc}

08009e78 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b090      	sub	sp, #64	; 0x40
 8009e7c:	af04      	add	r7, sp, #16
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009e90:	4a33      	ldr	r2, [pc, #204]	; (8009f60 <lfs_fs_parent+0xe8>)
 8009e92:	f107 031c 	add.w	r3, r7, #28
 8009e96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e9a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8009ea6:	e04a      	b.n	8009f3e <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3318      	adds	r3, #24
 8009eac:	f107 021c 	add.w	r2, r7, #28
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fa fb56 	bl	8004564 <lfs_pair_issync>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d009      	beq.n	8009ed2 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8009ebe:	4b29      	ldr	r3, [pc, #164]	; (8009f64 <lfs_fs_parent+0xec>)
 8009ec0:	f241 225d 	movw	r2, #4701	; 0x125d
 8009ec4:	4928      	ldr	r1, [pc, #160]	; (8009f68 <lfs_fs_parent+0xf0>)
 8009ec6:	4829      	ldr	r0, [pc, #164]	; (8009f6c <lfs_fs_parent+0xf4>)
 8009ec8:	f001 f8f4 	bl	800b0b4 <iprintf>
            return LFS_ERR_CORRUPT;
 8009ecc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009ed0:	e042      	b.n	8009f58 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8009ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d10a      	bne.n	8009ef0 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	69db      	ldr	r3, [r3, #28]
 8009ee4:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	005b      	lsls	r3, r3, #1
 8009eee:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009f04:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	3304      	adds	r3, #4
 8009f0a:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009f0c:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8009f0e:	f107 0310 	add.w	r3, r7, #16
 8009f12:	9303      	str	r3, [sp, #12]
 8009f14:	4b16      	ldr	r3, [pc, #88]	; (8009f70 <lfs_fs_parent+0xf8>)
 8009f16:	9302      	str	r3, [sp, #8]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	9301      	str	r3, [sp, #4]
 8009f1c:	4b15      	ldr	r3, [pc, #84]	; (8009f74 <lfs_fs_parent+0xfc>)
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	4b15      	ldr	r3, [pc, #84]	; (8009f78 <lfs_fs_parent+0x100>)
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f7fb fd73 	bl	8005a10 <lfs_dir_fetchmatch>
 8009f2a:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <lfs_fs_parent+0xc6>
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	f113 0f02 	cmn.w	r3, #2
 8009f38:	d001      	beq.n	8009f3e <lfs_fs_parent+0xc6>
            return tag;
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	e00c      	b.n	8009f58 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3318      	adds	r3, #24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fa fac9 	bl	80044da <lfs_pair_isnull>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	f083 0301 	eor.w	r3, r3, #1
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1a9      	bne.n	8009ea8 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8009f54:	f06f 0301 	mvn.w	r3, #1
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3730      	adds	r7, #48	; 0x30
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	0800c044 	.word	0x0800c044
 8009f64:	0800c000 	.word	0x0800c000
 8009f68:	0800bf0c 	.word	0x0800bf0c
 8009f6c:	0800c500 	.word	0x0800c500
 8009f70:	08009df5 	.word	0x08009df5
 8009f74:	20000008 	.word	0x20000008
 8009f78:	7ff003ff 	.word	0x7ff003ff

08009f7c <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	025b      	lsls	r3, r3, #9
 8009f94:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f9a:	bf00      	nop
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
	...

08009fa8 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8009fa8:	b590      	push	{r4, r7, lr}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fa fbaf 	bl	800471c <lfs_tag_size>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10a      	bne.n	8009fda <lfs_fs_preporphans+0x32>
 8009fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	da06      	bge.n	8009fda <lfs_fs_preporphans+0x32>
 8009fcc:	4b1a      	ldr	r3, [pc, #104]	; (800a038 <lfs_fs_preporphans+0x90>)
 8009fce:	4a1b      	ldr	r2, [pc, #108]	; (800a03c <lfs_fs_preporphans+0x94>)
 8009fd0:	f241 217e 	movw	r1, #4734	; 0x127e
 8009fd4:	481a      	ldr	r0, [pc, #104]	; (800a040 <lfs_fs_preporphans+0x98>)
 8009fd6:	f000 fed1 	bl	800ad7c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fa fb9c 	bl	800471c <lfs_tag_size>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009fea:	d90a      	bls.n	800a002 <lfs_fs_preporphans+0x5a>
 8009fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	dd06      	ble.n	800a002 <lfs_fs_preporphans+0x5a>
 8009ff4:	4b13      	ldr	r3, [pc, #76]	; (800a044 <lfs_fs_preporphans+0x9c>)
 8009ff6:	4a11      	ldr	r2, [pc, #68]	; (800a03c <lfs_fs_preporphans+0x94>)
 8009ff8:	f241 217f 	movw	r1, #4735	; 0x127f
 8009ffc:	4810      	ldr	r0, [pc, #64]	; (800a040 <lfs_fs_preporphans+0x98>)
 8009ffe:	f000 febd 	bl	800ad7c <__assert_func>
    lfs->gstate.tag += orphans;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a00a:	441a      	add	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a014:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	3330      	adds	r3, #48	; 0x30
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fa fbe0 	bl	80047e2 <lfs_gstate_hasorphans>
 800a022:	4603      	mov	r3, r0
 800a024:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800a026:	ea44 0203 	orr.w	r2, r4, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	bd90      	pop	{r4, r7, pc}
 800a038:	0800c6dc 	.word	0x0800c6dc
 800a03c:	0800cc68 	.word	0x0800cc68
 800a040:	0800bf0c 	.word	0x0800bf0c
 800a044:	0800c714 	.word	0x0800c714

0800a048 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	460b      	mov	r3, r1
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05a:	4a17      	ldr	r2, [pc, #92]	; (800a0b8 <lfs_fs_prepmove+0x70>)
 800a05c:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800a05e:	897b      	ldrh	r3, [r7, #10]
 800a060:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a064:	428b      	cmp	r3, r1
 800a066:	d006      	beq.n	800a076 <lfs_fs_prepmove+0x2e>
 800a068:	897b      	ldrh	r3, [r7, #10]
 800a06a:	029b      	lsls	r3, r3, #10
 800a06c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a070:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a074:	e000      	b.n	800a078 <lfs_fs_prepmove+0x30>
 800a076:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800a078:	431a      	orrs	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800a07e:	897b      	ldrh	r3, [r7, #10]
 800a080:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a084:	4293      	cmp	r3, r2
 800a086:	d002      	beq.n	800a08e <lfs_fs_prepmove+0x46>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	e000      	b.n	800a090 <lfs_fs_prepmove+0x48>
 800a08e:	2300      	movs	r3, #0
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800a094:	897b      	ldrh	r3, [r7, #10]
 800a096:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d003      	beq.n	800a0a6 <lfs_fs_prepmove+0x5e>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	e000      	b.n	800a0a8 <lfs_fs_prepmove+0x60>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a0ac:	bf00      	nop
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	800003ff 	.word	0x800003ff

0800a0bc <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b098      	sub	sp, #96	; 0x60
 800a0c0:	af02      	add	r7, sp, #8
 800a0c2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	3330      	adds	r3, #48	; 0x30
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fa fbbf 	bl	800484c <lfs_gstate_needssuperblock>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	f083 0301 	eor.w	r3, r3, #1
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <lfs_fs_desuperblock+0x22>
        return 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e04f      	b.n	800a17e <lfs_fs_desuperblock+0xc2>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a1a      	ldr	r2, [r3, #32]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	4928      	ldr	r1, [pc, #160]	; (800a188 <lfs_fs_desuperblock+0xcc>)
 800a0e8:	9101      	str	r1, [sp, #4]
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	f241 2298 	movw	r2, #4760	; 0x1298
 800a0f2:	4926      	ldr	r1, [pc, #152]	; (800a18c <lfs_fs_desuperblock+0xd0>)
 800a0f4:	4826      	ldr	r0, [pc, #152]	; (800a190 <lfs_fs_desuperblock+0xd4>)
 800a0f6:	f000 ffdd 	bl	800b0b4 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f103 0220 	add.w	r2, r3, #32
 800a100:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a104:	4619      	mov	r1, r3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7fc f850 	bl	80061ac <lfs_dir_fetch>
 800a10c:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 800a10e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <lfs_fs_desuperblock+0x5c>
        return err;
 800a114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a116:	e032      	b.n	800a17e <lfs_fs_desuperblock+0xc2>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7fa fd2d 	bl	8004b78 <lfs_fs_disk_version>
 800a11e:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 800a120:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a126:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 800a128:	623b      	str	r3, [r7, #32]
        .block_count = lfs->cfg->block_count,
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a12e:	6a1b      	ldr	r3, [r3, #32]
    lfs_superblock_t superblock = {
 800a130:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 800a136:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 800a13c:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 800a142:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 800a144:	f107 031c 	add.w	r3, r7, #28
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fa fc8b 	bl	8004a64 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800a14e:	4b11      	ldr	r3, [pc, #68]	; (800a194 <lfs_fs_desuperblock+0xd8>)
 800a150:	617b      	str	r3, [r7, #20]
 800a152:	f107 031c 	add.w	r3, r7, #28
 800a156:	61bb      	str	r3, [r7, #24]
 800a158:	f107 0214 	add.w	r2, r7, #20
 800a15c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a160:	2301      	movs	r3, #1
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7fd fdb8 	bl	8007cd8 <lfs_dir_commit>
 800a168:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 800a16a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <lfs_fs_desuperblock+0xb8>
        return err;
 800a170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a172:	e004      	b.n	800a17e <lfs_fs_desuperblock+0xc2>
    }

    lfs_fs_prepsuperblock(lfs, false);
 800a174:	2100      	movs	r1, #0
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7ff ff00 	bl	8009f7c <lfs_fs_prepsuperblock>
    return 0;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3758      	adds	r7, #88	; 0x58
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	0800c000 	.word	0x0800c000
 800a18c:	0800bf0c 	.word	0x0800bf0c
 800a190:	0800c74c 	.word	0x0800c74c
 800a194:	20100018 	.word	0x20100018

0800a198 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800a198:	b5b0      	push	{r4, r5, r7, lr}
 800a19a:	b094      	sub	sp, #80	; 0x50
 800a19c:	af04      	add	r7, sp, #16
 800a19e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	333c      	adds	r3, #60	; 0x3c
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fa fb3e 	bl	8004826 <lfs_gstate_hasmove>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f083 0301 	eor.w	r3, r3, #1
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <lfs_fs_demove+0x22>
        return 0;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e05b      	b.n	800a272 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fa fa98 	bl	80046fc <lfs_tag_id>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	4b2a      	ldr	r3, [pc, #168]	; (800a27c <lfs_fs_demove+0xe4>)
 800a1d2:	9302      	str	r3, [sp, #8]
 800a1d4:	9201      	str	r2, [sp, #4]
 800a1d6:	9400      	str	r4, [sp, #0]
 800a1d8:	462b      	mov	r3, r5
 800a1da:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800a1de:	4928      	ldr	r1, [pc, #160]	; (800a280 <lfs_fs_demove+0xe8>)
 800a1e0:	4828      	ldr	r0, [pc, #160]	; (800a284 <lfs_fs_demove+0xec>)
 800a1e2:	f000 ff67 	bl	800b0b4 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fa fa5c 	bl	80046a8 <lfs_tag_type3>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d006      	beq.n	800a20a <lfs_fs_demove+0x72>
 800a1fc:	4b22      	ldr	r3, [pc, #136]	; (800a288 <lfs_fs_demove+0xf0>)
 800a1fe:	4a23      	ldr	r2, [pc, #140]	; (800a28c <lfs_fs_demove+0xf4>)
 800a200:	f241 21c7 	movw	r1, #4807	; 0x12c7
 800a204:	481e      	ldr	r0, [pc, #120]	; (800a280 <lfs_fs_demove+0xe8>)
 800a206:	f000 fdb9 	bl	800ad7c <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a210:	f107 0318 	add.w	r3, r7, #24
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7fb ffc8 	bl	80061ac <lfs_dir_fetch>
 800a21c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 800a21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d001      	beq.n	800a228 <lfs_fs_demove+0x90>
        return err;
 800a224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a226:	e024      	b.n	800a272 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fa fa65 	bl	80046fc <lfs_tag_id>
 800a232:	4603      	mov	r3, r0
 800a234:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800a236:	2200      	movs	r2, #0
 800a238:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7ff ff03 	bl	800a048 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800a242:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a244:	029b      	lsls	r3, r3, #10
 800a246:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a24a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a24e:	613b      	str	r3, [r7, #16]
 800a250:	2300      	movs	r3, #0
 800a252:	617b      	str	r3, [r7, #20]
 800a254:	f107 0210 	add.w	r2, r7, #16
 800a258:	f107 0118 	add.w	r1, r7, #24
 800a25c:	2301      	movs	r3, #1
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7fd fd3a 	bl	8007cd8 <lfs_dir_commit>
 800a264:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800a266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <lfs_fs_demove+0xd8>
        return err;
 800a26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a26e:	e000      	b.n	800a272 <lfs_fs_demove+0xda>
    }

    return 0;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3740      	adds	r7, #64	; 0x40
 800a276:	46bd      	mov	sp, r7
 800a278:	bdb0      	pop	{r4, r5, r7, pc}
 800a27a:	bf00      	nop
 800a27c:	0800c000 	.word	0x0800c000
 800a280:	0800bf0c 	.word	0x0800bf0c
 800a284:	0800c780 	.word	0x0800c780
 800a288:	0800c7b4 	.word	0x0800c7b4
 800a28c:	0800cc7c 	.word	0x0800cc7c

0800a290 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 800a290:	b5b0      	push	{r4, r5, r7, lr}
 800a292:	b0b2      	sub	sp, #200	; 0xc8
 800a294:	af04      	add	r7, sp, #16
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	460b      	mov	r3, r1
 800a29a:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	3330      	adds	r3, #48	; 0x30
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fa fa9e 	bl	80047e2 <lfs_gstate_hasorphans>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f083 0301 	eor.w	r3, r3, #1
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <lfs_fs_deorphan+0x26>
        return 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	e187      	b.n	800a5c6 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 800a2bc:	e170      	b.n	800a5a0 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800a2be:	f107 0308 	add.w	r3, r7, #8
 800a2c2:	2220      	movs	r2, #32
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 ff61 	bl	800b18e <memset>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	77fb      	strb	r3, [r7, #31]
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800a2da:	e149      	b.n	800a570 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800a2dc:	f107 0308 	add.w	r3, r7, #8
 800a2e0:	f103 0218 	add.w	r2, r3, #24
 800a2e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7fb ff5e 	bl	80061ac <lfs_dir_fetch>
 800a2f0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 800a2f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <lfs_fs_deorphan+0x72>
                return err;
 800a2fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a300:	e161      	b.n	800a5c6 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800a302:	7ffb      	ldrb	r3, [r7, #31]
 800a304:	f083 0301 	eor.w	r3, r3, #1
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 8126 	beq.w	800a55c <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800a310:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a314:	f107 0308 	add.w	r3, r7, #8
 800a318:	3318      	adds	r3, #24
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7ff fdab 	bl	8009e78 <lfs_fs_parent>
 800a322:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800a326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	da07      	bge.n	800a33e <lfs_fs_deorphan+0xae>
 800a32e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a332:	f113 0f02 	cmn.w	r3, #2
 800a336:	d002      	beq.n	800a33e <lfs_fs_deorphan+0xae>
                    return tag;
 800a338:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a33c:	e143      	b.n	800a5c6 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 800a33e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 80ac 	bne.w	800a4a0 <lfs_fs_deorphan+0x210>
 800a348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a34c:	f113 0f02 	cmn.w	r3, #2
 800a350:	f000 80a6 	beq.w	800a4a0 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800a354:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a358:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a35c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	4613      	mov	r3, r2
 800a364:	4a9a      	ldr	r2, [pc, #616]	; (800a5d0 <lfs_fs_deorphan+0x340>)
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7fa fe20 	bl	8004fac <lfs_dir_get>
 800a36c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800a370:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a374:	2b00      	cmp	r3, #0
 800a376:	da02      	bge.n	800a37e <lfs_fs_deorphan+0xee>
                        return state;
 800a378:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a37c:	e0eb      	b.n	800a556 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 800a37e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a382:	4618      	mov	r0, r3
 800a384:	f7fa f91b 	bl	80045be <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 800a388:	f107 0308 	add.w	r3, r7, #8
 800a38c:	f103 0218 	add.w	r2, r3, #24
 800a390:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a394:	4611      	mov	r1, r2
 800a396:	4618      	mov	r0, r3
 800a398:	f7fa f8e4 	bl	8004564 <lfs_pair_issync>
 800a39c:	4603      	mov	r3, r0
 800a39e:	f083 0301 	eor.w	r3, r3, #1
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d07b      	beq.n	800a4a0 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800a3a8:	6a38      	ldr	r0, [r7, #32]
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a3b0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a3b4:	4c87      	ldr	r4, [pc, #540]	; (800a5d4 <lfs_fs_deorphan+0x344>)
 800a3b6:	9403      	str	r4, [sp, #12]
 800a3b8:	9102      	str	r1, [sp, #8]
 800a3ba:	9201      	str	r2, [sp, #4]
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	4603      	mov	r3, r0
 800a3c0:	f241 320d 	movw	r2, #4877	; 0x130d
 800a3c4:	4984      	ldr	r1, [pc, #528]	; (800a5d8 <lfs_fs_deorphan+0x348>)
 800a3c6:	4885      	ldr	r0, [pc, #532]	; (800a5dc <lfs_fs_deorphan+0x34c>)
 800a3c8:	f000 fe74 	bl	800b0b4 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800a3cc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a3d0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3330      	adds	r3, #48	; 0x30
 800a3d8:	f107 0208 	add.w	r2, r7, #8
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fa fa48 	bl	8004874 <lfs_gstate_hasmovehere>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d01c      	beq.n	800a424 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fa f984 	bl	80046fc <lfs_tag_id>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 800a3fa:	68b9      	ldr	r1, [r7, #8]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 800a402:	4874      	ldr	r0, [pc, #464]	; (800a5d4 <lfs_fs_deorphan+0x344>)
 800a404:	9002      	str	r0, [sp, #8]
 800a406:	9201      	str	r2, [sp, #4]
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	460b      	mov	r3, r1
 800a40c:	f241 3218 	movw	r2, #4888	; 0x1318
 800a410:	4971      	ldr	r1, [pc, #452]	; (800a5d8 <lfs_fs_deorphan+0x348>)
 800a412:	4873      	ldr	r0, [pc, #460]	; (800a5e0 <lfs_fs_deorphan+0x350>)
 800a414:	f000 fe4e 	bl	800b0b4 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800a418:	2200      	movs	r2, #0
 800a41a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7ff fe12 	bl	800a048 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800a424:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fa f8e2 	bl	80045f2 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800a42e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800a432:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a436:	4293      	cmp	r3, r2
 800a438:	d007      	beq.n	800a44a <lfs_fs_deorphan+0x1ba>
 800a43a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800a43e:	029b      	lsls	r3, r3, #10
 800a440:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a444:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a448:	e000      	b.n	800a44c <lfs_fs_deorphan+0x1bc>
 800a44a:	2300      	movs	r3, #0
 800a44c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a450:	2300      	movs	r3, #0
 800a452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a456:	4b63      	ldr	r3, [pc, #396]	; (800a5e4 <lfs_fs_deorphan+0x354>)
 800a458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a45c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a460:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a464:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800a468:	f107 0108 	add.w	r1, r7, #8
 800a46c:	2302      	movs	r3, #2
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7fd f938 	bl	80076e4 <lfs_dir_orphaningcommit>
 800a474:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 800a478:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fa f89e 	bl	80045be <lfs_pair_fromle32>
                        if (state < 0) {
 800a482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a486:	2b00      	cmp	r3, #0
 800a488:	da02      	bge.n	800a490 <lfs_fs_deorphan+0x200>
                            return state;
 800a48a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 800a48e:	e062      	b.n	800a556 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800a490:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a494:	2b03      	cmp	r3, #3
 800a496:	d16b      	bne.n	800a570 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 800a498:	2301      	movs	r3, #1
 800a49a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800a49e:	e067      	b.n	800a570 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 800a4a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d159      	bne.n	800a55c <lfs_fs_deorphan+0x2cc>
 800a4a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4ac:	f113 0f02 	cmn.w	r3, #2
 800a4b0:	d154      	bne.n	800a55c <lfs_fs_deorphan+0x2cc>
 800a4b2:	78fb      	ldrb	r3, [r7, #3]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d051      	beq.n	800a55c <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800a4b8:	6a3a      	ldr	r2, [r7, #32]
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	4945      	ldr	r1, [pc, #276]	; (800a5d4 <lfs_fs_deorphan+0x344>)
 800a4be:	9101      	str	r1, [sp, #4]
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	f241 3238 	movw	r2, #4920	; 0x1338
 800a4c8:	4943      	ldr	r1, [pc, #268]	; (800a5d8 <lfs_fs_deorphan+0x348>)
 800a4ca:	4847      	ldr	r0, [pc, #284]	; (800a5e8 <lfs_fs_deorphan+0x358>)
 800a4cc:	f000 fdf2 	bl	800b0b4 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a4d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a4da:	4619      	mov	r1, r3
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7fb fe81 	bl	80061e4 <lfs_dir_getgstate>
 800a4e2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 800a4e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <lfs_fs_deorphan+0x264>
                        return err;
 800a4ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4f2:	e030      	b.n	800a556 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800a4f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a4f8:	3318      	adds	r3, #24
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fa f879 	bl	80045f2 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800a500:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a504:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800a508:	051a      	lsls	r2, r3, #20
 800a50a:	4b38      	ldr	r3, [pc, #224]	; (800a5ec <lfs_fs_deorphan+0x35c>)
 800a50c:	4313      	orrs	r3, r2
 800a50e:	673b      	str	r3, [r7, #112]	; 0x70
 800a510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a514:	3318      	adds	r3, #24
 800a516:	677b      	str	r3, [r7, #116]	; 0x74
 800a518:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a51c:	f107 0108 	add.w	r1, r7, #8
 800a520:	2301      	movs	r3, #1
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7fd f8de 	bl	80076e4 <lfs_dir_orphaningcommit>
 800a528:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800a52c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a530:	3318      	adds	r3, #24
 800a532:	4618      	mov	r0, r3
 800a534:	f7fa f843 	bl	80045be <lfs_pair_fromle32>
                    if (state < 0) {
 800a538:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	da02      	bge.n	800a546 <lfs_fs_deorphan+0x2b6>
                        return state;
 800a540:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 800a544:	e03f      	b.n	800a5c6 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800a546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d104      	bne.n	800a558 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 800a54e:	2301      	movs	r3, #1
 800a550:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800a554:	e00c      	b.n	800a570 <lfs_fs_deorphan+0x2e0>
                return err;
 800a556:	e036      	b.n	800a5c6 <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 800a558:	bf00      	nop
 800a55a:	e009      	b.n	800a570 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 800a55c:	f107 0408 	add.w	r4, r7, #8
 800a560:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800a564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a568:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a56c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 800a570:	f107 0308 	add.w	r3, r7, #8
 800a574:	3318      	adds	r3, #24
 800a576:	4618      	mov	r0, r3
 800a578:	f7f9 ffaf 	bl	80044da <lfs_pair_isnull>
 800a57c:	4603      	mov	r3, r0
 800a57e:	f083 0301 	eor.w	r3, r3, #1
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b00      	cmp	r3, #0
 800a586:	f47f aea9 	bne.w	800a2dc <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 800a58a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <lfs_fs_deorphan+0x306>
 800a592:	2300      	movs	r3, #0
 800a594:	e002      	b.n	800a59c <lfs_fs_deorphan+0x30c>
 800a596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a59a:	3301      	adds	r3, #1
 800a59c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 800a5a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	f77f ae8a 	ble.w	800a2be <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3330      	adds	r3, #48	; 0x30
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fa f92a 	bl	8004808 <lfs_gstate_getorphans>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	425b      	negs	r3, r3
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	b25b      	sxtb	r3, r3
 800a5bc:	4619      	mov	r1, r3
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7ff fcf2 	bl	8009fa8 <lfs_fs_preporphans>
 800a5c4:	4603      	mov	r3, r0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	37b8      	adds	r7, #184	; 0xb8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	7ffffc00 	.word	0x7ffffc00
 800a5d4:	0800c000 	.word	0x0800c000
 800a5d8:	0800bf0c 	.word	0x0800bf0c
 800a5dc:	0800c7e8 	.word	0x0800c7e8
 800a5e0:	0800c82c 	.word	0x0800c82c
 800a5e4:	600ffc08 	.word	0x600ffc08
 800a5e8:	0800c874 	.word	0x0800c874
 800a5ec:	000ffc08 	.word	0x000ffc08

0800a5f0 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff fd5f 	bl	800a0bc <lfs_fs_desuperblock>
 800a5fe:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <lfs_fs_forceconsistency+0x1a>
        return err;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	e013      	b.n	800a632 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7ff fdc4 	bl	800a198 <lfs_fs_demove>
 800a610:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <lfs_fs_forceconsistency+0x2c>
        return err;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	e00a      	b.n	800a632 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 800a61c:	2101      	movs	r1, #1
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff fe36 	bl	800a290 <lfs_fs_deorphan>
 800a624:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <lfs_fs_forceconsistency+0x40>
        return err;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	e000      	b.n	800a632 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800a63a:	b480      	push	{r7}
 800a63c:	b085      	sub	sp, #20
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	601a      	str	r2, [r3, #0]
    return 0;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800a66c:	f107 0208 	add.w	r2, r7, #8
 800a670:	2300      	movs	r3, #0
 800a672:	4907      	ldr	r1, [pc, #28]	; (800a690 <lfs_fs_rawsize+0x30>)
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff f9fd 	bl	8009a74 <lfs_fs_rawtraverse>
 800a67a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <lfs_fs_rawsize+0x26>
        return err;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	e000      	b.n	800a688 <lfs_fs_rawsize+0x28>
    }

    return size;
 800a686:	68bb      	ldr	r3, [r7, #8]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	0800a63b 	.word	0x0800a63b

0800a694 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <lfs_format+0x18>
        return err;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	e005      	b.n	800a6b8 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7fe ff20 	bl	80094f4 <lfs_rawformat>
 800a6b4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <lfs_mount+0x18>
        return err;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	e005      	b.n	800a6e4 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7fe ffac 	bl	8009638 <lfs_rawmount>
 800a6e0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	617b      	str	r3, [r7, #20]
    if (err) {
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <lfs_file_open+0x1c>
        return err;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	e01a      	b.n	800a73e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fa f9e0 	bl	8004ad4 <lfs_mlist_isopen>
 800a714:	4603      	mov	r3, r0
 800a716:	f083 0301 	eor.w	r3, r3, #1
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d106      	bne.n	800a72e <lfs_file_open+0x42>
 800a720:	4b09      	ldr	r3, [pc, #36]	; (800a748 <lfs_file_open+0x5c>)
 800a722:	4a0a      	ldr	r2, [pc, #40]	; (800a74c <lfs_file_open+0x60>)
 800a724:	f241 61ec 	movw	r1, #5868	; 0x16ec
 800a728:	4809      	ldr	r0, [pc, #36]	; (800a750 <lfs_file_open+0x64>)
 800a72a:	f000 fb27 	bl	800ad7c <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	68b9      	ldr	r1, [r7, #8]
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f7fd feeb 	bl	8008510 <lfs_file_rawopen>
 800a73a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a73c:	697b      	ldr	r3, [r7, #20]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	0800c8a4 	.word	0x0800c8a4
 800a74c:	0800cc8c 	.word	0x0800cc8c
 800a750:	0800bf0c 	.word	0x0800bf0c

0800a754 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a75e:	2300      	movs	r3, #0
 800a760:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <lfs_file_close+0x18>
        return err;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	e015      	b.n	800a798 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	4618      	mov	r0, r3
 800a774:	f7fa f9ae 	bl	8004ad4 <lfs_mlist_isopen>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d106      	bne.n	800a78c <lfs_file_close+0x38>
 800a77e:	4b08      	ldr	r3, [pc, #32]	; (800a7a0 <lfs_file_close+0x4c>)
 800a780:	4a08      	ldr	r2, [pc, #32]	; (800a7a4 <lfs_file_close+0x50>)
 800a782:	f241 7110 	movw	r1, #5904	; 0x1710
 800a786:	4808      	ldr	r0, [pc, #32]	; (800a7a8 <lfs_file_close+0x54>)
 800a788:	f000 faf8 	bl	800ad7c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7fd fed6 	bl	8008540 <lfs_file_rawclose>
 800a794:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a796:	68fb      	ldr	r3, [r7, #12]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	0800c8dc 	.word	0x0800c8dc
 800a7a4:	0800cc9c 	.word	0x0800cc9c
 800a7a8:	0800bf0c 	.word	0x0800bf0c

0800a7ac <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	617b      	str	r3, [r7, #20]
    if (err) {
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <lfs_file_read+0x1c>
        return err;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	e017      	b.n	800a7f8 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7cc:	68b9      	ldr	r1, [r7, #8]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fa f980 	bl	8004ad4 <lfs_mlist_isopen>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d106      	bne.n	800a7e8 <lfs_file_read+0x3c>
 800a7da:	4b09      	ldr	r3, [pc, #36]	; (800a800 <lfs_file_read+0x54>)
 800a7dc:	4a09      	ldr	r2, [pc, #36]	; (800a804 <lfs_file_read+0x58>)
 800a7de:	f241 7132 	movw	r1, #5938	; 0x1732
 800a7e2:	4809      	ldr	r0, [pc, #36]	; (800a808 <lfs_file_read+0x5c>)
 800a7e4:	f000 faca 	bl	800ad7c <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	68b9      	ldr	r1, [r7, #8]
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f7fe f9f2 	bl	8008bd8 <lfs_file_rawread>
 800a7f4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a7f6:	693b      	ldr	r3, [r7, #16]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3718      	adds	r7, #24
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	0800c8dc 	.word	0x0800c8dc
 800a804:	0800ccac 	.word	0x0800ccac
 800a808:	0800bf0c 	.word	0x0800bf0c

0800a80c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a81a:	2300      	movs	r3, #0
 800a81c:	617b      	str	r3, [r7, #20]
    if (err) {
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <lfs_file_write+0x1c>
        return err;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	e017      	b.n	800a858 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82c:	68b9      	ldr	r1, [r7, #8]
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fa f950 	bl	8004ad4 <lfs_mlist_isopen>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d106      	bne.n	800a848 <lfs_file_write+0x3c>
 800a83a:	4b09      	ldr	r3, [pc, #36]	; (800a860 <lfs_file_write+0x54>)
 800a83c:	4a09      	ldr	r2, [pc, #36]	; (800a864 <lfs_file_write+0x58>)
 800a83e:	f241 7144 	movw	r1, #5956	; 0x1744
 800a842:	4809      	ldr	r0, [pc, #36]	; (800a868 <lfs_file_write+0x5c>)
 800a844:	f000 fa9a 	bl	800ad7c <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	68b9      	ldr	r1, [r7, #8]
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f7fe fb22 	bl	8008e98 <lfs_file_rawwrite>
 800a854:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a856:	693b      	ldr	r3, [r7, #16]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	0800c8dc 	.word	0x0800c8dc
 800a864:	0800ccbc 	.word	0x0800ccbc
 800a868:	0800bf0c 	.word	0x0800bf0c

0800a86c <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a876:	2300      	movs	r3, #0
 800a878:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d001      	beq.n	800a884 <lfs_file_rewind+0x18>
        return err;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	e005      	b.n	800a890 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f7fe fc13 	bl	80090b2 <lfs_file_rawrewind>
 800a88c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a88e:	68fb      	ldr	r3, [r7, #12]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	617b      	str	r3, [r7, #20]
 800a8ac:	e024      	b.n	800a8f8 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	091a      	lsrs	r2, r3, #4
 800a8b2:	6939      	ldr	r1, [r7, #16]
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	440b      	add	r3, r1
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	404b      	eors	r3, r1
 800a8c0:	f003 030f 	and.w	r3, r3, #15
 800a8c4:	4912      	ldr	r1, [pc, #72]	; (800a910 <lfs_crc+0x78>)
 800a8c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a8ca:	4053      	eors	r3, r2
 800a8cc:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	091a      	lsrs	r2, r3, #4
 800a8d2:	6939      	ldr	r1, [r7, #16]
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	440b      	add	r3, r1
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	091b      	lsrs	r3, r3, #4
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	4619      	mov	r1, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	404b      	eors	r3, r1
 800a8e4:	f003 030f 	and.w	r3, r3, #15
 800a8e8:	4909      	ldr	r1, [pc, #36]	; (800a910 <lfs_crc+0x78>)
 800a8ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a8ee:	4053      	eors	r3, r2
 800a8f0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	617b      	str	r3, [r7, #20]
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d3d6      	bcc.n	800a8ae <lfs_crc+0x16>
    }

    return crc;
 800a900:	68fb      	ldr	r3, [r7, #12]
}
 800a902:	4618      	mov	r0, r3
 800a904:	371c      	adds	r7, #28
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	0800cccc 	.word	0x0800cccc

0800a914 <m24cxx_init>:

#include "m24cxx.h"

/* Public functions */

M24CXX_StatusTypeDef m24cxx_init(M24CXX_HandleTypeDef *m24cxx, I2C_HandleTypeDef *i2c, uint8_t i2c_address) {
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	4613      	mov	r3, r2
 800a920:	71fb      	strb	r3, [r7, #7]

    M24CXXDBG("M24CXX Init type = %s size = %d ", M24CXX_TYPE, M24CXX_SIZE);
 800a922:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a926:	490d      	ldr	r1, [pc, #52]	; (800a95c <m24cxx_init+0x48>)
 800a928:	480d      	ldr	r0, [pc, #52]	; (800a960 <m24cxx_init+0x4c>)
 800a92a:	f000 fbc3 	bl	800b0b4 <iprintf>
 800a92e:	200a      	movs	r0, #10
 800a930:	f000 fbd2 	bl	800b0d8 <putchar>

    m24cxx->i2c = i2c;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	601a      	str	r2, [r3, #0]
    m24cxx->i2c_address = i2c_address;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	79fa      	ldrb	r2, [r7, #7]
 800a93e:	711a      	strb	r2, [r3, #4]

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
#endif

    if (m24cxx_isconnected(m24cxx) != M24CXX_Ok)
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 f80f 	bl	800a964 <m24cxx_isconnected>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <m24cxx_init+0x3c>
        return M24CXX_Err;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e000      	b.n	800a952 <m24cxx_init+0x3e>

    return M24CXX_Ok;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	0800c94c 	.word	0x0800c94c
 800a960:	0800c954 	.word	0x0800c954

0800a964 <m24cxx_isconnected>:

M24CXX_StatusTypeDef m24cxx_isconnected(M24CXX_HandleTypeDef *m24cxx) {
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]

    if (HAL_I2C_IsDeviceReady(m24cxx->i2c, m24cxx->i2c_address << 1, 2, HAL_MAX_DELAY) != HAL_OK) {
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6818      	ldr	r0, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	791b      	ldrb	r3, [r3, #4]
 800a974:	b29b      	uxth	r3, r3
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	b299      	uxth	r1, r3
 800a97a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a97e:	2202      	movs	r2, #2
 800a980:	f7f7 fc5e 	bl	8002240 <HAL_I2C_IsDeviceReady>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <m24cxx_isconnected+0x2a>
        return M24CXX_Err;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e000      	b.n	800a990 <m24cxx_isconnected+0x2c>
    }

    return M24CXX_Ok;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <m24cxx_wait>:

M24CXX_StatusTypeDef m24cxx_wait(M24CXX_HandleTypeDef *m24cxx) {
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();
 800a9a0:	f7f6 fcc0 	bl	8001324 <HAL_GetTick>
 800a9a4:	60f8      	str	r0, [r7, #12]
    while (m24cxx_isconnected(m24cxx) != M24CXX_Ok) {
 800a9a6:	e008      	b.n	800a9ba <m24cxx_wait+0x22>
        if (HAL_GetTick() - start_time >= M24CXX_WRITE_TIMEOUT)
 800a9a8:	f7f6 fcbc 	bl	8001324 <HAL_GetTick>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	2b63      	cmp	r3, #99	; 0x63
 800a9b4:	d901      	bls.n	800a9ba <m24cxx_wait+0x22>
            return M24CXX_Err;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e006      	b.n	800a9c8 <m24cxx_wait+0x30>
    while (m24cxx_isconnected(m24cxx) != M24CXX_Ok) {
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7ff ffd2 	bl	800a964 <m24cxx_isconnected>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1f0      	bne.n	800a9a8 <m24cxx_wait+0x10>
    }
    return M24CXX_Ok;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <m24cxx_read>:

M24CXX_StatusTypeDef m24cxx_read(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 800a9d0:	b5b0      	push	{r4, r5, r7, lr}
 800a9d2:	b090      	sub	sp, #64	; 0x40
 800a9d4:	af04      	add	r7, sp, #16
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
 800a9dc:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX read - address = 0x%04lx len = 0x%04lx", address, len);
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	68b9      	ldr	r1, [r7, #8]
 800a9e2:	4843      	ldr	r0, [pc, #268]	; (800aaf0 <m24cxx_read+0x120>)
 800a9e4:	f000 fb66 	bl	800b0b4 <iprintf>
 800a9e8:	200a      	movs	r0, #10
 800a9ea:	f000 fb75 	bl	800b0d8 <putchar>

    uint32_t page_start = address / M24CXX_READ_PAGE_SIZE;
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	0a1b      	lsrs	r3, r3, #8
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t page_end = ((address + len - 1) / M24CXX_READ_PAGE_SIZE);
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	0a1b      	lsrs	r3, r3, #8
 800a9fe:	623b      	str	r3, [r7, #32]
    uint32_t data_offset = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	62fb      	str	r3, [r7, #44]	; 0x2c

    M24CXXDBG("Reading %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);
 800aa04:	6a3a      	ldr	r2, [r7, #32]
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	1c59      	adds	r1, r3, #1
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa10:	4838      	ldr	r0, [pc, #224]	; (800aaf4 <m24cxx_read+0x124>)
 800aa12:	f000 fb4f 	bl	800b0b4 <iprintf>
 800aa16:	200a      	movs	r0, #10
 800aa18:	f000 fb5e 	bl	800b0d8 <putchar>

    for (uint32_t page = page_start; page <= page_end; ++page) {
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa20:	e05d      	b.n	800aade <m24cxx_read+0x10e>

        uint32_t i2c_address, start_address, read_len;

        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 800aa22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d002      	beq.n	800aa30 <m24cxx_read+0x60>
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	021b      	lsls	r3, r3, #8
 800aa2e:	e000      	b.n	800aa32 <m24cxx_read+0x62>
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	61fb      	str	r3, [r7, #28]
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 800aa34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d103      	bne.n	800aa44 <m24cxx_read+0x74>
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	e00b      	b.n	800aa5c <m24cxx_read+0x8c>
 800aa44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d105      	bne.n	800aa58 <m24cxx_read+0x88>
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	3301      	adds	r3, #1
 800aa50:	021a      	lsls	r2, r3, #8
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	e001      	b.n	800aa5c <m24cxx_read+0x8c>
 800aa58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa5c:	61bb      	str	r3, [r7, #24]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	791b      	ldrb	r3, [r3, #4]
 800aa62:	461a      	mov	r2, r3
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	0c1b      	lsrs	r3, r3, #16
 800aa68:	4413      	add	r3, r2
 800aa6a:	617b      	str	r3, [r7, #20]

        M24CXXDBG("Reading page %lu, i2c address = 0x%02lx start = 0x%04lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address & M24CXX_ADDRESS_MASK, read_len, data_offset);
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa72:	9301      	str	r3, [sp, #4]
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa7e:	481e      	ldr	r0, [pc, #120]	; (800aaf8 <m24cxx_read+0x128>)
 800aa80:	f000 fb18 	bl	800b0b4 <iprintf>
 800aa84:	200a      	movs	r0, #10
 800aa86:	f000 fb27 	bl	800b0d8 <putchar>

        HAL_StatusTypeDef result = HAL_I2C_Mem_Read(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, read_len, HAL_MAX_DELAY);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6818      	ldr	r0, [r3, #0]
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	b299      	uxth	r1, r3
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	b29c      	uxth	r4, r3
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	4413      	add	r3, r2
 800aaa0:	69ba      	ldr	r2, [r7, #24]
 800aaa2:	b292      	uxth	r2, r2
 800aaa4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aaa8:	9502      	str	r5, [sp, #8]
 800aaaa:	9201      	str	r2, [sp, #4]
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	2310      	movs	r3, #16
 800aab0:	4622      	mov	r2, r4
 800aab2:	f7f7 f99f 	bl	8001df4 <HAL_I2C_Mem_Read>
 800aab6:	4603      	mov	r3, r0
 800aab8:	74fb      	strb	r3, [r7, #19]

        if (result != HAL_OK) {
 800aaba:	7cfb      	ldrb	r3, [r7, #19]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d007      	beq.n	800aad0 <m24cxx_read+0x100>
            M24CXXDBG("Failed to read memory");
 800aac0:	480e      	ldr	r0, [pc, #56]	; (800aafc <m24cxx_read+0x12c>)
 800aac2:	f000 faf7 	bl	800b0b4 <iprintf>
 800aac6:	200a      	movs	r0, #10
 800aac8:	f000 fb06 	bl	800b0d8 <putchar>
            return M24CXX_Err;
 800aacc:	2301      	movs	r3, #1
 800aace:	e00b      	b.n	800aae8 <m24cxx_read+0x118>
        }

        data_offset += read_len;
 800aad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	4413      	add	r3, r2
 800aad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t page = page_start; page <= page_end; ++page) {
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	3301      	adds	r3, #1
 800aadc:	62bb      	str	r3, [r7, #40]	; 0x28
 800aade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae0:	6a3b      	ldr	r3, [r7, #32]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d99d      	bls.n	800aa22 <m24cxx_read+0x52>

    }

    return M24CXX_Ok;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3730      	adds	r7, #48	; 0x30
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bdb0      	pop	{r4, r5, r7, pc}
 800aaf0:	0800c978 	.word	0x0800c978
 800aaf4:	0800c9a8 	.word	0x0800c9a8
 800aaf8:	0800c9cc 	.word	0x0800c9cc
 800aafc:	0800ca24 	.word	0x0800ca24

0800ab00 <m24cxx_write>:

M24CXX_StatusTypeDef m24cxx_write(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 800ab00:	b5b0      	push	{r4, r5, r7, lr}
 800ab02:	b090      	sub	sp, #64	; 0x40
 800ab04:	af04      	add	r7, sp, #16
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
 800ab0c:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX write - address = 0x%04lx len = 0x%04lx", address, len);
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	68b9      	ldr	r1, [r7, #8]
 800ab12:	484b      	ldr	r0, [pc, #300]	; (800ac40 <m24cxx_write+0x140>)
 800ab14:	f000 face 	bl	800b0b4 <iprintf>
 800ab18:	200a      	movs	r0, #10
 800ab1a:	f000 fadd 	bl	800b0d8 <putchar>

    uint32_t page_start = address / M24CXX_WRITE_PAGE_SIZE;
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	0a1b      	lsrs	r3, r3, #8
 800ab22:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t page_end = ((address + len - 1) / M24CXX_WRITE_PAGE_SIZE);
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	4413      	add	r3, r2
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	0a1b      	lsrs	r3, r3, #8
 800ab2e:	623b      	str	r3, [r7, #32]
    uint32_t data_offset = 0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	62fb      	str	r3, [r7, #44]	; 0x2c

    M24CXXDBG("Writing %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);
 800ab34:	6a3a      	ldr	r2, [r7, #32]
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	1ad3      	subs	r3, r2, r3
 800ab3a:	1c59      	adds	r1, r3, #1
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab40:	4840      	ldr	r0, [pc, #256]	; (800ac44 <m24cxx_write+0x144>)
 800ab42:	f000 fab7 	bl	800b0b4 <iprintf>
 800ab46:	200a      	movs	r0, #10
 800ab48:	f000 fac6 	bl	800b0d8 <putchar>

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_RESET);
#endif

    for (uint32_t page = page_start; page <= page_end; ++page) {
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab50:	e06c      	b.n	800ac2c <m24cxx_write+0x12c>

        uint32_t i2c_address, start_address, write_len;

        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 800ab52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d002      	beq.n	800ab60 <m24cxx_write+0x60>
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	021b      	lsls	r3, r3, #8
 800ab5e:	e000      	b.n	800ab62 <m24cxx_write+0x62>
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	61fb      	str	r3, [r7, #28]
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 800ab64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d103      	bne.n	800ab74 <m24cxx_write+0x74>
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	e00b      	b.n	800ab8c <m24cxx_write+0x8c>
 800ab74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d105      	bne.n	800ab88 <m24cxx_write+0x88>
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	3301      	adds	r3, #1
 800ab80:	021a      	lsls	r2, r3, #8
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	e001      	b.n	800ab8c <m24cxx_write+0x8c>
 800ab88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab8c:	61bb      	str	r3, [r7, #24]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	791b      	ldrb	r3, [r3, #4]
 800ab92:	461a      	mov	r2, r3
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	0c1b      	lsrs	r3, r3, #16
 800ab98:	4413      	add	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]

        M24CXXDBG("Writing page %lu, i2c address = 0x%02lx start = 0x%04lx len masked = 0x%04lx = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address, start_address & M24CXX_ADDRESS_MASK, write_len, data_offset);
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aba2:	9202      	str	r2, [sp, #8]
 800aba4:	69ba      	ldr	r2, [r7, #24]
 800aba6:	9201      	str	r2, [sp, #4]
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abb0:	4825      	ldr	r0, [pc, #148]	; (800ac48 <m24cxx_write+0x148>)
 800abb2:	f000 fa7f 	bl	800b0b4 <iprintf>
 800abb6:	200a      	movs	r0, #10
 800abb8:	f000 fa8e 	bl	800b0d8 <putchar>

        HAL_StatusTypeDef result = HAL_I2C_Mem_Write(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, write_len, HAL_MAX_DELAY);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	005b      	lsls	r3, r3, #1
 800abc6:	b299      	uxth	r1, r3
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	b29c      	uxth	r4, r3
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	4413      	add	r3, r2
 800abd2:	69ba      	ldr	r2, [r7, #24]
 800abd4:	b292      	uxth	r2, r2
 800abd6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800abda:	9502      	str	r5, [sp, #8]
 800abdc:	9201      	str	r2, [sp, #4]
 800abde:	9300      	str	r3, [sp, #0]
 800abe0:	2310      	movs	r3, #16
 800abe2:	4622      	mov	r2, r4
 800abe4:	f7f7 f80c 	bl	8001c00 <HAL_I2C_Mem_Write>
 800abe8:	4603      	mov	r3, r0
 800abea:	74fb      	strb	r3, [r7, #19]

        if (result != HAL_OK) {
 800abec:	7cfb      	ldrb	r3, [r7, #19]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d007      	beq.n	800ac02 <m24cxx_write+0x102>
            M24CXXDBG("Failed to write memory");
 800abf2:	4816      	ldr	r0, [pc, #88]	; (800ac4c <m24cxx_write+0x14c>)
 800abf4:	f000 fa5e 	bl	800b0b4 <iprintf>
 800abf8:	200a      	movs	r0, #10
 800abfa:	f000 fa6d 	bl	800b0d8 <putchar>
            return M24CXX_Err;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e019      	b.n	800ac36 <m24cxx_write+0x136>
        }

        data_offset += write_len;
 800ac02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	4413      	add	r3, r2
 800ac08:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (m24cxx_wait(m24cxx) != M24CXX_Ok) {
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f7ff fec4 	bl	800a998 <m24cxx_wait>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d007      	beq.n	800ac26 <m24cxx_write+0x126>
            M24CXXDBG("M24Cxx Device never got ready");
 800ac16:	480e      	ldr	r0, [pc, #56]	; (800ac50 <m24cxx_write+0x150>)
 800ac18:	f000 fa4c 	bl	800b0b4 <iprintf>
 800ac1c:	200a      	movs	r0, #10
 800ac1e:	f000 fa5b 	bl	800b0d8 <putchar>
            return M24CXX_Err;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e007      	b.n	800ac36 <m24cxx_write+0x136>
    for (uint32_t page = page_start; page <= page_end; ++page) {
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	3301      	adds	r3, #1
 800ac2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d98e      	bls.n	800ab52 <m24cxx_write+0x52>

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
#endif

    return M24CXX_Ok;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3730      	adds	r7, #48	; 0x30
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bdb0      	pop	{r4, r5, r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	0800ca3c 	.word	0x0800ca3c
 800ac44:	0800ca6c 	.word	0x0800ca6c
 800ac48:	0800ca90 	.word	0x0800ca90
 800ac4c:	0800caf8 	.word	0x0800caf8
 800ac50:	0800cb10 	.word	0x0800cb10

0800ac54 <m24cxx_erase>:

M24CXX_StatusTypeDef m24cxx_erase(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint32_t len) {
 800ac54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac58:	b089      	sub	sp, #36	; 0x24
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	60b9      	str	r1, [r7, #8]
 800ac60:	607a      	str	r2, [r7, #4]
 800ac62:	466b      	mov	r3, sp
 800ac64:	461e      	mov	r6, r3

    M24CXXDBG("M24CXX erase - address = 0x%04lx len = 0x%04lx", address, len);
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	4821      	ldr	r0, [pc, #132]	; (800acf0 <m24cxx_erase+0x9c>)
 800ac6c:	f000 fa22 	bl	800b0b4 <iprintf>
 800ac70:	200a      	movs	r0, #10
 800ac72:	f000 fa31 	bl	800b0d8 <putchar>

    uint8_t buf[len];
 800ac76:	6879      	ldr	r1, [r7, #4]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	61fb      	str	r3, [r7, #28]
 800ac7e:	2300      	movs	r3, #0
 800ac80:	4688      	mov	r8, r1
 800ac82:	4699      	mov	r9, r3
 800ac84:	f04f 0200 	mov.w	r2, #0
 800ac88:	f04f 0300 	mov.w	r3, #0
 800ac8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ac90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ac94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ac98:	2300      	movs	r3, #0
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	461d      	mov	r5, r3
 800ac9e:	f04f 0200 	mov.w	r2, #0
 800aca2:	f04f 0300 	mov.w	r3, #0
 800aca6:	00eb      	lsls	r3, r5, #3
 800aca8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800acac:	00e2      	lsls	r2, r4, #3
 800acae:	1dcb      	adds	r3, r1, #7
 800acb0:	08db      	lsrs	r3, r3, #3
 800acb2:	00db      	lsls	r3, r3, #3
 800acb4:	ebad 0d03 	sub.w	sp, sp, r3
 800acb8:	466b      	mov	r3, sp
 800acba:	3300      	adds	r3, #0
 800acbc:	61bb      	str	r3, [r7, #24]

    memset(buf, 0xff, len);
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	21ff      	movs	r1, #255	; 0xff
 800acc2:	69b8      	ldr	r0, [r7, #24]
 800acc4:	f000 fa63 	bl	800b18e <memset>

    M24CXX_StatusTypeDef result = m24cxx_write(m24cxx, address, (uint8_t*) &buf, len);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	69ba      	ldr	r2, [r7, #24]
 800accc:	68b9      	ldr	r1, [r7, #8]
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f7ff ff16 	bl	800ab00 <m24cxx_write>
 800acd4:	4603      	mov	r3, r0
 800acd6:	75fb      	strb	r3, [r7, #23]
    if (result != M24CXX_Ok)
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <m24cxx_erase+0x8e>
        return result;
 800acde:	7dfb      	ldrb	r3, [r7, #23]
 800ace0:	e000      	b.n	800ace4 <m24cxx_erase+0x90>

    return M24CXX_Ok;
 800ace2:	2300      	movs	r3, #0
 800ace4:	46b5      	mov	sp, r6
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3724      	adds	r7, #36	; 0x24
 800acea:	46bd      	mov	sp, r7
 800acec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acf0:	0800cb30 	.word	0x0800cb30

0800acf4 <m24cxx_erase_all>:

M24CXX_StatusTypeDef m24cxx_erase_all(M24CXX_HandleTypeDef *m24cxx) {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b0c4      	sub	sp, #272	; 0x110
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800acfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800ad02:	6018      	str	r0, [r3, #0]

    M24CXXDBG("M24CXX erase all");
 800ad04:	481c      	ldr	r0, [pc, #112]	; (800ad78 <m24cxx_erase_all+0x84>)
 800ad06:	f000 f9d5 	bl	800b0b4 <iprintf>
 800ad0a:	200a      	movs	r0, #10
 800ad0c:	f000 f9e4 	bl	800b0d8 <putchar>

    uint8_t buf[M24CXX_WRITE_PAGE_SIZE];

    memset(buf, 0xff, sizeof(buf));
 800ad10:	f107 0308 	add.w	r3, r7, #8
 800ad14:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad18:	21ff      	movs	r1, #255	; 0xff
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 fa37 	bl	800b18e <memset>

    for (uint32_t i = 0; i < M24CXX_SIZE / M24CXX_WRITE_PAGE_SIZE; ++i) {
 800ad20:	2300      	movs	r3, #0
 800ad22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ad26:	e01c      	b.n	800ad62 <m24cxx_erase_all+0x6e>
        M24CXX_StatusTypeDef result = m24cxx_write(m24cxx, i * M24CXX_WRITE_PAGE_SIZE, (uint8_t*) &buf, sizeof(buf));
 800ad28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad2c:	0219      	lsls	r1, r3, #8
 800ad2e:	f107 0208 	add.w	r2, r7, #8
 800ad32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad36:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 800ad3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad3e:	6800      	ldr	r0, [r0, #0]
 800ad40:	f7ff fede 	bl	800ab00 <m24cxx_write>
 800ad44:	4603      	mov	r3, r0
 800ad46:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        if (result != M24CXX_Ok)
 800ad4a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <m24cxx_erase_all+0x64>
            return result;
 800ad52:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800ad56:	e00a      	b.n	800ad6e <m24cxx_erase_all+0x7a>
    for (uint32_t i = 0; i < M24CXX_SIZE / M24CXX_WRITE_PAGE_SIZE; ++i) {
 800ad58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ad62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ad66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad6a:	d3dd      	bcc.n	800ad28 <m24cxx_erase_all+0x34>
    }

    return M24CXX_Ok;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	0800cb60 	.word	0x0800cb60

0800ad7c <__assert_func>:
 800ad7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad7e:	4614      	mov	r4, r2
 800ad80:	461a      	mov	r2, r3
 800ad82:	4b09      	ldr	r3, [pc, #36]	; (800ada8 <__assert_func+0x2c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4605      	mov	r5, r0
 800ad88:	68d8      	ldr	r0, [r3, #12]
 800ad8a:	b14c      	cbz	r4, 800ada0 <__assert_func+0x24>
 800ad8c:	4b07      	ldr	r3, [pc, #28]	; (800adac <__assert_func+0x30>)
 800ad8e:	9100      	str	r1, [sp, #0]
 800ad90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad94:	4906      	ldr	r1, [pc, #24]	; (800adb0 <__assert_func+0x34>)
 800ad96:	462b      	mov	r3, r5
 800ad98:	f000 f95c 	bl	800b054 <fiprintf>
 800ad9c:	f000 fabe 	bl	800b31c <abort>
 800ada0:	4b04      	ldr	r3, [pc, #16]	; (800adb4 <__assert_func+0x38>)
 800ada2:	461c      	mov	r4, r3
 800ada4:	e7f3      	b.n	800ad8e <__assert_func+0x12>
 800ada6:	bf00      	nop
 800ada8:	200000b0 	.word	0x200000b0
 800adac:	0800cd0c 	.word	0x0800cd0c
 800adb0:	0800cd19 	.word	0x0800cd19
 800adb4:	0800cd47 	.word	0x0800cd47

0800adb8 <malloc>:
 800adb8:	4b02      	ldr	r3, [pc, #8]	; (800adc4 <malloc+0xc>)
 800adba:	4601      	mov	r1, r0
 800adbc:	6818      	ldr	r0, [r3, #0]
 800adbe:	f000 b82b 	b.w	800ae18 <_malloc_r>
 800adc2:	bf00      	nop
 800adc4:	200000b0 	.word	0x200000b0

0800adc8 <free>:
 800adc8:	4b02      	ldr	r3, [pc, #8]	; (800add4 <free+0xc>)
 800adca:	4601      	mov	r1, r0
 800adcc:	6818      	ldr	r0, [r3, #0]
 800adce:	f000 baad 	b.w	800b32c <_free_r>
 800add2:	bf00      	nop
 800add4:	200000b0 	.word	0x200000b0

0800add8 <sbrk_aligned>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	4e0e      	ldr	r6, [pc, #56]	; (800ae14 <sbrk_aligned+0x3c>)
 800addc:	460c      	mov	r4, r1
 800adde:	6831      	ldr	r1, [r6, #0]
 800ade0:	4605      	mov	r5, r0
 800ade2:	b911      	cbnz	r1, 800adea <sbrk_aligned+0x12>
 800ade4:	f000 fa3e 	bl	800b264 <_sbrk_r>
 800ade8:	6030      	str	r0, [r6, #0]
 800adea:	4621      	mov	r1, r4
 800adec:	4628      	mov	r0, r5
 800adee:	f000 fa39 	bl	800b264 <_sbrk_r>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	d00a      	beq.n	800ae0c <sbrk_aligned+0x34>
 800adf6:	1cc4      	adds	r4, r0, #3
 800adf8:	f024 0403 	bic.w	r4, r4, #3
 800adfc:	42a0      	cmp	r0, r4
 800adfe:	d007      	beq.n	800ae10 <sbrk_aligned+0x38>
 800ae00:	1a21      	subs	r1, r4, r0
 800ae02:	4628      	mov	r0, r5
 800ae04:	f000 fa2e 	bl	800b264 <_sbrk_r>
 800ae08:	3001      	adds	r0, #1
 800ae0a:	d101      	bne.n	800ae10 <sbrk_aligned+0x38>
 800ae0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ae10:	4620      	mov	r0, r4
 800ae12:	bd70      	pop	{r4, r5, r6, pc}
 800ae14:	20000350 	.word	0x20000350

0800ae18 <_malloc_r>:
 800ae18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae1c:	1ccd      	adds	r5, r1, #3
 800ae1e:	f025 0503 	bic.w	r5, r5, #3
 800ae22:	3508      	adds	r5, #8
 800ae24:	2d0c      	cmp	r5, #12
 800ae26:	bf38      	it	cc
 800ae28:	250c      	movcc	r5, #12
 800ae2a:	2d00      	cmp	r5, #0
 800ae2c:	4607      	mov	r7, r0
 800ae2e:	db01      	blt.n	800ae34 <_malloc_r+0x1c>
 800ae30:	42a9      	cmp	r1, r5
 800ae32:	d905      	bls.n	800ae40 <_malloc_r+0x28>
 800ae34:	230c      	movs	r3, #12
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	2600      	movs	r6, #0
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af14 <_malloc_r+0xfc>
 800ae44:	f000 f868 	bl	800af18 <__malloc_lock>
 800ae48:	f8d8 3000 	ldr.w	r3, [r8]
 800ae4c:	461c      	mov	r4, r3
 800ae4e:	bb5c      	cbnz	r4, 800aea8 <_malloc_r+0x90>
 800ae50:	4629      	mov	r1, r5
 800ae52:	4638      	mov	r0, r7
 800ae54:	f7ff ffc0 	bl	800add8 <sbrk_aligned>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	d155      	bne.n	800af0a <_malloc_r+0xf2>
 800ae5e:	f8d8 4000 	ldr.w	r4, [r8]
 800ae62:	4626      	mov	r6, r4
 800ae64:	2e00      	cmp	r6, #0
 800ae66:	d145      	bne.n	800aef4 <_malloc_r+0xdc>
 800ae68:	2c00      	cmp	r4, #0
 800ae6a:	d048      	beq.n	800aefe <_malloc_r+0xe6>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	4631      	mov	r1, r6
 800ae70:	4638      	mov	r0, r7
 800ae72:	eb04 0903 	add.w	r9, r4, r3
 800ae76:	f000 f9f5 	bl	800b264 <_sbrk_r>
 800ae7a:	4581      	cmp	r9, r0
 800ae7c:	d13f      	bne.n	800aefe <_malloc_r+0xe6>
 800ae7e:	6821      	ldr	r1, [r4, #0]
 800ae80:	1a6d      	subs	r5, r5, r1
 800ae82:	4629      	mov	r1, r5
 800ae84:	4638      	mov	r0, r7
 800ae86:	f7ff ffa7 	bl	800add8 <sbrk_aligned>
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d037      	beq.n	800aefe <_malloc_r+0xe6>
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	442b      	add	r3, r5
 800ae92:	6023      	str	r3, [r4, #0]
 800ae94:	f8d8 3000 	ldr.w	r3, [r8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d038      	beq.n	800af0e <_malloc_r+0xf6>
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	42a2      	cmp	r2, r4
 800aea0:	d12b      	bne.n	800aefa <_malloc_r+0xe2>
 800aea2:	2200      	movs	r2, #0
 800aea4:	605a      	str	r2, [r3, #4]
 800aea6:	e00f      	b.n	800aec8 <_malloc_r+0xb0>
 800aea8:	6822      	ldr	r2, [r4, #0]
 800aeaa:	1b52      	subs	r2, r2, r5
 800aeac:	d41f      	bmi.n	800aeee <_malloc_r+0xd6>
 800aeae:	2a0b      	cmp	r2, #11
 800aeb0:	d917      	bls.n	800aee2 <_malloc_r+0xca>
 800aeb2:	1961      	adds	r1, r4, r5
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	6025      	str	r5, [r4, #0]
 800aeb8:	bf18      	it	ne
 800aeba:	6059      	strne	r1, [r3, #4]
 800aebc:	6863      	ldr	r3, [r4, #4]
 800aebe:	bf08      	it	eq
 800aec0:	f8c8 1000 	streq.w	r1, [r8]
 800aec4:	5162      	str	r2, [r4, r5]
 800aec6:	604b      	str	r3, [r1, #4]
 800aec8:	4638      	mov	r0, r7
 800aeca:	f104 060b 	add.w	r6, r4, #11
 800aece:	f000 f829 	bl	800af24 <__malloc_unlock>
 800aed2:	f026 0607 	bic.w	r6, r6, #7
 800aed6:	1d23      	adds	r3, r4, #4
 800aed8:	1af2      	subs	r2, r6, r3
 800aeda:	d0ae      	beq.n	800ae3a <_malloc_r+0x22>
 800aedc:	1b9b      	subs	r3, r3, r6
 800aede:	50a3      	str	r3, [r4, r2]
 800aee0:	e7ab      	b.n	800ae3a <_malloc_r+0x22>
 800aee2:	42a3      	cmp	r3, r4
 800aee4:	6862      	ldr	r2, [r4, #4]
 800aee6:	d1dd      	bne.n	800aea4 <_malloc_r+0x8c>
 800aee8:	f8c8 2000 	str.w	r2, [r8]
 800aeec:	e7ec      	b.n	800aec8 <_malloc_r+0xb0>
 800aeee:	4623      	mov	r3, r4
 800aef0:	6864      	ldr	r4, [r4, #4]
 800aef2:	e7ac      	b.n	800ae4e <_malloc_r+0x36>
 800aef4:	4634      	mov	r4, r6
 800aef6:	6876      	ldr	r6, [r6, #4]
 800aef8:	e7b4      	b.n	800ae64 <_malloc_r+0x4c>
 800aefa:	4613      	mov	r3, r2
 800aefc:	e7cc      	b.n	800ae98 <_malloc_r+0x80>
 800aefe:	230c      	movs	r3, #12
 800af00:	603b      	str	r3, [r7, #0]
 800af02:	4638      	mov	r0, r7
 800af04:	f000 f80e 	bl	800af24 <__malloc_unlock>
 800af08:	e797      	b.n	800ae3a <_malloc_r+0x22>
 800af0a:	6025      	str	r5, [r4, #0]
 800af0c:	e7dc      	b.n	800aec8 <_malloc_r+0xb0>
 800af0e:	605b      	str	r3, [r3, #4]
 800af10:	deff      	udf	#255	; 0xff
 800af12:	bf00      	nop
 800af14:	2000034c 	.word	0x2000034c

0800af18 <__malloc_lock>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__malloc_lock+0x8>)
 800af1a:	f000 b9ef 	b.w	800b2fc <__retarget_lock_acquire_recursive>
 800af1e:	bf00      	nop
 800af20:	20000494 	.word	0x20000494

0800af24 <__malloc_unlock>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__malloc_unlock+0x8>)
 800af26:	f000 b9ea 	b.w	800b2fe <__retarget_lock_release_recursive>
 800af2a:	bf00      	nop
 800af2c:	20000494 	.word	0x20000494

0800af30 <std>:
 800af30:	2300      	movs	r3, #0
 800af32:	b510      	push	{r4, lr}
 800af34:	4604      	mov	r4, r0
 800af36:	e9c0 3300 	strd	r3, r3, [r0]
 800af3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af3e:	6083      	str	r3, [r0, #8]
 800af40:	8181      	strh	r1, [r0, #12]
 800af42:	6643      	str	r3, [r0, #100]	; 0x64
 800af44:	81c2      	strh	r2, [r0, #14]
 800af46:	6183      	str	r3, [r0, #24]
 800af48:	4619      	mov	r1, r3
 800af4a:	2208      	movs	r2, #8
 800af4c:	305c      	adds	r0, #92	; 0x5c
 800af4e:	f000 f91e 	bl	800b18e <memset>
 800af52:	4b05      	ldr	r3, [pc, #20]	; (800af68 <std+0x38>)
 800af54:	6263      	str	r3, [r4, #36]	; 0x24
 800af56:	4b05      	ldr	r3, [pc, #20]	; (800af6c <std+0x3c>)
 800af58:	62a3      	str	r3, [r4, #40]	; 0x28
 800af5a:	4b05      	ldr	r3, [pc, #20]	; (800af70 <std+0x40>)
 800af5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af5e:	4b05      	ldr	r3, [pc, #20]	; (800af74 <std+0x44>)
 800af60:	6224      	str	r4, [r4, #32]
 800af62:	6323      	str	r3, [r4, #48]	; 0x30
 800af64:	bd10      	pop	{r4, pc}
 800af66:	bf00      	nop
 800af68:	0800b0e9 	.word	0x0800b0e9
 800af6c:	0800b10b 	.word	0x0800b10b
 800af70:	0800b143 	.word	0x0800b143
 800af74:	0800b167 	.word	0x0800b167

0800af78 <stdio_exit_handler>:
 800af78:	4a02      	ldr	r2, [pc, #8]	; (800af84 <stdio_exit_handler+0xc>)
 800af7a:	4903      	ldr	r1, [pc, #12]	; (800af88 <stdio_exit_handler+0x10>)
 800af7c:	4803      	ldr	r0, [pc, #12]	; (800af8c <stdio_exit_handler+0x14>)
 800af7e:	f000 b87b 	b.w	800b078 <_fwalk_sglue>
 800af82:	bf00      	nop
 800af84:	20000058 	.word	0x20000058
 800af88:	0800ba79 	.word	0x0800ba79
 800af8c:	20000064 	.word	0x20000064

0800af90 <cleanup_stdio>:
 800af90:	6841      	ldr	r1, [r0, #4]
 800af92:	4b0c      	ldr	r3, [pc, #48]	; (800afc4 <cleanup_stdio+0x34>)
 800af94:	4299      	cmp	r1, r3
 800af96:	b510      	push	{r4, lr}
 800af98:	4604      	mov	r4, r0
 800af9a:	d001      	beq.n	800afa0 <cleanup_stdio+0x10>
 800af9c:	f000 fd6c 	bl	800ba78 <_fflush_r>
 800afa0:	68a1      	ldr	r1, [r4, #8]
 800afa2:	4b09      	ldr	r3, [pc, #36]	; (800afc8 <cleanup_stdio+0x38>)
 800afa4:	4299      	cmp	r1, r3
 800afa6:	d002      	beq.n	800afae <cleanup_stdio+0x1e>
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 fd65 	bl	800ba78 <_fflush_r>
 800afae:	68e1      	ldr	r1, [r4, #12]
 800afb0:	4b06      	ldr	r3, [pc, #24]	; (800afcc <cleanup_stdio+0x3c>)
 800afb2:	4299      	cmp	r1, r3
 800afb4:	d004      	beq.n	800afc0 <cleanup_stdio+0x30>
 800afb6:	4620      	mov	r0, r4
 800afb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afbc:	f000 bd5c 	b.w	800ba78 <_fflush_r>
 800afc0:	bd10      	pop	{r4, pc}
 800afc2:	bf00      	nop
 800afc4:	20000354 	.word	0x20000354
 800afc8:	200003bc 	.word	0x200003bc
 800afcc:	20000424 	.word	0x20000424

0800afd0 <global_stdio_init.part.0>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	4b0b      	ldr	r3, [pc, #44]	; (800b000 <global_stdio_init.part.0+0x30>)
 800afd4:	4c0b      	ldr	r4, [pc, #44]	; (800b004 <global_stdio_init.part.0+0x34>)
 800afd6:	4a0c      	ldr	r2, [pc, #48]	; (800b008 <global_stdio_init.part.0+0x38>)
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	4620      	mov	r0, r4
 800afdc:	2200      	movs	r2, #0
 800afde:	2104      	movs	r1, #4
 800afe0:	f7ff ffa6 	bl	800af30 <std>
 800afe4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800afe8:	2201      	movs	r2, #1
 800afea:	2109      	movs	r1, #9
 800afec:	f7ff ffa0 	bl	800af30 <std>
 800aff0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aff4:	2202      	movs	r2, #2
 800aff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800affa:	2112      	movs	r1, #18
 800affc:	f7ff bf98 	b.w	800af30 <std>
 800b000:	2000048c 	.word	0x2000048c
 800b004:	20000354 	.word	0x20000354
 800b008:	0800af79 	.word	0x0800af79

0800b00c <__sfp_lock_acquire>:
 800b00c:	4801      	ldr	r0, [pc, #4]	; (800b014 <__sfp_lock_acquire+0x8>)
 800b00e:	f000 b975 	b.w	800b2fc <__retarget_lock_acquire_recursive>
 800b012:	bf00      	nop
 800b014:	20000495 	.word	0x20000495

0800b018 <__sfp_lock_release>:
 800b018:	4801      	ldr	r0, [pc, #4]	; (800b020 <__sfp_lock_release+0x8>)
 800b01a:	f000 b970 	b.w	800b2fe <__retarget_lock_release_recursive>
 800b01e:	bf00      	nop
 800b020:	20000495 	.word	0x20000495

0800b024 <__sinit>:
 800b024:	b510      	push	{r4, lr}
 800b026:	4604      	mov	r4, r0
 800b028:	f7ff fff0 	bl	800b00c <__sfp_lock_acquire>
 800b02c:	6a23      	ldr	r3, [r4, #32]
 800b02e:	b11b      	cbz	r3, 800b038 <__sinit+0x14>
 800b030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b034:	f7ff bff0 	b.w	800b018 <__sfp_lock_release>
 800b038:	4b04      	ldr	r3, [pc, #16]	; (800b04c <__sinit+0x28>)
 800b03a:	6223      	str	r3, [r4, #32]
 800b03c:	4b04      	ldr	r3, [pc, #16]	; (800b050 <__sinit+0x2c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1f5      	bne.n	800b030 <__sinit+0xc>
 800b044:	f7ff ffc4 	bl	800afd0 <global_stdio_init.part.0>
 800b048:	e7f2      	b.n	800b030 <__sinit+0xc>
 800b04a:	bf00      	nop
 800b04c:	0800af91 	.word	0x0800af91
 800b050:	2000048c 	.word	0x2000048c

0800b054 <fiprintf>:
 800b054:	b40e      	push	{r1, r2, r3}
 800b056:	b503      	push	{r0, r1, lr}
 800b058:	4601      	mov	r1, r0
 800b05a:	ab03      	add	r3, sp, #12
 800b05c:	4805      	ldr	r0, [pc, #20]	; (800b074 <fiprintf+0x20>)
 800b05e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b062:	6800      	ldr	r0, [r0, #0]
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	f000 f9d7 	bl	800b418 <_vfiprintf_r>
 800b06a:	b002      	add	sp, #8
 800b06c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b070:	b003      	add	sp, #12
 800b072:	4770      	bx	lr
 800b074:	200000b0 	.word	0x200000b0

0800b078 <_fwalk_sglue>:
 800b078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b07c:	4607      	mov	r7, r0
 800b07e:	4688      	mov	r8, r1
 800b080:	4614      	mov	r4, r2
 800b082:	2600      	movs	r6, #0
 800b084:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b088:	f1b9 0901 	subs.w	r9, r9, #1
 800b08c:	d505      	bpl.n	800b09a <_fwalk_sglue+0x22>
 800b08e:	6824      	ldr	r4, [r4, #0]
 800b090:	2c00      	cmp	r4, #0
 800b092:	d1f7      	bne.n	800b084 <_fwalk_sglue+0xc>
 800b094:	4630      	mov	r0, r6
 800b096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b09a:	89ab      	ldrh	r3, [r5, #12]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d907      	bls.n	800b0b0 <_fwalk_sglue+0x38>
 800b0a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	d003      	beq.n	800b0b0 <_fwalk_sglue+0x38>
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	47c0      	blx	r8
 800b0ae:	4306      	orrs	r6, r0
 800b0b0:	3568      	adds	r5, #104	; 0x68
 800b0b2:	e7e9      	b.n	800b088 <_fwalk_sglue+0x10>

0800b0b4 <iprintf>:
 800b0b4:	b40f      	push	{r0, r1, r2, r3}
 800b0b6:	b507      	push	{r0, r1, r2, lr}
 800b0b8:	4906      	ldr	r1, [pc, #24]	; (800b0d4 <iprintf+0x20>)
 800b0ba:	ab04      	add	r3, sp, #16
 800b0bc:	6808      	ldr	r0, [r1, #0]
 800b0be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0c2:	6881      	ldr	r1, [r0, #8]
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	f000 f9a7 	bl	800b418 <_vfiprintf_r>
 800b0ca:	b003      	add	sp, #12
 800b0cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0d0:	b004      	add	sp, #16
 800b0d2:	4770      	bx	lr
 800b0d4:	200000b0 	.word	0x200000b0

0800b0d8 <putchar>:
 800b0d8:	4b02      	ldr	r3, [pc, #8]	; (800b0e4 <putchar+0xc>)
 800b0da:	4601      	mov	r1, r0
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	6882      	ldr	r2, [r0, #8]
 800b0e0:	f000 bcf2 	b.w	800bac8 <_putc_r>
 800b0e4:	200000b0 	.word	0x200000b0

0800b0e8 <__sread>:
 800b0e8:	b510      	push	{r4, lr}
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f0:	f000 f8a6 	bl	800b240 <_read_r>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	bfab      	itete	ge
 800b0f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b0fc:	181b      	addge	r3, r3, r0
 800b0fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b102:	bfac      	ite	ge
 800b104:	6563      	strge	r3, [r4, #84]	; 0x54
 800b106:	81a3      	strhlt	r3, [r4, #12]
 800b108:	bd10      	pop	{r4, pc}

0800b10a <__swrite>:
 800b10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b10e:	461f      	mov	r7, r3
 800b110:	898b      	ldrh	r3, [r1, #12]
 800b112:	05db      	lsls	r3, r3, #23
 800b114:	4605      	mov	r5, r0
 800b116:	460c      	mov	r4, r1
 800b118:	4616      	mov	r6, r2
 800b11a:	d505      	bpl.n	800b128 <__swrite+0x1e>
 800b11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b120:	2302      	movs	r3, #2
 800b122:	2200      	movs	r2, #0
 800b124:	f000 f87a 	bl	800b21c <_lseek_r>
 800b128:	89a3      	ldrh	r3, [r4, #12]
 800b12a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b12e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b132:	81a3      	strh	r3, [r4, #12]
 800b134:	4632      	mov	r2, r6
 800b136:	463b      	mov	r3, r7
 800b138:	4628      	mov	r0, r5
 800b13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b13e:	f000 b8a1 	b.w	800b284 <_write_r>

0800b142 <__sseek>:
 800b142:	b510      	push	{r4, lr}
 800b144:	460c      	mov	r4, r1
 800b146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14a:	f000 f867 	bl	800b21c <_lseek_r>
 800b14e:	1c43      	adds	r3, r0, #1
 800b150:	89a3      	ldrh	r3, [r4, #12]
 800b152:	bf15      	itete	ne
 800b154:	6560      	strne	r0, [r4, #84]	; 0x54
 800b156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b15a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b15e:	81a3      	strheq	r3, [r4, #12]
 800b160:	bf18      	it	ne
 800b162:	81a3      	strhne	r3, [r4, #12]
 800b164:	bd10      	pop	{r4, pc}

0800b166 <__sclose>:
 800b166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b16a:	f000 b847 	b.w	800b1fc <_close_r>

0800b16e <memcmp>:
 800b16e:	b510      	push	{r4, lr}
 800b170:	3901      	subs	r1, #1
 800b172:	4402      	add	r2, r0
 800b174:	4290      	cmp	r0, r2
 800b176:	d101      	bne.n	800b17c <memcmp+0xe>
 800b178:	2000      	movs	r0, #0
 800b17a:	e005      	b.n	800b188 <memcmp+0x1a>
 800b17c:	7803      	ldrb	r3, [r0, #0]
 800b17e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b182:	42a3      	cmp	r3, r4
 800b184:	d001      	beq.n	800b18a <memcmp+0x1c>
 800b186:	1b18      	subs	r0, r3, r4
 800b188:	bd10      	pop	{r4, pc}
 800b18a:	3001      	adds	r0, #1
 800b18c:	e7f2      	b.n	800b174 <memcmp+0x6>

0800b18e <memset>:
 800b18e:	4402      	add	r2, r0
 800b190:	4603      	mov	r3, r0
 800b192:	4293      	cmp	r3, r2
 800b194:	d100      	bne.n	800b198 <memset+0xa>
 800b196:	4770      	bx	lr
 800b198:	f803 1b01 	strb.w	r1, [r3], #1
 800b19c:	e7f9      	b.n	800b192 <memset+0x4>

0800b19e <strchr>:
 800b19e:	b2c9      	uxtb	r1, r1
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a6:	b11a      	cbz	r2, 800b1b0 <strchr+0x12>
 800b1a8:	428a      	cmp	r2, r1
 800b1aa:	d1f9      	bne.n	800b1a0 <strchr+0x2>
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	4770      	bx	lr
 800b1b0:	2900      	cmp	r1, #0
 800b1b2:	bf18      	it	ne
 800b1b4:	2300      	movne	r3, #0
 800b1b6:	e7f9      	b.n	800b1ac <strchr+0xe>

0800b1b8 <strcspn>:
 800b1b8:	b570      	push	{r4, r5, r6, lr}
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	461e      	mov	r6, r3
 800b1be:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b1c2:	b144      	cbz	r4, 800b1d6 <strcspn+0x1e>
 800b1c4:	1e4a      	subs	r2, r1, #1
 800b1c6:	e001      	b.n	800b1cc <strcspn+0x14>
 800b1c8:	42a5      	cmp	r5, r4
 800b1ca:	d004      	beq.n	800b1d6 <strcspn+0x1e>
 800b1cc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b1d0:	2d00      	cmp	r5, #0
 800b1d2:	d1f9      	bne.n	800b1c8 <strcspn+0x10>
 800b1d4:	e7f2      	b.n	800b1bc <strcspn+0x4>
 800b1d6:	1a30      	subs	r0, r6, r0
 800b1d8:	bd70      	pop	{r4, r5, r6, pc}

0800b1da <strspn>:
 800b1da:	b570      	push	{r4, r5, r6, lr}
 800b1dc:	4603      	mov	r3, r0
 800b1de:	461e      	mov	r6, r3
 800b1e0:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b1e4:	b13c      	cbz	r4, 800b1f6 <strspn+0x1c>
 800b1e6:	1e4a      	subs	r2, r1, #1
 800b1e8:	e001      	b.n	800b1ee <strspn+0x14>
 800b1ea:	42a5      	cmp	r5, r4
 800b1ec:	d0f7      	beq.n	800b1de <strspn+0x4>
 800b1ee:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b1f2:	2d00      	cmp	r5, #0
 800b1f4:	d1f9      	bne.n	800b1ea <strspn+0x10>
 800b1f6:	1a30      	subs	r0, r6, r0
 800b1f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1fc <_close_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	4d06      	ldr	r5, [pc, #24]	; (800b218 <_close_r+0x1c>)
 800b200:	2300      	movs	r3, #0
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	602b      	str	r3, [r5, #0]
 800b208:	f7f5 ff7f 	bl	800110a <_close>
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	d102      	bne.n	800b216 <_close_r+0x1a>
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	b103      	cbz	r3, 800b216 <_close_r+0x1a>
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	bd38      	pop	{r3, r4, r5, pc}
 800b218:	20000490 	.word	0x20000490

0800b21c <_lseek_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	4d07      	ldr	r5, [pc, #28]	; (800b23c <_lseek_r+0x20>)
 800b220:	4604      	mov	r4, r0
 800b222:	4608      	mov	r0, r1
 800b224:	4611      	mov	r1, r2
 800b226:	2200      	movs	r2, #0
 800b228:	602a      	str	r2, [r5, #0]
 800b22a:	461a      	mov	r2, r3
 800b22c:	f7f5 ff94 	bl	8001158 <_lseek>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_lseek_r+0x1e>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_lseek_r+0x1e>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	20000490 	.word	0x20000490

0800b240 <_read_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	4d07      	ldr	r5, [pc, #28]	; (800b260 <_read_r+0x20>)
 800b244:	4604      	mov	r4, r0
 800b246:	4608      	mov	r0, r1
 800b248:	4611      	mov	r1, r2
 800b24a:	2200      	movs	r2, #0
 800b24c:	602a      	str	r2, [r5, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	f7f5 ff3e 	bl	80010d0 <_read>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	d102      	bne.n	800b25e <_read_r+0x1e>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	b103      	cbz	r3, 800b25e <_read_r+0x1e>
 800b25c:	6023      	str	r3, [r4, #0]
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	20000490 	.word	0x20000490

0800b264 <_sbrk_r>:
 800b264:	b538      	push	{r3, r4, r5, lr}
 800b266:	4d06      	ldr	r5, [pc, #24]	; (800b280 <_sbrk_r+0x1c>)
 800b268:	2300      	movs	r3, #0
 800b26a:	4604      	mov	r4, r0
 800b26c:	4608      	mov	r0, r1
 800b26e:	602b      	str	r3, [r5, #0]
 800b270:	f7f5 ff80 	bl	8001174 <_sbrk>
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	d102      	bne.n	800b27e <_sbrk_r+0x1a>
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	b103      	cbz	r3, 800b27e <_sbrk_r+0x1a>
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	20000490 	.word	0x20000490

0800b284 <_write_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	4d07      	ldr	r5, [pc, #28]	; (800b2a4 <_write_r+0x20>)
 800b288:	4604      	mov	r4, r0
 800b28a:	4608      	mov	r0, r1
 800b28c:	4611      	mov	r1, r2
 800b28e:	2200      	movs	r2, #0
 800b290:	602a      	str	r2, [r5, #0]
 800b292:	461a      	mov	r2, r3
 800b294:	f7f5 fa1c 	bl	80006d0 <_write>
 800b298:	1c43      	adds	r3, r0, #1
 800b29a:	d102      	bne.n	800b2a2 <_write_r+0x1e>
 800b29c:	682b      	ldr	r3, [r5, #0]
 800b29e:	b103      	cbz	r3, 800b2a2 <_write_r+0x1e>
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	bd38      	pop	{r3, r4, r5, pc}
 800b2a4:	20000490 	.word	0x20000490

0800b2a8 <__errno>:
 800b2a8:	4b01      	ldr	r3, [pc, #4]	; (800b2b0 <__errno+0x8>)
 800b2aa:	6818      	ldr	r0, [r3, #0]
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	200000b0 	.word	0x200000b0

0800b2b4 <__libc_init_array>:
 800b2b4:	b570      	push	{r4, r5, r6, lr}
 800b2b6:	4d0d      	ldr	r5, [pc, #52]	; (800b2ec <__libc_init_array+0x38>)
 800b2b8:	4c0d      	ldr	r4, [pc, #52]	; (800b2f0 <__libc_init_array+0x3c>)
 800b2ba:	1b64      	subs	r4, r4, r5
 800b2bc:	10a4      	asrs	r4, r4, #2
 800b2be:	2600      	movs	r6, #0
 800b2c0:	42a6      	cmp	r6, r4
 800b2c2:	d109      	bne.n	800b2d8 <__libc_init_array+0x24>
 800b2c4:	4d0b      	ldr	r5, [pc, #44]	; (800b2f4 <__libc_init_array+0x40>)
 800b2c6:	4c0c      	ldr	r4, [pc, #48]	; (800b2f8 <__libc_init_array+0x44>)
 800b2c8:	f000 fd90 	bl	800bdec <_init>
 800b2cc:	1b64      	subs	r4, r4, r5
 800b2ce:	10a4      	asrs	r4, r4, #2
 800b2d0:	2600      	movs	r6, #0
 800b2d2:	42a6      	cmp	r6, r4
 800b2d4:	d105      	bne.n	800b2e2 <__libc_init_array+0x2e>
 800b2d6:	bd70      	pop	{r4, r5, r6, pc}
 800b2d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2dc:	4798      	blx	r3
 800b2de:	3601      	adds	r6, #1
 800b2e0:	e7ee      	b.n	800b2c0 <__libc_init_array+0xc>
 800b2e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2e6:	4798      	blx	r3
 800b2e8:	3601      	adds	r6, #1
 800b2ea:	e7f2      	b.n	800b2d2 <__libc_init_array+0x1e>
 800b2ec:	0800cd84 	.word	0x0800cd84
 800b2f0:	0800cd84 	.word	0x0800cd84
 800b2f4:	0800cd84 	.word	0x0800cd84
 800b2f8:	0800cd88 	.word	0x0800cd88

0800b2fc <__retarget_lock_acquire_recursive>:
 800b2fc:	4770      	bx	lr

0800b2fe <__retarget_lock_release_recursive>:
 800b2fe:	4770      	bx	lr

0800b300 <memcpy>:
 800b300:	440a      	add	r2, r1
 800b302:	4291      	cmp	r1, r2
 800b304:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b308:	d100      	bne.n	800b30c <memcpy+0xc>
 800b30a:	4770      	bx	lr
 800b30c:	b510      	push	{r4, lr}
 800b30e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b316:	4291      	cmp	r1, r2
 800b318:	d1f9      	bne.n	800b30e <memcpy+0xe>
 800b31a:	bd10      	pop	{r4, pc}

0800b31c <abort>:
 800b31c:	b508      	push	{r3, lr}
 800b31e:	2006      	movs	r0, #6
 800b320:	f000 fcc4 	bl	800bcac <raise>
 800b324:	2001      	movs	r0, #1
 800b326:	f7f5 fec9 	bl	80010bc <_exit>
	...

0800b32c <_free_r>:
 800b32c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b32e:	2900      	cmp	r1, #0
 800b330:	d044      	beq.n	800b3bc <_free_r+0x90>
 800b332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b336:	9001      	str	r0, [sp, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f1a1 0404 	sub.w	r4, r1, #4
 800b33e:	bfb8      	it	lt
 800b340:	18e4      	addlt	r4, r4, r3
 800b342:	f7ff fde9 	bl	800af18 <__malloc_lock>
 800b346:	4a1e      	ldr	r2, [pc, #120]	; (800b3c0 <_free_r+0x94>)
 800b348:	9801      	ldr	r0, [sp, #4]
 800b34a:	6813      	ldr	r3, [r2, #0]
 800b34c:	b933      	cbnz	r3, 800b35c <_free_r+0x30>
 800b34e:	6063      	str	r3, [r4, #4]
 800b350:	6014      	str	r4, [r2, #0]
 800b352:	b003      	add	sp, #12
 800b354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b358:	f7ff bde4 	b.w	800af24 <__malloc_unlock>
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	d908      	bls.n	800b372 <_free_r+0x46>
 800b360:	6825      	ldr	r5, [r4, #0]
 800b362:	1961      	adds	r1, r4, r5
 800b364:	428b      	cmp	r3, r1
 800b366:	bf01      	itttt	eq
 800b368:	6819      	ldreq	r1, [r3, #0]
 800b36a:	685b      	ldreq	r3, [r3, #4]
 800b36c:	1949      	addeq	r1, r1, r5
 800b36e:	6021      	streq	r1, [r4, #0]
 800b370:	e7ed      	b.n	800b34e <_free_r+0x22>
 800b372:	461a      	mov	r2, r3
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	b10b      	cbz	r3, 800b37c <_free_r+0x50>
 800b378:	42a3      	cmp	r3, r4
 800b37a:	d9fa      	bls.n	800b372 <_free_r+0x46>
 800b37c:	6811      	ldr	r1, [r2, #0]
 800b37e:	1855      	adds	r5, r2, r1
 800b380:	42a5      	cmp	r5, r4
 800b382:	d10b      	bne.n	800b39c <_free_r+0x70>
 800b384:	6824      	ldr	r4, [r4, #0]
 800b386:	4421      	add	r1, r4
 800b388:	1854      	adds	r4, r2, r1
 800b38a:	42a3      	cmp	r3, r4
 800b38c:	6011      	str	r1, [r2, #0]
 800b38e:	d1e0      	bne.n	800b352 <_free_r+0x26>
 800b390:	681c      	ldr	r4, [r3, #0]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	6053      	str	r3, [r2, #4]
 800b396:	440c      	add	r4, r1
 800b398:	6014      	str	r4, [r2, #0]
 800b39a:	e7da      	b.n	800b352 <_free_r+0x26>
 800b39c:	d902      	bls.n	800b3a4 <_free_r+0x78>
 800b39e:	230c      	movs	r3, #12
 800b3a0:	6003      	str	r3, [r0, #0]
 800b3a2:	e7d6      	b.n	800b352 <_free_r+0x26>
 800b3a4:	6825      	ldr	r5, [r4, #0]
 800b3a6:	1961      	adds	r1, r4, r5
 800b3a8:	428b      	cmp	r3, r1
 800b3aa:	bf04      	itt	eq
 800b3ac:	6819      	ldreq	r1, [r3, #0]
 800b3ae:	685b      	ldreq	r3, [r3, #4]
 800b3b0:	6063      	str	r3, [r4, #4]
 800b3b2:	bf04      	itt	eq
 800b3b4:	1949      	addeq	r1, r1, r5
 800b3b6:	6021      	streq	r1, [r4, #0]
 800b3b8:	6054      	str	r4, [r2, #4]
 800b3ba:	e7ca      	b.n	800b352 <_free_r+0x26>
 800b3bc:	b003      	add	sp, #12
 800b3be:	bd30      	pop	{r4, r5, pc}
 800b3c0:	2000034c 	.word	0x2000034c

0800b3c4 <__sfputc_r>:
 800b3c4:	6893      	ldr	r3, [r2, #8]
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	b410      	push	{r4}
 800b3cc:	6093      	str	r3, [r2, #8]
 800b3ce:	da08      	bge.n	800b3e2 <__sfputc_r+0x1e>
 800b3d0:	6994      	ldr	r4, [r2, #24]
 800b3d2:	42a3      	cmp	r3, r4
 800b3d4:	db01      	blt.n	800b3da <__sfputc_r+0x16>
 800b3d6:	290a      	cmp	r1, #10
 800b3d8:	d103      	bne.n	800b3e2 <__sfputc_r+0x1e>
 800b3da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3de:	f000 bba7 	b.w	800bb30 <__swbuf_r>
 800b3e2:	6813      	ldr	r3, [r2, #0]
 800b3e4:	1c58      	adds	r0, r3, #1
 800b3e6:	6010      	str	r0, [r2, #0]
 800b3e8:	7019      	strb	r1, [r3, #0]
 800b3ea:	4608      	mov	r0, r1
 800b3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <__sfputs_r>:
 800b3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	460f      	mov	r7, r1
 800b3f8:	4614      	mov	r4, r2
 800b3fa:	18d5      	adds	r5, r2, r3
 800b3fc:	42ac      	cmp	r4, r5
 800b3fe:	d101      	bne.n	800b404 <__sfputs_r+0x12>
 800b400:	2000      	movs	r0, #0
 800b402:	e007      	b.n	800b414 <__sfputs_r+0x22>
 800b404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b408:	463a      	mov	r2, r7
 800b40a:	4630      	mov	r0, r6
 800b40c:	f7ff ffda 	bl	800b3c4 <__sfputc_r>
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	d1f3      	bne.n	800b3fc <__sfputs_r+0xa>
 800b414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b418 <_vfiprintf_r>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	460d      	mov	r5, r1
 800b41e:	b09d      	sub	sp, #116	; 0x74
 800b420:	4614      	mov	r4, r2
 800b422:	4698      	mov	r8, r3
 800b424:	4606      	mov	r6, r0
 800b426:	b118      	cbz	r0, 800b430 <_vfiprintf_r+0x18>
 800b428:	6a03      	ldr	r3, [r0, #32]
 800b42a:	b90b      	cbnz	r3, 800b430 <_vfiprintf_r+0x18>
 800b42c:	f7ff fdfa 	bl	800b024 <__sinit>
 800b430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b432:	07d9      	lsls	r1, r3, #31
 800b434:	d405      	bmi.n	800b442 <_vfiprintf_r+0x2a>
 800b436:	89ab      	ldrh	r3, [r5, #12]
 800b438:	059a      	lsls	r2, r3, #22
 800b43a:	d402      	bmi.n	800b442 <_vfiprintf_r+0x2a>
 800b43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b43e:	f7ff ff5d 	bl	800b2fc <__retarget_lock_acquire_recursive>
 800b442:	89ab      	ldrh	r3, [r5, #12]
 800b444:	071b      	lsls	r3, r3, #28
 800b446:	d501      	bpl.n	800b44c <_vfiprintf_r+0x34>
 800b448:	692b      	ldr	r3, [r5, #16]
 800b44a:	b99b      	cbnz	r3, 800b474 <_vfiprintf_r+0x5c>
 800b44c:	4629      	mov	r1, r5
 800b44e:	4630      	mov	r0, r6
 800b450:	f000 fbac 	bl	800bbac <__swsetup_r>
 800b454:	b170      	cbz	r0, 800b474 <_vfiprintf_r+0x5c>
 800b456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b458:	07dc      	lsls	r4, r3, #31
 800b45a:	d504      	bpl.n	800b466 <_vfiprintf_r+0x4e>
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b460:	b01d      	add	sp, #116	; 0x74
 800b462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b466:	89ab      	ldrh	r3, [r5, #12]
 800b468:	0598      	lsls	r0, r3, #22
 800b46a:	d4f7      	bmi.n	800b45c <_vfiprintf_r+0x44>
 800b46c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b46e:	f7ff ff46 	bl	800b2fe <__retarget_lock_release_recursive>
 800b472:	e7f3      	b.n	800b45c <_vfiprintf_r+0x44>
 800b474:	2300      	movs	r3, #0
 800b476:	9309      	str	r3, [sp, #36]	; 0x24
 800b478:	2320      	movs	r3, #32
 800b47a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b47e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b482:	2330      	movs	r3, #48	; 0x30
 800b484:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b638 <_vfiprintf_r+0x220>
 800b488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b48c:	f04f 0901 	mov.w	r9, #1
 800b490:	4623      	mov	r3, r4
 800b492:	469a      	mov	sl, r3
 800b494:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b498:	b10a      	cbz	r2, 800b49e <_vfiprintf_r+0x86>
 800b49a:	2a25      	cmp	r2, #37	; 0x25
 800b49c:	d1f9      	bne.n	800b492 <_vfiprintf_r+0x7a>
 800b49e:	ebba 0b04 	subs.w	fp, sl, r4
 800b4a2:	d00b      	beq.n	800b4bc <_vfiprintf_r+0xa4>
 800b4a4:	465b      	mov	r3, fp
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f7ff ffa1 	bl	800b3f2 <__sfputs_r>
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	f000 80a9 	beq.w	800b608 <_vfiprintf_r+0x1f0>
 800b4b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4b8:	445a      	add	r2, fp
 800b4ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b4bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f000 80a1 	beq.w	800b608 <_vfiprintf_r+0x1f0>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4d0:	f10a 0a01 	add.w	sl, sl, #1
 800b4d4:	9304      	str	r3, [sp, #16]
 800b4d6:	9307      	str	r3, [sp, #28]
 800b4d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4dc:	931a      	str	r3, [sp, #104]	; 0x68
 800b4de:	4654      	mov	r4, sl
 800b4e0:	2205      	movs	r2, #5
 800b4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e6:	4854      	ldr	r0, [pc, #336]	; (800b638 <_vfiprintf_r+0x220>)
 800b4e8:	f7f4 fe7a 	bl	80001e0 <memchr>
 800b4ec:	9a04      	ldr	r2, [sp, #16]
 800b4ee:	b9d8      	cbnz	r0, 800b528 <_vfiprintf_r+0x110>
 800b4f0:	06d1      	lsls	r1, r2, #27
 800b4f2:	bf44      	itt	mi
 800b4f4:	2320      	movmi	r3, #32
 800b4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4fa:	0713      	lsls	r3, r2, #28
 800b4fc:	bf44      	itt	mi
 800b4fe:	232b      	movmi	r3, #43	; 0x2b
 800b500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b504:	f89a 3000 	ldrb.w	r3, [sl]
 800b508:	2b2a      	cmp	r3, #42	; 0x2a
 800b50a:	d015      	beq.n	800b538 <_vfiprintf_r+0x120>
 800b50c:	9a07      	ldr	r2, [sp, #28]
 800b50e:	4654      	mov	r4, sl
 800b510:	2000      	movs	r0, #0
 800b512:	f04f 0c0a 	mov.w	ip, #10
 800b516:	4621      	mov	r1, r4
 800b518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b51c:	3b30      	subs	r3, #48	; 0x30
 800b51e:	2b09      	cmp	r3, #9
 800b520:	d94d      	bls.n	800b5be <_vfiprintf_r+0x1a6>
 800b522:	b1b0      	cbz	r0, 800b552 <_vfiprintf_r+0x13a>
 800b524:	9207      	str	r2, [sp, #28]
 800b526:	e014      	b.n	800b552 <_vfiprintf_r+0x13a>
 800b528:	eba0 0308 	sub.w	r3, r0, r8
 800b52c:	fa09 f303 	lsl.w	r3, r9, r3
 800b530:	4313      	orrs	r3, r2
 800b532:	9304      	str	r3, [sp, #16]
 800b534:	46a2      	mov	sl, r4
 800b536:	e7d2      	b.n	800b4de <_vfiprintf_r+0xc6>
 800b538:	9b03      	ldr	r3, [sp, #12]
 800b53a:	1d19      	adds	r1, r3, #4
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	9103      	str	r1, [sp, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	bfbb      	ittet	lt
 800b544:	425b      	neglt	r3, r3
 800b546:	f042 0202 	orrlt.w	r2, r2, #2
 800b54a:	9307      	strge	r3, [sp, #28]
 800b54c:	9307      	strlt	r3, [sp, #28]
 800b54e:	bfb8      	it	lt
 800b550:	9204      	strlt	r2, [sp, #16]
 800b552:	7823      	ldrb	r3, [r4, #0]
 800b554:	2b2e      	cmp	r3, #46	; 0x2e
 800b556:	d10c      	bne.n	800b572 <_vfiprintf_r+0x15a>
 800b558:	7863      	ldrb	r3, [r4, #1]
 800b55a:	2b2a      	cmp	r3, #42	; 0x2a
 800b55c:	d134      	bne.n	800b5c8 <_vfiprintf_r+0x1b0>
 800b55e:	9b03      	ldr	r3, [sp, #12]
 800b560:	1d1a      	adds	r2, r3, #4
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	9203      	str	r2, [sp, #12]
 800b566:	2b00      	cmp	r3, #0
 800b568:	bfb8      	it	lt
 800b56a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b56e:	3402      	adds	r4, #2
 800b570:	9305      	str	r3, [sp, #20]
 800b572:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b648 <_vfiprintf_r+0x230>
 800b576:	7821      	ldrb	r1, [r4, #0]
 800b578:	2203      	movs	r2, #3
 800b57a:	4650      	mov	r0, sl
 800b57c:	f7f4 fe30 	bl	80001e0 <memchr>
 800b580:	b138      	cbz	r0, 800b592 <_vfiprintf_r+0x17a>
 800b582:	9b04      	ldr	r3, [sp, #16]
 800b584:	eba0 000a 	sub.w	r0, r0, sl
 800b588:	2240      	movs	r2, #64	; 0x40
 800b58a:	4082      	lsls	r2, r0
 800b58c:	4313      	orrs	r3, r2
 800b58e:	3401      	adds	r4, #1
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b596:	4829      	ldr	r0, [pc, #164]	; (800b63c <_vfiprintf_r+0x224>)
 800b598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b59c:	2206      	movs	r2, #6
 800b59e:	f7f4 fe1f 	bl	80001e0 <memchr>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d03f      	beq.n	800b626 <_vfiprintf_r+0x20e>
 800b5a6:	4b26      	ldr	r3, [pc, #152]	; (800b640 <_vfiprintf_r+0x228>)
 800b5a8:	bb1b      	cbnz	r3, 800b5f2 <_vfiprintf_r+0x1da>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	3307      	adds	r3, #7
 800b5ae:	f023 0307 	bic.w	r3, r3, #7
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	9303      	str	r3, [sp, #12]
 800b5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b8:	443b      	add	r3, r7
 800b5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b5bc:	e768      	b.n	800b490 <_vfiprintf_r+0x78>
 800b5be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	e7a6      	b.n	800b516 <_vfiprintf_r+0xfe>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	3401      	adds	r4, #1
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	f04f 0c0a 	mov.w	ip, #10
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5da:	3a30      	subs	r2, #48	; 0x30
 800b5dc:	2a09      	cmp	r2, #9
 800b5de:	d903      	bls.n	800b5e8 <_vfiprintf_r+0x1d0>
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d0c6      	beq.n	800b572 <_vfiprintf_r+0x15a>
 800b5e4:	9105      	str	r1, [sp, #20]
 800b5e6:	e7c4      	b.n	800b572 <_vfiprintf_r+0x15a>
 800b5e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e7f0      	b.n	800b5d4 <_vfiprintf_r+0x1bc>
 800b5f2:	ab03      	add	r3, sp, #12
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	462a      	mov	r2, r5
 800b5f8:	4b12      	ldr	r3, [pc, #72]	; (800b644 <_vfiprintf_r+0x22c>)
 800b5fa:	a904      	add	r1, sp, #16
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f3af 8000 	nop.w
 800b602:	4607      	mov	r7, r0
 800b604:	1c78      	adds	r0, r7, #1
 800b606:	d1d6      	bne.n	800b5b6 <_vfiprintf_r+0x19e>
 800b608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b60a:	07d9      	lsls	r1, r3, #31
 800b60c:	d405      	bmi.n	800b61a <_vfiprintf_r+0x202>
 800b60e:	89ab      	ldrh	r3, [r5, #12]
 800b610:	059a      	lsls	r2, r3, #22
 800b612:	d402      	bmi.n	800b61a <_vfiprintf_r+0x202>
 800b614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b616:	f7ff fe72 	bl	800b2fe <__retarget_lock_release_recursive>
 800b61a:	89ab      	ldrh	r3, [r5, #12]
 800b61c:	065b      	lsls	r3, r3, #25
 800b61e:	f53f af1d 	bmi.w	800b45c <_vfiprintf_r+0x44>
 800b622:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b624:	e71c      	b.n	800b460 <_vfiprintf_r+0x48>
 800b626:	ab03      	add	r3, sp, #12
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	462a      	mov	r2, r5
 800b62c:	4b05      	ldr	r3, [pc, #20]	; (800b644 <_vfiprintf_r+0x22c>)
 800b62e:	a904      	add	r1, sp, #16
 800b630:	4630      	mov	r0, r6
 800b632:	f000 f879 	bl	800b728 <_printf_i>
 800b636:	e7e4      	b.n	800b602 <_vfiprintf_r+0x1ea>
 800b638:	0800cd48 	.word	0x0800cd48
 800b63c:	0800cd52 	.word	0x0800cd52
 800b640:	00000000 	.word	0x00000000
 800b644:	0800b3f3 	.word	0x0800b3f3
 800b648:	0800cd4e 	.word	0x0800cd4e

0800b64c <_printf_common>:
 800b64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b650:	4616      	mov	r6, r2
 800b652:	4699      	mov	r9, r3
 800b654:	688a      	ldr	r2, [r1, #8]
 800b656:	690b      	ldr	r3, [r1, #16]
 800b658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b65c:	4293      	cmp	r3, r2
 800b65e:	bfb8      	it	lt
 800b660:	4613      	movlt	r3, r2
 800b662:	6033      	str	r3, [r6, #0]
 800b664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b668:	4607      	mov	r7, r0
 800b66a:	460c      	mov	r4, r1
 800b66c:	b10a      	cbz	r2, 800b672 <_printf_common+0x26>
 800b66e:	3301      	adds	r3, #1
 800b670:	6033      	str	r3, [r6, #0]
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	0699      	lsls	r1, r3, #26
 800b676:	bf42      	ittt	mi
 800b678:	6833      	ldrmi	r3, [r6, #0]
 800b67a:	3302      	addmi	r3, #2
 800b67c:	6033      	strmi	r3, [r6, #0]
 800b67e:	6825      	ldr	r5, [r4, #0]
 800b680:	f015 0506 	ands.w	r5, r5, #6
 800b684:	d106      	bne.n	800b694 <_printf_common+0x48>
 800b686:	f104 0a19 	add.w	sl, r4, #25
 800b68a:	68e3      	ldr	r3, [r4, #12]
 800b68c:	6832      	ldr	r2, [r6, #0]
 800b68e:	1a9b      	subs	r3, r3, r2
 800b690:	42ab      	cmp	r3, r5
 800b692:	dc26      	bgt.n	800b6e2 <_printf_common+0x96>
 800b694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b698:	1e13      	subs	r3, r2, #0
 800b69a:	6822      	ldr	r2, [r4, #0]
 800b69c:	bf18      	it	ne
 800b69e:	2301      	movne	r3, #1
 800b6a0:	0692      	lsls	r2, r2, #26
 800b6a2:	d42b      	bmi.n	800b6fc <_printf_common+0xb0>
 800b6a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6a8:	4649      	mov	r1, r9
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	47c0      	blx	r8
 800b6ae:	3001      	adds	r0, #1
 800b6b0:	d01e      	beq.n	800b6f0 <_printf_common+0xa4>
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	6922      	ldr	r2, [r4, #16]
 800b6b6:	f003 0306 	and.w	r3, r3, #6
 800b6ba:	2b04      	cmp	r3, #4
 800b6bc:	bf02      	ittt	eq
 800b6be:	68e5      	ldreq	r5, [r4, #12]
 800b6c0:	6833      	ldreq	r3, [r6, #0]
 800b6c2:	1aed      	subeq	r5, r5, r3
 800b6c4:	68a3      	ldr	r3, [r4, #8]
 800b6c6:	bf0c      	ite	eq
 800b6c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6cc:	2500      	movne	r5, #0
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	bfc4      	itt	gt
 800b6d2:	1a9b      	subgt	r3, r3, r2
 800b6d4:	18ed      	addgt	r5, r5, r3
 800b6d6:	2600      	movs	r6, #0
 800b6d8:	341a      	adds	r4, #26
 800b6da:	42b5      	cmp	r5, r6
 800b6dc:	d11a      	bne.n	800b714 <_printf_common+0xc8>
 800b6de:	2000      	movs	r0, #0
 800b6e0:	e008      	b.n	800b6f4 <_printf_common+0xa8>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4652      	mov	r2, sl
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	4638      	mov	r0, r7
 800b6ea:	47c0      	blx	r8
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d103      	bne.n	800b6f8 <_printf_common+0xac>
 800b6f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f8:	3501      	adds	r5, #1
 800b6fa:	e7c6      	b.n	800b68a <_printf_common+0x3e>
 800b6fc:	18e1      	adds	r1, r4, r3
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	2030      	movs	r0, #48	; 0x30
 800b702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b706:	4422      	add	r2, r4
 800b708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b70c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b710:	3302      	adds	r3, #2
 800b712:	e7c7      	b.n	800b6a4 <_printf_common+0x58>
 800b714:	2301      	movs	r3, #1
 800b716:	4622      	mov	r2, r4
 800b718:	4649      	mov	r1, r9
 800b71a:	4638      	mov	r0, r7
 800b71c:	47c0      	blx	r8
 800b71e:	3001      	adds	r0, #1
 800b720:	d0e6      	beq.n	800b6f0 <_printf_common+0xa4>
 800b722:	3601      	adds	r6, #1
 800b724:	e7d9      	b.n	800b6da <_printf_common+0x8e>
	...

0800b728 <_printf_i>:
 800b728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b72c:	7e0f      	ldrb	r7, [r1, #24]
 800b72e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b730:	2f78      	cmp	r7, #120	; 0x78
 800b732:	4691      	mov	r9, r2
 800b734:	4680      	mov	r8, r0
 800b736:	460c      	mov	r4, r1
 800b738:	469a      	mov	sl, r3
 800b73a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b73e:	d807      	bhi.n	800b750 <_printf_i+0x28>
 800b740:	2f62      	cmp	r7, #98	; 0x62
 800b742:	d80a      	bhi.n	800b75a <_printf_i+0x32>
 800b744:	2f00      	cmp	r7, #0
 800b746:	f000 80d4 	beq.w	800b8f2 <_printf_i+0x1ca>
 800b74a:	2f58      	cmp	r7, #88	; 0x58
 800b74c:	f000 80c0 	beq.w	800b8d0 <_printf_i+0x1a8>
 800b750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b758:	e03a      	b.n	800b7d0 <_printf_i+0xa8>
 800b75a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b75e:	2b15      	cmp	r3, #21
 800b760:	d8f6      	bhi.n	800b750 <_printf_i+0x28>
 800b762:	a101      	add	r1, pc, #4	; (adr r1, 800b768 <_printf_i+0x40>)
 800b764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b768:	0800b7c1 	.word	0x0800b7c1
 800b76c:	0800b7d5 	.word	0x0800b7d5
 800b770:	0800b751 	.word	0x0800b751
 800b774:	0800b751 	.word	0x0800b751
 800b778:	0800b751 	.word	0x0800b751
 800b77c:	0800b751 	.word	0x0800b751
 800b780:	0800b7d5 	.word	0x0800b7d5
 800b784:	0800b751 	.word	0x0800b751
 800b788:	0800b751 	.word	0x0800b751
 800b78c:	0800b751 	.word	0x0800b751
 800b790:	0800b751 	.word	0x0800b751
 800b794:	0800b8d9 	.word	0x0800b8d9
 800b798:	0800b801 	.word	0x0800b801
 800b79c:	0800b893 	.word	0x0800b893
 800b7a0:	0800b751 	.word	0x0800b751
 800b7a4:	0800b751 	.word	0x0800b751
 800b7a8:	0800b8fb 	.word	0x0800b8fb
 800b7ac:	0800b751 	.word	0x0800b751
 800b7b0:	0800b801 	.word	0x0800b801
 800b7b4:	0800b751 	.word	0x0800b751
 800b7b8:	0800b751 	.word	0x0800b751
 800b7bc:	0800b89b 	.word	0x0800b89b
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	1d1a      	adds	r2, r3, #4
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	602a      	str	r2, [r5, #0]
 800b7c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e09f      	b.n	800b914 <_printf_i+0x1ec>
 800b7d4:	6820      	ldr	r0, [r4, #0]
 800b7d6:	682b      	ldr	r3, [r5, #0]
 800b7d8:	0607      	lsls	r7, r0, #24
 800b7da:	f103 0104 	add.w	r1, r3, #4
 800b7de:	6029      	str	r1, [r5, #0]
 800b7e0:	d501      	bpl.n	800b7e6 <_printf_i+0xbe>
 800b7e2:	681e      	ldr	r6, [r3, #0]
 800b7e4:	e003      	b.n	800b7ee <_printf_i+0xc6>
 800b7e6:	0646      	lsls	r6, r0, #25
 800b7e8:	d5fb      	bpl.n	800b7e2 <_printf_i+0xba>
 800b7ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b7ee:	2e00      	cmp	r6, #0
 800b7f0:	da03      	bge.n	800b7fa <_printf_i+0xd2>
 800b7f2:	232d      	movs	r3, #45	; 0x2d
 800b7f4:	4276      	negs	r6, r6
 800b7f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7fa:	485a      	ldr	r0, [pc, #360]	; (800b964 <_printf_i+0x23c>)
 800b7fc:	230a      	movs	r3, #10
 800b7fe:	e012      	b.n	800b826 <_printf_i+0xfe>
 800b800:	682b      	ldr	r3, [r5, #0]
 800b802:	6820      	ldr	r0, [r4, #0]
 800b804:	1d19      	adds	r1, r3, #4
 800b806:	6029      	str	r1, [r5, #0]
 800b808:	0605      	lsls	r5, r0, #24
 800b80a:	d501      	bpl.n	800b810 <_printf_i+0xe8>
 800b80c:	681e      	ldr	r6, [r3, #0]
 800b80e:	e002      	b.n	800b816 <_printf_i+0xee>
 800b810:	0641      	lsls	r1, r0, #25
 800b812:	d5fb      	bpl.n	800b80c <_printf_i+0xe4>
 800b814:	881e      	ldrh	r6, [r3, #0]
 800b816:	4853      	ldr	r0, [pc, #332]	; (800b964 <_printf_i+0x23c>)
 800b818:	2f6f      	cmp	r7, #111	; 0x6f
 800b81a:	bf0c      	ite	eq
 800b81c:	2308      	moveq	r3, #8
 800b81e:	230a      	movne	r3, #10
 800b820:	2100      	movs	r1, #0
 800b822:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b826:	6865      	ldr	r5, [r4, #4]
 800b828:	60a5      	str	r5, [r4, #8]
 800b82a:	2d00      	cmp	r5, #0
 800b82c:	bfa2      	ittt	ge
 800b82e:	6821      	ldrge	r1, [r4, #0]
 800b830:	f021 0104 	bicge.w	r1, r1, #4
 800b834:	6021      	strge	r1, [r4, #0]
 800b836:	b90e      	cbnz	r6, 800b83c <_printf_i+0x114>
 800b838:	2d00      	cmp	r5, #0
 800b83a:	d04b      	beq.n	800b8d4 <_printf_i+0x1ac>
 800b83c:	4615      	mov	r5, r2
 800b83e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b842:	fb03 6711 	mls	r7, r3, r1, r6
 800b846:	5dc7      	ldrb	r7, [r0, r7]
 800b848:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b84c:	4637      	mov	r7, r6
 800b84e:	42bb      	cmp	r3, r7
 800b850:	460e      	mov	r6, r1
 800b852:	d9f4      	bls.n	800b83e <_printf_i+0x116>
 800b854:	2b08      	cmp	r3, #8
 800b856:	d10b      	bne.n	800b870 <_printf_i+0x148>
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	07de      	lsls	r6, r3, #31
 800b85c:	d508      	bpl.n	800b870 <_printf_i+0x148>
 800b85e:	6923      	ldr	r3, [r4, #16]
 800b860:	6861      	ldr	r1, [r4, #4]
 800b862:	4299      	cmp	r1, r3
 800b864:	bfde      	ittt	le
 800b866:	2330      	movle	r3, #48	; 0x30
 800b868:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b86c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b870:	1b52      	subs	r2, r2, r5
 800b872:	6122      	str	r2, [r4, #16]
 800b874:	f8cd a000 	str.w	sl, [sp]
 800b878:	464b      	mov	r3, r9
 800b87a:	aa03      	add	r2, sp, #12
 800b87c:	4621      	mov	r1, r4
 800b87e:	4640      	mov	r0, r8
 800b880:	f7ff fee4 	bl	800b64c <_printf_common>
 800b884:	3001      	adds	r0, #1
 800b886:	d14a      	bne.n	800b91e <_printf_i+0x1f6>
 800b888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b88c:	b004      	add	sp, #16
 800b88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	f043 0320 	orr.w	r3, r3, #32
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	4833      	ldr	r0, [pc, #204]	; (800b968 <_printf_i+0x240>)
 800b89c:	2778      	movs	r7, #120	; 0x78
 800b89e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	6829      	ldr	r1, [r5, #0]
 800b8a6:	061f      	lsls	r7, r3, #24
 800b8a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b8ac:	d402      	bmi.n	800b8b4 <_printf_i+0x18c>
 800b8ae:	065f      	lsls	r7, r3, #25
 800b8b0:	bf48      	it	mi
 800b8b2:	b2b6      	uxthmi	r6, r6
 800b8b4:	07df      	lsls	r7, r3, #31
 800b8b6:	bf48      	it	mi
 800b8b8:	f043 0320 	orrmi.w	r3, r3, #32
 800b8bc:	6029      	str	r1, [r5, #0]
 800b8be:	bf48      	it	mi
 800b8c0:	6023      	strmi	r3, [r4, #0]
 800b8c2:	b91e      	cbnz	r6, 800b8cc <_printf_i+0x1a4>
 800b8c4:	6823      	ldr	r3, [r4, #0]
 800b8c6:	f023 0320 	bic.w	r3, r3, #32
 800b8ca:	6023      	str	r3, [r4, #0]
 800b8cc:	2310      	movs	r3, #16
 800b8ce:	e7a7      	b.n	800b820 <_printf_i+0xf8>
 800b8d0:	4824      	ldr	r0, [pc, #144]	; (800b964 <_printf_i+0x23c>)
 800b8d2:	e7e4      	b.n	800b89e <_printf_i+0x176>
 800b8d4:	4615      	mov	r5, r2
 800b8d6:	e7bd      	b.n	800b854 <_printf_i+0x12c>
 800b8d8:	682b      	ldr	r3, [r5, #0]
 800b8da:	6826      	ldr	r6, [r4, #0]
 800b8dc:	6961      	ldr	r1, [r4, #20]
 800b8de:	1d18      	adds	r0, r3, #4
 800b8e0:	6028      	str	r0, [r5, #0]
 800b8e2:	0635      	lsls	r5, r6, #24
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	d501      	bpl.n	800b8ec <_printf_i+0x1c4>
 800b8e8:	6019      	str	r1, [r3, #0]
 800b8ea:	e002      	b.n	800b8f2 <_printf_i+0x1ca>
 800b8ec:	0670      	lsls	r0, r6, #25
 800b8ee:	d5fb      	bpl.n	800b8e8 <_printf_i+0x1c0>
 800b8f0:	8019      	strh	r1, [r3, #0]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	6123      	str	r3, [r4, #16]
 800b8f6:	4615      	mov	r5, r2
 800b8f8:	e7bc      	b.n	800b874 <_printf_i+0x14c>
 800b8fa:	682b      	ldr	r3, [r5, #0]
 800b8fc:	1d1a      	adds	r2, r3, #4
 800b8fe:	602a      	str	r2, [r5, #0]
 800b900:	681d      	ldr	r5, [r3, #0]
 800b902:	6862      	ldr	r2, [r4, #4]
 800b904:	2100      	movs	r1, #0
 800b906:	4628      	mov	r0, r5
 800b908:	f7f4 fc6a 	bl	80001e0 <memchr>
 800b90c:	b108      	cbz	r0, 800b912 <_printf_i+0x1ea>
 800b90e:	1b40      	subs	r0, r0, r5
 800b910:	6060      	str	r0, [r4, #4]
 800b912:	6863      	ldr	r3, [r4, #4]
 800b914:	6123      	str	r3, [r4, #16]
 800b916:	2300      	movs	r3, #0
 800b918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b91c:	e7aa      	b.n	800b874 <_printf_i+0x14c>
 800b91e:	6923      	ldr	r3, [r4, #16]
 800b920:	462a      	mov	r2, r5
 800b922:	4649      	mov	r1, r9
 800b924:	4640      	mov	r0, r8
 800b926:	47d0      	blx	sl
 800b928:	3001      	adds	r0, #1
 800b92a:	d0ad      	beq.n	800b888 <_printf_i+0x160>
 800b92c:	6823      	ldr	r3, [r4, #0]
 800b92e:	079b      	lsls	r3, r3, #30
 800b930:	d413      	bmi.n	800b95a <_printf_i+0x232>
 800b932:	68e0      	ldr	r0, [r4, #12]
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	4298      	cmp	r0, r3
 800b938:	bfb8      	it	lt
 800b93a:	4618      	movlt	r0, r3
 800b93c:	e7a6      	b.n	800b88c <_printf_i+0x164>
 800b93e:	2301      	movs	r3, #1
 800b940:	4632      	mov	r2, r6
 800b942:	4649      	mov	r1, r9
 800b944:	4640      	mov	r0, r8
 800b946:	47d0      	blx	sl
 800b948:	3001      	adds	r0, #1
 800b94a:	d09d      	beq.n	800b888 <_printf_i+0x160>
 800b94c:	3501      	adds	r5, #1
 800b94e:	68e3      	ldr	r3, [r4, #12]
 800b950:	9903      	ldr	r1, [sp, #12]
 800b952:	1a5b      	subs	r3, r3, r1
 800b954:	42ab      	cmp	r3, r5
 800b956:	dcf2      	bgt.n	800b93e <_printf_i+0x216>
 800b958:	e7eb      	b.n	800b932 <_printf_i+0x20a>
 800b95a:	2500      	movs	r5, #0
 800b95c:	f104 0619 	add.w	r6, r4, #25
 800b960:	e7f5      	b.n	800b94e <_printf_i+0x226>
 800b962:	bf00      	nop
 800b964:	0800cd59 	.word	0x0800cd59
 800b968:	0800cd6a 	.word	0x0800cd6a

0800b96c <__sflush_r>:
 800b96c:	898a      	ldrh	r2, [r1, #12]
 800b96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b972:	4605      	mov	r5, r0
 800b974:	0710      	lsls	r0, r2, #28
 800b976:	460c      	mov	r4, r1
 800b978:	d458      	bmi.n	800ba2c <__sflush_r+0xc0>
 800b97a:	684b      	ldr	r3, [r1, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	dc05      	bgt.n	800b98c <__sflush_r+0x20>
 800b980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b982:	2b00      	cmp	r3, #0
 800b984:	dc02      	bgt.n	800b98c <__sflush_r+0x20>
 800b986:	2000      	movs	r0, #0
 800b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b98c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b98e:	2e00      	cmp	r6, #0
 800b990:	d0f9      	beq.n	800b986 <__sflush_r+0x1a>
 800b992:	2300      	movs	r3, #0
 800b994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b998:	682f      	ldr	r7, [r5, #0]
 800b99a:	6a21      	ldr	r1, [r4, #32]
 800b99c:	602b      	str	r3, [r5, #0]
 800b99e:	d032      	beq.n	800ba06 <__sflush_r+0x9a>
 800b9a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9a2:	89a3      	ldrh	r3, [r4, #12]
 800b9a4:	075a      	lsls	r2, r3, #29
 800b9a6:	d505      	bpl.n	800b9b4 <__sflush_r+0x48>
 800b9a8:	6863      	ldr	r3, [r4, #4]
 800b9aa:	1ac0      	subs	r0, r0, r3
 800b9ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9ae:	b10b      	cbz	r3, 800b9b4 <__sflush_r+0x48>
 800b9b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9b2:	1ac0      	subs	r0, r0, r3
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9ba:	6a21      	ldr	r1, [r4, #32]
 800b9bc:	4628      	mov	r0, r5
 800b9be:	47b0      	blx	r6
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	d106      	bne.n	800b9d4 <__sflush_r+0x68>
 800b9c6:	6829      	ldr	r1, [r5, #0]
 800b9c8:	291d      	cmp	r1, #29
 800b9ca:	d82b      	bhi.n	800ba24 <__sflush_r+0xb8>
 800b9cc:	4a29      	ldr	r2, [pc, #164]	; (800ba74 <__sflush_r+0x108>)
 800b9ce:	410a      	asrs	r2, r1
 800b9d0:	07d6      	lsls	r6, r2, #31
 800b9d2:	d427      	bmi.n	800ba24 <__sflush_r+0xb8>
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	6062      	str	r2, [r4, #4]
 800b9d8:	04d9      	lsls	r1, r3, #19
 800b9da:	6922      	ldr	r2, [r4, #16]
 800b9dc:	6022      	str	r2, [r4, #0]
 800b9de:	d504      	bpl.n	800b9ea <__sflush_r+0x7e>
 800b9e0:	1c42      	adds	r2, r0, #1
 800b9e2:	d101      	bne.n	800b9e8 <__sflush_r+0x7c>
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	b903      	cbnz	r3, 800b9ea <__sflush_r+0x7e>
 800b9e8:	6560      	str	r0, [r4, #84]	; 0x54
 800b9ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9ec:	602f      	str	r7, [r5, #0]
 800b9ee:	2900      	cmp	r1, #0
 800b9f0:	d0c9      	beq.n	800b986 <__sflush_r+0x1a>
 800b9f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9f6:	4299      	cmp	r1, r3
 800b9f8:	d002      	beq.n	800ba00 <__sflush_r+0x94>
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f7ff fc96 	bl	800b32c <_free_r>
 800ba00:	2000      	movs	r0, #0
 800ba02:	6360      	str	r0, [r4, #52]	; 0x34
 800ba04:	e7c0      	b.n	800b988 <__sflush_r+0x1c>
 800ba06:	2301      	movs	r3, #1
 800ba08:	4628      	mov	r0, r5
 800ba0a:	47b0      	blx	r6
 800ba0c:	1c41      	adds	r1, r0, #1
 800ba0e:	d1c8      	bne.n	800b9a2 <__sflush_r+0x36>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0c5      	beq.n	800b9a2 <__sflush_r+0x36>
 800ba16:	2b1d      	cmp	r3, #29
 800ba18:	d001      	beq.n	800ba1e <__sflush_r+0xb2>
 800ba1a:	2b16      	cmp	r3, #22
 800ba1c:	d101      	bne.n	800ba22 <__sflush_r+0xb6>
 800ba1e:	602f      	str	r7, [r5, #0]
 800ba20:	e7b1      	b.n	800b986 <__sflush_r+0x1a>
 800ba22:	89a3      	ldrh	r3, [r4, #12]
 800ba24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba28:	81a3      	strh	r3, [r4, #12]
 800ba2a:	e7ad      	b.n	800b988 <__sflush_r+0x1c>
 800ba2c:	690f      	ldr	r7, [r1, #16]
 800ba2e:	2f00      	cmp	r7, #0
 800ba30:	d0a9      	beq.n	800b986 <__sflush_r+0x1a>
 800ba32:	0793      	lsls	r3, r2, #30
 800ba34:	680e      	ldr	r6, [r1, #0]
 800ba36:	bf08      	it	eq
 800ba38:	694b      	ldreq	r3, [r1, #20]
 800ba3a:	600f      	str	r7, [r1, #0]
 800ba3c:	bf18      	it	ne
 800ba3e:	2300      	movne	r3, #0
 800ba40:	eba6 0807 	sub.w	r8, r6, r7
 800ba44:	608b      	str	r3, [r1, #8]
 800ba46:	f1b8 0f00 	cmp.w	r8, #0
 800ba4a:	dd9c      	ble.n	800b986 <__sflush_r+0x1a>
 800ba4c:	6a21      	ldr	r1, [r4, #32]
 800ba4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba50:	4643      	mov	r3, r8
 800ba52:	463a      	mov	r2, r7
 800ba54:	4628      	mov	r0, r5
 800ba56:	47b0      	blx	r6
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	dc06      	bgt.n	800ba6a <__sflush_r+0xfe>
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba62:	81a3      	strh	r3, [r4, #12]
 800ba64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba68:	e78e      	b.n	800b988 <__sflush_r+0x1c>
 800ba6a:	4407      	add	r7, r0
 800ba6c:	eba8 0800 	sub.w	r8, r8, r0
 800ba70:	e7e9      	b.n	800ba46 <__sflush_r+0xda>
 800ba72:	bf00      	nop
 800ba74:	dfbffffe 	.word	0xdfbffffe

0800ba78 <_fflush_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	690b      	ldr	r3, [r1, #16]
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	460c      	mov	r4, r1
 800ba80:	b913      	cbnz	r3, 800ba88 <_fflush_r+0x10>
 800ba82:	2500      	movs	r5, #0
 800ba84:	4628      	mov	r0, r5
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	b118      	cbz	r0, 800ba92 <_fflush_r+0x1a>
 800ba8a:	6a03      	ldr	r3, [r0, #32]
 800ba8c:	b90b      	cbnz	r3, 800ba92 <_fflush_r+0x1a>
 800ba8e:	f7ff fac9 	bl	800b024 <__sinit>
 800ba92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d0f3      	beq.n	800ba82 <_fflush_r+0xa>
 800ba9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba9c:	07d0      	lsls	r0, r2, #31
 800ba9e:	d404      	bmi.n	800baaa <_fflush_r+0x32>
 800baa0:	0599      	lsls	r1, r3, #22
 800baa2:	d402      	bmi.n	800baaa <_fflush_r+0x32>
 800baa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baa6:	f7ff fc29 	bl	800b2fc <__retarget_lock_acquire_recursive>
 800baaa:	4628      	mov	r0, r5
 800baac:	4621      	mov	r1, r4
 800baae:	f7ff ff5d 	bl	800b96c <__sflush_r>
 800bab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bab4:	07da      	lsls	r2, r3, #31
 800bab6:	4605      	mov	r5, r0
 800bab8:	d4e4      	bmi.n	800ba84 <_fflush_r+0xc>
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	059b      	lsls	r3, r3, #22
 800babe:	d4e1      	bmi.n	800ba84 <_fflush_r+0xc>
 800bac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bac2:	f7ff fc1c 	bl	800b2fe <__retarget_lock_release_recursive>
 800bac6:	e7dd      	b.n	800ba84 <_fflush_r+0xc>

0800bac8 <_putc_r>:
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	460d      	mov	r5, r1
 800bacc:	4614      	mov	r4, r2
 800bace:	4606      	mov	r6, r0
 800bad0:	b118      	cbz	r0, 800bada <_putc_r+0x12>
 800bad2:	6a03      	ldr	r3, [r0, #32]
 800bad4:	b90b      	cbnz	r3, 800bada <_putc_r+0x12>
 800bad6:	f7ff faa5 	bl	800b024 <__sinit>
 800bada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800badc:	07d8      	lsls	r0, r3, #31
 800bade:	d405      	bmi.n	800baec <_putc_r+0x24>
 800bae0:	89a3      	ldrh	r3, [r4, #12]
 800bae2:	0599      	lsls	r1, r3, #22
 800bae4:	d402      	bmi.n	800baec <_putc_r+0x24>
 800bae6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bae8:	f7ff fc08 	bl	800b2fc <__retarget_lock_acquire_recursive>
 800baec:	68a3      	ldr	r3, [r4, #8]
 800baee:	3b01      	subs	r3, #1
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	60a3      	str	r3, [r4, #8]
 800baf4:	da05      	bge.n	800bb02 <_putc_r+0x3a>
 800baf6:	69a2      	ldr	r2, [r4, #24]
 800baf8:	4293      	cmp	r3, r2
 800bafa:	db12      	blt.n	800bb22 <_putc_r+0x5a>
 800bafc:	b2eb      	uxtb	r3, r5
 800bafe:	2b0a      	cmp	r3, #10
 800bb00:	d00f      	beq.n	800bb22 <_putc_r+0x5a>
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	1c5a      	adds	r2, r3, #1
 800bb06:	6022      	str	r2, [r4, #0]
 800bb08:	701d      	strb	r5, [r3, #0]
 800bb0a:	b2ed      	uxtb	r5, r5
 800bb0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb0e:	07da      	lsls	r2, r3, #31
 800bb10:	d405      	bmi.n	800bb1e <_putc_r+0x56>
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	059b      	lsls	r3, r3, #22
 800bb16:	d402      	bmi.n	800bb1e <_putc_r+0x56>
 800bb18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb1a:	f7ff fbf0 	bl	800b2fe <__retarget_lock_release_recursive>
 800bb1e:	4628      	mov	r0, r5
 800bb20:	bd70      	pop	{r4, r5, r6, pc}
 800bb22:	4629      	mov	r1, r5
 800bb24:	4622      	mov	r2, r4
 800bb26:	4630      	mov	r0, r6
 800bb28:	f000 f802 	bl	800bb30 <__swbuf_r>
 800bb2c:	4605      	mov	r5, r0
 800bb2e:	e7ed      	b.n	800bb0c <_putc_r+0x44>

0800bb30 <__swbuf_r>:
 800bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb32:	460e      	mov	r6, r1
 800bb34:	4614      	mov	r4, r2
 800bb36:	4605      	mov	r5, r0
 800bb38:	b118      	cbz	r0, 800bb42 <__swbuf_r+0x12>
 800bb3a:	6a03      	ldr	r3, [r0, #32]
 800bb3c:	b90b      	cbnz	r3, 800bb42 <__swbuf_r+0x12>
 800bb3e:	f7ff fa71 	bl	800b024 <__sinit>
 800bb42:	69a3      	ldr	r3, [r4, #24]
 800bb44:	60a3      	str	r3, [r4, #8]
 800bb46:	89a3      	ldrh	r3, [r4, #12]
 800bb48:	071a      	lsls	r2, r3, #28
 800bb4a:	d525      	bpl.n	800bb98 <__swbuf_r+0x68>
 800bb4c:	6923      	ldr	r3, [r4, #16]
 800bb4e:	b31b      	cbz	r3, 800bb98 <__swbuf_r+0x68>
 800bb50:	6823      	ldr	r3, [r4, #0]
 800bb52:	6922      	ldr	r2, [r4, #16]
 800bb54:	1a98      	subs	r0, r3, r2
 800bb56:	6963      	ldr	r3, [r4, #20]
 800bb58:	b2f6      	uxtb	r6, r6
 800bb5a:	4283      	cmp	r3, r0
 800bb5c:	4637      	mov	r7, r6
 800bb5e:	dc04      	bgt.n	800bb6a <__swbuf_r+0x3a>
 800bb60:	4621      	mov	r1, r4
 800bb62:	4628      	mov	r0, r5
 800bb64:	f7ff ff88 	bl	800ba78 <_fflush_r>
 800bb68:	b9e0      	cbnz	r0, 800bba4 <__swbuf_r+0x74>
 800bb6a:	68a3      	ldr	r3, [r4, #8]
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	60a3      	str	r3, [r4, #8]
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	1c5a      	adds	r2, r3, #1
 800bb74:	6022      	str	r2, [r4, #0]
 800bb76:	701e      	strb	r6, [r3, #0]
 800bb78:	6962      	ldr	r2, [r4, #20]
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d004      	beq.n	800bb8a <__swbuf_r+0x5a>
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	07db      	lsls	r3, r3, #31
 800bb84:	d506      	bpl.n	800bb94 <__swbuf_r+0x64>
 800bb86:	2e0a      	cmp	r6, #10
 800bb88:	d104      	bne.n	800bb94 <__swbuf_r+0x64>
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	f7ff ff73 	bl	800ba78 <_fflush_r>
 800bb92:	b938      	cbnz	r0, 800bba4 <__swbuf_r+0x74>
 800bb94:	4638      	mov	r0, r7
 800bb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb98:	4621      	mov	r1, r4
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	f000 f806 	bl	800bbac <__swsetup_r>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d0d5      	beq.n	800bb50 <__swbuf_r+0x20>
 800bba4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bba8:	e7f4      	b.n	800bb94 <__swbuf_r+0x64>
	...

0800bbac <__swsetup_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4b2a      	ldr	r3, [pc, #168]	; (800bc58 <__swsetup_r+0xac>)
 800bbb0:	4605      	mov	r5, r0
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	460c      	mov	r4, r1
 800bbb6:	b118      	cbz	r0, 800bbc0 <__swsetup_r+0x14>
 800bbb8:	6a03      	ldr	r3, [r0, #32]
 800bbba:	b90b      	cbnz	r3, 800bbc0 <__swsetup_r+0x14>
 800bbbc:	f7ff fa32 	bl	800b024 <__sinit>
 800bbc0:	89a3      	ldrh	r3, [r4, #12]
 800bbc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbc6:	0718      	lsls	r0, r3, #28
 800bbc8:	d422      	bmi.n	800bc10 <__swsetup_r+0x64>
 800bbca:	06d9      	lsls	r1, r3, #27
 800bbcc:	d407      	bmi.n	800bbde <__swsetup_r+0x32>
 800bbce:	2309      	movs	r3, #9
 800bbd0:	602b      	str	r3, [r5, #0]
 800bbd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbd6:	81a3      	strh	r3, [r4, #12]
 800bbd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbdc:	e034      	b.n	800bc48 <__swsetup_r+0x9c>
 800bbde:	0758      	lsls	r0, r3, #29
 800bbe0:	d512      	bpl.n	800bc08 <__swsetup_r+0x5c>
 800bbe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbe4:	b141      	cbz	r1, 800bbf8 <__swsetup_r+0x4c>
 800bbe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbea:	4299      	cmp	r1, r3
 800bbec:	d002      	beq.n	800bbf4 <__swsetup_r+0x48>
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f7ff fb9c 	bl	800b32c <_free_r>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	6363      	str	r3, [r4, #52]	; 0x34
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbfe:	81a3      	strh	r3, [r4, #12]
 800bc00:	2300      	movs	r3, #0
 800bc02:	6063      	str	r3, [r4, #4]
 800bc04:	6923      	ldr	r3, [r4, #16]
 800bc06:	6023      	str	r3, [r4, #0]
 800bc08:	89a3      	ldrh	r3, [r4, #12]
 800bc0a:	f043 0308 	orr.w	r3, r3, #8
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	b94b      	cbnz	r3, 800bc28 <__swsetup_r+0x7c>
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc1e:	d003      	beq.n	800bc28 <__swsetup_r+0x7c>
 800bc20:	4621      	mov	r1, r4
 800bc22:	4628      	mov	r0, r5
 800bc24:	f000 f884 	bl	800bd30 <__smakebuf_r>
 800bc28:	89a0      	ldrh	r0, [r4, #12]
 800bc2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc2e:	f010 0301 	ands.w	r3, r0, #1
 800bc32:	d00a      	beq.n	800bc4a <__swsetup_r+0x9e>
 800bc34:	2300      	movs	r3, #0
 800bc36:	60a3      	str	r3, [r4, #8]
 800bc38:	6963      	ldr	r3, [r4, #20]
 800bc3a:	425b      	negs	r3, r3
 800bc3c:	61a3      	str	r3, [r4, #24]
 800bc3e:	6923      	ldr	r3, [r4, #16]
 800bc40:	b943      	cbnz	r3, 800bc54 <__swsetup_r+0xa8>
 800bc42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc46:	d1c4      	bne.n	800bbd2 <__swsetup_r+0x26>
 800bc48:	bd38      	pop	{r3, r4, r5, pc}
 800bc4a:	0781      	lsls	r1, r0, #30
 800bc4c:	bf58      	it	pl
 800bc4e:	6963      	ldrpl	r3, [r4, #20]
 800bc50:	60a3      	str	r3, [r4, #8]
 800bc52:	e7f4      	b.n	800bc3e <__swsetup_r+0x92>
 800bc54:	2000      	movs	r0, #0
 800bc56:	e7f7      	b.n	800bc48 <__swsetup_r+0x9c>
 800bc58:	200000b0 	.word	0x200000b0

0800bc5c <_raise_r>:
 800bc5c:	291f      	cmp	r1, #31
 800bc5e:	b538      	push	{r3, r4, r5, lr}
 800bc60:	4604      	mov	r4, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	d904      	bls.n	800bc70 <_raise_r+0x14>
 800bc66:	2316      	movs	r3, #22
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bc72:	b112      	cbz	r2, 800bc7a <_raise_r+0x1e>
 800bc74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc78:	b94b      	cbnz	r3, 800bc8e <_raise_r+0x32>
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f000 f830 	bl	800bce0 <_getpid_r>
 800bc80:	462a      	mov	r2, r5
 800bc82:	4601      	mov	r1, r0
 800bc84:	4620      	mov	r0, r4
 800bc86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc8a:	f000 b817 	b.w	800bcbc <_kill_r>
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d00a      	beq.n	800bca8 <_raise_r+0x4c>
 800bc92:	1c59      	adds	r1, r3, #1
 800bc94:	d103      	bne.n	800bc9e <_raise_r+0x42>
 800bc96:	2316      	movs	r3, #22
 800bc98:	6003      	str	r3, [r0, #0]
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	e7e7      	b.n	800bc6e <_raise_r+0x12>
 800bc9e:	2400      	movs	r4, #0
 800bca0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bca4:	4628      	mov	r0, r5
 800bca6:	4798      	blx	r3
 800bca8:	2000      	movs	r0, #0
 800bcaa:	e7e0      	b.n	800bc6e <_raise_r+0x12>

0800bcac <raise>:
 800bcac:	4b02      	ldr	r3, [pc, #8]	; (800bcb8 <raise+0xc>)
 800bcae:	4601      	mov	r1, r0
 800bcb0:	6818      	ldr	r0, [r3, #0]
 800bcb2:	f7ff bfd3 	b.w	800bc5c <_raise_r>
 800bcb6:	bf00      	nop
 800bcb8:	200000b0 	.word	0x200000b0

0800bcbc <_kill_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4d07      	ldr	r5, [pc, #28]	; (800bcdc <_kill_r+0x20>)
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	602b      	str	r3, [r5, #0]
 800bcca:	f7f5 f9e7 	bl	800109c <_kill>
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	d102      	bne.n	800bcd8 <_kill_r+0x1c>
 800bcd2:	682b      	ldr	r3, [r5, #0]
 800bcd4:	b103      	cbz	r3, 800bcd8 <_kill_r+0x1c>
 800bcd6:	6023      	str	r3, [r4, #0]
 800bcd8:	bd38      	pop	{r3, r4, r5, pc}
 800bcda:	bf00      	nop
 800bcdc:	20000490 	.word	0x20000490

0800bce0 <_getpid_r>:
 800bce0:	f7f5 b9d4 	b.w	800108c <_getpid>

0800bce4 <__swhatbuf_r>:
 800bce4:	b570      	push	{r4, r5, r6, lr}
 800bce6:	460c      	mov	r4, r1
 800bce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcec:	2900      	cmp	r1, #0
 800bcee:	b096      	sub	sp, #88	; 0x58
 800bcf0:	4615      	mov	r5, r2
 800bcf2:	461e      	mov	r6, r3
 800bcf4:	da0d      	bge.n	800bd12 <__swhatbuf_r+0x2e>
 800bcf6:	89a3      	ldrh	r3, [r4, #12]
 800bcf8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bcfc:	f04f 0100 	mov.w	r1, #0
 800bd00:	bf0c      	ite	eq
 800bd02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd06:	2340      	movne	r3, #64	; 0x40
 800bd08:	2000      	movs	r0, #0
 800bd0a:	6031      	str	r1, [r6, #0]
 800bd0c:	602b      	str	r3, [r5, #0]
 800bd0e:	b016      	add	sp, #88	; 0x58
 800bd10:	bd70      	pop	{r4, r5, r6, pc}
 800bd12:	466a      	mov	r2, sp
 800bd14:	f000 f848 	bl	800bda8 <_fstat_r>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	dbec      	blt.n	800bcf6 <__swhatbuf_r+0x12>
 800bd1c:	9901      	ldr	r1, [sp, #4]
 800bd1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bd22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bd26:	4259      	negs	r1, r3
 800bd28:	4159      	adcs	r1, r3
 800bd2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd2e:	e7eb      	b.n	800bd08 <__swhatbuf_r+0x24>

0800bd30 <__smakebuf_r>:
 800bd30:	898b      	ldrh	r3, [r1, #12]
 800bd32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd34:	079d      	lsls	r5, r3, #30
 800bd36:	4606      	mov	r6, r0
 800bd38:	460c      	mov	r4, r1
 800bd3a:	d507      	bpl.n	800bd4c <__smakebuf_r+0x1c>
 800bd3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	6123      	str	r3, [r4, #16]
 800bd44:	2301      	movs	r3, #1
 800bd46:	6163      	str	r3, [r4, #20]
 800bd48:	b002      	add	sp, #8
 800bd4a:	bd70      	pop	{r4, r5, r6, pc}
 800bd4c:	ab01      	add	r3, sp, #4
 800bd4e:	466a      	mov	r2, sp
 800bd50:	f7ff ffc8 	bl	800bce4 <__swhatbuf_r>
 800bd54:	9900      	ldr	r1, [sp, #0]
 800bd56:	4605      	mov	r5, r0
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f7ff f85d 	bl	800ae18 <_malloc_r>
 800bd5e:	b948      	cbnz	r0, 800bd74 <__smakebuf_r+0x44>
 800bd60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd64:	059a      	lsls	r2, r3, #22
 800bd66:	d4ef      	bmi.n	800bd48 <__smakebuf_r+0x18>
 800bd68:	f023 0303 	bic.w	r3, r3, #3
 800bd6c:	f043 0302 	orr.w	r3, r3, #2
 800bd70:	81a3      	strh	r3, [r4, #12]
 800bd72:	e7e3      	b.n	800bd3c <__smakebuf_r+0xc>
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	6020      	str	r0, [r4, #0]
 800bd78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd7c:	81a3      	strh	r3, [r4, #12]
 800bd7e:	9b00      	ldr	r3, [sp, #0]
 800bd80:	6163      	str	r3, [r4, #20]
 800bd82:	9b01      	ldr	r3, [sp, #4]
 800bd84:	6120      	str	r0, [r4, #16]
 800bd86:	b15b      	cbz	r3, 800bda0 <__smakebuf_r+0x70>
 800bd88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f000 f81d 	bl	800bdcc <_isatty_r>
 800bd92:	b128      	cbz	r0, 800bda0 <__smakebuf_r+0x70>
 800bd94:	89a3      	ldrh	r3, [r4, #12]
 800bd96:	f023 0303 	bic.w	r3, r3, #3
 800bd9a:	f043 0301 	orr.w	r3, r3, #1
 800bd9e:	81a3      	strh	r3, [r4, #12]
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	431d      	orrs	r5, r3
 800bda4:	81a5      	strh	r5, [r4, #12]
 800bda6:	e7cf      	b.n	800bd48 <__smakebuf_r+0x18>

0800bda8 <_fstat_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4d07      	ldr	r5, [pc, #28]	; (800bdc8 <_fstat_r+0x20>)
 800bdac:	2300      	movs	r3, #0
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	602b      	str	r3, [r5, #0]
 800bdb6:	f7f5 f9b4 	bl	8001122 <_fstat>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	d102      	bne.n	800bdc4 <_fstat_r+0x1c>
 800bdbe:	682b      	ldr	r3, [r5, #0]
 800bdc0:	b103      	cbz	r3, 800bdc4 <_fstat_r+0x1c>
 800bdc2:	6023      	str	r3, [r4, #0]
 800bdc4:	bd38      	pop	{r3, r4, r5, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20000490 	.word	0x20000490

0800bdcc <_isatty_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4d06      	ldr	r5, [pc, #24]	; (800bde8 <_isatty_r+0x1c>)
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	602b      	str	r3, [r5, #0]
 800bdd8:	f7f5 f9b3 	bl	8001142 <_isatty>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_isatty_r+0x1a>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_isatty_r+0x1a>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	20000490 	.word	0x20000490

0800bdec <_init>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	bf00      	nop
 800bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf2:	bc08      	pop	{r3}
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	4770      	bx	lr

0800bdf8 <_fini>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	bf00      	nop
 800bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfe:	bc08      	pop	{r3}
 800be00:	469e      	mov	lr, r3
 800be02:	4770      	bx	lr
