
stm32f405-m24m01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d50  0800be88  0800be88  0000ce88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbd8  0800cbd8  0000e0b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbd8  0800cbd8  0000dbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbe0  0800cbe0  0000e0b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbe0  0800cbe0  0000dbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbe4  0800cbe4  0000dbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800cbe8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e0b4  2**0
                  CONTENTS
 10 .bss          000003e8  200000b4  200000b4  0000e0b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000049c  2000049c  0000e0b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125b9  00000000  00000000  0000e0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000219e  00000000  00000000  0002069d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00022840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e29  00000000  00000000  00023850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020830  00000000  00000000  00024679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a8e  00000000  00000000  00044ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000beb7b  00000000  00000000  00057937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001164b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fec  00000000  00000000  001164f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0011b4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be70 	.word	0x0800be70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	0800be70 	.word	0x0800be70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b97e 	b.w	8000594 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f81a 	bl	80002d8 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__popcountsi2>:
 80002b0:	0843      	lsrs	r3, r0, #1
 80002b2:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	0883      	lsrs	r3, r0, #2
 80002ba:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 80002be:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 80002c2:	4418      	add	r0, r3
 80002c4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002c8:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 80002cc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002d0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002d4:	0e00      	lsrs	r0, r0, #24
 80002d6:	4770      	bx	lr

080002d8 <__udivmoddi4>:
 80002d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002dc:	9d08      	ldr	r5, [sp, #32]
 80002de:	460c      	mov	r4, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14e      	bne.n	8000382 <__udivmoddi4+0xaa>
 80002e4:	4694      	mov	ip, r2
 80002e6:	458c      	cmp	ip, r1
 80002e8:	4686      	mov	lr, r0
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	d962      	bls.n	80003b6 <__udivmoddi4+0xde>
 80002f0:	b14a      	cbz	r2, 8000306 <__udivmoddi4+0x2e>
 80002f2:	f1c2 0320 	rsb	r3, r2, #32
 80002f6:	4091      	lsls	r1, r2
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000300:	4319      	orrs	r1, r3
 8000302:	fa00 fe02 	lsl.w	lr, r0, r2
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f f68c 	uxth.w	r6, ip
 800030e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb07 1114 	mls	r1, r7, r4, r1
 800031a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031e:	fb04 f106 	mul.w	r1, r4, r6
 8000322:	4299      	cmp	r1, r3
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x64>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800032e:	f080 8112 	bcs.w	8000556 <__udivmoddi4+0x27e>
 8000332:	4299      	cmp	r1, r3
 8000334:	f240 810f 	bls.w	8000556 <__udivmoddi4+0x27e>
 8000338:	3c02      	subs	r4, #2
 800033a:	4463      	add	r3, ip
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb1 f0f7 	udiv	r0, r1, r7
 8000346:	fb07 1110 	mls	r1, r7, r0, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb00 f606 	mul.w	r6, r0, r6
 8000352:	429e      	cmp	r6, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x94>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800035e:	f080 80fc 	bcs.w	800055a <__udivmoddi4+0x282>
 8000362:	429e      	cmp	r6, r3
 8000364:	f240 80f9 	bls.w	800055a <__udivmoddi4+0x282>
 8000368:	4463      	add	r3, ip
 800036a:	3802      	subs	r0, #2
 800036c:	1b9b      	subs	r3, r3, r6
 800036e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000372:	2100      	movs	r1, #0
 8000374:	b11d      	cbz	r5, 800037e <__udivmoddi4+0xa6>
 8000376:	40d3      	lsrs	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	e9c5 3200 	strd	r3, r2, [r5]
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d905      	bls.n	8000392 <__udivmoddi4+0xba>
 8000386:	b10d      	cbz	r5, 800038c <__udivmoddi4+0xb4>
 8000388:	e9c5 0100 	strd	r0, r1, [r5]
 800038c:	2100      	movs	r1, #0
 800038e:	4608      	mov	r0, r1
 8000390:	e7f5      	b.n	800037e <__udivmoddi4+0xa6>
 8000392:	fab3 f183 	clz	r1, r3
 8000396:	2900      	cmp	r1, #0
 8000398:	d146      	bne.n	8000428 <__udivmoddi4+0x150>
 800039a:	42a3      	cmp	r3, r4
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xcc>
 800039e:	4290      	cmp	r0, r2
 80003a0:	f0c0 80f0 	bcc.w	8000584 <__udivmoddi4+0x2ac>
 80003a4:	1a86      	subs	r6, r0, r2
 80003a6:	eb64 0303 	sbc.w	r3, r4, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	2d00      	cmp	r5, #0
 80003ae:	d0e6      	beq.n	800037e <__udivmoddi4+0xa6>
 80003b0:	e9c5 6300 	strd	r6, r3, [r5]
 80003b4:	e7e3      	b.n	800037e <__udivmoddi4+0xa6>
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	f040 8090 	bne.w	80004dc <__udivmoddi4+0x204>
 80003bc:	eba1 040c 	sub.w	r4, r1, ip
 80003c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c4:	fa1f f78c 	uxth.w	r7, ip
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb4 f6f8 	udiv	r6, r4, r8
 80003ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003d2:	fb08 4416 	mls	r4, r8, r6, r4
 80003d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003da:	fb07 f006 	mul.w	r0, r7, r6
 80003de:	4298      	cmp	r0, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x11c>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x11a>
 80003ec:	4298      	cmp	r0, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2b4>
 80003f2:	4626      	mov	r6, r4
 80003f4:	1a1c      	subs	r4, r3, r0
 80003f6:	fa1f f38e 	uxth.w	r3, lr
 80003fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80003fe:	fb08 4410 	mls	r4, r8, r0, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb00 f707 	mul.w	r7, r0, r7
 800040a:	429f      	cmp	r7, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x148>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x146>
 8000418:	429f      	cmp	r7, r3
 800041a:	f200 80b0 	bhi.w	800057e <__udivmoddi4+0x2a6>
 800041e:	4620      	mov	r0, r4
 8000420:	1bdb      	subs	r3, r3, r7
 8000422:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0x9c>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	431f      	orrs	r7, r3
 8000434:	fa20 fc06 	lsr.w	ip, r0, r6
 8000438:	fa04 f301 	lsl.w	r3, r4, r1
 800043c:	ea43 030c 	orr.w	r3, r3, ip
 8000440:	40f4      	lsrs	r4, r6
 8000442:	fa00 f801 	lsl.w	r8, r0, r1
 8000446:	0c38      	lsrs	r0, r7, #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fbb4 fef0 	udiv	lr, r4, r0
 8000450:	fa1f fc87 	uxth.w	ip, r7
 8000454:	fb00 441e 	mls	r4, r0, lr, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb0e f90c 	mul.w	r9, lr, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	d90a      	bls.n	800047e <__udivmoddi4+0x1a6>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800046e:	f080 8084 	bcs.w	800057a <__udivmoddi4+0x2a2>
 8000472:	45a1      	cmp	r9, r4
 8000474:	f240 8081 	bls.w	800057a <__udivmoddi4+0x2a2>
 8000478:	f1ae 0e02 	sub.w	lr, lr, #2
 800047c:	443c      	add	r4, r7
 800047e:	eba4 0409 	sub.w	r4, r4, r9
 8000482:	fa1f f983 	uxth.w	r9, r3
 8000486:	fbb4 f3f0 	udiv	r3, r4, r0
 800048a:	fb00 4413 	mls	r4, r0, r3, r4
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	45a4      	cmp	ip, r4
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x1d2>
 800049a:	193c      	adds	r4, r7, r4
 800049c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a0:	d267      	bcs.n	8000572 <__udivmoddi4+0x29a>
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d965      	bls.n	8000572 <__udivmoddi4+0x29a>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ae:	fba0 9302 	umull	r9, r3, r0, r2
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	429c      	cmp	r4, r3
 80004b8:	46ce      	mov	lr, r9
 80004ba:	469c      	mov	ip, r3
 80004bc:	d351      	bcc.n	8000562 <__udivmoddi4+0x28a>
 80004be:	d04e      	beq.n	800055e <__udivmoddi4+0x286>
 80004c0:	b155      	cbz	r5, 80004d8 <__udivmoddi4+0x200>
 80004c2:	ebb8 030e 	subs.w	r3, r8, lr
 80004c6:	eb64 040c 	sbc.w	r4, r4, ip
 80004ca:	fa04 f606 	lsl.w	r6, r4, r6
 80004ce:	40cb      	lsrs	r3, r1
 80004d0:	431e      	orrs	r6, r3
 80004d2:	40cc      	lsrs	r4, r1
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e750      	b.n	800037e <__udivmoddi4+0xa6>
 80004dc:	f1c2 0320 	rsb	r3, r2, #32
 80004e0:	fa20 f103 	lsr.w	r1, r0, r3
 80004e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e8:	fa24 f303 	lsr.w	r3, r4, r3
 80004ec:	4094      	lsls	r4, r2
 80004ee:	430c      	orrs	r4, r1
 80004f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004f4:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f8:	fa1f f78c 	uxth.w	r7, ip
 80004fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000500:	fb08 3110 	mls	r1, r8, r0, r3
 8000504:	0c23      	lsrs	r3, r4, #16
 8000506:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800050a:	fb00 f107 	mul.w	r1, r0, r7
 800050e:	4299      	cmp	r1, r3
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x24c>
 8000512:	eb1c 0303 	adds.w	r3, ip, r3
 8000516:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800051a:	d22c      	bcs.n	8000576 <__udivmoddi4+0x29e>
 800051c:	4299      	cmp	r1, r3
 800051e:	d92a      	bls.n	8000576 <__udivmoddi4+0x29e>
 8000520:	3802      	subs	r0, #2
 8000522:	4463      	add	r3, ip
 8000524:	1a5b      	subs	r3, r3, r1
 8000526:	b2a4      	uxth	r4, r4
 8000528:	fbb3 f1f8 	udiv	r1, r3, r8
 800052c:	fb08 3311 	mls	r3, r8, r1, r3
 8000530:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000534:	fb01 f307 	mul.w	r3, r1, r7
 8000538:	42a3      	cmp	r3, r4
 800053a:	d908      	bls.n	800054e <__udivmoddi4+0x276>
 800053c:	eb1c 0404 	adds.w	r4, ip, r4
 8000540:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000544:	d213      	bcs.n	800056e <__udivmoddi4+0x296>
 8000546:	42a3      	cmp	r3, r4
 8000548:	d911      	bls.n	800056e <__udivmoddi4+0x296>
 800054a:	3902      	subs	r1, #2
 800054c:	4464      	add	r4, ip
 800054e:	1ae4      	subs	r4, r4, r3
 8000550:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000554:	e739      	b.n	80003ca <__udivmoddi4+0xf2>
 8000556:	4604      	mov	r4, r0
 8000558:	e6f0      	b.n	800033c <__udivmoddi4+0x64>
 800055a:	4608      	mov	r0, r1
 800055c:	e706      	b.n	800036c <__udivmoddi4+0x94>
 800055e:	45c8      	cmp	r8, r9
 8000560:	d2ae      	bcs.n	80004c0 <__udivmoddi4+0x1e8>
 8000562:	ebb9 0e02 	subs.w	lr, r9, r2
 8000566:	eb63 0c07 	sbc.w	ip, r3, r7
 800056a:	3801      	subs	r0, #1
 800056c:	e7a8      	b.n	80004c0 <__udivmoddi4+0x1e8>
 800056e:	4631      	mov	r1, r6
 8000570:	e7ed      	b.n	800054e <__udivmoddi4+0x276>
 8000572:	4603      	mov	r3, r0
 8000574:	e799      	b.n	80004aa <__udivmoddi4+0x1d2>
 8000576:	4630      	mov	r0, r6
 8000578:	e7d4      	b.n	8000524 <__udivmoddi4+0x24c>
 800057a:	46d6      	mov	lr, sl
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1a6>
 800057e:	4463      	add	r3, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e74d      	b.n	8000420 <__udivmoddi4+0x148>
 8000584:	4606      	mov	r6, r0
 8000586:	4623      	mov	r3, r4
 8000588:	4608      	mov	r0, r1
 800058a:	e70f      	b.n	80003ac <__udivmoddi4+0xd4>
 800058c:	3e02      	subs	r6, #2
 800058e:	4463      	add	r3, ip
 8000590:	e730      	b.n	80003f4 <__udivmoddi4+0x11c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <m24cxx_littlefs_init>:
};

lfs_t littlefs;
M24CXX_HandleTypeDef *m24cxx_handle;

int m24cxx_littlefs_init(M24CXX_HandleTypeDef *m24cxx_init) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    LFS_DBG("LittleFS Init");
    m24cxx_handle = m24cxx_init;
 80005a0:	4a0b      	ldr	r2, [pc, #44]	@ (80005d0 <m24cxx_littlefs_init+0x38>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6013      	str	r3, [r2, #0]

    //littlefs_config.block_size = w25qxx_handle->sector_size;
    //littlefs_config.block_count = w25qxx_handle->sectors_in_block * w25qxx_handle->block_count;

    int err = lfs_mount(&littlefs, &littlefs_config);
 80005a6:	490b      	ldr	r1, [pc, #44]	@ (80005d4 <m24cxx_littlefs_init+0x3c>)
 80005a8:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <m24cxx_littlefs_init+0x40>)
 80005aa:	f00a f93d 	bl	800a828 <lfs_mount>
 80005ae:	60f8      	str	r0, [r7, #12]

    // reformat if we can't mount the filesystem
    // this should only happen on the first boot
    if (err) {
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d007      	beq.n	80005c6 <m24cxx_littlefs_init+0x2e>
        lfs_format(&littlefs, &littlefs_config);
 80005b6:	4907      	ldr	r1, [pc, #28]	@ (80005d4 <m24cxx_littlefs_init+0x3c>)
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <m24cxx_littlefs_init+0x40>)
 80005ba:	f00a f91f 	bl	800a7fc <lfs_format>
        lfs_mount(&littlefs, &littlefs_config);
 80005be:	4905      	ldr	r1, [pc, #20]	@ (80005d4 <m24cxx_littlefs_init+0x3c>)
 80005c0:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <m24cxx_littlefs_init+0x40>)
 80005c2:	f00a f931 	bl	800a828 <lfs_mount>
    }

    return 0;
 80005c6:	2300      	movs	r3, #0

}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000148 	.word	0x20000148
 80005d4:	20000000 	.word	0x20000000
 80005d8:	200000d0 	.word	0x200000d0

080005dc <littlefs_read>:

int littlefs_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	603b      	str	r3, [r7, #0]
    LFS_DBG("LittleFS Read b = 0x%04lx o = 0x%04lx s = 0x%04lx", block, off, size);
    if (m24cxx_read(m24cxx_handle, block * littlefs_config.block_size + off, buffer, size) != M24CXX_Ok)
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <littlefs_read+0x40>)
 80005ec:	6818      	ldr	r0, [r3, #0]
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <littlefs_read+0x44>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	fb03 f202 	mul.w	r2, r3, r2
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	18d1      	adds	r1, r2, r3
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	f00a fa93 	bl	800ab2a <m24cxx_read>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <littlefs_read+0x34>
        return -1;
 800060a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800060e:	e000      	b.n	8000612 <littlefs_read+0x36>
    return 0;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000148 	.word	0x20000148
 8000620:	20000000 	.word	0x20000000

08000624 <littlefs_prog>:

int littlefs_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	603b      	str	r3, [r7, #0]
    LFS_DBG("LittleFS Prog b = 0x%04lx o = 0x%04lx s = 0x%04lx", block, off, size);
    if (m24cxx_write(m24cxx_handle, block * littlefs_config.block_size + off, (void*) buffer, size) != M24CXX_Ok)
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <littlefs_prog+0x40>)
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <littlefs_prog+0x44>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	fb03 f202 	mul.w	r2, r3, r2
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	18d1      	adds	r1, r2, r3
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	f00a fad6 	bl	800abf8 <m24cxx_write>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <littlefs_prog+0x34>
        return -1;
 8000652:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000656:	e000      	b.n	800065a <littlefs_prog+0x36>
    return 0;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000148 	.word	0x20000148
 8000668:	20000000 	.word	0x20000000

0800066c <littlefs_erase>:

int littlefs_erase(const struct lfs_config *c, lfs_block_t block) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
    LFS_DBG("LittleFS Erase b = 0x%04lx", block);
    if (m24cxx_erase(m24cxx_handle, block * littlefs_config.block_size, littlefs_config.block_size) != M24CXX_Ok)
 8000676:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <littlefs_erase+0x38>)
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <littlefs_erase+0x3c>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	fb02 f303 	mul.w	r3, r2, r3
 8000684:	4a08      	ldr	r2, [pc, #32]	@ (80006a8 <littlefs_erase+0x3c>)
 8000686:	69d2      	ldr	r2, [r2, #28]
 8000688:	4619      	mov	r1, r3
 800068a:	f00a fb2c 	bl	800ace6 <m24cxx_erase>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <littlefs_erase+0x2e>
        return -1;
 8000694:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000698:	e000      	b.n	800069c <littlefs_erase+0x30>
    return 0;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000148 	.word	0x20000148
 80006a8:	20000000 	.word	0x20000000

080006ac <littlefs_sync>:

int littlefs_sync(const struct lfs_config *c) {
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    LFS_DBG("LittleFS Sync");
    return 0;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d002      	beq.n	80006dc <_write+0x18>
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d111      	bne.n	8000700 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006e4:	68b9      	ldr	r1, [r7, #8]
 80006e6:	4809      	ldr	r0, [pc, #36]	@ (800070c <_write+0x48>)
 80006e8:	f002 ff82 	bl	80035f0 <HAL_UART_Transmit>
 80006ec:	4603      	mov	r3, r0
 80006ee:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 80006f0:	7dfb      	ldrb	r3, [r7, #23]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <_write+0x36>
            return len;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	e004      	b.n	8000704 <_write+0x40>
        else
            return -1;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006fe:	e001      	b.n	8000704 <_write+0x40>
    }
    return -1;
 8000700:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000704:	4618      	mov	r0, r3
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200001a0 	.word	0x200001a0

08000710 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BTN_Pin) // If the button
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000720:	d102      	bne.n	8000728 <HAL_GPIO_EXTI_Callback+0x18>
    {
        do_action = 1;
 8000722:	4b04      	ldr	r3, [pc, #16]	@ (8000734 <HAL_GPIO_EXTI_Callback+0x24>)
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
    }
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	200002f0 	.word	0x200002f0

08000738 <dump_buf>:

void dump_buf(uint8_t *buf, uint32_t size) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < size; ++i) {
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	e01c      	b.n	8000782 <dump_buf+0x4a>
        if (i % 16 == 0) {
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <dump_buf+0x22>
            printf("0x%08lx: ", i);
 8000752:	68f9      	ldr	r1, [r7, #12]
 8000754:	480f      	ldr	r0, [pc, #60]	@ (8000794 <dump_buf+0x5c>)
 8000756:	f00a fcf9 	bl	800b14c <iprintf>
        }
        printf("%02x ", buf[i]);
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <dump_buf+0x60>)
 8000766:	f00a fcf1 	bl	800b14c <iprintf>
        if ((i + 1) % 16 == 0)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3301      	adds	r3, #1
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	2b00      	cmp	r3, #0
 8000774:	d102      	bne.n	800077c <dump_buf+0x44>
            printf("\n");
 8000776:	200a      	movs	r0, #10
 8000778:	f00a fcfa 	bl	800b170 <putchar>
    for (uint32_t i = 0; i < size; ++i) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	429a      	cmp	r2, r3
 8000788:	d3de      	bcc.n	8000748 <dump_buf+0x10>
    }
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	0800be88 	.word	0x0800be88
 8000798:	0800be94 	.word	0x0800be94

0800079c <fill_buffer>:

void fill_buffer(uint8_t *buf, uint32_t size, uint8_t type) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	4613      	mov	r3, r2
 80007a8:	71fb      	strb	r3, [r7, #7]
    switch (type) {
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d82e      	bhi.n	800080e <fill_buffer+0x72>
 80007b0:	a201      	add	r2, pc, #4	@ (adr r2, 80007b8 <fill_buffer+0x1c>)
 80007b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b6:	bf00      	nop
 80007b8:	080007c9 	.word	0x080007c9
 80007bc:	080007d5 	.word	0x080007d5
 80007c0:	080007e1 	.word	0x080007e1
 80007c4:	080007ed 	.word	0x080007ed
    case 0:
        memset(buf, 0x00, size);
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	2100      	movs	r1, #0
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	f00a fd2a 	bl	800b226 <memset>
        break;
 80007d2:	e01c      	b.n	800080e <fill_buffer+0x72>
    case 1:
        memset(buf, 0xff, size);
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	21ff      	movs	r1, #255	@ 0xff
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f00a fd24 	bl	800b226 <memset>
        break;
 80007de:	e016      	b.n	800080e <fill_buffer+0x72>
    case 2:
        memset(buf, 0xaa, size);
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	21aa      	movs	r1, #170	@ 0xaa
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f00a fd1e 	bl	800b226 <memset>
        break;
 80007ea:	e010      	b.n	800080e <fill_buffer+0x72>
    case 3:
        for (uint32_t i = 0; i < size; ++i) {
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e008      	b.n	8000804 <fill_buffer+0x68>
            buf[i] = (uint8_t) i;
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	4413      	add	r3, r2
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < size; ++i) {
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	429a      	cmp	r2, r3
 800080a:	d3f2      	bcc.n	80007f2 <fill_buffer+0x56>
        }
        break;
 800080c:	bf00      	nop
    }
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 fd1f 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 fa1b 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 fad9 	bl	8000ddc <MX_GPIO_Init>
  MX_I2C1_Init();
 800082a:	f000 fa7f 	bl	8000d2c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800082e:	f000 faab 	bl	8000d88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    DBG("\n\n\n--------\nStarting");
 8000832:	4812      	ldr	r0, [pc, #72]	@ (800087c <main+0x64>)
 8000834:	f00a fc8a 	bl	800b14c <iprintf>
 8000838:	200a      	movs	r0, #10
 800083a:	f00a fc99 	bl	800b170 <putchar>

    // Wait a few ms to get ready
    HAL_Delay(10);
 800083e:	200a      	movs	r0, #10
 8000840:	f000 fd80 	bl	8001344 <HAL_Delay>

    DBG("Scanning I2C bus:");
 8000844:	480e      	ldr	r0, [pc, #56]	@ (8000880 <main+0x68>)
 8000846:	f00a fc81 	bl	800b14c <iprintf>
 800084a:	200a      	movs	r0, #10
 800084c:	f00a fc90 	bl	800b170 <putchar>
    // Go through all possible i2c addresses
    for (uint8_t i = 0; i < 128; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	77fb      	strb	r3, [r7, #31]
 8000854:	e02c      	b.n	80008b0 <main+0x98>

        if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 3, 100) == HAL_OK) {
 8000856:	7ffb      	ldrb	r3, [r7, #31]
 8000858:	b29b      	uxth	r3, r3
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	b299      	uxth	r1, r3
 800085e:	2364      	movs	r3, #100	@ 0x64
 8000860:	2203      	movs	r2, #3
 8000862:	4808      	ldr	r0, [pc, #32]	@ (8000884 <main+0x6c>)
 8000864:	f001 fcfc 	bl	8002260 <HAL_I2C_IsDeviceReady>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10e      	bne.n	800088c <main+0x74>
            // We got an ack
            printf("%2x ", i);
 800086e:	7ffb      	ldrb	r3, [r7, #31]
 8000870:	4619      	mov	r1, r3
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <main+0x70>)
 8000874:	f00a fc6a 	bl	800b14c <iprintf>
 8000878:	e00b      	b.n	8000892 <main+0x7a>
 800087a:	bf00      	nop
 800087c:	0800be9c 	.word	0x0800be9c
 8000880:	0800beb4 	.word	0x0800beb4
 8000884:	2000014c 	.word	0x2000014c
 8000888:	0800bec8 	.word	0x0800bec8
        } else {
            printf("-- ");
 800088c:	48bc      	ldr	r0, [pc, #752]	@ (8000b80 <main+0x368>)
 800088e:	f00a fc5d 	bl	800b14c <iprintf>
        }

        if (i > 0 && (i + 1) % 16 == 0)
 8000892:	7ffb      	ldrb	r3, [r7, #31]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d008      	beq.n	80008aa <main+0x92>
 8000898:	7ffb      	ldrb	r3, [r7, #31]
 800089a:	3301      	adds	r3, #1
 800089c:	f003 030f 	and.w	r3, r3, #15
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <main+0x92>
            printf("\n");
 80008a4:	200a      	movs	r0, #10
 80008a6:	f00a fc63 	bl	800b170 <putchar>
    for (uint8_t i = 0; i < 128; i++) {
 80008aa:	7ffb      	ldrb	r3, [r7, #31]
 80008ac:	3301      	adds	r3, #1
 80008ae:	77fb      	strb	r3, [r7, #31]
 80008b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dace      	bge.n	8000856 <main+0x3e>

    }

    printf("\n");
 80008b8:	200a      	movs	r0, #10
 80008ba:	f00a fc59 	bl	800b170 <putchar>

    if (m24cxx_init(&m24cxx, &hi2c1, 0x50) != M24CXX_Ok) {
 80008be:	2250      	movs	r2, #80	@ 0x50
 80008c0:	49b0      	ldr	r1, [pc, #704]	@ (8000b84 <main+0x36c>)
 80008c2:	48b1      	ldr	r0, [pc, #708]	@ (8000b88 <main+0x370>)
 80008c4:	f00a f8fe 	bl	800aac4 <m24cxx_init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d007      	beq.n	80008de <main+0xc6>
        DBG("M24CXX Failed to initialize");
 80008ce:	48af      	ldr	r0, [pc, #700]	@ (8000b8c <main+0x374>)
 80008d0:	f00a fc3c 	bl	800b14c <iprintf>
 80008d4:	200a      	movs	r0, #10
 80008d6:	f00a fc4b 	bl	800b170 <putchar>
        Error_Handler();
 80008da:	f000 fae5 	bl	8000ea8 <Error_Handler>
    }

    //m24cxx_erase_all(&m24cxx);

    m24cxx_littlefs_init(&m24cxx);
 80008de:	48aa      	ldr	r0, [pc, #680]	@ (8000b88 <main+0x370>)
 80008e0:	f7ff fe5a 	bl	8000598 <m24cxx_littlefs_init>

    // read current count
    uint32_t boot_count = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]

    lfs_file_open(&littlefs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 80008e8:	f240 1303 	movw	r3, #259	@ 0x103
 80008ec:	4aa8      	ldr	r2, [pc, #672]	@ (8000b90 <main+0x378>)
 80008ee:	49a9      	ldr	r1, [pc, #676]	@ (8000b94 <main+0x37c>)
 80008f0:	48a9      	ldr	r0, [pc, #676]	@ (8000b98 <main+0x380>)
 80008f2:	f009 ffaf 	bl	800a854 <lfs_file_open>
    lfs_file_read(&littlefs, &file, &boot_count, sizeof(boot_count));
 80008f6:	f107 0208 	add.w	r2, r7, #8
 80008fa:	2304      	movs	r3, #4
 80008fc:	49a5      	ldr	r1, [pc, #660]	@ (8000b94 <main+0x37c>)
 80008fe:	48a6      	ldr	r0, [pc, #664]	@ (8000b98 <main+0x380>)
 8000900:	f00a f808 	bl	800a914 <lfs_file_read>

    // update boot count
    boot_count += 1;
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	3301      	adds	r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
    lfs_file_rewind(&littlefs, &file);
 800090a:	49a2      	ldr	r1, [pc, #648]	@ (8000b94 <main+0x37c>)
 800090c:	48a2      	ldr	r0, [pc, #648]	@ (8000b98 <main+0x380>)
 800090e:	f00a f861 	bl	800a9d4 <lfs_file_rewind>
    lfs_file_write(&littlefs, &file, &boot_count, sizeof(boot_count));
 8000912:	f107 0208 	add.w	r2, r7, #8
 8000916:	2304      	movs	r3, #4
 8000918:	499e      	ldr	r1, [pc, #632]	@ (8000b94 <main+0x37c>)
 800091a:	489f      	ldr	r0, [pc, #636]	@ (8000b98 <main+0x380>)
 800091c:	f00a f82a 	bl	800a974 <lfs_file_write>

    // remember the storage is not updated until the file is closed successfully
    lfs_file_close(&littlefs, &file);
 8000920:	499c      	ldr	r1, [pc, #624]	@ (8000b94 <main+0x37c>)
 8000922:	489d      	ldr	r0, [pc, #628]	@ (8000b98 <main+0x380>)
 8000924:	f009 ffca 	bl	800a8bc <lfs_file_close>

    uint32_t start_uptime = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]

    lfs_file_open(&littlefs, &file, "uptime", LFS_O_RDWR | LFS_O_CREAT);
 800092c:	f240 1303 	movw	r3, #259	@ 0x103
 8000930:	4a9a      	ldr	r2, [pc, #616]	@ (8000b9c <main+0x384>)
 8000932:	4998      	ldr	r1, [pc, #608]	@ (8000b94 <main+0x37c>)
 8000934:	4898      	ldr	r0, [pc, #608]	@ (8000b98 <main+0x380>)
 8000936:	f009 ff8d 	bl	800a854 <lfs_file_open>
    lfs_file_read(&littlefs, &file, &start_uptime, sizeof(start_uptime));
 800093a:	1d3a      	adds	r2, r7, #4
 800093c:	2304      	movs	r3, #4
 800093e:	4995      	ldr	r1, [pc, #596]	@ (8000b94 <main+0x37c>)
 8000940:	4895      	ldr	r0, [pc, #596]	@ (8000b98 <main+0x380>)
 8000942:	f009 ffe7 	bl	800a914 <lfs_file_read>
    lfs_file_close(&littlefs, &file);
 8000946:	4993      	ldr	r1, [pc, #588]	@ (8000b94 <main+0x37c>)
 8000948:	4893      	ldr	r0, [pc, #588]	@ (8000b98 <main+0x380>)
 800094a:	f009 ffb7 	bl	800a8bc <lfs_file_close>

    DBG("Boot count = %lu start uptime = %lu", boot_count, start_uptime);
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4619      	mov	r1, r3
 8000954:	4892      	ldr	r0, [pc, #584]	@ (8000ba0 <main+0x388>)
 8000956:	f00a fbf9 	bl	800b14c <iprintf>
 800095a:	200a      	movs	r0, #10
 800095c:	f00a fc08 	bl	800b170 <putchar>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    uint32_t now = 0, next_blink = 500, next_update = 1000;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096e:	617b      	str	r3, [r7, #20]

    while (1) {

        now = uwTick;
 8000970:	4b8c      	ldr	r3, [pc, #560]	@ (8000ba4 <main+0x38c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	613b      	str	r3, [r7, #16]

        if (now >= next_blink) {
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	429a      	cmp	r2, r3
 800097c:	d307      	bcc.n	800098e <main+0x176>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800097e:	2110      	movs	r1, #16
 8000980:	4889      	ldr	r0, [pc, #548]	@ (8000ba8 <main+0x390>)
 8000982:	f000 ffca 	bl	800191a <HAL_GPIO_TogglePin>
            next_blink = now + 500;
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800098c:	61bb      	str	r3, [r7, #24]
        }

        if (now >= next_update) {
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	429a      	cmp	r2, r3
 8000994:	d332      	bcc.n	80009fc <main+0x1e4>

            uint32_t total_uptime = start_uptime + now;
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	4413      	add	r3, r2
 800099c:	603b      	str	r3, [r7, #0]

            DBG("Total uptime = %lu", total_uptime);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4882      	ldr	r0, [pc, #520]	@ (8000bac <main+0x394>)
 80009a4:	f00a fbd2 	bl	800b14c <iprintf>
 80009a8:	200a      	movs	r0, #10
 80009aa:	f00a fbe1 	bl	800b170 <putchar>

            uint32_t start = HAL_GetTick();
 80009ae:	f000 fcbd 	bl	800132c <HAL_GetTick>
 80009b2:	60f8      	str	r0, [r7, #12]
            lfs_file_open(&littlefs, &file, "uptime", LFS_O_RDWR);
 80009b4:	2303      	movs	r3, #3
 80009b6:	4a79      	ldr	r2, [pc, #484]	@ (8000b9c <main+0x384>)
 80009b8:	4976      	ldr	r1, [pc, #472]	@ (8000b94 <main+0x37c>)
 80009ba:	4877      	ldr	r0, [pc, #476]	@ (8000b98 <main+0x380>)
 80009bc:	f009 ff4a 	bl	800a854 <lfs_file_open>
            lfs_file_rewind(&littlefs, &file);
 80009c0:	4974      	ldr	r1, [pc, #464]	@ (8000b94 <main+0x37c>)
 80009c2:	4875      	ldr	r0, [pc, #468]	@ (8000b98 <main+0x380>)
 80009c4:	f00a f806 	bl	800a9d4 <lfs_file_rewind>
            lfs_file_write(&littlefs, &file, &total_uptime, sizeof(total_uptime));
 80009c8:	463a      	mov	r2, r7
 80009ca:	2304      	movs	r3, #4
 80009cc:	4971      	ldr	r1, [pc, #452]	@ (8000b94 <main+0x37c>)
 80009ce:	4872      	ldr	r0, [pc, #456]	@ (8000b98 <main+0x380>)
 80009d0:	f009 ffd0 	bl	800a974 <lfs_file_write>
            lfs_file_close(&littlefs, &file);
 80009d4:	496f      	ldr	r1, [pc, #444]	@ (8000b94 <main+0x37c>)
 80009d6:	4870      	ldr	r0, [pc, #448]	@ (8000b98 <main+0x380>)
 80009d8:	f009 ff70 	bl	800a8bc <lfs_file_close>
            DBG("File update took %lu ms", HAL_GetTick() - start);
 80009dc:	f000 fca6 	bl	800132c <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	4619      	mov	r1, r3
 80009e8:	4871      	ldr	r0, [pc, #452]	@ (8000bb0 <main+0x398>)
 80009ea:	f00a fbaf 	bl	800b14c <iprintf>
 80009ee:	200a      	movs	r0, #10
 80009f0:	f00a fbbe 	bl	800b170 <putchar>

            next_update = now + 1000;
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80009fa:	617b      	str	r3, [r7, #20]
        }

        if (do_action) {
 80009fc:	4b6d      	ldr	r3, [pc, #436]	@ (8000bb4 <main+0x39c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0b5      	beq.n	8000970 <main+0x158>
            do_action = 0;
 8000a04:	4b6b      	ldr	r3, [pc, #428]	@ (8000bb4 <main+0x39c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
            DBG("Do action!");
 8000a0a:	486b      	ldr	r0, [pc, #428]	@ (8000bb8 <main+0x3a0>)
 8000a0c:	f00a fb9e 	bl	800b14c <iprintf>
 8000a10:	200a      	movs	r0, #10
 8000a12:	f00a fbad 	bl	800b170 <putchar>

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000a16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a1a:	4a68      	ldr	r2, [pc, #416]	@ (8000bbc <main+0x3a4>)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	485a      	ldr	r0, [pc, #360]	@ (8000b88 <main+0x370>)
 8000a20:	f00a f883 	bl	800ab2a <m24cxx_read>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d007      	beq.n	8000a3a <main+0x222>
                DBG("Returned err");
 8000a2a:	4865      	ldr	r0, [pc, #404]	@ (8000bc0 <main+0x3a8>)
 8000a2c:	f00a fb8e 	bl	800b14c <iprintf>
 8000a30:	200a      	movs	r0, #10
 8000a32:	f00a fb9d 	bl	800b170 <putchar>
                Error_Handler();
 8000a36:	f000 fa37 	bl	8000ea8 <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000a3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a3e:	485f      	ldr	r0, [pc, #380]	@ (8000bbc <main+0x3a4>)
 8000a40:	f7ff fe7a 	bl	8000738 <dump_buf>

            fill_buffer(buf, sizeof(buf), 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a4a:	485c      	ldr	r0, [pc, #368]	@ (8000bbc <main+0x3a4>)
 8000a4c:	f7ff fea6 	bl	800079c <fill_buffer>

            if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000a50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a54:	4a59      	ldr	r2, [pc, #356]	@ (8000bbc <main+0x3a4>)
 8000a56:	2100      	movs	r1, #0
 8000a58:	484b      	ldr	r0, [pc, #300]	@ (8000b88 <main+0x370>)
 8000a5a:	f00a f8cd 	bl	800abf8 <m24cxx_write>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d007      	beq.n	8000a74 <main+0x25c>
                DBG("Returned err");
 8000a64:	4856      	ldr	r0, [pc, #344]	@ (8000bc0 <main+0x3a8>)
 8000a66:	f00a fb71 	bl	800b14c <iprintf>
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f00a fb80 	bl	800b170 <putchar>
                Error_Handler();
 8000a70:	f000 fa1a 	bl	8000ea8 <Error_Handler>
            }

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a78:	4a50      	ldr	r2, [pc, #320]	@ (8000bbc <main+0x3a4>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4842      	ldr	r0, [pc, #264]	@ (8000b88 <main+0x370>)
 8000a7e:	f00a f854 	bl	800ab2a <m24cxx_read>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d007      	beq.n	8000a98 <main+0x280>
                DBG("Returned err");
 8000a88:	484d      	ldr	r0, [pc, #308]	@ (8000bc0 <main+0x3a8>)
 8000a8a:	f00a fb5f 	bl	800b14c <iprintf>
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f00a fb6e 	bl	800b170 <putchar>
                Error_Handler();
 8000a94:	f000 fa08 	bl	8000ea8 <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000a98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a9c:	4847      	ldr	r0, [pc, #284]	@ (8000bbc <main+0x3a4>)
 8000a9e:	f7ff fe4b 	bl	8000738 <dump_buf>

            fill_buffer(buf, sizeof(buf), 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aa8:	4844      	ldr	r0, [pc, #272]	@ (8000bbc <main+0x3a4>)
 8000aaa:	f7ff fe77 	bl	800079c <fill_buffer>

            if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ab2:	4a42      	ldr	r2, [pc, #264]	@ (8000bbc <main+0x3a4>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4834      	ldr	r0, [pc, #208]	@ (8000b88 <main+0x370>)
 8000ab8:	f00a f89e 	bl	800abf8 <m24cxx_write>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <main+0x2ba>
                DBG("Returned err");
 8000ac2:	483f      	ldr	r0, [pc, #252]	@ (8000bc0 <main+0x3a8>)
 8000ac4:	f00a fb42 	bl	800b14c <iprintf>
 8000ac8:	200a      	movs	r0, #10
 8000aca:	f00a fb51 	bl	800b170 <putchar>
                Error_Handler();
 8000ace:	f000 f9eb 	bl	8000ea8 <Error_Handler>
            }

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000ad2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ad6:	4a39      	ldr	r2, [pc, #228]	@ (8000bbc <main+0x3a4>)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	482b      	ldr	r0, [pc, #172]	@ (8000b88 <main+0x370>)
 8000adc:	f00a f825 	bl	800ab2a <m24cxx_read>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d007      	beq.n	8000af6 <main+0x2de>
                DBG("Returned err");
 8000ae6:	4836      	ldr	r0, [pc, #216]	@ (8000bc0 <main+0x3a8>)
 8000ae8:	f00a fb30 	bl	800b14c <iprintf>
 8000aec:	200a      	movs	r0, #10
 8000aee:	f00a fb3f 	bl	800b170 <putchar>
                Error_Handler();
 8000af2:	f000 f9d9 	bl	8000ea8 <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000af6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000afa:	4830      	ldr	r0, [pc, #192]	@ (8000bbc <main+0x3a4>)
 8000afc:	f7ff fe1c 	bl	8000738 <dump_buf>

            fill_buffer(buf, sizeof(buf), 2);
 8000b00:	2202      	movs	r2, #2
 8000b02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b06:	482d      	ldr	r0, [pc, #180]	@ (8000bbc <main+0x3a4>)
 8000b08:	f7ff fe48 	bl	800079c <fill_buffer>

            if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b10:	4a2a      	ldr	r2, [pc, #168]	@ (8000bbc <main+0x3a4>)
 8000b12:	2100      	movs	r1, #0
 8000b14:	481c      	ldr	r0, [pc, #112]	@ (8000b88 <main+0x370>)
 8000b16:	f00a f86f 	bl	800abf8 <m24cxx_write>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d007      	beq.n	8000b30 <main+0x318>
                DBG("Returned err");
 8000b20:	4827      	ldr	r0, [pc, #156]	@ (8000bc0 <main+0x3a8>)
 8000b22:	f00a fb13 	bl	800b14c <iprintf>
 8000b26:	200a      	movs	r0, #10
 8000b28:	f00a fb22 	bl	800b170 <putchar>
                Error_Handler();
 8000b2c:	f000 f9bc 	bl	8000ea8 <Error_Handler>
            }

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b34:	4a21      	ldr	r2, [pc, #132]	@ (8000bbc <main+0x3a4>)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4813      	ldr	r0, [pc, #76]	@ (8000b88 <main+0x370>)
 8000b3a:	f009 fff6 	bl	800ab2a <m24cxx_read>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d007      	beq.n	8000b54 <main+0x33c>
                DBG("Returned err");
 8000b44:	481e      	ldr	r0, [pc, #120]	@ (8000bc0 <main+0x3a8>)
 8000b46:	f00a fb01 	bl	800b14c <iprintf>
 8000b4a:	200a      	movs	r0, #10
 8000b4c:	f00a fb10 	bl	800b170 <putchar>
                Error_Handler();
 8000b50:	f000 f9aa 	bl	8000ea8 <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000b54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b58:	4818      	ldr	r0, [pc, #96]	@ (8000bbc <main+0x3a4>)
 8000b5a:	f7ff fded 	bl	8000738 <dump_buf>

            fill_buffer(buf, sizeof(buf), 3);
 8000b5e:	2203      	movs	r2, #3
 8000b60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b64:	4815      	ldr	r0, [pc, #84]	@ (8000bbc <main+0x3a4>)
 8000b66:	f7ff fe19 	bl	800079c <fill_buffer>

            if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000b6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b6e:	4a13      	ldr	r2, [pc, #76]	@ (8000bbc <main+0x3a4>)
 8000b70:	2100      	movs	r1, #0
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <main+0x370>)
 8000b74:	f00a f840 	bl	800abf8 <m24cxx_write>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d02a      	beq.n	8000bd4 <main+0x3bc>
 8000b7e:	e021      	b.n	8000bc4 <main+0x3ac>
 8000b80:	0800bed0 	.word	0x0800bed0
 8000b84:	2000014c 	.word	0x2000014c
 8000b88:	200001e8 	.word	0x200001e8
 8000b8c:	0800bed4 	.word	0x0800bed4
 8000b90:	0800bef0 	.word	0x0800bef0
 8000b94:	200002f4 	.word	0x200002f4
 8000b98:	200000d0 	.word	0x200000d0
 8000b9c:	0800befc 	.word	0x0800befc
 8000ba0:	0800bf04 	.word	0x0800bf04
 8000ba4:	2000034c 	.word	0x2000034c
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	0800bf28 	.word	0x0800bf28
 8000bb0:	0800bf3c 	.word	0x0800bf3c
 8000bb4:	200002f0 	.word	0x200002f0
 8000bb8:	0800bf54 	.word	0x0800bf54
 8000bbc:	200001f0 	.word	0x200001f0
 8000bc0:	0800bf60 	.word	0x0800bf60
                DBG("Returned err");
 8000bc4:	4822      	ldr	r0, [pc, #136]	@ (8000c50 <main+0x438>)
 8000bc6:	f00a fac1 	bl	800b14c <iprintf>
 8000bca:	200a      	movs	r0, #10
 8000bcc:	f00a fad0 	bl	800b170 <putchar>
                Error_Handler();
 8000bd0:	f000 f96a 	bl	8000ea8 <Error_Handler>
            }

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8000c54 <main+0x43c>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	481e      	ldr	r0, [pc, #120]	@ (8000c58 <main+0x440>)
 8000bde:	f009 ffa4 	bl	800ab2a <m24cxx_read>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d007      	beq.n	8000bf8 <main+0x3e0>
                DBG("Returned err");
 8000be8:	4819      	ldr	r0, [pc, #100]	@ (8000c50 <main+0x438>)
 8000bea:	f00a faaf 	bl	800b14c <iprintf>
 8000bee:	200a      	movs	r0, #10
 8000bf0:	f00a fabe 	bl	800b170 <putchar>
                Error_Handler();
 8000bf4:	f000 f958 	bl	8000ea8 <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000bf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bfc:	4815      	ldr	r0, [pc, #84]	@ (8000c54 <main+0x43c>)
 8000bfe:	f7ff fd9b 	bl	8000738 <dump_buf>

            if (m24cxx_erase_all(&m24cxx) != M24CXX_Ok) {
 8000c02:	4815      	ldr	r0, [pc, #84]	@ (8000c58 <main+0x440>)
 8000c04:	f00a f8b5 	bl	800ad72 <m24cxx_erase_all>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d007      	beq.n	8000c1e <main+0x406>
                DBG("Returned err");
 8000c0e:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <main+0x438>)
 8000c10:	f00a fa9c 	bl	800b14c <iprintf>
 8000c14:	200a      	movs	r0, #10
 8000c16:	f00a faab 	bl	800b170 <putchar>
                Error_Handler();
 8000c1a:	f000 f945 	bl	8000ea8 <Error_Handler>
            }

            if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c22:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <main+0x43c>)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <main+0x440>)
 8000c28:	f009 ff7f 	bl	800ab2a <m24cxx_read>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d007      	beq.n	8000c42 <main+0x42a>
                DBG("Returned err");
 8000c32:	4807      	ldr	r0, [pc, #28]	@ (8000c50 <main+0x438>)
 8000c34:	f00a fa8a 	bl	800b14c <iprintf>
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f00a fa99 	bl	800b170 <putchar>
                Error_Handler();
 8000c3e:	f000 f933 	bl	8000ea8 <Error_Handler>
            }

            dump_buf(buf, sizeof(buf));
 8000c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c46:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <main+0x43c>)
 8000c48:	f7ff fd76 	bl	8000738 <dump_buf>
        now = uwTick;
 8000c4c:	e690      	b.n	8000970 <main+0x158>
 8000c4e:	bf00      	nop
 8000c50:	0800bf60 	.word	0x0800bf60
 8000c54:	200001f0 	.word	0x200001f0
 8000c58:	200001e8 	.word	0x200001e8

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	@ 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	2230      	movs	r2, #48	@ 0x30
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f00a fadb 	bl	800b226 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <SystemClock_Config+0xc8>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	4a26      	ldr	r2, [pc, #152]	@ (8000d24 <SystemClock_Config+0xc8>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c90:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <SystemClock_Config+0xc8>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <SystemClock_Config+0xcc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a20      	ldr	r2, [pc, #128]	@ (8000d28 <SystemClock_Config+0xcc>)
 8000ca6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <SystemClock_Config+0xcc>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000cd0:	2332      	movs	r3, #50	@ 0x32
 8000cd2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cdc:	f107 0320 	add.w	r3, r7, #32
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 ff9f 	bl	8002c24 <HAL_RCC_OscConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cec:	f000 f8dc 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fa01 	bl	8003114 <HAL_RCC_ClockConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d18:	f000 f8c6 	bl	8000ea8 <Error_Handler>
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	3750      	adds	r7, #80	@ 0x50
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40007000 	.word	0x40007000

08000d2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d32:	4a13      	ldr	r2, [pc, #76]	@ (8000d80 <MX_I2C1_Init+0x54>)
 8000d34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d38:	4a12      	ldr	r2, [pc, #72]	@ (8000d84 <MX_I2C1_Init+0x58>)
 8000d3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <MX_I2C1_Init+0x50>)
 8000d6a:	f000 fe09 	bl	8001980 <HAL_I2C_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d74:	f000 f898 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000014c 	.word	0x2000014c
 8000d80:	40005400 	.word	0x40005400
 8000d84:	00061a80 	.word	0x00061a80

08000d88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	@ (8000dd8 <MX_USART1_UART_Init+0x50>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000d94:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000dc0:	f002 fbc6 	bl	8003550 <HAL_UART_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dca:	f000 f86d 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200001a0 	.word	0x200001a0
 8000dd8:	40011000 	.word	0x40011000

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea0 <MX_GPIO_Init+0xc4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a29      	ldr	r2, [pc, #164]	@ (8000ea0 <MX_GPIO_Init+0xc4>)
 8000dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <MX_GPIO_Init+0xc4>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <MX_GPIO_Init+0xc4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a22      	ldr	r2, [pc, #136]	@ (8000ea0 <MX_GPIO_Init+0xc4>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <MX_GPIO_Init+0xc4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <MX_GPIO_Init+0xc4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <MX_GPIO_Init+0xc4>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <MX_GPIO_Init+0xc4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2110      	movs	r1, #16
 8000e4a:	4816      	ldr	r0, [pc, #88]	@ (8000ea4 <MX_GPIO_Init+0xc8>)
 8000e4c:	f000 fd4c 	bl	80018e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e50:	2310      	movs	r3, #16
 8000e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e54:	2311      	movs	r3, #17
 8000e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4619      	mov	r1, r3
 8000e66:	480f      	ldr	r0, [pc, #60]	@ (8000ea4 <MX_GPIO_Init+0xc8>)
 8000e68:	f000 fba2 	bl	80015b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000e6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e72:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4619      	mov	r1, r3
 8000e82:	4808      	ldr	r0, [pc, #32]	@ (8000ea4 <MX_GPIO_Init+0xc8>)
 8000e84:	f000 fb94 	bl	80015b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2017      	movs	r0, #23
 8000e8e:	f000 fb58 	bl	8001542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e92:	2017      	movs	r0, #23
 8000e94:	f000 fb71 	bl	800157a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a19      	ldr	r2, [pc, #100]	@ (8000f88 <HAL_I2C_MspInit+0x84>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d12b      	bne.n	8000f7e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f42:	23c0      	movs	r3, #192	@ 0xc0
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f46:	2312      	movs	r3, #18
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f52:	2304      	movs	r3, #4
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <HAL_I2C_MspInit+0x8c>)
 8000f5e:	f000 fb27 	bl	80015b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_I2C_MspInit+0x88>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	@ 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40005400 	.word	0x40005400
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020400 	.word	0x40020400

08000f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a19      	ldr	r2, [pc, #100]	@ (8001018 <HAL_UART_MspInit+0x84>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d12c      	bne.n	8001010 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b18      	ldr	r3, [pc, #96]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	4a17      	ldr	r2, [pc, #92]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fc0:	f043 0310 	orr.w	r3, r3, #16
 8000fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a10      	ldr	r2, [pc, #64]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <HAL_UART_MspInit+0x88>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001000:	2307      	movs	r3, #7
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <HAL_UART_MspInit+0x8c>)
 800100c:	f000 fad0 	bl	80015b0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	@ 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40011000 	.word	0x40011000
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <NMI_Handler+0x4>

0800102c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <MemManage_Handler+0x4>

0800103c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <UsageFault_Handler+0x4>

0800104c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107a:	f000 f943 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}

08001082 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8001086:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800108a:	f000 fc61 	bl	8001950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}

08001092 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  return 1;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_kill>:

int _kill(int pid, int sig)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ac:	f00a f948 	bl	800b340 <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2216      	movs	r2, #22
 80010b4:	601a      	str	r2, [r3, #0]
  return -1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_exit>:

void _exit (int status)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffe7 	bl	80010a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <_exit+0x12>

080010d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	e00a      	b.n	8001100 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ea:	f3af 8000 	nop.w
 80010ee:	4601      	mov	r1, r0
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	60ba      	str	r2, [r7, #8]
 80010f6:	b2ca      	uxtb	r2, r1
 80010f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf0      	blt.n	80010ea <_read+0x12>
  }

  return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800113a:	605a      	str	r2, [r3, #4]
  return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_isatty>:

int _isatty(int file)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f00a f8c8 	bl	800b340 <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20020000 	.word	0x20020000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	20000348 	.word	0x20000348
 80011e4:	200004a0 	.word	0x200004a0

080011e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	@ (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480d      	ldr	r0, [pc, #52]	@ (8001248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001212:	490e      	ldr	r1, [pc, #56]	@ (800124c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001214:	4a0e      	ldr	r2, [pc, #56]	@ (8001250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001228:	4c0b      	ldr	r4, [pc, #44]	@ (8001258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001236:	f7ff ffd7 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f00a f887 	bl	800b34c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff faeb 	bl	8000818 <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001250:	0800cbe8 	.word	0x0800cbe8
  ldr r2, =_sbss
 8001254:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001258:	2000049c 	.word	0x2000049c

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <HAL_Init+0x40>)
 800126a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <HAL_Init+0x40>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800127a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	@ (80012a0 <HAL_Init+0x40>)
 8001282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f94f 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	200f      	movs	r0, #15
 8001290:	f000 f808 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff fe0e 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_InitTick+0x54>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_InitTick+0x58>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f967 	bl	8001596 <HAL_SYSTICK_Config>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00e      	b.n	80012f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d80a      	bhi.n	80012ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e0:	f000 f92f 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e4:	4a06      	ldr	r2, [pc, #24]	@ (8001300 <HAL_InitTick+0x5c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000004c 	.word	0x2000004c
 80012fc:	20000054 	.word	0x20000054
 8001300:	20000050 	.word	0x20000050

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000054 	.word	0x20000054
 8001328:	2000034c 	.word	0x2000034c

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2000034c 	.word	0x2000034c

08001344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff ffee 	bl	800132c <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800135c:	d005      	beq.n	800136a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135e:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <HAL_Delay+0x44>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136a:	bf00      	nop
 800136c:	f7ff ffde 	bl	800132c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8f7      	bhi.n	800136c <HAL_Delay+0x28>
  {
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000054 	.word	0x20000054

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	@ (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	@ (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	@ (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff29 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff3e 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff31 	bl	80013f0 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	@ 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	e16b      	b.n	80018a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015cc:	2201      	movs	r2, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f040 815a 	bne.w	800189e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d005      	beq.n	8001602 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d130      	bne.n	8001664 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	2203      	movs	r2, #3
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001638:	2201      	movs	r2, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	f003 0201 	and.w	r2, r3, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b03      	cmp	r3, #3
 800166e:	d017      	beq.n	80016a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d123      	bne.n	80016f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	08da      	lsrs	r2, r3, #3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3208      	adds	r2, #8
 80016b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	08da      	lsrs	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3208      	adds	r2, #8
 80016ee:	69b9      	ldr	r1, [r7, #24]
 80016f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0203 	and.w	r2, r3, #3
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80b4 	beq.w	800189e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b60      	ldr	r3, [pc, #384]	@ (80018bc <HAL_GPIO_Init+0x30c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a5f      	ldr	r2, [pc, #380]	@ (80018bc <HAL_GPIO_Init+0x30c>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b5d      	ldr	r3, [pc, #372]	@ (80018bc <HAL_GPIO_Init+0x30c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001752:	4a5b      	ldr	r2, [pc, #364]	@ (80018c0 <HAL_GPIO_Init+0x310>)
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	3302      	adds	r3, #2
 800175a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	220f      	movs	r2, #15
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a52      	ldr	r2, [pc, #328]	@ (80018c4 <HAL_GPIO_Init+0x314>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d02b      	beq.n	80017d6 <HAL_GPIO_Init+0x226>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a51      	ldr	r2, [pc, #324]	@ (80018c8 <HAL_GPIO_Init+0x318>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d025      	beq.n	80017d2 <HAL_GPIO_Init+0x222>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a50      	ldr	r2, [pc, #320]	@ (80018cc <HAL_GPIO_Init+0x31c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d01f      	beq.n	80017ce <HAL_GPIO_Init+0x21e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4f      	ldr	r2, [pc, #316]	@ (80018d0 <HAL_GPIO_Init+0x320>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d019      	beq.n	80017ca <HAL_GPIO_Init+0x21a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4e      	ldr	r2, [pc, #312]	@ (80018d4 <HAL_GPIO_Init+0x324>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0x216>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4d      	ldr	r2, [pc, #308]	@ (80018d8 <HAL_GPIO_Init+0x328>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00d      	beq.n	80017c2 <HAL_GPIO_Init+0x212>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4c      	ldr	r2, [pc, #304]	@ (80018dc <HAL_GPIO_Init+0x32c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d007      	beq.n	80017be <HAL_GPIO_Init+0x20e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4b      	ldr	r2, [pc, #300]	@ (80018e0 <HAL_GPIO_Init+0x330>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_GPIO_Init+0x20a>
 80017b6:	2307      	movs	r3, #7
 80017b8:	e00e      	b.n	80017d8 <HAL_GPIO_Init+0x228>
 80017ba:	2308      	movs	r3, #8
 80017bc:	e00c      	b.n	80017d8 <HAL_GPIO_Init+0x228>
 80017be:	2306      	movs	r3, #6
 80017c0:	e00a      	b.n	80017d8 <HAL_GPIO_Init+0x228>
 80017c2:	2305      	movs	r3, #5
 80017c4:	e008      	b.n	80017d8 <HAL_GPIO_Init+0x228>
 80017c6:	2304      	movs	r3, #4
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x228>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e004      	b.n	80017d8 <HAL_GPIO_Init+0x228>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x228>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x228>
 80017d6:	2300      	movs	r3, #0
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f002 0203 	and.w	r2, r2, #3
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4093      	lsls	r3, r2
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e8:	4935      	ldr	r1, [pc, #212]	@ (80018c0 <HAL_GPIO_Init+0x310>)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f6:	4b3b      	ldr	r3, [pc, #236]	@ (80018e4 <HAL_GPIO_Init+0x334>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181a:	4a32      	ldr	r2, [pc, #200]	@ (80018e4 <HAL_GPIO_Init+0x334>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001820:	4b30      	ldr	r3, [pc, #192]	@ (80018e4 <HAL_GPIO_Init+0x334>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001844:	4a27      	ldr	r2, [pc, #156]	@ (80018e4 <HAL_GPIO_Init+0x334>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184a:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <HAL_GPIO_Init+0x334>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186e:	4a1d      	ldr	r2, [pc, #116]	@ (80018e4 <HAL_GPIO_Init+0x334>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <HAL_GPIO_Init+0x334>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001898:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <HAL_GPIO_Init+0x334>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	f67f ae90 	bls.w	80015cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3724      	adds	r7, #36	@ 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40013800 	.word	0x40013800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40021400 	.word	0x40021400
 80018dc:	40021800 	.word	0x40021800
 80018e0:	40021c00 	.word	0x40021c00
 80018e4:	40013c00 	.word	0x40013c00

080018e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
 80018f4:	4613      	mov	r3, r2
 80018f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f8:	787b      	ldrb	r3, [r7, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001904:	e003      	b.n	800190e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	041a      	lsls	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	619a      	str	r2, [r3, #24]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	460b      	mov	r3, r1
 8001924:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800192c:	887a      	ldrh	r2, [r7, #2]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4013      	ands	r3, r2
 8001932:	041a      	lsls	r2, r3, #16
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43d9      	mvns	r1, r3
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	400b      	ands	r3, r1
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	619a      	str	r2, [r3, #24]
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fece 	bl	8000710 <HAL_GPIO_EXTI_Callback>
  }
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40013c00 	.word	0x40013c00

08001980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e12b      	b.n	8001bea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff faac 	bl	8000f04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2224      	movs	r2, #36	@ 0x24
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0201 	bic.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019e4:	f001 fd8c 	bl	8003500 <HAL_RCC_GetPCLK1Freq>
 80019e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4a81      	ldr	r2, [pc, #516]	@ (8001bf4 <HAL_I2C_Init+0x274>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d807      	bhi.n	8001a04 <HAL_I2C_Init+0x84>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4a80      	ldr	r2, [pc, #512]	@ (8001bf8 <HAL_I2C_Init+0x278>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	bf94      	ite	ls
 80019fc:	2301      	movls	r3, #1
 80019fe:	2300      	movhi	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	e006      	b.n	8001a12 <HAL_I2C_Init+0x92>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4a7d      	ldr	r2, [pc, #500]	@ (8001bfc <HAL_I2C_Init+0x27c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	bf94      	ite	ls
 8001a0c:	2301      	movls	r3, #1
 8001a0e:	2300      	movhi	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e0e7      	b.n	8001bea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4a78      	ldr	r2, [pc, #480]	@ (8001c00 <HAL_I2C_Init+0x280>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0c9b      	lsrs	r3, r3, #18
 8001a24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a6a      	ldr	r2, [pc, #424]	@ (8001bf4 <HAL_I2C_Init+0x274>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d802      	bhi.n	8001a54 <HAL_I2C_Init+0xd4>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3301      	adds	r3, #1
 8001a52:	e009      	b.n	8001a68 <HAL_I2C_Init+0xe8>
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	4a69      	ldr	r2, [pc, #420]	@ (8001c04 <HAL_I2C_Init+0x284>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	3301      	adds	r3, #1
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	495c      	ldr	r1, [pc, #368]	@ (8001bf4 <HAL_I2C_Init+0x274>)
 8001a84:	428b      	cmp	r3, r1
 8001a86:	d819      	bhi.n	8001abc <HAL_I2C_Init+0x13c>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1e59      	subs	r1, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a96:	1c59      	adds	r1, r3, #1
 8001a98:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a9c:	400b      	ands	r3, r1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <HAL_I2C_Init+0x138>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1e59      	subs	r1, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab6:	e051      	b.n	8001b5c <HAL_I2C_Init+0x1dc>
 8001ab8:	2304      	movs	r3, #4
 8001aba:	e04f      	b.n	8001b5c <HAL_I2C_Init+0x1dc>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d111      	bne.n	8001ae8 <HAL_I2C_Init+0x168>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1e58      	subs	r0, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	440b      	add	r3, r1
 8001ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	e012      	b.n	8001b0e <HAL_I2C_Init+0x18e>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1e58      	subs	r0, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	0099      	lsls	r1, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_I2C_Init+0x196>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e022      	b.n	8001b5c <HAL_I2C_Init+0x1dc>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10e      	bne.n	8001b3c <HAL_I2C_Init+0x1bc>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1e58      	subs	r0, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6859      	ldr	r1, [r3, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	440b      	add	r3, r1
 8001b2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b3a:	e00f      	b.n	8001b5c <HAL_I2C_Init+0x1dc>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e58      	subs	r0, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	0099      	lsls	r1, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	6809      	ldr	r1, [r1, #0]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6911      	ldr	r1, [r2, #16]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68d2      	ldr	r2, [r2, #12]
 8001b96:	4311      	orrs	r1, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	000186a0 	.word	0x000186a0
 8001bf8:	001e847f 	.word	0x001e847f
 8001bfc:	003d08ff 	.word	0x003d08ff
 8001c00:	431bde83 	.word	0x431bde83
 8001c04:	10624dd3 	.word	0x10624dd3

08001c08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	4608      	mov	r0, r1
 8001c12:	4611      	mov	r1, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	817b      	strh	r3, [r7, #10]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	813b      	strh	r3, [r7, #8]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c22:	f7ff fb83 	bl	800132c <HAL_GetTick>
 8001c26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	f040 80d9 	bne.w	8001de8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2319      	movs	r3, #25
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	496d      	ldr	r1, [pc, #436]	@ (8001df4 <HAL_I2C_Mem_Write+0x1ec>)
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 fdb9 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e0cc      	b.n	8001dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_I2C_Mem_Write+0x56>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e0c5      	b.n	8001dea <HAL_I2C_Mem_Write+0x1e2>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d007      	beq.n	8001c84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2221      	movs	r2, #33	@ 0x21
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2240      	movs	r2, #64	@ 0x40
 8001ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a3a      	ldr	r2, [r7, #32]
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a4d      	ldr	r2, [pc, #308]	@ (8001df8 <HAL_I2C_Mem_Write+0x1f0>)
 8001cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cc6:	88f8      	ldrh	r0, [r7, #6]
 8001cc8:	893a      	ldrh	r2, [r7, #8]
 8001cca:	8979      	ldrh	r1, [r7, #10]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 fbf0 	bl	80024bc <I2C_RequestMemoryWrite>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d052      	beq.n	8001d88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e081      	b.n	8001dea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 fe7e 	bl	80029ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00d      	beq.n	8001d12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d107      	bne.n	8001d0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e06b      	b.n	8001dea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	781a      	ldrb	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d11b      	bne.n	8001d88 <HAL_I2C_Mem_Write+0x180>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d017      	beq.n	8001d88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1aa      	bne.n	8001ce6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 fe71 	bl	8002a7c <I2C_WaitOnBTFFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00d      	beq.n	8001dbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d107      	bne.n	8001db8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e016      	b.n	8001dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e000      	b.n	8001dea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001de8:	2302      	movs	r3, #2
  }
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	00100002 	.word	0x00100002
 8001df8:	ffff0000 	.word	0xffff0000

08001dfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	@ 0x30
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	4608      	mov	r0, r1
 8001e06:	4611      	mov	r1, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	817b      	strh	r3, [r7, #10]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	813b      	strh	r3, [r7, #8]
 8001e12:	4613      	mov	r3, r2
 8001e14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e16:	f7ff fa89 	bl	800132c <HAL_GetTick>
 8001e1a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	f040 8214 	bne.w	8002252 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2319      	movs	r3, #25
 8001e30:	2201      	movs	r2, #1
 8001e32:	497b      	ldr	r1, [pc, #492]	@ (8002020 <HAL_I2C_Mem_Read+0x224>)
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fcbf 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001e40:	2302      	movs	r3, #2
 8001e42:	e207      	b.n	8002254 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Mem_Read+0x56>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e200      	b.n	8002254 <HAL_I2C_Mem_Read+0x458>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d007      	beq.n	8001e78 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2222      	movs	r2, #34	@ 0x22
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2240      	movs	r2, #64	@ 0x40
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ea2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a5b      	ldr	r2, [pc, #364]	@ (8002024 <HAL_I2C_Mem_Read+0x228>)
 8001eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eba:	88f8      	ldrh	r0, [r7, #6]
 8001ebc:	893a      	ldrh	r2, [r7, #8]
 8001ebe:	8979      	ldrh	r1, [r7, #10]
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	4603      	mov	r3, r0
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 fb8c 	bl	80025e8 <I2C_RequestMemoryRead>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e1bc      	b.n	8002254 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d113      	bne.n	8001f0a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	e190      	b.n	800222c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d11b      	bne.n	8001f4a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e170      	b.n	800222c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d11b      	bne.n	8001f8a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	e150      	b.n	800222c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001fa0:	e144      	b.n	800222c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	f200 80f1 	bhi.w	800218e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d123      	bne.n	8001ffc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 fda7 	bl	8002b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e145      	b.n	8002254 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ffa:	e117      	b.n	800222c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002000:	2b02      	cmp	r3, #2
 8002002:	d14e      	bne.n	80020a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800200a:	2200      	movs	r2, #0
 800200c:	4906      	ldr	r1, [pc, #24]	@ (8002028 <HAL_I2C_Mem_Read+0x22c>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fbd2 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e11a      	b.n	8002254 <HAL_I2C_Mem_Read+0x458>
 800201e:	bf00      	nop
 8002020:	00100002 	.word	0x00100002
 8002024:	ffff0000 	.word	0xffff0000
 8002028:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800203a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020a0:	e0c4      	b.n	800222c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a8:	2200      	movs	r2, #0
 80020aa:	496c      	ldr	r1, [pc, #432]	@ (800225c <HAL_I2C_Mem_Read+0x460>)
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 fb83 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0cb      	b.n	8002254 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002104:	2200      	movs	r2, #0
 8002106:	4955      	ldr	r1, [pc, #340]	@ (800225c <HAL_I2C_Mem_Read+0x460>)
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fb55 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e09d      	b.n	8002254 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800218c:	e04e      	b.n	800222c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002190:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fcba 	bl	8002b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e058      	b.n	8002254 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d124      	bne.n	800222c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d107      	bne.n	80021fa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021f8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f aeb6 	bne.w	8001fa2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002252:	2302      	movs	r3, #2
  }
}
 8002254:	4618      	mov	r0, r3
 8002256:	3728      	adds	r7, #40	@ 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	00010004 	.word	0x00010004

08002260 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	@ 0x28
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	460b      	mov	r3, r1
 800226e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff f85c 	bl	800132c <HAL_GetTick>
 8002274:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b20      	cmp	r3, #32
 8002284:	f040 8111 	bne.w	80024aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2319      	movs	r3, #25
 800228e:	2201      	movs	r2, #1
 8002290:	4988      	ldr	r1, [pc, #544]	@ (80024b4 <HAL_I2C_IsDeviceReady+0x254>)
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fa90 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	e104      	b.n	80024ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_IsDeviceReady+0x50>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e0fd      	b.n	80024ac <HAL_I2C_IsDeviceReady+0x24c>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d007      	beq.n	80022d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2224      	movs	r2, #36	@ 0x24
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a70      	ldr	r2, [pc, #448]	@ (80024b8 <HAL_I2C_IsDeviceReady+0x258>)
 80022f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002308:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2200      	movs	r2, #0
 8002312:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fa4e 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00d      	beq.n	800233e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002330:	d103      	bne.n	800233a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002338:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e0b6      	b.n	80024ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800233e:	897b      	ldrh	r3, [r7, #10]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800234c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe ffed 	bl	800132c <HAL_GetTick>
 8002352:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	bf0c      	ite	eq
 8002362:	2301      	moveq	r3, #1
 8002364:	2300      	movne	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002378:	bf0c      	ite	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	2300      	movne	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002382:	e025      	b.n	80023d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002384:	f7fe ffd2 	bl	800132c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d302      	bcc.n	800239a <HAL_I2C_IsDeviceReady+0x13a>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	22a0      	movs	r2, #160	@ 0xa0
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	bf0c      	ite	eq
 80023b0:	2301      	moveq	r3, #1
 80023b2:	2300      	movne	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80023da:	d005      	beq.n	80023e8 <HAL_I2C_IsDeviceReady+0x188>
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <HAL_I2C_IsDeviceReady+0x188>
 80023e2:	7dbb      	ldrb	r3, [r7, #22]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0cd      	beq.n	8002384 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d129      	bne.n	8002452 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800240c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2319      	movs	r3, #25
 800242a:	2201      	movs	r2, #1
 800242c:	4921      	ldr	r1, [pc, #132]	@ (80024b4 <HAL_I2C_IsDeviceReady+0x254>)
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f9c2 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e036      	b.n	80024ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e02c      	b.n	80024ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002460:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800246a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2319      	movs	r3, #25
 8002472:	2201      	movs	r2, #1
 8002474:	490f      	ldr	r1, [pc, #60]	@ (80024b4 <HAL_I2C_IsDeviceReady+0x254>)
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f99e 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e012      	b.n	80024ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	3301      	adds	r3, #1
 800248a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	f4ff af32 	bcc.w	80022fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	00100002 	.word	0x00100002
 80024b8:	ffff0000 	.word	0xffff0000

080024bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	4608      	mov	r0, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	461a      	mov	r2, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	817b      	strh	r3, [r7, #10]
 80024ce:	460b      	mov	r3, r1
 80024d0:	813b      	strh	r3, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f960 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800250c:	d103      	bne.n	8002516 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e05f      	b.n	80025da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800251a:	897b      	ldrh	r3, [r7, #10]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002528:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	492d      	ldr	r1, [pc, #180]	@ (80025e4 <I2C_RequestMemoryWrite+0x128>)
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f9bb 	bl	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e04c      	b.n	80025da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002558:	6a39      	ldr	r1, [r7, #32]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fa46 	bl	80029ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	2b04      	cmp	r3, #4
 800256c:	d107      	bne.n	800257e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e02b      	b.n	80025da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002588:	893b      	ldrh	r3, [r7, #8]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	611a      	str	r2, [r3, #16]
 8002592:	e021      	b.n	80025d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002594:	893b      	ldrh	r3, [r7, #8]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	b29b      	uxth	r3, r3
 800259a:	b2da      	uxtb	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a4:	6a39      	ldr	r1, [r7, #32]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa20 	bl	80029ec <I2C_WaitOnTXEFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d107      	bne.n	80025ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e005      	b.n	80025da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025ce:	893b      	ldrh	r3, [r7, #8]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	00010002 	.word	0x00010002

080025e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	460b      	mov	r3, r1
 80025fc:	813b      	strh	r3, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002610:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002620:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	2200      	movs	r2, #0
 800262a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f8c2 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002648:	d103      	bne.n	8002652 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002650:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0aa      	b.n	80027ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002656:	897b      	ldrh	r3, [r7, #10]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002664:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	6a3a      	ldr	r2, [r7, #32]
 800266a:	4952      	ldr	r1, [pc, #328]	@ (80027b4 <I2C_RequestMemoryRead+0x1cc>)
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f91d 	bl	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e097      	b.n	80027ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002694:	6a39      	ldr	r1, [r7, #32]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f9a8 	bl	80029ec <I2C_WaitOnTXEFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00d      	beq.n	80026be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d107      	bne.n	80026ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e076      	b.n	80027ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026c4:	893b      	ldrh	r3, [r7, #8]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	611a      	str	r2, [r3, #16]
 80026ce:	e021      	b.n	8002714 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026d0:	893b      	ldrh	r3, [r7, #8]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e0:	6a39      	ldr	r1, [r7, #32]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f982 	bl	80029ec <I2C_WaitOnTXEFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00d      	beq.n	800270a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d107      	bne.n	8002706 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002704:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e050      	b.n	80027ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800270a:	893b      	ldrh	r3, [r7, #8]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002716:	6a39      	ldr	r1, [r7, #32]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f967 	bl	80029ec <I2C_WaitOnTXEFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	2b04      	cmp	r3, #4
 800272a:	d107      	bne.n	800273c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e035      	b.n	80027ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800274e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	2200      	movs	r2, #0
 8002758:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f82b 	bl	80027b8 <I2C_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00d      	beq.n	8002784 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002776:	d103      	bne.n	8002780 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e013      	b.n	80027ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002784:	897b      	ldrh	r3, [r7, #10]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	6a3a      	ldr	r2, [r7, #32]
 8002798:	4906      	ldr	r1, [pc, #24]	@ (80027b4 <I2C_RequestMemoryRead+0x1cc>)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f886 	bl	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	00010002 	.word	0x00010002

080027b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c8:	e048      	b.n	800285c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027d0:	d044      	beq.n	800285c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7fe fdab 	bl	800132c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d139      	bne.n	800285c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	0c1b      	lsrs	r3, r3, #16
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d10d      	bne.n	800280e <I2C_WaitOnFlagUntilTimeout+0x56>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	43da      	mvns	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	4013      	ands	r3, r2
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	e00c      	b.n	8002828 <I2C_WaitOnFlagUntilTimeout+0x70>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	43da      	mvns	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4013      	ands	r3, r2
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	429a      	cmp	r2, r3
 800282c:	d116      	bne.n	800285c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	f043 0220 	orr.w	r2, r3, #32
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e023      	b.n	80028a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	0c1b      	lsrs	r3, r3, #16
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d10d      	bne.n	8002882 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	43da      	mvns	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	e00c      	b.n	800289c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	43da      	mvns	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4013      	ands	r3, r2
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d093      	beq.n	80027ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028ba:	e071      	b.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ca:	d123      	bne.n	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e067      	b.n	80029e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800291a:	d041      	beq.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291c:	f7fe fd06 	bl	800132c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	d302      	bcc.n	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d136      	bne.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d10c      	bne.n	8002956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4013      	ands	r3, r2
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	bf14      	ite	ne
 800294e:	2301      	movne	r3, #1
 8002950:	2300      	moveq	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	e00b      	b.n	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	43da      	mvns	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4013      	ands	r3, r2
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d016      	beq.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e021      	b.n	80029e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	0c1b      	lsrs	r3, r3, #16
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d10c      	bne.n	80029c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	43da      	mvns	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4013      	ands	r3, r2
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf14      	ite	ne
 80029bc:	2301      	movne	r3, #1
 80029be:	2300      	moveq	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	e00b      	b.n	80029dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4013      	ands	r3, r2
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bf14      	ite	ne
 80029d6:	2301      	movne	r3, #1
 80029d8:	2300      	moveq	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f47f af6d 	bne.w	80028bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029f8:	e034      	b.n	8002a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f8e3 	bl	8002bc6 <I2C_IsAcknowledgeFailed>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e034      	b.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a10:	d028      	beq.n	8002a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7fe fc8b 	bl	800132c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11d      	bne.n	8002a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a32:	2b80      	cmp	r3, #128	@ 0x80
 8002a34:	d016      	beq.n	8002a64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e007      	b.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6e:	2b80      	cmp	r3, #128	@ 0x80
 8002a70:	d1c3      	bne.n	80029fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a88:	e034      	b.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f89b 	bl	8002bc6 <I2C_IsAcknowledgeFailed>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e034      	b.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aa0:	d028      	beq.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa2:	f7fe fc43 	bl	800132c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d302      	bcc.n	8002ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11d      	bne.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d016      	beq.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e007      	b.n	8002b04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d1c3      	bne.n	8002a8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b18:	e049      	b.n	8002bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d119      	bne.n	8002b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0210 	mvn.w	r2, #16
 8002b30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e030      	b.n	8002bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5c:	f7fe fbe6 	bl	800132c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d302      	bcc.n	8002b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11d      	bne.n	8002bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7c:	2b40      	cmp	r3, #64	@ 0x40
 8002b7e:	d016      	beq.n	8002bae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	f043 0220 	orr.w	r2, r3, #32
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e007      	b.n	8002bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb8:	2b40      	cmp	r3, #64	@ 0x40
 8002bba:	d1ae      	bne.n	8002b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bdc:	d11b      	bne.n	8002c16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002be6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f043 0204 	orr.w	r2, r3, #4
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e267      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d075      	beq.n	8002d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c42:	4b88      	ldr	r3, [pc, #544]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d00c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4b85      	ldr	r3, [pc, #532]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d112      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5a:	4b82      	ldr	r3, [pc, #520]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c66:	d10b      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	4b7e      	ldr	r3, [pc, #504]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d05b      	beq.n	8002d2c <HAL_RCC_OscConfig+0x108>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d157      	bne.n	8002d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e242      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x74>
 8002c8a:	4b76      	ldr	r3, [pc, #472]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a75      	ldr	r2, [pc, #468]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e01d      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x98>
 8002ca2:	4b70      	ldr	r3, [pc, #448]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a6f      	ldr	r2, [pc, #444]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b6d      	ldr	r3, [pc, #436]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6c      	ldr	r2, [pc, #432]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002cbc:	4b69      	ldr	r3, [pc, #420]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a68      	ldr	r2, [pc, #416]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b66      	ldr	r3, [pc, #408]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a65      	ldr	r2, [pc, #404]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fb26 	bl	800132c <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fb22 	bl	800132c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	@ 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e207      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xc0>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fb12 	bl	800132c <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fb0e 	bl	800132c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	@ 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e1f3      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	4b51      	ldr	r3, [pc, #324]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0xe8>
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d063      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b47      	ldr	r3, [pc, #284]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d11c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d52:	4b44      	ldr	r3, [pc, #272]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	4b41      	ldr	r3, [pc, #260]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_RCC_OscConfig+0x152>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e1c7      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4b3b      	ldr	r3, [pc, #236]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4937      	ldr	r1, [pc, #220]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	e03a      	b.n	8002e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d94:	4b34      	ldr	r3, [pc, #208]	@ (8002e68 <HAL_RCC_OscConfig+0x244>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fac7 	bl	800132c <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fe fac3 	bl	800132c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1a8      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b28      	ldr	r3, [pc, #160]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4925      	ldr	r1, [pc, #148]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e015      	b.n	8002e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd6:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <HAL_RCC_OscConfig+0x244>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe faa6 	bl	800132c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fe faa2 	bl	800132c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e187      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d036      	beq.n	8002e7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <HAL_RCC_OscConfig+0x248>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fa86 	bl	800132c <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fe fa82 	bl	800132c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e167      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_RCC_OscConfig+0x240>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x200>
 8002e42:	e01b      	b.n	8002e7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e44:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <HAL_RCC_OscConfig+0x248>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fa6f 	bl	800132c <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	e00e      	b.n	8002e70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fe fa6b 	bl	800132c <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d907      	bls.n	8002e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e150      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	42470000 	.word	0x42470000
 8002e6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	4b88      	ldr	r3, [pc, #544]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ea      	bne.n	8002e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8097 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b81      	ldr	r3, [pc, #516]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10f      	bne.n	8002eba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	4a7c      	ldr	r2, [pc, #496]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eaa:	4b7a      	ldr	r3, [pc, #488]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b77      	ldr	r3, [pc, #476]	@ (8003098 <HAL_RCC_OscConfig+0x474>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d118      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec6:	4b74      	ldr	r3, [pc, #464]	@ (8003098 <HAL_RCC_OscConfig+0x474>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a73      	ldr	r2, [pc, #460]	@ (8003098 <HAL_RCC_OscConfig+0x474>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fa2b 	bl	800132c <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eda:	f7fe fa27 	bl	800132c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e10c      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	4b6a      	ldr	r3, [pc, #424]	@ (8003098 <HAL_RCC_OscConfig+0x474>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x2ea>
 8002f00:	4b64      	ldr	r3, [pc, #400]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f04:	4a63      	ldr	r2, [pc, #396]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0c:	e01c      	b.n	8002f48 <HAL_RCC_OscConfig+0x324>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x30c>
 8002f16:	4b5f      	ldr	r3, [pc, #380]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1a:	4a5e      	ldr	r2, [pc, #376]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f22:	4b5c      	ldr	r3, [pc, #368]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f26:	4a5b      	ldr	r2, [pc, #364]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0x324>
 8002f30:	4b58      	ldr	r3, [pc, #352]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f34:	4a57      	ldr	r2, [pc, #348]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f3c:	4b55      	ldr	r3, [pc, #340]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f40:	4a54      	ldr	r2, [pc, #336]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f42:	f023 0304 	bic.w	r3, r3, #4
 8002f46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d015      	beq.n	8002f7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe f9ec 	bl	800132c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fe f9e8 	bl	800132c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0cb      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6e:	4b49      	ldr	r3, [pc, #292]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0ee      	beq.n	8002f58 <HAL_RCC_OscConfig+0x334>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7c:	f7fe f9d6 	bl	800132c <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7fe f9d2 	bl	800132c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0b5      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1ee      	bne.n	8002f84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fac:	4b39      	ldr	r3, [pc, #228]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	4a38      	ldr	r2, [pc, #224]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80a1 	beq.w	8003104 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc2:	4b34      	ldr	r3, [pc, #208]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d05c      	beq.n	8003088 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d141      	bne.n	800305a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b31      	ldr	r3, [pc, #196]	@ (800309c <HAL_RCC_OscConfig+0x478>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe f9a6 	bl	800132c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe f9a2 	bl	800132c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e087      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	4b27      	ldr	r3, [pc, #156]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	3b01      	subs	r3, #1
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	491b      	ldr	r1, [pc, #108]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302c:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <HAL_RCC_OscConfig+0x478>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7fe f97b 	bl	800132c <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7fe f977 	bl	800132c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e05c      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x416>
 8003058:	e054      	b.n	8003104 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b10      	ldr	r3, [pc, #64]	@ (800309c <HAL_RCC_OscConfig+0x478>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe f964 	bl	800132c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe f960 	bl	800132c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e045      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <HAL_RCC_OscConfig+0x470>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x444>
 8003086:	e03d      	b.n	8003104 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e038      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
 8003094:	40023800 	.word	0x40023800
 8003098:	40007000 	.word	0x40007000
 800309c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <HAL_RCC_OscConfig+0x4ec>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d028      	beq.n	8003100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d121      	bne.n	8003100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d11a      	bne.n	8003100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d8:	4293      	cmp	r3, r2
 80030da:	d111      	bne.n	8003100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	3b01      	subs	r3, #1
 80030ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800

08003114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0cc      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4b68      	ldr	r3, [pc, #416]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d90c      	bls.n	8003150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b65      	ldr	r3, [pc, #404]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b63      	ldr	r3, [pc, #396]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b8      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003168:	4b59      	ldr	r3, [pc, #356]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a58      	ldr	r2, [pc, #352]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003172:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003180:	4b53      	ldr	r3, [pc, #332]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a52      	ldr	r2, [pc, #328]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800318a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b50      	ldr	r3, [pc, #320]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	494d      	ldr	r1, [pc, #308]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d044      	beq.n	8003234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b47      	ldr	r3, [pc, #284]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d119      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e07f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	4b3f      	ldr	r3, [pc, #252]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e2:	4b3b      	ldr	r3, [pc, #236]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e067      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f2:	4b37      	ldr	r3, [pc, #220]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f023 0203 	bic.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4934      	ldr	r1, [pc, #208]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003204:	f7fe f892 	bl	800132c <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	e00a      	b.n	8003222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320c:	f7fe f88e 	bl	800132c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e04f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	4b2b      	ldr	r3, [pc, #172]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 020c 	and.w	r2, r3, #12
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	429a      	cmp	r2, r3
 8003232:	d1eb      	bne.n	800320c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b25      	ldr	r3, [pc, #148]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d20c      	bcs.n	800325c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b22      	ldr	r3, [pc, #136]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e032      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b19      	ldr	r3, [pc, #100]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4916      	ldr	r1, [pc, #88]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003286:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	490e      	ldr	r1, [pc, #56]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800329a:	f000 f821 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	490a      	ldr	r1, [pc, #40]	@ (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	5ccb      	ldrb	r3, [r1, r3]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	4a09      	ldr	r2, [pc, #36]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032b6:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd fff2 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023c00 	.word	0x40023c00
 80032d0:	40023800 	.word	0x40023800
 80032d4:	0800c9d0 	.word	0x0800c9d0
 80032d8:	2000004c 	.word	0x2000004c
 80032dc:	20000050 	.word	0x20000050

080032e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e4:	b094      	sub	sp, #80	@ 0x50
 80032e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f8:	4b79      	ldr	r3, [pc, #484]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b08      	cmp	r3, #8
 8003302:	d00d      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x40>
 8003304:	2b08      	cmp	r3, #8
 8003306:	f200 80e1 	bhi.w	80034cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x34>
 800330e:	2b04      	cmp	r3, #4
 8003310:	d003      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0x3a>
 8003312:	e0db      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b73      	ldr	r3, [pc, #460]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003316:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003318:	e0db      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800331a:	4b72      	ldr	r3, [pc, #456]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x204>)
 800331c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800331e:	e0d8      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003320:	4b6f      	ldr	r3, [pc, #444]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003328:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800332a:	4b6d      	ldr	r3, [pc, #436]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d063      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003336:	4b6a      	ldr	r3, [pc, #424]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	2200      	movs	r2, #0
 800333e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003340:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003348:	633b      	str	r3, [r7, #48]	@ 0x30
 800334a:	2300      	movs	r3, #0
 800334c:	637b      	str	r3, [r7, #52]	@ 0x34
 800334e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003352:	4622      	mov	r2, r4
 8003354:	462b      	mov	r3, r5
 8003356:	f04f 0000 	mov.w	r0, #0
 800335a:	f04f 0100 	mov.w	r1, #0
 800335e:	0159      	lsls	r1, r3, #5
 8003360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003364:	0150      	lsls	r0, r2, #5
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4621      	mov	r1, r4
 800336c:	1a51      	subs	r1, r2, r1
 800336e:	6139      	str	r1, [r7, #16]
 8003370:	4629      	mov	r1, r5
 8003372:	eb63 0301 	sbc.w	r3, r3, r1
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003384:	4659      	mov	r1, fp
 8003386:	018b      	lsls	r3, r1, #6
 8003388:	4651      	mov	r1, sl
 800338a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800338e:	4651      	mov	r1, sl
 8003390:	018a      	lsls	r2, r1, #6
 8003392:	4651      	mov	r1, sl
 8003394:	ebb2 0801 	subs.w	r8, r2, r1
 8003398:	4659      	mov	r1, fp
 800339a:	eb63 0901 	sbc.w	r9, r3, r1
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033b2:	4690      	mov	r8, r2
 80033b4:	4699      	mov	r9, r3
 80033b6:	4623      	mov	r3, r4
 80033b8:	eb18 0303 	adds.w	r3, r8, r3
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	462b      	mov	r3, r5
 80033c0:	eb49 0303 	adc.w	r3, r9, r3
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033d2:	4629      	mov	r1, r5
 80033d4:	028b      	lsls	r3, r1, #10
 80033d6:	4621      	mov	r1, r4
 80033d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033dc:	4621      	mov	r1, r4
 80033de:	028a      	lsls	r2, r1, #10
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033e6:	2200      	movs	r2, #0
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033f0:	f7fc ff46 	bl	8000280 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4613      	mov	r3, r2
 80033fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033fc:	e058      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b38      	ldr	r3, [pc, #224]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	2200      	movs	r2, #0
 8003406:	4618      	mov	r0, r3
 8003408:	4611      	mov	r1, r2
 800340a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800340e:	623b      	str	r3, [r7, #32]
 8003410:	2300      	movs	r3, #0
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
 8003414:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003418:	4642      	mov	r2, r8
 800341a:	464b      	mov	r3, r9
 800341c:	f04f 0000 	mov.w	r0, #0
 8003420:	f04f 0100 	mov.w	r1, #0
 8003424:	0159      	lsls	r1, r3, #5
 8003426:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800342a:	0150      	lsls	r0, r2, #5
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4641      	mov	r1, r8
 8003432:	ebb2 0a01 	subs.w	sl, r2, r1
 8003436:	4649      	mov	r1, r9
 8003438:	eb63 0b01 	sbc.w	fp, r3, r1
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003448:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800344c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003450:	ebb2 040a 	subs.w	r4, r2, sl
 8003454:	eb63 050b 	sbc.w	r5, r3, fp
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	00eb      	lsls	r3, r5, #3
 8003462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003466:	00e2      	lsls	r2, r4, #3
 8003468:	4614      	mov	r4, r2
 800346a:	461d      	mov	r5, r3
 800346c:	4643      	mov	r3, r8
 800346e:	18e3      	adds	r3, r4, r3
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	464b      	mov	r3, r9
 8003474:	eb45 0303 	adc.w	r3, r5, r3
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003486:	4629      	mov	r1, r5
 8003488:	028b      	lsls	r3, r1, #10
 800348a:	4621      	mov	r1, r4
 800348c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003490:	4621      	mov	r1, r4
 8003492:	028a      	lsls	r2, r1, #10
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800349a:	2200      	movs	r2, #0
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	61fa      	str	r2, [r7, #28]
 80034a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034a4:	f7fc feec 	bl	8000280 <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4613      	mov	r3, r2
 80034ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	3301      	adds	r3, #1
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80034c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034ca:	e002      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034cc:	4b05      	ldr	r3, [pc, #20]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3750      	adds	r7, #80	@ 0x50
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	00f42400 	.word	0x00f42400

080034e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ec:	4b03      	ldr	r3, [pc, #12]	@ (80034fc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ee:	681b      	ldr	r3, [r3, #0]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	2000004c 	.word	0x2000004c

08003500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003504:	f7ff fff0 	bl	80034e8 <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0a9b      	lsrs	r3, r3, #10
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4903      	ldr	r1, [pc, #12]	@ (8003524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	0800c9e0 	.word	0x0800c9e0

08003528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800352c:	f7ff ffdc 	bl	80034e8 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	0b5b      	lsrs	r3, r3, #13
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4903      	ldr	r1, [pc, #12]	@ (800354c <HAL_RCC_GetPCLK2Freq+0x24>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800
 800354c:	0800c9e0 	.word	0x0800c9e0

08003550 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e042      	b.n	80035e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fd fd0c 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2224      	movs	r2, #36	@ 0x24
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003592:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f973 	bl	8003880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	@ 0x28
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b20      	cmp	r3, #32
 800360e:	d175      	bne.n	80036fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_UART_Transmit+0x2c>
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e06e      	b.n	80036fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2221      	movs	r2, #33	@ 0x21
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800362e:	f7fd fe7d 	bl	800132c <HAL_GetTick>
 8003632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	88fa      	ldrh	r2, [r7, #6]
 8003638:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	88fa      	ldrh	r2, [r7, #6]
 800363e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003648:	d108      	bne.n	800365c <HAL_UART_Transmit+0x6c>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	e003      	b.n	8003664 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003660:	2300      	movs	r3, #0
 8003662:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003664:	e02e      	b.n	80036c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	2180      	movs	r1, #128	@ 0x80
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f848 	bl	8003706 <UART_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e03a      	b.n	80036fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10b      	bne.n	80036a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800369c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	3302      	adds	r3, #2
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	e007      	b.n	80036b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	781a      	ldrb	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	3301      	adds	r3, #1
 80036b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1cb      	bne.n	8003666 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2200      	movs	r2, #0
 80036d6:	2140      	movs	r1, #64	@ 0x40
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f814 	bl	8003706 <UART_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e006      	b.n	80036fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e000      	b.n	80036fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
  }
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	4613      	mov	r3, r2
 8003714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003716:	e03b      	b.n	8003790 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800371e:	d037      	beq.n	8003790 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003720:	f7fd fe04 	bl	800132c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	6a3a      	ldr	r2, [r7, #32]
 800372c:	429a      	cmp	r2, r3
 800372e:	d302      	bcc.n	8003736 <UART_WaitOnFlagUntilTimeout+0x30>
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e03a      	b.n	80037b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d023      	beq.n	8003790 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b80      	cmp	r3, #128	@ 0x80
 800374c:	d020      	beq.n	8003790 <UART_WaitOnFlagUntilTimeout+0x8a>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d01d      	beq.n	8003790 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b08      	cmp	r3, #8
 8003760:	d116      	bne.n	8003790 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f81d 	bl	80037b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2208      	movs	r2, #8
 8003782:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e00f      	b.n	80037b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4013      	ands	r3, r2
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	429a      	cmp	r2, r3
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d0b4      	beq.n	8003718 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b095      	sub	sp, #84	@ 0x54
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	330c      	adds	r3, #12
 80037de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80037e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e5      	bne.n	80037c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3314      	adds	r3, #20
 80037fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	61fb      	str	r3, [r7, #28]
   return(result);
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3314      	adds	r3, #20
 8003812:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003814:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003816:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800381a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800381c:	e841 2300 	strex	r3, r2, [r1]
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e5      	bne.n	80037f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382c:	2b01      	cmp	r3, #1
 800382e:	d119      	bne.n	8003864 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	330c      	adds	r3, #12
 8003836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f023 0310 	bic.w	r3, r3, #16
 8003846:	647b      	str	r3, [r7, #68]	@ 0x44
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	330c      	adds	r3, #12
 800384e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003850:	61ba      	str	r2, [r7, #24]
 8003852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	6979      	ldr	r1, [r7, #20]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	613b      	str	r3, [r7, #16]
   return(result);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e5      	bne.n	8003830 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003872:	bf00      	nop
 8003874:	3754      	adds	r7, #84	@ 0x54
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003884:	b0c0      	sub	sp, #256	@ 0x100
 8003886:	af00      	add	r7, sp, #0
 8003888:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389c:	68d9      	ldr	r1, [r3, #12]
 800389e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	ea40 0301 	orr.w	r3, r0, r1
 80038a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	431a      	orrs	r2, r3
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80038d8:	f021 010c 	bic.w	r1, r1, #12
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038e6:	430b      	orrs	r3, r1
 80038e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fa:	6999      	ldr	r1, [r3, #24]
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	ea40 0301 	orr.w	r3, r0, r1
 8003906:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4b8f      	ldr	r3, [pc, #572]	@ (8003b4c <UART_SetConfig+0x2cc>)
 8003910:	429a      	cmp	r2, r3
 8003912:	d005      	beq.n	8003920 <UART_SetConfig+0xa0>
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4b8d      	ldr	r3, [pc, #564]	@ (8003b50 <UART_SetConfig+0x2d0>)
 800391c:	429a      	cmp	r2, r3
 800391e:	d104      	bne.n	800392a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003920:	f7ff fe02 	bl	8003528 <HAL_RCC_GetPCLK2Freq>
 8003924:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003928:	e003      	b.n	8003932 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800392a:	f7ff fde9 	bl	8003500 <HAL_RCC_GetPCLK1Freq>
 800392e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800393c:	f040 810c 	bne.w	8003b58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003944:	2200      	movs	r2, #0
 8003946:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800394a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800394e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003952:	4622      	mov	r2, r4
 8003954:	462b      	mov	r3, r5
 8003956:	1891      	adds	r1, r2, r2
 8003958:	65b9      	str	r1, [r7, #88]	@ 0x58
 800395a:	415b      	adcs	r3, r3
 800395c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800395e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003962:	4621      	mov	r1, r4
 8003964:	eb12 0801 	adds.w	r8, r2, r1
 8003968:	4629      	mov	r1, r5
 800396a:	eb43 0901 	adc.w	r9, r3, r1
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800397a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800397e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003982:	4690      	mov	r8, r2
 8003984:	4699      	mov	r9, r3
 8003986:	4623      	mov	r3, r4
 8003988:	eb18 0303 	adds.w	r3, r8, r3
 800398c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003990:	462b      	mov	r3, r5
 8003992:	eb49 0303 	adc.w	r3, r9, r3
 8003996:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80039aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039ae:	460b      	mov	r3, r1
 80039b0:	18db      	adds	r3, r3, r3
 80039b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80039b4:	4613      	mov	r3, r2
 80039b6:	eb42 0303 	adc.w	r3, r2, r3
 80039ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80039bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80039c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80039c4:	f7fc fc5c 	bl	8000280 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4b61      	ldr	r3, [pc, #388]	@ (8003b54 <UART_SetConfig+0x2d4>)
 80039ce:	fba3 2302 	umull	r2, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	011c      	lsls	r4, r3, #4
 80039d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80039e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80039e8:	4642      	mov	r2, r8
 80039ea:	464b      	mov	r3, r9
 80039ec:	1891      	adds	r1, r2, r2
 80039ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80039f0:	415b      	adcs	r3, r3
 80039f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039f8:	4641      	mov	r1, r8
 80039fa:	eb12 0a01 	adds.w	sl, r2, r1
 80039fe:	4649      	mov	r1, r9
 8003a00:	eb43 0b01 	adc.w	fp, r3, r1
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a18:	4692      	mov	sl, r2
 8003a1a:	469b      	mov	fp, r3
 8003a1c:	4643      	mov	r3, r8
 8003a1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a26:	464b      	mov	r3, r9
 8003a28:	eb4b 0303 	adc.w	r3, fp, r3
 8003a2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a44:	460b      	mov	r3, r1
 8003a46:	18db      	adds	r3, r3, r3
 8003a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	eb42 0303 	adc.w	r3, r2, r3
 8003a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a5a:	f7fc fc11 	bl	8000280 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4611      	mov	r1, r2
 8003a64:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <UART_SetConfig+0x2d4>)
 8003a66:	fba3 2301 	umull	r2, r3, r3, r1
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2264      	movs	r2, #100	@ 0x64
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	1acb      	subs	r3, r1, r3
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a7a:	4b36      	ldr	r3, [pc, #216]	@ (8003b54 <UART_SetConfig+0x2d4>)
 8003a7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a88:	441c      	add	r4, r3
 8003a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	1891      	adds	r1, r2, r2
 8003aa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003aa4:	415b      	adcs	r3, r3
 8003aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003aac:	4641      	mov	r1, r8
 8003aae:	1851      	adds	r1, r2, r1
 8003ab0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	414b      	adcs	r3, r1
 8003ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	00cb      	lsls	r3, r1, #3
 8003ac8:	4651      	mov	r1, sl
 8003aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ace:	4651      	mov	r1, sl
 8003ad0:	00ca      	lsls	r2, r1, #3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4642      	mov	r2, r8
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ae0:	464b      	mov	r3, r9
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	eb42 0303 	adc.w	r3, r2, r3
 8003ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003af8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003afc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b00:	460b      	mov	r3, r1
 8003b02:	18db      	adds	r3, r3, r3
 8003b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b06:	4613      	mov	r3, r2
 8003b08:	eb42 0303 	adc.w	r3, r2, r3
 8003b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b16:	f7fc fbb3 	bl	8000280 <__aeabi_uldivmod>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <UART_SetConfig+0x2d4>)
 8003b20:	fba3 1302 	umull	r1, r3, r3, r2
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	2164      	movs	r1, #100	@ 0x64
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	3332      	adds	r3, #50	@ 0x32
 8003b32:	4a08      	ldr	r2, [pc, #32]	@ (8003b54 <UART_SetConfig+0x2d4>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	095b      	lsrs	r3, r3, #5
 8003b3a:	f003 0207 	and.w	r2, r3, #7
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4422      	add	r2, r4
 8003b46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b48:	e106      	b.n	8003d58 <UART_SetConfig+0x4d8>
 8003b4a:	bf00      	nop
 8003b4c:	40011000 	.word	0x40011000
 8003b50:	40011400 	.word	0x40011400
 8003b54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b6a:	4642      	mov	r2, r8
 8003b6c:	464b      	mov	r3, r9
 8003b6e:	1891      	adds	r1, r2, r2
 8003b70:	6239      	str	r1, [r7, #32]
 8003b72:	415b      	adcs	r3, r3
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b7a:	4641      	mov	r1, r8
 8003b7c:	1854      	adds	r4, r2, r1
 8003b7e:	4649      	mov	r1, r9
 8003b80:	eb43 0501 	adc.w	r5, r3, r1
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	00eb      	lsls	r3, r5, #3
 8003b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b92:	00e2      	lsls	r2, r4, #3
 8003b94:	4614      	mov	r4, r2
 8003b96:	461d      	mov	r5, r3
 8003b98:	4643      	mov	r3, r8
 8003b9a:	18e3      	adds	r3, r4, r3
 8003b9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	eb45 0303 	adc.w	r3, r5, r3
 8003ba6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	008b      	lsls	r3, r1, #2
 8003bca:	4621      	mov	r1, r4
 8003bcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	008a      	lsls	r2, r1, #2
 8003bd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003bd8:	f7fc fb52 	bl	8000280 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4b60      	ldr	r3, [pc, #384]	@ (8003d64 <UART_SetConfig+0x4e4>)
 8003be2:	fba3 2302 	umull	r2, r3, r3, r2
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	011c      	lsls	r4, r3, #4
 8003bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003bf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	464b      	mov	r3, r9
 8003c00:	1891      	adds	r1, r2, r2
 8003c02:	61b9      	str	r1, [r7, #24]
 8003c04:	415b      	adcs	r3, r3
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	1851      	adds	r1, r2, r1
 8003c10:	6139      	str	r1, [r7, #16]
 8003c12:	4649      	mov	r1, r9
 8003c14:	414b      	adcs	r3, r1
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c24:	4659      	mov	r1, fp
 8003c26:	00cb      	lsls	r3, r1, #3
 8003c28:	4651      	mov	r1, sl
 8003c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c2e:	4651      	mov	r1, sl
 8003c30:	00ca      	lsls	r2, r1, #3
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	4642      	mov	r2, r8
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c40:	464b      	mov	r3, r9
 8003c42:	460a      	mov	r2, r1
 8003c44:	eb42 0303 	adc.w	r3, r2, r3
 8003c48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c64:	4649      	mov	r1, r9
 8003c66:	008b      	lsls	r3, r1, #2
 8003c68:	4641      	mov	r1, r8
 8003c6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c6e:	4641      	mov	r1, r8
 8003c70:	008a      	lsls	r2, r1, #2
 8003c72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c76:	f7fc fb03 	bl	8000280 <__aeabi_uldivmod>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4b38      	ldr	r3, [pc, #224]	@ (8003d64 <UART_SetConfig+0x4e4>)
 8003c82:	fba3 2301 	umull	r2, r3, r3, r1
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2264      	movs	r2, #100	@ 0x64
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	1acb      	subs	r3, r1, r3
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	3332      	adds	r3, #50	@ 0x32
 8003c94:	4a33      	ldr	r2, [pc, #204]	@ (8003d64 <UART_SetConfig+0x4e4>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ca0:	441c      	add	r4, r3
 8003ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003caa:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	1891      	adds	r1, r2, r2
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	415b      	adcs	r3, r3
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	1851      	adds	r1, r2, r1
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	414b      	adcs	r3, r1
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cd8:	4659      	mov	r1, fp
 8003cda:	00cb      	lsls	r3, r1, #3
 8003cdc:	4651      	mov	r1, sl
 8003cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	00ca      	lsls	r2, r1, #3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	4642      	mov	r2, r8
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	460a      	mov	r2, r1
 8003cf6:	eb42 0303 	adc.w	r3, r2, r3
 8003cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d06:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d14:	4649      	mov	r1, r9
 8003d16:	008b      	lsls	r3, r1, #2
 8003d18:	4641      	mov	r1, r8
 8003d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d1e:	4641      	mov	r1, r8
 8003d20:	008a      	lsls	r2, r1, #2
 8003d22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d26:	f7fc faab 	bl	8000280 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d64 <UART_SetConfig+0x4e4>)
 8003d30:	fba3 1302 	umull	r1, r3, r3, r2
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	2164      	movs	r1, #100	@ 0x64
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	3332      	adds	r3, #50	@ 0x32
 8003d42:	4a08      	ldr	r2, [pc, #32]	@ (8003d64 <UART_SetConfig+0x4e4>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	f003 020f 	and.w	r2, r3, #15
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4422      	add	r2, r4
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d64:	51eb851f 	.word	0x51eb851f

08003d68 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4293      	cmp	r3, r2
 8003d78:	bf38      	it	cc
 8003d7a:	4613      	movcc	r3, r2
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4293      	cmp	r3, r2
 8003d98:	bf28      	it	cs
 8003d9a:	4613      	movcs	r3, r2
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dba:	6839      	ldr	r1, [r7, #0]
 8003dbc:	fb01 f202 	mul.w	r2, r1, r2
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	1ad3      	subs	r3, r2, r3
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	4413      	add	r3, r2
 8003de2:	3b01      	subs	r3, #1
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ffde 	bl	8003da8 <lfs_aligndown>
 8003dec:	4603      	mov	r3, r0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	fa93 f3a3 	rbit	r3, r3
 8003e24:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fc fa37 	bl	80002b0 <__popcountsi2>
 8003e42:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	1ad3      	subs	r3, r2, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8003e70:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff ffee 	bl	8003e68 <lfs_fromle32>
 8003e8c:	4603      	mov	r3, r0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ffed 	bl	8003e96 <lfs_frombe32>
 8003ebc:	4603      	mov	r3, r0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f006 ffaa 	bl	800ae28 <malloc>
 8003ed4:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f006 ffa6 	bl	800ae38 <free>
#else
    (void)p;
#endif
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68d8      	ldr	r0, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f26:	461a      	mov	r2, r3
 8003f28:	21ff      	movs	r1, #255	@ 0xff
 8003f2a:	f007 f97c 	bl	800b226 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f34:	601a      	str	r2, [r3, #0]
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8003f40:	b5b0      	push	{r4, r5, r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f50:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d208      	bcs.n	8003f70 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8003f5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f62:	441a      	add	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f68:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	f240 811b 	bls.w	80041a6 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8003f70:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8003f74:	e11c      	b.n	80041b0 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8003f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f78:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d03f      	beq.n	8004000 <lfs_bd_read+0xc0>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d13a      	bne.n	8004000 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8003f94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d232      	bcs.n	8004000 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d324      	bcc.n	8003fee <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fae:	1acb      	subs	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	69b8      	ldr	r0, [r7, #24]
 8003fb6:	f7ff fee7 	bl	8003d88 <lfs_min>
 8003fba:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003fc6:	1acb      	subs	r3, r1, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	69f8      	ldr	r0, [r7, #28]
 8003fd0:	f007 f9e3 	bl	800b39a <memcpy>

                data += diff;
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	4413      	add	r3, r2
 8003fda:	61fb      	str	r3, [r7, #28]
                off += diff;
 8003fdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8003fe4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8003fec:	e0db      	b.n	80041a6 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	69b8      	ldr	r0, [r7, #24]
 8003ffa:	f7ff fec5 	bl	8003d88 <lfs_min>
 8003ffe:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004006:	429a      	cmp	r2, r3
 8004008:	d13a      	bne.n	8004080 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4413      	add	r3, r2
        if (block == rcache->block &&
 8004014:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004016:	429a      	cmp	r2, r3
 8004018:	d232      	bcs.n	8004080 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004020:	429a      	cmp	r2, r3
 8004022:	d324      	bcc.n	800406e <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402e:	1acb      	subs	r3, r1, r3
 8004030:	4413      	add	r3, r2
 8004032:	4619      	mov	r1, r3
 8004034:	69b8      	ldr	r0, [r7, #24]
 8004036:	f7ff fea7 	bl	8003d88 <lfs_min>
 800403a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004046:	1acb      	subs	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4619      	mov	r1, r3
 800404e:	69f8      	ldr	r0, [r7, #28]
 8004050:	f007 f9a3 	bl	800b39a <memcpy>

                data += diff;
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	4413      	add	r3, r2
 800405a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800405c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	4413      	add	r3, r2
 8004062:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8004064:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800406c:	e09b      	b.n	80041a6 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	4619      	mov	r1, r3
 8004078:	69b8      	ldr	r0, [r7, #24]
 800407a:	f7ff fe85 	bl	8003d88 <lfs_min>
 800407e:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8004080:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d336      	bcc.n	80040f6 <lfs_bd_read+0x1b6>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004090:	fbb3 f1f2 	udiv	r1, r3, r2
 8004094:	fb01 f202 	mul.w	r2, r1, r2
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d12b      	bne.n	80040f6 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040a2:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80040a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d325      	bcc.n	80040f6 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	4619      	mov	r1, r3
 80040b2:	69b8      	ldr	r0, [r7, #24]
 80040b4:	f7ff fe78 	bl	8003da8 <lfs_aligndown>
 80040b8:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040be:	685c      	ldr	r4, [r3, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040ce:	47a0      	blx	r4
 80040d0:	6178      	str	r0, [r7, #20]
            if (err) {
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <lfs_bd_read+0x19c>
                return err;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	e069      	b.n	80041b0 <lfs_bd_read+0x270>
            }

            data += diff;
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	4413      	add	r3, r2
 80040e2:	61fb      	str	r3, [r7, #28]
            off += diff;
 80040e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	4413      	add	r3, r2
 80040ea:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 80040ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 80040f4:	e057      	b.n	80041a6 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040fe:	429a      	cmp	r2, r3
 8004100:	d305      	bcc.n	800410e <lfs_bd_read+0x1ce>
 8004102:	4b2d      	ldr	r3, [pc, #180]	@ (80041b8 <lfs_bd_read+0x278>)
 8004104:	4a2d      	ldr	r2, [pc, #180]	@ (80041bc <lfs_bd_read+0x27c>)
 8004106:	216b      	movs	r1, #107	@ 0x6b
 8004108:	482d      	ldr	r0, [pc, #180]	@ (80041c0 <lfs_bd_read+0x280>)
 800410a:	f006 fe6f 	bl	800adec <__assert_func>
        rcache->block = block;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004112:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	4619      	mov	r1, r3
 800411c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800411e:	f7ff fe43 	bl	8003da8 <lfs_aligndown>
 8004122:	4602      	mov	r2, r0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8004128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004132:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f7ff fe4b 	bl	8003dd2 <lfs_alignup>
 800413c:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004142:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f7ff fe1e 	bl	8003d88 <lfs_min>
 800414c:	4602      	mov	r2, r0
                - rcache->off,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8004152:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f7ff fe13 	bl	8003d88 <lfs_min>
 8004162:	4602      	mov	r2, r0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800416c:	685c      	ldr	r4, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6819      	ldr	r1, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	462b      	mov	r3, r5
 8004186:	47a0      	blx	r4
 8004188:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	dd05      	ble.n	800419c <lfs_bd_read+0x25c>
 8004190:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <lfs_bd_read+0x284>)
 8004192:	4a0a      	ldr	r2, [pc, #40]	@ (80041bc <lfs_bd_read+0x27c>)
 8004194:	2176      	movs	r1, #118	@ 0x76
 8004196:	480a      	ldr	r0, [pc, #40]	@ (80041c0 <lfs_bd_read+0x280>)
 8004198:	f006 fe28 	bl	800adec <__assert_func>
        if (err) {
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <lfs_bd_read+0x266>
            return err;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	e004      	b.n	80041b0 <lfs_bd_read+0x270>
    while (size > 0) {
 80041a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f47f aee4 	bne.w	8003f76 <lfs_bd_read+0x36>
        }
    }

    return 0;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bdb0      	pop	{r4, r5, r7, pc}
 80041b8:	0800bf70 	.word	0x0800bf70
 80041bc:	0800c9e8 	.word	0x0800c9e8
 80041c0:	0800bf90 	.word	0x0800bf90
 80041c4:	0800bfa4 	.word	0x0800bfa4

080041c8 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b090      	sub	sp, #64	@ 0x40
 80041cc:	af04      	add	r7, sp, #16
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80041d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 80041de:	2300      	movs	r3, #0
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041e2:	e039      	b.n	8004258 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 80041e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2108      	movs	r1, #8
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fdcb 	bl	8003d88 <lfs_min>
 80041f2:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f8:	1ad1      	subs	r1, r2, r3
 80041fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fe:	4413      	add	r3, r2
 8004200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004202:	9203      	str	r2, [sp, #12]
 8004204:	f107 0214 	add.w	r2, r7, #20
 8004208:	9202      	str	r2, [sp, #8]
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	460b      	mov	r3, r1
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff fe92 	bl	8003f40 <lfs_bd_read>
 800421c:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <lfs_bd_cmp+0x60>
            return err;
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	e01c      	b.n	8004262 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8004228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800422a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422c:	18d1      	adds	r1, r2, r3
 800422e:	f107 0314 	add.w	r3, r7, #20
 8004232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004234:	4618      	mov	r0, r3
 8004236:	f006 ffe6 	bl	800b206 <memcmp>
 800423a:	61f8      	str	r0, [r7, #28]
        if (res) {
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d006      	beq.n	8004250 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	da01      	bge.n	800424c <lfs_bd_cmp+0x84>
 8004248:	2301      	movs	r3, #1
 800424a:	e00a      	b.n	8004262 <lfs_bd_cmp+0x9a>
 800424c:	2302      	movs	r3, #2
 800424e:	e008      	b.n	8004262 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8004250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	4413      	add	r3, r2
 8004256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800425a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800425c:	429a      	cmp	r2, r3
 800425e:	d3c1      	bcc.n	80041e4 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3730      	adds	r7, #48	@ 0x30
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800426a:	b580      	push	{r7, lr}
 800426c:	b08e      	sub	sp, #56	@ 0x38
 800426e:	af04      	add	r7, sp, #16
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800427c:	2300      	movs	r3, #0
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004280:	e030      	b.n	80042e4 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8004282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2108      	movs	r1, #8
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fd7c 	bl	8003d88 <lfs_min>
 8004290:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	1ad1      	subs	r1, r2, r3
 8004298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	4413      	add	r3, r2
 800429e:	6a3a      	ldr	r2, [r7, #32]
 80042a0:	9203      	str	r2, [sp, #12]
 80042a2:	f107 0214 	add.w	r2, r7, #20
 80042a6:	9202      	str	r2, [sp, #8]
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	460b      	mov	r3, r1
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7ff fe43 	bl	8003f40 <lfs_bd_read>
 80042ba:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <lfs_bd_crc+0x5c>
            return err;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	e013      	b.n	80042ee <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 80042c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f107 0114 	add.w	r1, r7, #20
 80042ce:	6a3a      	ldr	r2, [r7, #32]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f006 fb95 	bl	800aa00 <lfs_crc>
 80042d6:	4602      	mov	r2, r0
 80042d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042da:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 80042dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	4413      	add	r3, r2
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3ca      	bcc.n	8004282 <lfs_bd_crc+0x18>
    }

    return 0;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3728      	adds	r7, #40	@ 0x28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80042f8:	b5b0      	push	{r4, r5, r7, lr}
 80042fa:	b08c      	sub	sp, #48	@ 0x30
 80042fc:	af04      	add	r7, sp, #16
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800430e:	d061      	beq.n	80043d4 <lfs_bd_flush+0xdc>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f113 0f02 	cmn.w	r3, #2
 8004318:	d05c      	beq.n	80043d4 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	429a      	cmp	r2, r3
 8004326:	d305      	bcc.n	8004334 <lfs_bd_flush+0x3c>
 8004328:	4b2d      	ldr	r3, [pc, #180]	@ (80043e0 <lfs_bd_flush+0xe8>)
 800432a:	4a2e      	ldr	r2, [pc, #184]	@ (80043e4 <lfs_bd_flush+0xec>)
 800432c:	21b3      	movs	r1, #179	@ 0xb3
 800432e:	482e      	ldr	r0, [pc, #184]	@ (80043e8 <lfs_bd_flush+0xf0>)
 8004330:	f006 fd5c 	bl	800adec <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	4619      	mov	r1, r3
 8004340:	4610      	mov	r0, r2
 8004342:	f7ff fd46 	bl	8003dd2 <lfs_alignup>
 8004346:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800434c:	689c      	ldr	r4, [r3, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	462b      	mov	r3, r5
 8004364:	47a0      	blx	r4
 8004366:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	dd05      	ble.n	800437a <lfs_bd_flush+0x82>
 800436e:	4b1f      	ldr	r3, [pc, #124]	@ (80043ec <lfs_bd_flush+0xf4>)
 8004370:	4a1c      	ldr	r2, [pc, #112]	@ (80043e4 <lfs_bd_flush+0xec>)
 8004372:	21b7      	movs	r1, #183	@ 0xb7
 8004374:	481c      	ldr	r0, [pc, #112]	@ (80043e8 <lfs_bd_flush+0xf0>)
 8004376:	f006 fd39 	bl	800adec <__assert_func>
        if (err) {
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <lfs_bd_flush+0x8c>
            return err;
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	e028      	b.n	80043d6 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d020      	beq.n	80043cc <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f7ff fdb1 	bl	8003ef4 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800439e:	69f8      	ldr	r0, [r7, #28]
 80043a0:	9003      	str	r0, [sp, #12]
 80043a2:	9102      	str	r1, [sp, #8]
 80043a4:	9201      	str	r2, [sp, #4]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	2100      	movs	r1, #0
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff ff0a 	bl	80041c8 <lfs_bd_cmp>
 80043b4:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	da01      	bge.n	80043c0 <lfs_bd_flush+0xc8>
                return res;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	e00a      	b.n	80043d6 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 80043c6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80043ca:	e004      	b.n	80043d6 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff fd9f 	bl	8003f12 <lfs_cache_zero>
    }

    return 0;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bdb0      	pop	{r4, r5, r7, pc}
 80043de:	bf00      	nop
 80043e0:	0800bfb0 	.word	0x0800bfb0
 80043e4:	0800c9f4 	.word	0x0800c9f4
 80043e8:	0800bf90 	.word	0x0800bf90
 80043ec:	0800bfa4 	.word	0x0800bfa4

080043f0 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff fd77 	bl	8003ef4 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff ff73 	bl	80042f8 <lfs_bd_flush>
 8004412:	6178      	str	r0, [r7, #20]
    if (err) {
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <lfs_bd_sync+0x2e>
        return err;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	e011      	b.n	8004442 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004428:	4610      	mov	r0, r2
 800442a:	4798      	blx	r3
 800442c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b00      	cmp	r3, #0
 8004432:	dd05      	ble.n	8004440 <lfs_bd_sync+0x50>
 8004434:	4b05      	ldr	r3, [pc, #20]	@ (800444c <lfs_bd_sync+0x5c>)
 8004436:	4a06      	ldr	r2, [pc, #24]	@ (8004450 <lfs_bd_sync+0x60>)
 8004438:	21dd      	movs	r1, #221	@ 0xdd
 800443a:	4806      	ldr	r0, [pc, #24]	@ (8004454 <lfs_bd_sync+0x64>)
 800443c:	f006 fcd6 	bl	800adec <__assert_func>
    return err;
 8004440:	697b      	ldr	r3, [r7, #20]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	0800bfa4 	.word	0x0800bfa4
 8004450:	0800ca04 	.word	0x0800ca04
 8004454:	0800bf90 	.word	0x0800bf90

08004458 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 800446a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446c:	f113 0f02 	cmn.w	r3, #2
 8004470:	d00b      	beq.n	800448a <lfs_bd_prog+0x32>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800447a:	429a      	cmp	r2, r3
 800447c:	d305      	bcc.n	800448a <lfs_bd_prog+0x32>
 800447e:	4b48      	ldr	r3, [pc, #288]	@ (80045a0 <lfs_bd_prog+0x148>)
 8004480:	4a48      	ldr	r2, [pc, #288]	@ (80045a4 <lfs_bd_prog+0x14c>)
 8004482:	21e8      	movs	r1, #232	@ 0xe8
 8004484:	4848      	ldr	r0, [pc, #288]	@ (80045a8 <lfs_bd_prog+0x150>)
 8004486:	f006 fcb1 	bl	800adec <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800448a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800448c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448e:	441a      	add	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	429a      	cmp	r2, r3
 8004498:	d97a      	bls.n	8004590 <lfs_bd_prog+0x138>
 800449a:	4b44      	ldr	r3, [pc, #272]	@ (80045ac <lfs_bd_prog+0x154>)
 800449c:	4a41      	ldr	r2, [pc, #260]	@ (80045a4 <lfs_bd_prog+0x14c>)
 800449e:	21e9      	movs	r1, #233	@ 0xe9
 80044a0:	4841      	ldr	r0, [pc, #260]	@ (80045a8 <lfs_bd_prog+0x150>)
 80044a2:	f006 fca3 	bl	800adec <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d151      	bne.n	8004554 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80044b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d34c      	bcc.n	8004554 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c4:	4413      	add	r3, r2
                off >= pcache->off &&
 80044c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d243      	bcs.n	8004554 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d8:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80044da:	4413      	add	r3, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80044e0:	f7ff fc52 	bl	8003d88 <lfs_min>
 80044e4:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044f0:	1acb      	subs	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	69f9      	ldr	r1, [r7, #28]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f006 ff4e 	bl	800b39a <memcpy>

            data += diff;
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	4413      	add	r3, r2
 8004504:	61fb      	str	r3, [r7, #28]
            off += diff;
 8004506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	4413      	add	r3, r2
 800450c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 800450e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6898      	ldr	r0, [r3, #8]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	4619      	mov	r1, r3
 8004524:	f7ff fc20 	bl	8003d68 <lfs_max>
 8004528:	4602      	mov	r2, r0
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004538:	429a      	cmp	r2, r3
 800453a:	d128      	bne.n	800458e <lfs_bd_prog+0x136>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff fed8 	bl	80042f8 <lfs_bd_flush>
 8004548:	6178      	str	r0, [r7, #20]
                if (err) {
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01e      	beq.n	800458e <lfs_bd_prog+0x136>
                    return err;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	e021      	b.n	8004598 <lfs_bd_prog+0x140>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800455c:	d006      	beq.n	800456c <lfs_bd_prog+0x114>
 800455e:	4b14      	ldr	r3, [pc, #80]	@ (80045b0 <lfs_bd_prog+0x158>)
 8004560:	4a10      	ldr	r2, [pc, #64]	@ (80045a4 <lfs_bd_prog+0x14c>)
 8004562:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004566:	4810      	ldr	r0, [pc, #64]	@ (80045a8 <lfs_bd_prog+0x150>)
 8004568:	f006 fc40 	bl	800adec <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004570:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	4619      	mov	r1, r3
 800457a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800457c:	f7ff fc14 	bl	8003da8 <lfs_aligndown>
 8004580:	4602      	mov	r2, r0
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2200      	movs	r2, #0
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	e000      	b.n	8004590 <lfs_bd_prog+0x138>
            continue;
 800458e:	bf00      	nop
    while (size > 0) {
 8004590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004592:	2b00      	cmp	r3, #0
 8004594:	d187      	bne.n	80044a6 <lfs_bd_prog+0x4e>
    }

    return 0;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3720      	adds	r7, #32
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	0800bfd8 	.word	0x0800bfd8
 80045a4:	0800ca10 	.word	0x0800ca10
 80045a8:	0800bf90 	.word	0x0800bf90
 80045ac:	0800c014 	.word	0x0800c014
 80045b0:	0800c038 	.word	0x0800c038

080045b4 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d306      	bcc.n	80045d8 <lfs_bd_erase+0x24>
 80045ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004608 <lfs_bd_erase+0x54>)
 80045cc:	4a0f      	ldr	r2, [pc, #60]	@ (800460c <lfs_bd_erase+0x58>)
 80045ce:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80045d2:	480f      	ldr	r0, [pc, #60]	@ (8004610 <lfs_bd_erase+0x5c>)
 80045d4:	f006 fc0a 	bl	800adec <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80045e2:	6839      	ldr	r1, [r7, #0]
 80045e4:	4610      	mov	r0, r2
 80045e6:	4798      	blx	r3
 80045e8:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dd06      	ble.n	80045fe <lfs_bd_erase+0x4a>
 80045f0:	4b08      	ldr	r3, [pc, #32]	@ (8004614 <lfs_bd_erase+0x60>)
 80045f2:	4a06      	ldr	r2, [pc, #24]	@ (800460c <lfs_bd_erase+0x58>)
 80045f4:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80045f8:	4805      	ldr	r0, [pc, #20]	@ (8004610 <lfs_bd_erase+0x5c>)
 80045fa:	f006 fbf7 	bl	800adec <__assert_func>
    return err;
 80045fe:	68fb      	ldr	r3, [r7, #12]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	0800bf70 	.word	0x0800bf70
 800460c:	0800ca1c 	.word	0x0800ca1c
 8004610:	0800bf90 	.word	0x0800bf90
 8004614:	0800bfa4 	.word	0x0800bfa4

08004618 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004652:	d005      	beq.n	8004660 <lfs_pair_isnull+0x1e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3304      	adds	r3, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800465e:	d101      	bne.n	8004664 <lfs_pair_isnull+0x22>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <lfs_pair_isnull+0x24>
 8004664:	2300      	movs	r3, #0
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	b2db      	uxtb	r3, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d017      	beq.n	80046be <lfs_pair_cmp+0x46>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3304      	adds	r3, #4
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	3304      	adds	r3, #4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d00f      	beq.n	80046be <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	3304      	adds	r3, #4
 80046a6:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d008      	beq.n	80046be <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d001      	beq.n	80046be <lfs_pair_cmp+0x46>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <lfs_pair_cmp+0x48>
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d107      	bne.n	80046f2 <lfs_pair_issync+0x26>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3304      	adds	r3, #4
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	3304      	adds	r3, #4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d00d      	beq.n	800470e <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	3304      	adds	r3, #4
 80046fa:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d108      	bne.n	8004712 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3304      	adds	r3, #4
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d101      	bne.n	8004712 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <lfs_pair_issync+0x48>
 8004712:	2300      	movs	r3, #0
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	b2db      	uxtb	r3, r3
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8004726:	b590      	push	{r4, r7, lr}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fb98 	bl	8003e68 <lfs_fromle32>
 8004738:	4602      	mov	r2, r0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3304      	adds	r3, #4
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	1d1c      	adds	r4, r3, #4
 8004748:	4610      	mov	r0, r2
 800474a:	f7ff fb8d 	bl	8003e68 <lfs_fromle32>
 800474e:	4603      	mov	r3, r0
 8004750:	6023      	str	r3, [r4, #0]
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bd90      	pop	{r4, r7, pc}

0800475a <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800475a:	b590      	push	{r4, r7, lr}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fb89 	bl	8003e7e <lfs_tole32>
 800476c:	4602      	mov	r2, r0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3304      	adds	r3, #4
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	1d1c      	adds	r4, r3, #4
 800477c:	4610      	mov	r0, r2
 800477e:	f7ff fb7e 	bl	8003e7e <lfs_tole32>
 8004782:	4603      	mov	r3, r0
 8004784:	6023      	str	r3, [r4, #0]
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	bd90      	pop	{r4, r7, pc}

0800478e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	43db      	mvns	r3, r3
 800479a:	0fdb      	lsrs	r3, r3, #31
 800479c:	b2db      	uxtb	r3, r3
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	059b      	lsls	r3, r3, #22
 80047b6:	159b      	asrs	r3, r3, #22
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	0d1b      	lsrs	r3, r3, #20
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047e2:	b29b      	uxth	r3, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0d1b      	lsrs	r3, r3, #20
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 8004802:	b29b      	uxth	r3, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	0d1b      	lsrs	r3, r3, #20
 800481c:	b29b      	uxth	r3, r3
 800481e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004822:	b29b      	uxth	r3, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	0d1b      	lsrs	r3, r3, #20
 800483c:	b2db      	uxtb	r3, r3
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ffec 	bl	8004830 <lfs_tag_chunk>
 8004858:	4603      	mov	r3, r0
 800485a:	b25b      	sxtb	r3, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	0a9b      	lsrs	r3, r3, #10
 8004870:	b29b      	uxth	r3, r3
 8004872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004876:	b29b      	uxth	r3, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8004892:	4618      	mov	r0, r3
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff ff7f 	bl	80047aa <lfs_tag_isdelete>
 80048ac:	4603      	mov	r3, r0
 80048ae:	461a      	mov	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4413      	add	r3, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff ffe5 	bl	8004884 <lfs_tag_size>
 80048ba:	4603      	mov	r3, r0
 80048bc:	3304      	adds	r3, #4
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e012      	b.n	80048fc <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	4413      	add	r3, r2
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4403      	add	r3, r0
 80048f2:	404a      	eors	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	dde9      	ble.n	80048d6 <lfs_gstate_xor+0x10>
    }
}
 8004902:	bf00      	nop
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e00b      	b.n	8004936 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <lfs_gstate_iszero+0x20>
            return false;
 800492c:	2300      	movs	r3, #0
 800492e:	e006      	b.n	800493e <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3301      	adds	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b02      	cmp	r3, #2
 800493a:	ddf0      	ble.n	800491e <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800493c:	2301      	movs	r3, #1
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff ff94 	bl	8004884 <lfs_tag_size>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	bf14      	ite	ne
 8004962:	2301      	movne	r3, #1
 8004964:	2300      	moveq	r3, #0
 8004966:	b2db      	uxtb	r3, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff81 	bl	8004884 <lfs_tag_size>
 8004982:	4603      	mov	r3, r0
 8004984:	b2db      	uxtb	r3, r3
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff ff18 	bl	80047d0 <lfs_tag_type1>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bf14      	ite	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	2300      	moveq	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff5f 	bl	8004884 <lfs_tag_size>
 80049c6:	4603      	mov	r3, r0
 80049c8:	0a5b      	lsrs	r3, r3, #9
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fef0 	bl	80047d0 <lfs_tag_type1>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <lfs_gstate_hasmovehere+0x30>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	6839      	ldr	r1, [r7, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fe3b 	bl	8004678 <lfs_pair_cmp>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <lfs_gstate_hasmovehere+0x30>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <lfs_gstate_hasmovehere+0x32>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	b2db      	uxtb	r3, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fa1d 	bl	8003e68 <lfs_fromle32>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fa15 	bl	8003e68 <lfs_fromle32>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff fa0d 	bl	8003e68 <lfs_fromle32>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	609a      	str	r2, [r3, #8]
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fa08 	bl	8003e7e <lfs_tole32>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fa00 	bl	8003e7e <lfs_tole32>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff f9f8 	bl	8003e7e <lfs_tole32>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff f9dd 	bl	8003e68 <lfs_fromle32>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff f9d5 	bl	8003e68 <lfs_fromle32>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	605a      	str	r2, [r3, #4]
}
 8004ac4:	bf00      	nop
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff f9d0 	bl	8003e7e <lfs_tole32>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff f9c8 	bl	8003e7e <lfs_tole32>
 8004aee:	4602      	mov	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	605a      	str	r2, [r3, #4]
}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff f9ad 	bl	8003e68 <lfs_fromle32>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff f9a5 	bl	8003e68 <lfs_fromle32>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	605a      	str	r2, [r3, #4]
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff f9a0 	bl	8003e7e <lfs_tole32>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff f998 	bl	8003e7e <lfs_tole32>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	605a      	str	r2, [r3, #4]
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff f97d 	bl	8003e68 <lfs_fromle32>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff f975 	bl	8003e68 <lfs_fromle32>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff f96d 	bl	8003e68 <lfs_fromle32>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff f965 	bl	8003e68 <lfs_fromle32>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff f95d 	bl	8003e68 <lfs_fromle32>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff f955 	bl	8003e68 <lfs_fromle32>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	615a      	str	r2, [r3, #20]
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff f950 	bl	8003e7e <lfs_tole32>
 8004bde:	4602      	mov	r2, r0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff f948 	bl	8003e7e <lfs_tole32>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff f940 	bl	8003e7e <lfs_tole32>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f938 	bl	8003e7e <lfs_tole32>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff f930 	bl	8003e7e <lfs_tole32>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff f928 	bl	8003e7e <lfs_tole32>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	615a      	str	r2, [r3, #20]
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	e009      	b.n	8004c60 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d101      	bne.n	8004c5a <lfs_mlist_isopen+0x1e>
            return true;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e007      	b.n	8004c6a <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f1      	bne.n	8004c4c <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3328      	adds	r3, #40	@ 0x28
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e00d      	b.n	8004ca4 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d105      	bne.n	8004c9e <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	601a      	str	r2, [r3, #0]
            break;
 8004c9c:	e007      	b.n	8004cae <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1ed      	bne.n	8004c88 <lfs_mlist_remove+0x12>
        }
    }
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	@ (8004cf8 <lfs_fs_disk_version+0x18>)
    }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	00020001 	.word	0x00020001

08004cfc <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ffeb 	bl	8004ce0 <lfs_fs_disk_version>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	0c1b      	lsrs	r3, r3, #16
 8004d0e:	b29b      	uxth	r3, r3

}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff ffdd 	bl	8004ce0 <lfs_fs_disk_version>
 8004d26:	4603      	mov	r3, r0
 8004d28:	b29b      	uxth	r3, r3
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	4413      	add	r3, r2
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d54:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8004d56:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d5a:	fb01 f202 	mul.w	r2, r1, r2
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d212      	bcs.n	8004d92 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	009a      	lsls	r2, r3, #2
 8004d76:	440a      	add	r2, r1
 8004d78:	6811      	ldr	r1, [r2, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	f002 021f 	and.w	r2, r2, #31
 8004d80:	2001      	movs	r0, #1
 8004d82:	fa00 f202 	lsl.w	r2, r0, r2
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4403      	add	r3, r0
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dac:	6a1a      	ldr	r2, [r3, #32]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->free.i = 0;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ack(lfs);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff ffe4 	bl	8004da0 <lfs_alloc_ack>
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8004dea:	e04f      	b.n	8004e8c <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df0:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->free.ack -= 1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e00:	1e5a      	subs	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	661a      	str	r2, [r3, #96]	@ 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d132      	bne.n	8004e8c <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e32:	6a12      	ldr	r2, [r2, #32]
 8004e34:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e38:	fb01 f202 	mul.w	r2, r1, r2
 8004e3c:	1a9a      	subs	r2, r3, r2
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8004e42:	e009      	b.n	8004e58 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->free.ack -= 1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e52:	1e5a      	subs	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	661a      	str	r2, [r3, #96]	@ 0x60
                while (lfs->free.i != lfs->free.size &&
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d011      	beq.n	8004e88 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1dd      	bne.n	8004e44 <lfs_alloc+0x64>
                }

                return 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e050      	b.n	8004f2e <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d1a9      	bne.n	8004dec <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10f      	bne.n	8004ec0 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea8:	4413      	add	r3, r2
 8004eaa:	4a23      	ldr	r2, [pc, #140]	@ (8004f38 <lfs_alloc+0x158>)
 8004eac:	9200      	str	r2, [sp, #0]
 8004eae:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8004eb2:	4922      	ldr	r1, [pc, #136]	@ (8004f3c <lfs_alloc+0x15c>)
 8004eb4:	4822      	ldr	r0, [pc, #136]	@ (8004f40 <lfs_alloc+0x160>)
 8004eb6:	f006 f949 	bl	800b14c <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8004eba:	f06f 031b 	mvn.w	r3, #27
 8004ebe:	e036      	b.n	8004f2e <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec8:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ece:	6a12      	ldr	r2, [r2, #32]
 8004ed0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ed4:	fb01 f202 	mul.w	r2, r1, r2
 8004ed8:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	00da      	lsls	r2, r3, #3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7fe ff4b 	bl	8003d88 <lfs_min>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	659a      	str	r2, [r3, #88]	@ 0x58
        lfs->free.i = 0;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	65da      	str	r2, [r3, #92]	@ 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f006 f98b 	bl	800b226 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8004f10:	2301      	movs	r3, #1
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	490b      	ldr	r1, [pc, #44]	@ (8004f44 <lfs_alloc+0x164>)
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f004 fe60 	bl	8009bdc <lfs_fs_rawtraverse>
 8004f1c:	60f8      	str	r0, [r7, #12]
        if (err) {
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f43f af62 	beq.w	8004dea <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff ff49 	bl	8004dbe <lfs_alloc_drop>
            return err;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	0800c084 	.word	0x0800c084
 8004f3c:	0800bf90 	.word	0x0800bf90
 8004f40:	0800c05c 	.word	0x0800c05c
 8004f44:	08004d33 	.word	0x08004d33

08004f48 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b08f      	sub	sp, #60	@ 0x3c
 8004f4c:	af04      	add	r7, sp, #16
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	333c      	adds	r3, #60	@ 0x3c
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fd34 	bl	80049dc <lfs_gstate_hasmovehere>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80ba 	beq.w	80050f0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff fc71 	bl	8004864 <lfs_tag_id>
 8004f82:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80b3 	beq.w	80050f0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fc68 	bl	8004864 <lfs_tag_id>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461c      	mov	r4, r3
 8004f98:	6838      	ldr	r0, [r7, #0]
 8004f9a:	f7ff fc63 	bl	8004864 <lfs_tag_id>
 8004f9e:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8004fa0:	429c      	cmp	r4, r3
 8004fa2:	f200 80a5 	bhi.w	80050f0 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8004fac:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8004fae:	e09f      	b.n	80050f0 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fc73 	bl	800489e <lfs_tag_dsize>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	1a9b      	subs	r3, r3, r2
 8004fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8004fc4:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8004fca:	2204      	movs	r2, #4
 8004fcc:	9203      	str	r2, [sp, #12]
 8004fce:	f107 0210 	add.w	r2, r7, #16
 8004fd2:	9202      	str	r2, [sp, #8]
 8004fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd6:	9201      	str	r2, [sp, #4]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	2304      	movs	r3, #4
 8004fdc:	460a      	mov	r2, r1
 8004fde:	2100      	movs	r1, #0
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f7fe ffad 	bl	8003f40 <lfs_bd_read>
 8004fe6:	61b8      	str	r0, [r7, #24]
        if (err) {
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <lfs_dir_getslice+0xaa>
            return err;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	e08a      	b.n	8005108 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe ff4e 	bl	8003e96 <lfs_frombe32>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	4053      	eors	r3, r2
 8005000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005004:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fc2c 	bl	8004864 <lfs_tag_id>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d02b      	beq.n	800506a <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005012:	69f8      	ldr	r0, [r7, #28]
 8005014:	f7ff fbdc 	bl	80047d0 <lfs_tag_type1>
 8005018:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800501a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501e:	d124      	bne.n	800506a <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8005020:	69f8      	ldr	r0, [r7, #28]
 8005022:	f7ff fc1f 	bl	8004864 <lfs_tag_id>
 8005026:	4603      	mov	r3, r0
 8005028:	461c      	mov	r4, r3
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fc17 	bl	8004864 <lfs_tag_id>
 8005036:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005038:	429c      	cmp	r4, r3
 800503a:	d816      	bhi.n	800506a <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	1ad2      	subs	r2, r2, r3
 8005042:	4b33      	ldr	r3, [pc, #204]	@ (8005110 <lfs_dir_getslice+0x1c8>)
 8005044:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8005046:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800504a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	429a      	cmp	r2, r3
 8005052:	d102      	bne.n	800505a <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8005054:	f06f 0301 	mvn.w	r3, #1
 8005058:	e056      	b.n	8005108 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800505a:	69f8      	ldr	r0, [r7, #28]
 800505c:	f7ff fbf5 	bl	800484a <lfs_tag_splice>
 8005060:	4603      	mov	r3, r0
 8005062:	029a      	lsls	r2, r3, #10
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	4413      	add	r3, r2
 8005068:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	401a      	ands	r2, r3
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	1ac9      	subs	r1, r1, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	400b      	ands	r3, r1
 800507a:	429a      	cmp	r2, r3
 800507c:	d138      	bne.n	80050f0 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 800507e:	69f8      	ldr	r0, [r7, #28]
 8005080:	f7ff fb93 	bl	80047aa <lfs_tag_isdelete>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 800508a:	f06f 0301 	mvn.w	r3, #1
 800508e:	e03b      	b.n	8005108 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8005090:	69f8      	ldr	r0, [r7, #28]
 8005092:	f7ff fbf7 	bl	8004884 <lfs_tag_size>
 8005096:	4603      	mov	r3, r0
 8005098:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe fe74 	bl	8003d88 <lfs_min>
 80050a0:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 80050a2:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050ac:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80050ae:	3204      	adds	r2, #4
 80050b0:	6979      	ldr	r1, [r7, #20]
 80050b2:	9103      	str	r1, [sp, #12]
 80050b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050b6:	9102      	str	r1, [sp, #8]
 80050b8:	9201      	str	r2, [sp, #4]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	4602      	mov	r2, r0
 80050c0:	2100      	movs	r1, #0
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f7fe ff3c 	bl	8003f40 <lfs_bd_read>
 80050c8:	61b8      	str	r0, [r7, #24]
            if (err) {
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <lfs_dir_getslice+0x18c>
                return err;
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	e019      	b.n	8005108 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80050d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	18d0      	adds	r0, r2, r3
 80050da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	461a      	mov	r2, r3
 80050e2:	2100      	movs	r1, #0
 80050e4:	f006 f89f 	bl	800b226 <memset>

            return tag + gdiff;
 80050e8:	6a3a      	ldr	r2, [r7, #32]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	4413      	add	r3, r2
 80050ee:	e00b      	b.n	8005108 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fbd3 	bl	800489e <lfs_tag_dsize>
 80050f8:	4603      	mov	r3, r0
 80050fa:	3304      	adds	r3, #4
 80050fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050fe:	429a      	cmp	r2, r3
 8005100:	f4bf af56 	bcs.w	8004fb0 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8005104:	f06f 0301 	mvn.w	r3, #1
}
 8005108:	4618      	mov	r0, r3
 800510a:	372c      	adds	r7, #44	@ 0x2c
 800510c:	46bd      	mov	sp, r7
 800510e:	bd90      	pop	{r4, r7, pc}
 8005110:	000ffc00 	.word	0x000ffc00

08005114 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af04      	add	r7, sp, #16
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8005122:	6838      	ldr	r0, [r7, #0]
 8005124:	f7ff fbae 	bl	8004884 <lfs_tag_size>
 8005128:	4603      	mov	r3, r0
 800512a:	9302      	str	r3, [sp, #8]
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	2300      	movs	r3, #0
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff ff04 	bl	8004f48 <lfs_dir_getslice>
 8005140:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800514a:	b580      	push	{r7, lr}
 800514c:	b08c      	sub	sp, #48	@ 0x30
 800514e:	af04      	add	r7, sp, #16
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800515c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800515e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005160:	441a      	add	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	429a      	cmp	r2, r3
 800516a:	f240 80c0 	bls.w	80052ee <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800516e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8005172:	e0c1      	b.n	80052f8 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8005174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005176:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d03f      	beq.n	80051fe <lfs_dir_getread+0xb4>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f113 0f02 	cmn.w	r3, #2
 8005186:	d13a      	bne.n	80051fe <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8005192:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005194:	429a      	cmp	r2, r3
 8005196:	d232      	bcs.n	80051fe <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800519e:	429a      	cmp	r2, r3
 80051a0:	d324      	bcc.n	80051ec <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6859      	ldr	r1, [r3, #4]
 80051aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ac:	1acb      	subs	r3, r1, r3
 80051ae:	4413      	add	r3, r2
 80051b0:	4619      	mov	r1, r3
 80051b2:	69b8      	ldr	r0, [r7, #24]
 80051b4:	f7fe fde8 	bl	8003d88 <lfs_min>
 80051b8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80051c4:	1acb      	subs	r3, r1, r3
 80051c6:	4413      	add	r3, r2
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4619      	mov	r1, r3
 80051cc:	69f8      	ldr	r0, [r7, #28]
 80051ce:	f006 f8e4 	bl	800b39a <memcpy>

                data += diff;
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	4413      	add	r3, r2
 80051d8:	61fb      	str	r3, [r7, #28]
                off += diff;
 80051da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	4413      	add	r3, r2
 80051e0:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 80051e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 80051ea:	e080      	b.n	80052ee <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	4619      	mov	r1, r3
 80051f6:	69b8      	ldr	r0, [r7, #24]
 80051f8:	f7fe fdc6 	bl	8003d88 <lfs_min>
 80051fc:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f113 0f02 	cmn.w	r3, #2
 8005206:	d13a      	bne.n	800527e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8005212:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005214:	429a      	cmp	r2, r3
 8005216:	d232      	bcs.n	800527e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800521e:	429a      	cmp	r2, r3
 8005220:	d324      	bcc.n	800526c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6859      	ldr	r1, [r3, #4]
 800522a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522c:	1acb      	subs	r3, r1, r3
 800522e:	4413      	add	r3, r2
 8005230:	4619      	mov	r1, r3
 8005232:	69b8      	ldr	r0, [r7, #24]
 8005234:	f7fe fda8 	bl	8003d88 <lfs_min>
 8005238:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005244:	1acb      	subs	r3, r1, r3
 8005246:	4413      	add	r3, r2
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4619      	mov	r1, r3
 800524c:	69f8      	ldr	r0, [r7, #28]
 800524e:	f006 f8a4 	bl	800b39a <memcpy>

                data += diff;
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	4413      	add	r3, r2
 8005258:	61fb      	str	r3, [r7, #28]
                off += diff;
 800525a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	4413      	add	r3, r2
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8005262:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800526a:	e040      	b.n	80052ee <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	4619      	mov	r1, r3
 8005276:	69b8      	ldr	r0, [r7, #24]
 8005278:	f7fe fd86 	bl	8003d88 <lfs_min>
 800527c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f06f 0201 	mvn.w	r2, #1
 8005284:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	4619      	mov	r1, r3
 800528e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005290:	f7fe fd8a 	bl	8003da8 <lfs_aligndown>
 8005294:	4602      	mov	r2, r0
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800529a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	441a      	add	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f7fe fd92 	bl	8003dd2 <lfs_alignup>
 80052ae:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f7fe fd65 	bl	8003d88 <lfs_min>
 80052be:	4602      	mov	r2, r0
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	6889      	ldr	r1, [r1, #8]
 80052d0:	9102      	str	r1, [sp, #8]
 80052d2:	9201      	str	r2, [sp, #4]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7ff fe33 	bl	8004f48 <lfs_dir_getslice>
 80052e2:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	da01      	bge.n	80052ee <lfs_dir_getread+0x1a4>
            return err;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	e004      	b.n	80052f8 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 80052ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f47f af3f 	bne.w	8005174 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <lfs_dir_traverse_filter+0x1e>
 800531a:	4b24      	ldr	r3, [pc, #144]	@ (80053ac <lfs_dir_traverse_filter+0xac>)
 800531c:	e000      	b.n	8005320 <lfs_dir_traverse_filter+0x20>
 800531e:	4b24      	ldr	r3, [pc, #144]	@ (80053b0 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8005320:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	405a      	eors	r2, r3
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d014      	beq.n	800535c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fa37 	bl	80047aa <lfs_tag_isdelete>
 800533c:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4a19      	ldr	r2, [pc, #100]	@ (80053ac <lfs_dir_traverse_filter+0xac>)
 8005346:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	6819      	ldr	r1, [r3, #0]
 800534c:	4b19      	ldr	r3, [pc, #100]	@ (80053b4 <lfs_dir_traverse_filter+0xb4>)
 800534e:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8005350:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8005354:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d104      	bne.n	8005366 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
        return true;
 8005362:	2301      	movs	r3, #1
 8005364:	e01e      	b.n	80053a4 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005366:	68b8      	ldr	r0, [r7, #8]
 8005368:	f7ff fa32 	bl	80047d0 <lfs_tag_type1>
 800536c:	4603      	mov	r3, r0
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005372:	d116      	bne.n	80053a2 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8005374:	68b8      	ldr	r0, [r7, #8]
 8005376:	f7ff fa75 	bl	8004864 <lfs_tag_id>
 800537a:	4603      	mov	r3, r0
 800537c:	461c      	mov	r4, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff fa6e 	bl	8004864 <lfs_tag_id>
 8005388:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800538a:	429c      	cmp	r4, r3
 800538c:	d809      	bhi.n	80053a2 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800538e:	68b8      	ldr	r0, [r7, #8]
 8005390:	f7ff fa5b 	bl	800484a <lfs_tag_splice>
 8005394:	4603      	mov	r3, r0
 8005396:	029a      	lsls	r2, r3, #10
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	441a      	add	r2, r3
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	601a      	str	r2, [r3, #0]
    }

    return false;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd90      	pop	{r4, r7, pc}
 80053ac:	7ffffc00 	.word	0x7ffffc00
 80053b0:	700ffc00 	.word	0x700ffc00
 80053b4:	000ffc00 	.word	0x000ffc00

080053b8 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b0c1      	sub	sp, #260	@ 0x104
 80053bc:	af04      	add	r7, sp, #16
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 80053cc:	6838      	ldr	r0, [r7, #0]
 80053ce:	f7ff fa66 	bl	800489e <lfs_tag_dsize>
 80053d2:	4602      	mov	r2, r0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	441a      	add	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d237      	bcs.n	8005450 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 80053e0:	6838      	ldr	r0, [r7, #0]
 80053e2:	f7ff fa5c 	bl	800489e <lfs_tag_dsize>
 80053e6:	4602      	mov	r2, r0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4413      	add	r3, r2
 80053ec:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 80053ee:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 80053f4:	2204      	movs	r2, #4
 80053f6:	9203      	str	r2, [sp, #12]
 80053f8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80053fc:	9202      	str	r2, [sp, #8]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	9201      	str	r2, [sp, #4]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	2304      	movs	r3, #4
 8005406:	460a      	mov	r2, r1
 8005408:	2100      	movs	r1, #0
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7fe fd98 	bl	8003f40 <lfs_bd_read>
 8005410:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 8005414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <lfs_dir_traverse+0x6a>
                    return err;
 800541c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005420:	e3a6      	b.n	8005b70 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8005422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe fd36 	bl	8003e96 <lfs_frombe32>
 800542a:	4602      	mov	r2, r0
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	4053      	eors	r3, r2
 8005430:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005434:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3304      	adds	r3, #4
 8005440:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 8005442:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 800544a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800544c:	603b      	str	r3, [r7, #0]
 800544e:	e01b      	b.n	8005488 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005454:	2b00      	cmp	r3, #0
 8005456:	dd13      	ble.n	8005480 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8005458:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 8005460:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 800546a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800546e:	3308      	adds	r3, #8
 8005470:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 8005474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005478:	3b01      	subs	r3, #1
 800547a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800547e:	e003      	b.n	8005488 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 8005486:	e2a2      	b.n	80059ce <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8005488:	4b7e      	ldr	r3, [pc, #504]	@ (8005684 <lfs_dir_traverse+0x2cc>)
 800548a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800548e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005494:	405a      	eors	r2, r3
 8005496:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800549a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800549e:	400b      	ands	r3, r1
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f040 8285 	bne.w	80059b2 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 80054a8:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80054ac:	f7ff f9da 	bl	8004864 <lfs_tag_id>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 80f0 	beq.w	8005698 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 80054b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d906      	bls.n	80054ce <lfs_dir_traverse+0x116>
 80054c0:	4b71      	ldr	r3, [pc, #452]	@ (8005688 <lfs_dir_traverse+0x2d0>)
 80054c2:	4a72      	ldr	r2, [pc, #456]	@ (800568c <lfs_dir_traverse+0x2d4>)
 80054c4:	f240 3193 	movw	r1, #915	@ 0x393
 80054c8:	4871      	ldr	r0, [pc, #452]	@ (8005690 <lfs_dir_traverse+0x2d8>)
 80054ca:	f005 fc8f 	bl	800adec <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 80054ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054d0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80054d4:	4613      	mov	r3, r2
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	33f0      	adds	r3, #240	@ 0xf0
 80054de:	443b      	add	r3, r7
 80054e0:	3b98      	subs	r3, #152	@ 0x98
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	33f0      	adds	r3, #240	@ 0xf0
 80054f4:	443b      	add	r3, r7
 80054f6:	3b94      	subs	r3, #148	@ 0x94
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005500:	4613      	mov	r3, r2
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	33f0      	adds	r3, #240	@ 0xf0
 800550a:	443b      	add	r3, r7
 800550c:	3b90      	subs	r3, #144	@ 0x90
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005516:	4613      	mov	r3, r2
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	33f0      	adds	r3, #240	@ 0xf0
 8005520:	443b      	add	r3, r7
 8005522:	3b8c      	subs	r3, #140	@ 0x8c
 8005524:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800552e:	4613      	mov	r3, r2
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	33f0      	adds	r3, #240	@ 0xf0
 8005538:	443b      	add	r3, r7
 800553a:	3b88      	subs	r3, #136	@ 0x88
 800553c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005546:	4613      	mov	r3, r2
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	33f0      	adds	r3, #240	@ 0xf0
 8005550:	443b      	add	r3, r7
 8005552:	3b84      	subs	r3, #132	@ 0x84
 8005554:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800555e:	4613      	mov	r3, r2
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	33f0      	adds	r3, #240	@ 0xf0
 8005568:	443b      	add	r3, r7
 800556a:	3b80      	subs	r3, #128	@ 0x80
 800556c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005576:	4613      	mov	r3, r2
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	33f0      	adds	r3, #240	@ 0xf0
 8005580:	443b      	add	r3, r7
 8005582:	3b7c      	subs	r3, #124	@ 0x7c
 8005584:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8005588:	801a      	strh	r2, [r3, #0]
 800558a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800558e:	4613      	mov	r3, r2
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	33f0      	adds	r3, #240	@ 0xf0
 8005598:	443b      	add	r3, r7
 800559a:	3b7a      	subs	r3, #122	@ 0x7a
 800559c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80055a6:	4613      	mov	r3, r2
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	33f0      	adds	r3, #240	@ 0xf0
 80055b0:	443b      	add	r3, r7
 80055b2:	3b78      	subs	r3, #120	@ 0x78
 80055b4:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 80055b8:	801a      	strh	r2, [r3, #0]
 80055ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80055be:	4613      	mov	r3, r2
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	33f0      	adds	r3, #240	@ 0xf0
 80055c8:	443b      	add	r3, r7
 80055ca:	3b74      	subs	r3, #116	@ 0x74
 80055cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80055d6:	4613      	mov	r3, r2
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	33f0      	adds	r3, #240	@ 0xf0
 80055e0:	443b      	add	r3, r7
 80055e2:	3b70      	subs	r3, #112	@ 0x70
 80055e4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80055ee:	4613      	mov	r3, r2
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	33f0      	adds	r3, #240	@ 0xf0
 80055f8:	443b      	add	r3, r7
 80055fa:	3b6c      	subs	r3, #108	@ 0x6c
 80055fc:	6019      	str	r1, [r3, #0]
 80055fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005602:	4613      	mov	r3, r2
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	33f0      	adds	r3, #240	@ 0xf0
 800560c:	443b      	add	r3, r7
 800560e:	3b68      	subs	r3, #104	@ 0x68
 8005610:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800561a:	4613      	mov	r3, r2
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	33f0      	adds	r3, #240	@ 0xf0
 8005624:	443b      	add	r3, r7
 8005626:	3b68      	subs	r3, #104	@ 0x68
 8005628:	3304      	adds	r3, #4
 800562a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800562e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005632:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8005636:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800563a:	3301      	adds	r3, #1
 800563c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 800565e:	4b0d      	ldr	r3, [pc, #52]	@ (8005694 <lfs_dir_traverse+0x2dc>)
 8005660:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 8005664:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005668:	1e5a      	subs	r2, r3, #1
 800566a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800566e:	4613      	mov	r3, r2
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	3328      	adds	r3, #40	@ 0x28
 8005678:	440b      	add	r3, r1
 800567a:	3304      	adds	r3, #4
 800567c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 8005680:	e19e      	b.n	80059c0 <lfs_dir_traverse+0x608>
 8005682:	bf00      	nop
 8005684:	7ff00000 	.word	0x7ff00000
 8005688:	0800c088 	.word	0x0800c088
 800568c:	0800ca2c 	.word	0x0800ca2c
 8005690:	0800bf90 	.word	0x0800bf90
 8005694:	08005301 	.word	0x08005301
            }
        }

popped:
 8005698:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800569a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800569e:	f7ff f8e1 	bl	8004864 <lfs_tag_id>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80056a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff f8da 	bl	8004864 <lfs_tag_id>
 80056b0:	4603      	mov	r3, r0
 80056b2:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 80056b4:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 80056b8:	4293      	cmp	r3, r2
 80056ba:	f200 817c 	bhi.w	80059b6 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80056be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff f8cf 	bl	8004864 <lfs_tag_id>
 80056c6:	4603      	mov	r3, r0
 80056c8:	461a      	mov	r2, r3
 80056ca:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 80056ce:	4293      	cmp	r3, r2
 80056d0:	f240 8171 	bls.w	80059b6 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 80056d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff f89a 	bl	8004810 <lfs_tag_type3>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f43f ae74 	beq.w	80053cc <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80056e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff f892 	bl	8004810 <lfs_tag_type3>
 80056ec:	4603      	mov	r3, r0
 80056ee:	461a      	mov	r2, r3
 80056f0:	f240 1301 	movw	r3, #257	@ 0x101
 80056f4:	429a      	cmp	r2, r3
 80056f6:	f040 80e0 	bne.w	80058ba <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80056fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056fe:	4ab1      	ldr	r2, [pc, #708]	@ (80059c4 <lfs_dir_traverse+0x60c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	f000 815a 	beq.w	80059ba <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8005706:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800570a:	4613      	mov	r3, r2
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	33f0      	adds	r3, #240	@ 0xf0
 8005714:	443b      	add	r3, r7
 8005716:	3b98      	subs	r3, #152	@ 0x98
 8005718:	4618      	mov	r0, r3
 800571a:	233c      	movs	r3, #60	@ 0x3c
 800571c:	461a      	mov	r2, r3
 800571e:	2100      	movs	r1, #0
 8005720:	f005 fd81 	bl	800b226 <memset>
 8005724:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005728:	4613      	mov	r3, r2
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	33f0      	adds	r3, #240	@ 0xf0
 8005732:	443b      	add	r3, r7
 8005734:	3b98      	subs	r3, #152	@ 0x98
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800573e:	4613      	mov	r3, r2
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	33f0      	adds	r3, #240	@ 0xf0
 8005748:	443b      	add	r3, r7
 800574a:	3b94      	subs	r3, #148	@ 0x94
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005754:	4613      	mov	r3, r2
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	33f0      	adds	r3, #240	@ 0xf0
 800575e:	443b      	add	r3, r7
 8005760:	3b90      	subs	r3, #144	@ 0x90
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800576a:	4613      	mov	r3, r2
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	33f0      	adds	r3, #240	@ 0xf0
 8005774:	443b      	add	r3, r7
 8005776:	3b8c      	subs	r3, #140	@ 0x8c
 8005778:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005782:	4613      	mov	r3, r2
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	33f0      	adds	r3, #240	@ 0xf0
 800578c:	443b      	add	r3, r7
 800578e:	3b88      	subs	r3, #136	@ 0x88
 8005790:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800579a:	4613      	mov	r3, r2
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	33f0      	adds	r3, #240	@ 0xf0
 80057a4:	443b      	add	r3, r7
 80057a6:	3b84      	subs	r3, #132	@ 0x84
 80057a8:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80057b2:	4613      	mov	r3, r2
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	1a9b      	subs	r3, r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	33f0      	adds	r3, #240	@ 0xf0
 80057bc:	443b      	add	r3, r7
 80057be:	3b80      	subs	r3, #128	@ 0x80
 80057c0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80057ca:	4613      	mov	r3, r2
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	33f0      	adds	r3, #240	@ 0xf0
 80057d4:	443b      	add	r3, r7
 80057d6:	3b7c      	subs	r3, #124	@ 0x7c
 80057d8:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80057e2:	4613      	mov	r3, r2
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	33f0      	adds	r3, #240	@ 0xf0
 80057ec:	443b      	add	r3, r7
 80057ee:	3b7a      	subs	r3, #122	@ 0x7a
 80057f0:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 80057f4:	801a      	strh	r2, [r3, #0]
 80057f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80057fa:	4613      	mov	r3, r2
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	33f0      	adds	r3, #240	@ 0xf0
 8005804:	443b      	add	r3, r7
 8005806:	3b78      	subs	r3, #120	@ 0x78
 8005808:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005812:	4613      	mov	r3, r2
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	33f0      	adds	r3, #240	@ 0xf0
 800581c:	443b      	add	r3, r7
 800581e:	3b74      	subs	r3, #116	@ 0x74
 8005820:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800582a:	4613      	mov	r3, r2
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	33f0      	adds	r3, #240	@ 0xf0
 8005834:	443b      	add	r3, r7
 8005836:	3b70      	subs	r3, #112	@ 0x70
 8005838:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800583c:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800583e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005842:	3301      	adds	r3, #1
 8005844:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8005848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff f81a 	bl	8004884 <lfs_tag_size>
 8005850:	4603      	mov	r3, r0
 8005852:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8005856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff f803 	bl	8004864 <lfs_tag_id>
 800585e:	4603      	mov	r3, r0
 8005860:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 8005864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005868:	60bb      	str	r3, [r7, #8]
            off = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800586e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005872:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8005874:	2300      	movs	r3, #0
 8005876:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8005880:	4b51      	ldr	r3, [pc, #324]	@ (80059c8 <lfs_dir_traverse+0x610>)
 8005882:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8005886:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800588a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800588e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8005892:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 8005896:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800589a:	3301      	adds	r3, #1
 800589c:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 80058a0:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 80058a4:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 80058b0:	4413      	add	r3, r2
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 80058b8:	e588      	b.n	80053cc <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 80058ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fe ffa7 	bl	8004810 <lfs_tag_type3>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80058c8:	d159      	bne.n	800597e <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80058ca:	2300      	movs	r3, #0
 80058cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058d0:	e04b      	b.n	800596a <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80058da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80058de:	4613      	mov	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	461a      	mov	r2, r3
 80058e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ec:	4413      	add	r3, r2
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80058f4:	051c      	lsls	r4, r3, #20
 80058f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fe ffb3 	bl	8004864 <lfs_tag_id>
 80058fe:	4603      	mov	r3, r0
 8005900:	461a      	mov	r2, r3
 8005902:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8005906:	4413      	add	r3, r2
 8005908:	029b      	lsls	r3, r3, #10
 800590a:	ea44 0103 	orr.w	r1, r4, r3
 800590e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	461a      	mov	r2, r3
 800591c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005920:	4413      	add	r3, r2
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8005926:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800592a:	4613      	mov	r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	461a      	mov	r2, r3
 8005934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005938:	4413      	add	r3, r2
 800593a:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800593c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005940:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8005944:	4798      	blx	r3
 8005946:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 800594a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800594e:	2b00      	cmp	r3, #0
 8005950:	da02      	bge.n	8005958 <lfs_dir_traverse+0x5a0>
                    return res;
 8005952:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005956:	e10b      	b.n	8005b70 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8005958:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d12e      	bne.n	80059be <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005964:	3301      	adds	r3, #1
 8005966:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800596a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe ff89 	bl	8004884 <lfs_tag_size>
 8005972:	4602      	mov	r2, r0
 8005974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005978:	4293      	cmp	r3, r2
 800597a:	d3aa      	bcc.n	80058d2 <lfs_dir_traverse+0x51a>
 800597c:	e526      	b.n	80053cc <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800597e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 8005982:	029a      	lsls	r2, r3, #10
 8005984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005986:	18d1      	adds	r1, r2, r3
 8005988:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800598c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005990:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8005994:	4798      	blx	r3
 8005996:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800599a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da02      	bge.n	80059a8 <lfs_dir_traverse+0x5f0>
                return res;
 80059a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80059a6:	e0e3      	b.n	8005b70 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 80059a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10d      	bne.n	80059cc <lfs_dir_traverse+0x614>
 80059b0:	e50c      	b.n	80053cc <lfs_dir_traverse+0x14>
                continue;
 80059b2:	bf00      	nop
 80059b4:	e50a      	b.n	80053cc <lfs_dir_traverse+0x14>
            continue;
 80059b6:	bf00      	nop
 80059b8:	e508      	b.n	80053cc <lfs_dir_traverse+0x14>
                continue;
 80059ba:	bf00      	nop
 80059bc:	e506      	b.n	80053cc <lfs_dir_traverse+0x14>
                    break;
 80059be:	bf00      	nop
        {
 80059c0:	e504      	b.n	80053cc <lfs_dir_traverse+0x14>
 80059c2:	bf00      	nop
 80059c4:	08005301 	.word	0x08005301
 80059c8:	600ffc00 	.word	0x600ffc00
                break;
 80059cc:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80059ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80ca 	beq.w	8005b6c <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80059d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059dc:	1e5a      	subs	r2, r3, #1
 80059de:	4613      	mov	r3, r2
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	33f0      	adds	r3, #240	@ 0xf0
 80059e8:	443b      	add	r3, r7
 80059ea:	3b98      	subs	r3, #152	@ 0x98
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80059f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059f4:	1e5a      	subs	r2, r3, #1
 80059f6:	4613      	mov	r3, r2
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	33f0      	adds	r3, #240	@ 0xf0
 8005a00:	443b      	add	r3, r7
 8005a02:	3b94      	subs	r3, #148	@ 0x94
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8005a08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a0c:	1e5a      	subs	r2, r3, #1
 8005a0e:	4613      	mov	r3, r2
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	33f0      	adds	r3, #240	@ 0xf0
 8005a18:	443b      	add	r3, r7
 8005a1a:	3b90      	subs	r3, #144	@ 0x90
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8005a20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a24:	1e5a      	subs	r2, r3, #1
 8005a26:	4613      	mov	r3, r2
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	33f0      	adds	r3, #240	@ 0xf0
 8005a30:	443b      	add	r3, r7
 8005a32:	3b8c      	subs	r3, #140	@ 0x8c
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 8005a3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a3e:	1e5a      	subs	r2, r3, #1
 8005a40:	4613      	mov	r3, r2
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	33f0      	adds	r3, #240	@ 0xf0
 8005a4a:	443b      	add	r3, r7
 8005a4c:	3b88      	subs	r3, #136	@ 0x88
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 8005a54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a58:	1e5a      	subs	r2, r3, #1
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	33f0      	adds	r3, #240	@ 0xf0
 8005a64:	443b      	add	r3, r7
 8005a66:	3b84      	subs	r3, #132	@ 0x84
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 8005a6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a72:	1e5a      	subs	r2, r3, #1
 8005a74:	4613      	mov	r3, r2
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	33f0      	adds	r3, #240	@ 0xf0
 8005a7e:	443b      	add	r3, r7
 8005a80:	3b80      	subs	r3, #128	@ 0x80
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 8005a88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a8c:	1e5a      	subs	r2, r3, #1
 8005a8e:	4613      	mov	r3, r2
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	33f0      	adds	r3, #240	@ 0xf0
 8005a98:	443b      	add	r3, r7
 8005a9a:	3b7c      	subs	r3, #124	@ 0x7c
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 8005aa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005aa6:	1e5a      	subs	r2, r3, #1
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	33f0      	adds	r3, #240	@ 0xf0
 8005ab2:	443b      	add	r3, r7
 8005ab4:	3b7a      	subs	r3, #122	@ 0x7a
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 8005abc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	33f0      	adds	r3, #240	@ 0xf0
 8005acc:	443b      	add	r3, r7
 8005ace:	3b78      	subs	r3, #120	@ 0x78
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 8005ad6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ada:	1e5a      	subs	r2, r3, #1
 8005adc:	4613      	mov	r3, r2
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	33f0      	adds	r3, #240	@ 0xf0
 8005ae6:	443b      	add	r3, r7
 8005ae8:	3b74      	subs	r3, #116	@ 0x74
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 8005af0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005af4:	1e5a      	subs	r2, r3, #1
 8005af6:	4613      	mov	r3, r2
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	33f0      	adds	r3, #240	@ 0xf0
 8005b00:	443b      	add	r3, r7
 8005b02:	3b70      	subs	r3, #112	@ 0x70
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 8005b0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b0e:	1e5a      	subs	r2, r3, #1
 8005b10:	4613      	mov	r3, r2
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	1a9b      	subs	r3, r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	33f0      	adds	r3, #240	@ 0xf0
 8005b1a:	443b      	add	r3, r7
 8005b1c:	3b6c      	subs	r3, #108	@ 0x6c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 8005b22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b26:	1e5a      	subs	r2, r3, #1
 8005b28:	4613      	mov	r3, r2
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	33f0      	adds	r3, #240	@ 0xf0
 8005b32:	443b      	add	r3, r7
 8005b34:	3b68      	subs	r3, #104	@ 0x68
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 8005b3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	4613      	mov	r3, r2
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	33f0      	adds	r3, #240	@ 0xf0
 8005b4c:	443b      	add	r3, r7
 8005b4e:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 8005b52:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005b56:	3204      	adds	r2, #4
 8005b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b5c:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8005b60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b64:	3b01      	subs	r3, #1
 8005b66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 8005b6a:	e596      	b.n	800569a <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 8005b6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	37f4      	adds	r7, #244	@ 0xf4
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd90      	pop	{r4, r7, pc}

08005b78 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8005b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b7a:	b0a5      	sub	sp, #148	@ 0x94
 8005b7c:	af04      	add	r7, sp, #16
 8005b7e:	6178      	str	r0, [r7, #20]
 8005b80:	6139      	str	r1, [r7, #16]
 8005b82:	60fa      	str	r2, [r7, #12]
 8005b84:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8005b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b8a:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d207      	bcs.n	8005baa <lfs_dir_fetchmatch+0x32>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 8005baa:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8005bae:	e3a4      	b.n	80062fa <lfs_dir_fetchmatch+0x782>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bc0:	e05a      	b.n	8005c78 <lfs_dir_fetchmatch+0x100>
        int err = lfs_bd_read(lfs,
 8005bc2:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8005bc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8005bcc:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8005bce:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8005bd2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005bd4:	0092      	lsls	r2, r2, #2
 8005bd6:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8005bd8:	2104      	movs	r1, #4
 8005bda:	9103      	str	r1, [sp, #12]
 8005bdc:	9202      	str	r2, [sp, #8]
 8005bde:	2200      	movs	r2, #0
 8005be0:	9201      	str	r2, [sp, #4]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2304      	movs	r3, #4
 8005be6:	4602      	mov	r2, r0
 8005be8:	2100      	movs	r1, #0
 8005bea:	6978      	ldr	r0, [r7, #20]
 8005bec:	f7fe f9a8 	bl	8003f40 <lfs_bd_read>
 8005bf0:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8005bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	3378      	adds	r3, #120	@ 0x78
 8005bf8:	f107 0208 	add.w	r2, r7, #8
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fe f930 	bl	8003e68 <lfs_fromle32>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	3378      	adds	r3, #120	@ 0x78
 8005c10:	f107 0108 	add.w	r1, r7, #8
 8005c14:	440b      	add	r3, r1
 8005c16:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8005c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <lfs_dir_fetchmatch+0xb4>
 8005c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c22:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005c26:	d001      	beq.n	8005c2c <lfs_dir_fetchmatch+0xb4>
            return err;
 8005c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c2a:	e366      	b.n	80062fa <lfs_dir_fetchmatch+0x782>
        }

        if (err != LFS_ERR_CORRUPT &&
 8005c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c2e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005c32:	d01e      	beq.n	8005c72 <lfs_dir_fetchmatch+0xfa>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8005c34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	3378      	adds	r3, #120	@ 0x78
 8005c3a:	f107 0208 	add.w	r2, r7, #8
 8005c3e:	4413      	add	r3, r2
 8005c40:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8005c44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c46:	3301      	adds	r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	bfb8      	it	lt
 8005c50:	425b      	neglt	r3, r3
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	3378      	adds	r3, #120	@ 0x78
 8005c56:	f107 0108 	add.w	r1, r7, #8
 8005c5a:	440b      	add	r3, r1
 8005c5c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f7fe f8f2 	bl	8003e4c <lfs_scmp>
 8005c68:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dd01      	ble.n	8005c72 <lfs_dir_fetchmatch+0xfa>
            r = i;
 8005c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c70:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 8005c72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c74:	3301      	adds	r3, #1
 8005c76:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	dda1      	ble.n	8005bc2 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8005c7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	bfb8      	it	lt
 8005c88:	425b      	neglt	r3, r3
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8005c96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c98:	3301      	adds	r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	bfb8      	it	lt
 8005ca2:	425b      	neglt	r3, r3
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8005cb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	bfb8      	it	lt
 8005cba:	425b      	neglt	r3, r3
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	3378      	adds	r3, #120	@ 0x78
 8005cc0:	f107 0208 	add.w	r2, r7, #8
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cd8:	e2fb      	b.n	80062d2 <lfs_dir_fetchmatch+0x75a>
        lfs_off_t off = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8005cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ce2:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8005cea:	4aa9      	ldr	r2, [pc, #676]	@ (8005f90 <lfs_dir_fetchmatch+0x418>)
 8005cec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cf4:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 8005cfe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d00:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8005d02:	2300      	movs	r3, #0
 8005d04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe f8b3 	bl	8003e7e <lfs_tole32>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	3308      	adds	r3, #8
 8005d22:	2204      	movs	r2, #4
 8005d24:	4619      	mov	r1, r3
 8005d26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d2a:	f004 fe69 	bl	800aa00 <lfs_crc>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe f896 	bl	8003e68 <lfs_fromle32>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8005d42:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005d44:	f7fe fdab 	bl	800489e <lfs_tag_dsize>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d4c:	4413      	add	r3, r2
 8005d4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 8005d50:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d56:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	9203      	str	r2, [sp, #12]
 8005d60:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005d64:	9202      	str	r2, [sp, #8]
 8005d66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d68:	9201      	str	r2, [sp, #4]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	460a      	mov	r2, r1
 8005d70:	2100      	movs	r1, #0
 8005d72:	6978      	ldr	r0, [r7, #20]
 8005d74:	f7fe f8e4 	bl	8003f40 <lfs_bd_read>
 8005d78:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8005d7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d006      	beq.n	8005d8e <lfs_dir_fetchmatch+0x216>
                if (err == LFS_ERR_CORRUPT) {
 8005d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d82:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005d86:	f000 81d6 	beq.w	8006136 <lfs_dir_fetchmatch+0x5be>
                    // can't continue?
                    break;
                }
                return err;
 8005d8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d8c:	e2b5      	b.n	80062fa <lfs_dir_fetchmatch+0x782>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d90:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8005d94:	2204      	movs	r2, #4
 8005d96:	4618      	mov	r0, r3
 8005d98:	f004 fe32 	bl	800aa00 <lfs_crc>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe f877 	bl	8003e96 <lfs_frombe32>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dac:	4053      	eors	r3, r2
 8005dae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8005db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe fceb 	bl	800478e <lfs_tag_isvalid>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f083 0301 	eor.w	r3, r3, #1
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <lfs_dir_fetchmatch+0x264>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8005dc4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8005dc6:	f7fe fd13 	bl	80047f0 <lfs_tag_type2>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005dd0:	bf0c      	ite	eq
 8005dd2:	2301      	moveq	r3, #1
 8005dd4:	2300      	movne	r3, #0
 8005dd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 8005dda:	e1bb      	b.n	8006154 <lfs_dir_fetchmatch+0x5dc>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8005ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fe fd5d 	bl	800489e <lfs_tag_dsize>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005de8:	441a      	add	r2, r3
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	f200 81a2 	bhi.w	800613a <lfs_dir_fetchmatch+0x5c2>
                break;
            }

            ptag = tag;
 8005df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df8:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8005dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fe fcf7 	bl	80047f0 <lfs_tag_type2>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005e08:	d15e      	bne.n	8005ec8 <lfs_dir_fetchmatch+0x350>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8005e0a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e10:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e18:	3204      	adds	r2, #4
 8005e1a:	2104      	movs	r1, #4
 8005e1c:	9103      	str	r1, [sp, #12]
 8005e1e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005e22:	9102      	str	r1, [sp, #8]
 8005e24:	9201      	str	r2, [sp, #4]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	4623      	mov	r3, r4
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	6978      	ldr	r0, [r7, #20]
 8005e30:	f7fe f886 	bl	8003f40 <lfs_bd_read>
 8005e34:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8005e36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d006      	beq.n	8005e4a <lfs_dir_fetchmatch+0x2d2>
                    if (err == LFS_ERR_CORRUPT) {
 8005e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e3e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005e42:	f000 817c 	beq.w	800613e <lfs_dir_fetchmatch+0x5c6>
                        break;
                    }
                    return err;
 8005e46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 8005e48:	e257      	b.n	80062fa <lfs_dir_fetchmatch+0x782>
                }
                dcrc = lfs_fromle32(dcrc);
 8005e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe f80b 	bl	8003e68 <lfs_fromle32>
 8005e52:	4603      	mov	r3, r0
 8005e54:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 8005e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	f040 8171 	bne.w	8006142 <lfs_dir_fetchmatch+0x5ca>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8005e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe fce4 	bl	8004830 <lfs_tag_chunk>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	07db      	lsls	r3, r3, #31
 8005e6c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005e6e:	4053      	eors	r3, r2
 8005e70:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f004 fdbf 	bl	800aa00 <lfs_crc>
 8005e82:	4602      	mov	r2, r0
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8005e88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8005e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fd05 	bl	800489e <lfs_tag_dsize>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e98:	441a      	add	r2, r3
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ea2:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8005eaa:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8005eac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8005eb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8005ebe:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ec6:	e73c      	b.n	8005d42 <lfs_dir_fetchmatch+0x1ca>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8005ec8:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	681c      	ldr	r4, [r3, #0]
 8005ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ed8:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8005eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fcde 	bl	800489e <lfs_tag_dsize>
 8005ee2:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8005ee4:	3b04      	subs	r3, #4
 8005ee6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005eea:	9203      	str	r2, [sp, #12]
 8005eec:	9302      	str	r3, [sp, #8]
 8005eee:	9501      	str	r5, [sp, #4]
 8005ef0:	9400      	str	r4, [sp, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	6978      	ldr	r0, [r7, #20]
 8005efa:	f7fe f9b6 	bl	800426a <lfs_bd_crc>
 8005efe:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 8005f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d006      	beq.n	8005f14 <lfs_dir_fetchmatch+0x39c>
                if (err == LFS_ERR_CORRUPT) {
 8005f06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f08:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8005f0c:	f000 811b 	beq.w	8006146 <lfs_dir_fetchmatch+0x5ce>
                    break;
                }
                return err;
 8005f10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f12:	e1f2      	b.n	80062fa <lfs_dir_fetchmatch+0x782>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8005f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe fc5a 	bl	80047d0 <lfs_tag_type1>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d113      	bne.n	8005f4a <lfs_dir_fetchmatch+0x3d2>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8005f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fc9d 	bl	8004864 <lfs_tag_id>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005f32:	4293      	cmp	r3, r2
 8005f34:	f200 80b6 	bhi.w	80060a4 <lfs_dir_fetchmatch+0x52c>
                    tempcount = lfs_tag_id(tag) + 1;
 8005f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fc92 	bl	8004864 <lfs_tag_id>
 8005f40:	4603      	mov	r3, r0
 8005f42:	3301      	adds	r3, #1
 8005f44:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005f48:	e0ac      	b.n	80060a4 <lfs_dir_fetchmatch+0x52c>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8005f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe fc3f 	bl	80047d0 <lfs_tag_type1>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f58:	d13a      	bne.n	8005fd0 <lfs_dir_fetchmatch+0x458>
                tempcount += lfs_tag_splice(tag);
 8005f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fe fc74 	bl	800484a <lfs_tag_splice>
 8005f62:	4603      	mov	r3, r0
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8005f70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f72:	4b08      	ldr	r3, [pc, #32]	@ (8005f94 <lfs_dir_fetchmatch+0x41c>)
 8005f74:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8005f76:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8005f7a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8005f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d109      	bne.n	8005f98 <lfs_dir_fetchmatch+0x420>
                    tempbesttag |= 0x80000000;
 8005f84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f8c:	e08a      	b.n	80060a4 <lfs_dir_fetchmatch+0x52c>
 8005f8e:	bf00      	nop
 8005f90:	0800c0c8 	.word	0x0800c0c8
 8005f94:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8005f98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f9e:	f000 8081 	beq.w	80060a4 <lfs_dir_fetchmatch+0x52c>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8005fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fe fc5d 	bl	8004864 <lfs_tag_id>
 8005faa:	4603      	mov	r3, r0
 8005fac:	461c      	mov	r4, r3
 8005fae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fc57 	bl	8004864 <lfs_tag_id>
 8005fb6:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8005fb8:	429c      	cmp	r4, r3
 8005fba:	d873      	bhi.n	80060a4 <lfs_dir_fetchmatch+0x52c>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fe fc43 	bl	800484a <lfs_tag_splice>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	029a      	lsls	r2, r3, #10
 8005fc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fca:	4413      	add	r3, r2
 8005fcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fce:	e069      	b.n	80060a4 <lfs_dir_fetchmatch+0x52c>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8005fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fbfc 	bl	80047d0 <lfs_tag_type1>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005fde:	d132      	bne.n	8006046 <lfs_dir_fetchmatch+0x4ce>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8005fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe fc24 	bl	8004830 <lfs_tag_chunk>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	bf14      	ite	ne
 8005ff2:	2301      	movne	r3, #1
 8005ff4:	2300      	moveq	r3, #0
 8005ff6:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 8005ffa:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006000:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006008:	3204      	adds	r2, #4
 800600a:	2108      	movs	r1, #8
 800600c:	9103      	str	r1, [sp, #12]
 800600e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8006012:	9102      	str	r1, [sp, #8]
 8006014:	9201      	str	r2, [sp, #4]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	4623      	mov	r3, r4
 800601a:	4602      	mov	r2, r0
 800601c:	2100      	movs	r1, #0
 800601e:	6978      	ldr	r0, [r7, #20]
 8006020:	f7fd ff8e 	bl	8003f40 <lfs_bd_read>
 8006024:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8006026:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006028:	2b00      	cmp	r3, #0
 800602a:	d006      	beq.n	800603a <lfs_dir_fetchmatch+0x4c2>
                    if (err == LFS_ERR_CORRUPT) {
 800602c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800602e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006032:	f000 808a 	beq.w	800614a <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return err;
 8006036:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006038:	e15f      	b.n	80062fa <lfs_dir_fetchmatch+0x782>
                }
                lfs_pair_fromle32(temptail);
 800603a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fb71 	bl	8004726 <lfs_pair_fromle32>
 8006044:	e02e      	b.n	80060a4 <lfs_dir_fetchmatch+0x52c>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8006046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006048:	4618      	mov	r0, r3
 800604a:	f7fe fbe1 	bl	8004810 <lfs_tag_type3>
 800604e:	4603      	mov	r3, r0
 8006050:	461a      	mov	r2, r3
 8006052:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 8006056:	429a      	cmp	r2, r3
 8006058:	d124      	bne.n	80060a4 <lfs_dir_fetchmatch+0x52c>
                err = lfs_bd_read(lfs,
 800605a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006060:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006068:	3204      	adds	r2, #4
 800606a:	2108      	movs	r1, #8
 800606c:	9103      	str	r1, [sp, #12]
 800606e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8006072:	9102      	str	r1, [sp, #8]
 8006074:	9201      	str	r2, [sp, #4]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	4623      	mov	r3, r4
 800607a:	4602      	mov	r2, r0
 800607c:	2100      	movs	r1, #0
 800607e:	6978      	ldr	r0, [r7, #20]
 8006080:	f7fd ff5e 	bl	8003f40 <lfs_bd_read>
 8006084:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8006086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <lfs_dir_fetchmatch+0x51c>
                    if (err == LFS_ERR_CORRUPT) {
 800608c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800608e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006092:	d05c      	beq.n	800614e <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8006094:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe fcff 	bl	8004a9c <lfs_fcrc_fromle32>
                hasfcrc = true;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80060a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060aa:	405a      	eors	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f47f ae46 	bne.w	8005d42 <lfs_dir_fetchmatch+0x1ca>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80060b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80060bc:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80060be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c0:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 80060c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c4:	f107 0220 	add.w	r2, r7, #32
 80060c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060cc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80060d0:	4798      	blx	r3
 80060d2:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 80060d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da05      	bge.n	80060e6 <lfs_dir_fetchmatch+0x56e>
                    if (res == LFS_ERR_CORRUPT) {
 80060da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060dc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80060e0:	d037      	beq.n	8006152 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                    return res;
 80060e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 80060e4:	e109      	b.n	80062fa <lfs_dir_fetchmatch+0x782>
                }

                if (res == LFS_CMP_EQ) {
 80060e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <lfs_dir_fetchmatch+0x57a>
                    // found a match
                    tempbesttag = tag;
 80060ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80060f0:	e627      	b.n	8005d42 <lfs_dir_fetchmatch+0x1ca>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80060f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060f6:	405a      	eors	r2, r3
 80060f8:	4b82      	ldr	r3, [pc, #520]	@ (8006304 <lfs_dir_fetchmatch+0x78c>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d103      	bne.n	8006108 <lfs_dir_fetchmatch+0x590>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8006100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006104:	663b      	str	r3, [r7, #96]	@ 0x60
 8006106:	e61c      	b.n	8005d42 <lfs_dir_fetchmatch+0x1ca>
                } else if (res == LFS_CMP_GT &&
 8006108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800610a:	2b02      	cmp	r3, #2
 800610c:	f47f ae19 	bne.w	8005d42 <lfs_dir_fetchmatch+0x1ca>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8006110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006112:	4618      	mov	r0, r3
 8006114:	f7fe fba6 	bl	8004864 <lfs_tag_id>
 8006118:	4603      	mov	r3, r0
 800611a:	461c      	mov	r4, r3
 800611c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800611e:	4618      	mov	r0, r3
 8006120:	f7fe fba0 	bl	8004864 <lfs_tag_id>
 8006124:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8006126:	429c      	cmp	r4, r3
 8006128:	f63f ae0b 	bhi.w	8005d42 <lfs_dir_fetchmatch+0x1ca>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006132:	663b      	str	r3, [r7, #96]	@ 0x60
 8006134:	e605      	b.n	8005d42 <lfs_dir_fetchmatch+0x1ca>
                    break;
 8006136:	bf00      	nop
 8006138:	e00c      	b.n	8006154 <lfs_dir_fetchmatch+0x5dc>
                break;
 800613a:	bf00      	nop
 800613c:	e00a      	b.n	8006154 <lfs_dir_fetchmatch+0x5dc>
                        break;
 800613e:	bf00      	nop
 8006140:	e008      	b.n	8006154 <lfs_dir_fetchmatch+0x5dc>
                    break;
 8006142:	bf00      	nop
 8006144:	e006      	b.n	8006154 <lfs_dir_fetchmatch+0x5dc>
                    break;
 8006146:	bf00      	nop
 8006148:	e004      	b.n	8006154 <lfs_dir_fetchmatch+0x5dc>
                        break;
 800614a:	bf00      	nop
 800614c:	e002      	b.n	8006154 <lfs_dir_fetchmatch+0x5dc>
                        break;
 800614e:	bf00      	nop
 8006150:	e000      	b.n	8006154 <lfs_dir_fetchmatch+0x5dc>
                        break;
 8006152:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d000      	beq.n	800615e <lfs_dir_fetchmatch+0x5e6>
 800615c:	e017      	b.n	800618e <lfs_dir_fetchmatch+0x616>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe fa59 	bl	8004618 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8006166:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006168:	3301      	adds	r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	bfb8      	it	lt
 8006172:	425b      	neglt	r3, r3
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	3378      	adds	r3, #120	@ 0x78
 8006178:	f107 0208 	add.w	r2, r7, #8
 800617c:	4413      	add	r3, r2
 800617e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8006186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006188:	3301      	adds	r3, #1
 800618a:	673b      	str	r3, [r7, #112]	@ 0x70
 800618c:	e0a1      	b.n	80062d2 <lfs_dir_fetchmatch+0x75a>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2200      	movs	r2, #0
 8006192:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8006194:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006198:	2b00      	cmp	r3, #0
 800619a:	d03a      	beq.n	8006212 <lfs_dir_fetchmatch+0x69a>
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80061a4:	6992      	ldr	r2, [r2, #24]
 80061a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80061aa:	fb01 f202 	mul.w	r2, r1, r2
 80061ae:	1a9b      	subs	r3, r3, r2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d12e      	bne.n	8006212 <lfs_dir_fetchmatch+0x69a>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 80061b4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d02a      	beq.n	8006212 <lfs_dir_fetchmatch+0x69a>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 80061bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061c0:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 80061c2:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061c8:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	68d2      	ldr	r2, [r2, #12]
 80061d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80061d4:	f107 001c 	add.w	r0, r7, #28
 80061d8:	9003      	str	r0, [sp, #12]
 80061da:	9102      	str	r1, [sp, #8]
 80061dc:	9201      	str	r2, [sp, #4]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	462b      	mov	r3, r5
 80061e2:	4622      	mov	r2, r4
 80061e4:	2100      	movs	r1, #0
 80061e6:	6978      	ldr	r0, [r7, #20]
 80061e8:	f7fe f83f 	bl	800426a <lfs_bd_crc>
 80061ec:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 80061ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <lfs_dir_fetchmatch+0x688>
 80061f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061f6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80061fa:	d001      	beq.n	8006200 <lfs_dir_fetchmatch+0x688>
                    return err;
 80061fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061fe:	e07c      	b.n	80062fa <lfs_dir_fetchmatch+0x782>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8006200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	429a      	cmp	r2, r3
 8006206:	bf0c      	ite	eq
 8006208:	2301      	moveq	r3, #1
 800620a:	2300      	movne	r3, #0
 800620c:	b2da      	uxtb	r2, r3
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	333c      	adds	r3, #60	@ 0x3c
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4611      	mov	r1, r2
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe fbde 	bl	80049dc <lfs_gstate_hasmovehere>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d028      	beq.n	8006278 <lfs_dir_fetchmatch+0x700>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fb1a 	bl	8004864 <lfs_tag_id>
 8006230:	4603      	mov	r3, r0
 8006232:	461c      	mov	r4, r3
 8006234:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fb14 	bl	8004864 <lfs_tag_id>
 800623c:	4603      	mov	r3, r0
 800623e:	429c      	cmp	r4, r3
 8006240:	d104      	bne.n	800624c <lfs_dir_fetchmatch+0x6d4>
                besttag |= 0x80000000;
 8006242:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006244:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006248:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800624a:	e015      	b.n	8006278 <lfs_dir_fetchmatch+0x700>
            } else if (besttag != -1 &&
 800624c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006252:	d011      	beq.n	8006278 <lfs_dir_fetchmatch+0x700>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe fb03 	bl	8004864 <lfs_tag_id>
 800625e:	4603      	mov	r3, r0
 8006260:	461c      	mov	r4, r3
 8006262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006264:	4618      	mov	r0, r3
 8006266:	f7fe fafd 	bl	8004864 <lfs_tag_id>
 800626a:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 800626c:	429c      	cmp	r4, r3
 800626e:	d203      	bcs.n	8006278 <lfs_dir_fetchmatch+0x700>
                besttag -= LFS_MKTAG(0, 1, 0);
 8006270:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006272:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8006276:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8006278:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d010      	beq.n	80062a2 <lfs_dir_fetchmatch+0x72a>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8006280:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe faee 	bl	8004864 <lfs_tag_id>
 8006288:	4603      	mov	r3, r0
 800628a:	461a      	mov	r2, r3
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	8a9b      	ldrh	r3, [r3, #20]
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f7fd fd78 	bl	8003d88 <lfs_min>
 8006298:	4603      	mov	r3, r0
 800629a:	b29a      	uxth	r2, r3
 800629c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062a0:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 80062a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe fa72 	bl	800478e <lfs_tag_isvalid>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <lfs_dir_fetchmatch+0x73c>
            return besttag;
 80062b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062b2:	e022      	b.n	80062fa <lfs_dir_fetchmatch+0x782>
        } else if (lfs_tag_id(besttag) < dir->count) {
 80062b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe fad4 	bl	8004864 <lfs_tag_id>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	8a9b      	ldrh	r3, [r3, #20]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d202      	bcs.n	80062ce <lfs_dir_fetchmatch+0x756>
            return LFS_ERR_NOENT;
 80062c8:	f06f 0301 	mvn.w	r3, #1
 80062cc:	e015      	b.n	80062fa <lfs_dir_fetchmatch+0x782>
        } else {
            return 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e013      	b.n	80062fa <lfs_dir_fetchmatch+0x782>
    for (int i = 0; i < 2; i++) {
 80062d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	f77f ad00 	ble.w	8005cda <lfs_dir_fetchmatch+0x162>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4909      	ldr	r1, [pc, #36]	@ (8006308 <lfs_dir_fetchmatch+0x790>)
 80062e4:	9101      	str	r1, [sp, #4]
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	f240 5235 	movw	r2, #1333	@ 0x535
 80062ee:	4907      	ldr	r1, [pc, #28]	@ (800630c <lfs_dir_fetchmatch+0x794>)
 80062f0:	4807      	ldr	r0, [pc, #28]	@ (8006310 <lfs_dir_fetchmatch+0x798>)
 80062f2:	f004 ff2b 	bl	800b14c <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 80062f6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3784      	adds	r7, #132	@ 0x84
 80062fe:	46bd      	mov	sp, r7
 8006300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006302:	bf00      	nop
 8006304:	7ffffc00 	.word	0x7ffffc00
 8006308:	0800c084 	.word	0x0800c084
 800630c:	0800bf90 	.word	0x0800bf90
 8006310:	0800c090 	.word	0x0800c090

08006314 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af04      	add	r7, sp, #16
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8006320:	2300      	movs	r3, #0
 8006322:	9303      	str	r3, [sp, #12]
 8006324:	2300      	movs	r3, #0
 8006326:	9302      	str	r3, [sp, #8]
 8006328:	2300      	movs	r3, #0
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff fc1c 	bl	8005b78 <lfs_dir_fetchmatch>
 8006340:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	@ 0x28
 8006350:	af02      	add	r7, sp, #8
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8006358:	f107 0310 	add.w	r3, r7, #16
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	4b12      	ldr	r3, [pc, #72]	@ (80063a8 <lfs_dir_getgstate+0x5c>)
 8006360:	4a12      	ldr	r2, [pc, #72]	@ (80063ac <lfs_dir_getgstate+0x60>)
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f7fe fed5 	bl	8005114 <lfs_dir_get>
 800636a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	2b00      	cmp	r3, #0
 8006370:	da05      	bge.n	800637e <lfs_dir_getgstate+0x32>
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f113 0f02 	cmn.w	r3, #2
 8006378:	d001      	beq.n	800637e <lfs_dir_getgstate+0x32>
        return res;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	e00f      	b.n	800639e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f113 0f02 	cmn.w	r3, #2
 8006384:	d00a      	beq.n	800639c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8006386:	f107 0310 	add.w	r3, r7, #16
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fb46 	bl	8004a1c <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8006390:	f107 0310 	add.w	r3, r7, #16
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fe fa95 	bl	80048c6 <lfs_gstate_xor>
    }

    return 0;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	7ff0000c 	.word	0x7ff0000c
 80063ac:	7ff00000 	.word	0x7ff00000

080063b0 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b08f      	sub	sp, #60	@ 0x3c
 80063b4:	af04      	add	r7, sp, #16
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	689c      	ldr	r4, [r3, #8]
 80063ce:	68b8      	ldr	r0, [r7, #8]
 80063d0:	f7fe fa58 	bl	8004884 <lfs_tag_size>
 80063d4:	4603      	mov	r3, r0
 80063d6:	4619      	mov	r1, r3
 80063d8:	4620      	mov	r0, r4
 80063da:	f7fd fcd5 	bl	8003d88 <lfs_min>
 80063de:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 80063e0:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 80063ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063ec:	6849      	ldr	r1, [r1, #4]
 80063ee:	69b8      	ldr	r0, [r7, #24]
 80063f0:	9003      	str	r0, [sp, #12]
 80063f2:	9102      	str	r1, [sp, #8]
 80063f4:	9201      	str	r2, [sp, #4]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	4622      	mov	r2, r4
 80063fc:	2100      	movs	r1, #0
 80063fe:	6a38      	ldr	r0, [r7, #32]
 8006400:	f7fd fee2 	bl	80041c8 <lfs_bd_cmp>
 8006404:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <lfs_dir_find_match+0x60>
        return res;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	e014      	b.n	800643a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	689c      	ldr	r4, [r3, #8]
 8006414:	68b8      	ldr	r0, [r7, #8]
 8006416:	f7fe fa35 	bl	8004884 <lfs_tag_size>
 800641a:	4603      	mov	r3, r0
 800641c:	429c      	cmp	r4, r3
 800641e:	d00b      	beq.n	8006438 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8006420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006422:	689c      	ldr	r4, [r3, #8]
 8006424:	68b8      	ldr	r0, [r7, #8]
 8006426:	f7fe fa2d 	bl	8004884 <lfs_tag_size>
 800642a:	4603      	mov	r3, r0
 800642c:	429c      	cmp	r4, r3
 800642e:	d201      	bcs.n	8006434 <lfs_dir_find_match+0x84>
 8006430:	2301      	movs	r3, #1
 8006432:	e002      	b.n	800643a <lfs_dir_find_match+0x8a>
 8006434:	2302      	movs	r3, #2
 8006436:	e000      	b.n	800643a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	372c      	adds	r7, #44	@ 0x2c
 800643e:	46bd      	mov	sp, r7
 8006440:	bd90      	pop	{r4, r7, pc}
	...

08006444 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8006444:	b590      	push	{r4, r7, lr}
 8006446:	b093      	sub	sp, #76	@ 0x4c
 8006448:	af04      	add	r7, sp, #16
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8006464:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8006466:	4b6e      	ldr	r3, [pc, #440]	@ (8006620 <lfs_dir_find+0x1dc>)
 8006468:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a1a      	ldr	r2, [r3, #32]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800647a:	496a      	ldr	r1, [pc, #424]	@ (8006624 <lfs_dir_find+0x1e0>)
 800647c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800647e:	f004 fef8 	bl	800b272 <strspn>
 8006482:	4602      	mov	r2, r0
 8006484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006486:	4413      	add	r3, r2
 8006488:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800648a:	4966      	ldr	r1, [pc, #408]	@ (8006624 <lfs_dir_find+0x1e0>)
 800648c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800648e:	f004 fedf 	bl	800b250 <strcspn>
 8006492:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	2b01      	cmp	r3, #1
 8006498:	d105      	bne.n	80064a6 <lfs_dir_find+0x62>
 800649a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800649c:	781a      	ldrb	r2, [r3, #0]
 800649e:	4b62      	ldr	r3, [pc, #392]	@ (8006628 <lfs_dir_find+0x1e4>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d00a      	beq.n	80064bc <lfs_dir_find+0x78>
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d10c      	bne.n	80064c6 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 80064ac:	2202      	movs	r2, #2
 80064ae:	495f      	ldr	r1, [pc, #380]	@ (800662c <lfs_dir_find+0x1e8>)
 80064b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80064b2:	f004 fea8 	bl	800b206 <memcmp>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <lfs_dir_find+0x82>
            name += namelen;
 80064bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c0:	4413      	add	r3, r2
 80064c2:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 80064c4:	e7d9      	b.n	800647a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 80064c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	4413      	add	r3, r2
 80064cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 80064ce:	2301      	movs	r3, #1
 80064d0:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 80064d2:	4954      	ldr	r1, [pc, #336]	@ (8006624 <lfs_dir_find+0x1e0>)
 80064d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064d6:	f004 fecc 	bl	800b272 <strspn>
 80064da:	4602      	mov	r2, r0
 80064dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064de:	4413      	add	r3, r2
 80064e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 80064e2:	4950      	ldr	r1, [pc, #320]	@ (8006624 <lfs_dir_find+0x1e0>)
 80064e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064e6:	f004 feb3 	bl	800b250 <strcspn>
 80064ea:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01d      	beq.n	800652e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d112      	bne.n	800651e <lfs_dir_find+0xda>
 80064f8:	2202      	movs	r2, #2
 80064fa:	494c      	ldr	r1, [pc, #304]	@ (800662c <lfs_dir_find+0x1e8>)
 80064fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80064fe:	f004 fe82 	bl	800b206 <memcmp>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <lfs_dir_find+0xda>
                depth -= 1;
 8006508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650a:	3b01      	subs	r3, #1
 800650c:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 800650e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006510:	2b00      	cmp	r3, #0
 8006512:	d107      	bne.n	8006524 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8006514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	4413      	add	r3, r2
 800651a:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 800651c:	e7ad      	b.n	800647a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	3301      	adds	r3, #1
 8006522:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 8006524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	4413      	add	r3, r2
 800652a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 800652c:	e7d1      	b.n	80064d2 <lfs_dir_find+0x8e>
                break;
 800652e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8006530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <lfs_dir_find+0xf8>
            return tag;
 8006538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653a:	e06c      	b.n	8006616 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006540:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe f963 	bl	8004810 <lfs_tag_type3>
 800654a:	4603      	mov	r3, r0
 800654c:	2b02      	cmp	r3, #2
 800654e:	d002      	beq.n	8006556 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8006550:	f06f 0313 	mvn.w	r3, #19
 8006554:	e05f      	b.n	8006616 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe f983 	bl	8004864 <lfs_tag_id>
 800655e:	4603      	mov	r3, r0
 8006560:	461a      	mov	r2, r3
 8006562:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8006566:	429a      	cmp	r2, r3
 8006568:	d01c      	beq.n	80065a4 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe f979 	bl	8004864 <lfs_tag_id>
 8006572:	4603      	mov	r3, r0
 8006574:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006576:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800657a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006582:	9200      	str	r2, [sp, #0]
 8006584:	4a2a      	ldr	r2, [pc, #168]	@ (8006630 <lfs_dir_find+0x1ec>)
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f7fe fdc3 	bl	8005114 <lfs_dir_get>
 800658e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	da01      	bge.n	800659a <lfs_dir_find+0x156>
                return res;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	e03d      	b.n	8006616 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	3318      	adds	r3, #24
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe f8c1 	bl	8004726 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 80065aa:	212f      	movs	r1, #47	@ 0x2f
 80065ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80065ae:	f004 fe42 	bl	800b236 <strchr>
 80065b2:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <lfs_dir_find+0x178>
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	e000      	b.n	80065be <lfs_dir_find+0x17a>
 80065bc:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	613a      	str	r2, [r7, #16]
 80065c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065c4:	617a      	str	r2, [r7, #20]
 80065c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c8:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80065ca:	f107 0210 	add.w	r2, r7, #16
 80065ce:	9203      	str	r2, [sp, #12]
 80065d0:	4a18      	ldr	r2, [pc, #96]	@ (8006634 <lfs_dir_find+0x1f0>)
 80065d2:	9202      	str	r2, [sp, #8]
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 80065de:	4622      	mov	r2, r4
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f7ff fac8 	bl	8005b78 <lfs_dir_fetchmatch>
 80065e8:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da01      	bge.n	80065f4 <lfs_dir_find+0x1b0>
                return tag;
 80065f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f2:	e010      	b.n	8006616 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 80065f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80065fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	4413      	add	r3, r2
 8006600:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 8006602:	e73a      	b.n	800647a <lfs_dir_find+0x36>
            if (!dir->split) {
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	7ddb      	ldrb	r3, [r3, #23]
 8006608:	f083 0301 	eor.w	r3, r3, #1
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0c8      	beq.n	80065a4 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8006612:	f06f 0301 	mvn.w	r3, #1
    }
}
 8006616:	4618      	mov	r0, r3
 8006618:	373c      	adds	r7, #60	@ 0x3c
 800661a:	46bd      	mov	sp, r7
 800661c:	bd90      	pop	{r4, r7, pc}
 800661e:	bf00      	nop
 8006620:	002ffc00 	.word	0x002ffc00
 8006624:	0800c0d0 	.word	0x0800c0d0
 8006628:	0800c0d4 	.word	0x0800c0d4
 800662c:	0800c0d8 	.word	0x0800c0d8
 8006630:	700ffc00 	.word	0x700ffc00
 8006634:	080063b1 	.word	0x080063b1

08006638 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b08b      	sub	sp, #44	@ 0x2c
 800663c:	af04      	add	r7, sp, #16
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f103 0010 	add.w	r0, r3, #16
 800664c:	68fc      	ldr	r4, [r7, #12]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	6852      	ldr	r2, [r2, #4]
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	9103      	str	r1, [sp, #12]
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	9102      	str	r1, [sp, #8]
 800665e:	9201      	str	r2, [sp, #4]
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	2300      	movs	r3, #0
 8006664:	4622      	mov	r2, r4
 8006666:	4601      	mov	r1, r0
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f7fd fef5 	bl	8004458 <lfs_bd_prog>
 800666e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <lfs_dir_commitprog+0x42>
        return err;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	e010      	b.n	800669c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4618      	mov	r0, r3
 8006684:	f004 f9bc 	bl	800aa00 <lfs_crc>
 8006688:	4602      	mov	r2, r0
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	441a      	add	r2, r3
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	605a      	str	r2, [r3, #4]
    return 0;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd90      	pop	{r4, r7, pc}

080066a4 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 80066a4:	b590      	push	{r4, r7, lr}
 80066a6:	b08f      	sub	sp, #60	@ 0x3c
 80066a8:	af04      	add	r7, sp, #16
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fe f8f3 	bl	800489e <lfs_tag_dsize>
 80066b8:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	441a      	add	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d902      	bls.n	80066d0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80066ca:	f06f 031b 	mvn.w	r3, #27
 80066ce:	e065      	b.n	800679c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	4053      	eors	r3, r2
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fd fbe6 	bl	8003eae <lfs_tobe32>
 80066e2:	4603      	mov	r3, r0
 80066e4:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80066e6:	f107 0214 	add.w	r2, r7, #20
 80066ea:	2304      	movs	r3, #4
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff ffa2 	bl	8006638 <lfs_dir_commitprog>
 80066f4:	61f8      	str	r0, [r7, #28]
    if (err) {
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <lfs_dir_commitattr+0x5c>
        return err;
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	e04d      	b.n	800679c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	db0c      	blt.n	8006720 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	3b04      	subs	r3, #4
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f7ff ff92 	bl	8006638 <lfs_dir_commitprog>
 8006714:	61f8      	str	r0, [r7, #28]
        if (err) {
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d039      	beq.n	8006790 <lfs_dir_commitattr+0xec>
            return err;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	e03d      	b.n	800679c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8006724:	2300      	movs	r3, #0
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24
 8006728:	e02d      	b.n	8006786 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800672a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800672c:	6a3a      	ldr	r2, [r7, #32]
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8006732:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800673c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800673e:	440a      	add	r2, r1
 8006740:	2101      	movs	r1, #1
 8006742:	9103      	str	r1, [sp, #12]
 8006744:	f107 0113 	add.w	r1, r7, #19
 8006748:	9102      	str	r1, [sp, #8]
 800674a:	9201      	str	r2, [sp, #4]
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	4623      	mov	r3, r4
 8006750:	4602      	mov	r2, r0
 8006752:	2100      	movs	r1, #0
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7fd fbf3 	bl	8003f40 <lfs_bd_read>
 800675a:	61f8      	str	r0, [r7, #28]
            if (err) {
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <lfs_dir_commitattr+0xc2>
                return err;
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	e01a      	b.n	800679c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8006766:	f107 0213 	add.w	r2, r7, #19
 800676a:	2301      	movs	r3, #1
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff ff62 	bl	8006638 <lfs_dir_commitprog>
 8006774:	61f8      	str	r0, [r7, #28]
            if (err) {
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <lfs_dir_commitattr+0xdc>
                return err;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	e00d      	b.n	800679c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	3301      	adds	r3, #1
 8006784:	627b      	str	r3, [r7, #36]	@ 0x24
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	3b04      	subs	r3, #4
 800678a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678c:	429a      	cmp	r2, r3
 800678e:	d3cc      	bcc.n	800672a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	609a      	str	r2, [r3, #8]
    return 0;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	372c      	adds	r7, #44	@ 0x2c
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd90      	pop	{r4, r7, pc}

080067a4 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b097      	sub	sp, #92	@ 0x5c
 80067a8:	af04      	add	r7, sp, #16
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 80067b2:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067ba:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f7fd fae2 	bl	8003d88 <lfs_min>
 80067c4:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067ca:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f7fd faff 	bl	8003dd2 <lfs_alignup>
 80067d4:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80067de:	e0fe      	b.n	80069de <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	3b04      	subs	r3, #4
 80067ea:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fd faca 	bl	8003d88 <lfs_min>
 80067f4:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	4413      	add	r3, r2
        lfs_off_t noff = (
 80067fc:	3304      	adds	r3, #4
 80067fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8006800:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006804:	429a      	cmp	r2, r3
 8006806:	d206      	bcs.n	8006816 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8006808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680a:	3b14      	subs	r3, #20
 800680c:	4619      	mov	r1, r3
 800680e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006810:	f7fd faba 	bl	8003d88 <lfs_min>
 8006814:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = -1;
 8006816:	23ff      	movs	r3, #255	@ 0xff
 8006818:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800681a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681e:	429a      	cmp	r2, r3
 8006820:	d35f      	bcc.n	80068e2 <lfs_dir_commitcrc+0x13e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006826:	69da      	ldr	r2, [r3, #28]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006832:	429a      	cmp	r2, r3
 8006834:	d855      	bhi.n	80068e2 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8006836:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800683c:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2201      	movs	r2, #1
 8006844:	9203      	str	r2, [sp, #12]
 8006846:	f107 021b 	add.w	r2, r7, #27
 800684a:	9202      	str	r2, [sp, #8]
 800684c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800684e:	9201      	str	r2, [sp, #4]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4603      	mov	r3, r0
 8006854:	460a      	mov	r2, r1
 8006856:	2100      	movs	r1, #0
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7fd fb71 	bl	8003f40 <lfs_bd_read>
 800685e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8006860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <lfs_dir_commitcrc+0xce>
 8006866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006868:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800686c:	d001      	beq.n	8006872 <lfs_dir_commitcrc+0xce>
                return err;
 800686e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006870:	e101      	b.n	8006a76 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006876:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800687e:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8006880:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006886:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	f107 0108 	add.w	r1, r7, #8
 8006892:	3104      	adds	r1, #4
 8006894:	9103      	str	r1, [sp, #12]
 8006896:	9202      	str	r2, [sp, #8]
 8006898:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800689a:	9201      	str	r2, [sp, #4]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4623      	mov	r3, r4
 80068a0:	4602      	mov	r2, r0
 80068a2:	2100      	movs	r1, #0
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7fd fce0 	bl	800426a <lfs_bd_crc>
 80068aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 80068ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <lfs_dir_commitcrc+0x11a>
 80068b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80068b8:	d001      	beq.n	80068be <lfs_dir_commitcrc+0x11a>
                    return err;
 80068ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068bc:	e0db      	b.n	8006a76 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 80068be:	f107 0308 	add.w	r3, r7, #8
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe f902 	bl	8004acc <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 80068c8:	f107 0308 	add.w	r3, r7, #8
 80068cc:	4a6c      	ldr	r2, [pc, #432]	@ (8006a80 <lfs_dir_commitcrc+0x2dc>)
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff fee7 	bl	80066a4 <lfs_dir_commitattr>
 80068d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 80068d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <lfs_dir_commitcrc+0x13e>
                    return err;
 80068de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e0:	e0c9      	b.n	8006a76 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 80068e2:	7efb      	ldrb	r3, [r7, #27]
 80068e4:	43db      	mvns	r3, r3
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	09db      	lsrs	r3, r3, #7
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f0:	051a      	lsls	r2, r3, #20
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068f8:	1acb      	subs	r3, r1, r3
 80068fa:	3b04      	subs	r3, #4
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 8006902:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8006906:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690e:	4053      	eors	r3, r2
 8006910:	4618      	mov	r0, r3
 8006912:	f7fd facc 	bl	8003eae <lfs_tobe32>
 8006916:	4603      	mov	r3, r0
 8006918:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f107 0110 	add.w	r1, r7, #16
 8006922:	2204      	movs	r2, #4
 8006924:	4618      	mov	r0, r3
 8006926:	f004 f86b 	bl	800aa00 <lfs_crc>
 800692a:	4602      	mov	r2, r0
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	4618      	mov	r0, r3
 8006936:	f7fd faa2 	bl	8003e7e <lfs_tole32>
 800693a:	4603      	mov	r3, r0
 800693c:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f103 0010 	add.w	r0, r3, #16
 8006944:	687c      	ldr	r4, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	6852      	ldr	r2, [r2, #4]
 800694e:	2108      	movs	r1, #8
 8006950:	9103      	str	r1, [sp, #12]
 8006952:	f107 0110 	add.w	r1, r7, #16
 8006956:	9102      	str	r1, [sp, #8]
 8006958:	9201      	str	r2, [sp, #4]
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	2300      	movs	r3, #0
 800695e:	4622      	mov	r2, r4
 8006960:	4601      	mov	r1, r0
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fd fd78 	bl	8004458 <lfs_bd_prog>
 8006968:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <lfs_dir_commitcrc+0x1d0>
            return err;
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	e080      	b.n	8006a76 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8006974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	3304      	adds	r3, #4
 8006980:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800698c:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 800698e:	7efb      	ldrb	r3, [r7, #27]
 8006990:	43db      	mvns	r3, r3
 8006992:	061b      	lsls	r3, r3, #24
 8006994:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699a:	405a      	eors	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069a6:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 80069a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d208      	bcs.n	80069c2 <lfs_dir_commitcrc+0x21e>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	695a      	ldr	r2, [r3, #20]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ba:	4413      	add	r3, r2
 80069bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069be:	429a      	cmp	r2, r3
 80069c0:	d30d      	bcc.n	80069de <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f103 0110 	add.w	r1, r3, #16
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	2300      	movs	r3, #0
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7fd fd0f 	bl	80043f0 <lfs_bd_sync>
 80069d2:	6238      	str	r0, [r7, #32]
            if (err) {
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <lfs_dir_commitcrc+0x23a>
                return err;
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	e04b      	b.n	8006a76 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069e4:	429a      	cmp	r2, r3
 80069e6:	f63f aefb 	bhi.w	80067e0 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 80069f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069f4:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069fa:	1d1c      	adds	r4, r3, #4
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a04:	1a8a      	subs	r2, r1, r2
 8006a06:	f107 011c 	add.w	r1, r7, #28
 8006a0a:	9103      	str	r1, [sp, #12]
 8006a0c:	9202      	str	r2, [sp, #8]
 8006a0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a10:	9201      	str	r2, [sp, #4]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	4623      	mov	r3, r4
 8006a16:	4602      	mov	r2, r0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fd fc25 	bl	800426a <lfs_bd_crc>
 8006a20:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <lfs_dir_commitcrc+0x288>
        return err;
 8006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2a:	e024      	b.n	8006a76 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d002      	beq.n	8006a3a <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8006a34:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006a38:	e01d      	b.n	8006a76 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f107 021c 	add.w	r2, r7, #28
 8006a44:	9203      	str	r2, [sp, #12]
 8006a46:	2204      	movs	r2, #4
 8006a48:	9202      	str	r2, [sp, #8]
 8006a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a4c:	9201      	str	r2, [sp, #4]
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	2304      	movs	r3, #4
 8006a52:	460a      	mov	r2, r1
 8006a54:	2100      	movs	r1, #0
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fd fc07 	bl	800426a <lfs_bd_crc>
 8006a5c:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <lfs_dir_commitcrc+0x2c4>
        return err;
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	e006      	b.n	8006a76 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8006a6e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8006a72:	e000      	b.n	8006a76 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	374c      	adds	r7, #76	@ 0x4c
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd90      	pop	{r4, r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	5ffffc08 	.word	0x5ffffc08

08006a84 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	@ 0x28
 8006a88:	af04      	add	r7, sp, #16
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	e016      	b.n	8006ac2 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	3301      	adds	r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	bfb8      	it	lt
 8006aa0:	425b      	neglt	r3, r3
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fe f998 	bl	8004de0 <lfs_alloc>
 8006ab0:	60f8      	str	r0, [r7, #12]
        if (err) {
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <lfs_dir_alloc+0x38>
            return err;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	e058      	b.n	8006b6e <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	dde5      	ble.n	8006a94 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8006ad8:	2004      	movs	r0, #4
 8006ada:	9003      	str	r0, [sp, #12]
 8006adc:	9202      	str	r2, [sp, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	9201      	str	r2, [sp, #4]
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	460a      	mov	r2, r1
 8006ae8:	2100      	movs	r1, #0
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7fd fa28 	bl	8003f40 <lfs_bd_read>
 8006af0:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fd f9b6 	bl	8003e68 <lfs_fromle32>
 8006afc:	4602      	mov	r2, r0
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <lfs_dir_alloc+0x90>
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006b0e:	d001      	beq.n	8006b14 <lfs_dir_alloc+0x90>
        return err;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	e02c      	b.n	8006b6e <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dd0e      	ble.n	8006b3c <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	3301      	adds	r3, #1
 8006b2a:	f043 0301 	orr.w	r3, r3, #1
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f7fd f94e 	bl	8003dd2 <lfs_alignup>
 8006b36:	4602      	mov	r2, r0
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2204      	movs	r2, #4
 8006b40:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b48:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b56:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b5e:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2200      	movs	r2, #0
 8006b64:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b092      	sub	sp, #72	@ 0x48
 8006b7a:	af04      	add	r7, sp, #16
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8006b84:	f107 0310 	add.w	r3, r7, #16
 8006b88:	4619      	mov	r1, r3
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff ff7a 	bl	8006a84 <lfs_dir_alloc>
 8006b90:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 8006b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <lfs_dir_split+0x26>
        return err;
 8006b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b9a:	e03c      	b.n	8006c16 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	7ddb      	ldrb	r3, [r3, #23]
 8006ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8006bb0:	f107 0110 	add.w	r1, r7, #16
 8006bb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006bb8:	9302      	str	r3, [sp, #8]
 8006bba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f879 	bl	8006cc0 <lfs_dir_compact>
 8006bce:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	da01      	bge.n	8006bda <lfs_dir_split+0x64>
        return res;
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd8:	e01d      	b.n	8006c16 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2201      	movs	r2, #1
 8006bea:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3320      	adds	r3, #32
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f7fd fd3f 	bl	8004678 <lfs_pair_cmp>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <lfs_dir_split+0x9e>
 8006c00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d105      	bne.n	8006c14 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3738      	adds	r7, #56	@ 0x38
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b086      	sub	sp, #24
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8006c2e:	68b8      	ldr	r0, [r7, #8]
 8006c30:	f7fd fe35 	bl	800489e <lfs_tag_dsize>
 8006c34:	4602      	mov	r2, r0
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	441a      	add	r2, r3
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	601a      	str	r2, [r3, #0]
    return 0;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b086      	sub	sp, #24
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	6859      	ldr	r1, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	f7ff fd1d 	bl	80066a4 <lfs_dir_commitattr>
 8006c6a:	4603      	mov	r3, r0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	dd11      	ble.n	8006cac <lfs_dir_needsrelocation+0x38>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006c92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c94:	3201      	adds	r2, #1
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c9e:	fb01 f202 	mul.w	r2, r1, r2
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <lfs_dir_needsrelocation+0x38>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <lfs_dir_needsrelocation+0x3a>
 8006cac:	2300      	movs	r3, #0
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	b2db      	uxtb	r3, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b0a4      	sub	sp, #144	@ 0x90
 8006cc4:	af0a      	add	r7, sp, #40	@ 0x28
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f7ff ffcc 	bl	8006c74 <lfs_dir_needsrelocation>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8006cec:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00e      	beq.n	8006d12 <lfs_dir_compact+0x52>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	657a      	str	r2, [r7, #84]	@ 0x54
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cfe:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fd fcb7 	bl	8004678 <lfs_pair_cmp>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f040 8155 	bne.w	8006fbc <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d18:	2300      	movs	r3, #0
 8006d1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d28:	2300      	movs	r3, #0
 8006d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <lfs_dir_compact+0x80>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d3c:	3b08      	subs	r3, #8
 8006d3e:	e003      	b.n	8006d48 <lfs_dir_compact+0x88>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8006d48:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7fd fc2f 	bl	80045b4 <lfs_bd_erase>
 8006d56:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8006d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d006      	beq.n	8006d6c <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8006d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d60:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006d64:	f000 812c 	beq.w	8006fc0 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8006d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d6a:	e188      	b.n	800707e <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fd f884 	bl	8003e7e <lfs_tole32>
 8006d76:	4602      	mov	r2, r0
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8006d82:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8006d86:	2304      	movs	r3, #4
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f7ff fc55 	bl	8006638 <lfs_dir_commitprog>
 8006d8e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fd f867 	bl	8003e68 <lfs_fromle32>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	609a      	str	r2, [r3, #8]
            if (err) {
 8006da0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d006      	beq.n	8006db4 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8006da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006da8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006dac:	f000 810a 	beq.w	8006fc4 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8006db0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006db2:	e164      	b.n	800707e <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8006db4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8006db8:	425b      	negs	r3, r3
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	637a      	str	r2, [r7, #52]	@ 0x34
 8006dc2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8006dc6:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 8006dc8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8006dcc:	9208      	str	r2, [sp, #32]
 8006dce:	4aae      	ldr	r2, [pc, #696]	@ (8007088 <lfs_dir_compact+0x3c8>)
 8006dd0:	9207      	str	r2, [sp, #28]
 8006dd2:	9306      	str	r3, [sp, #24]
 8006dd4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8006dd8:	9305      	str	r3, [sp, #20]
 8006dda:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8006dde:	9304      	str	r3, [sp, #16]
 8006de0:	2300      	movs	r3, #0
 8006de2:	9303      	str	r3, [sp, #12]
 8006de4:	4ba9      	ldr	r3, [pc, #676]	@ (800708c <lfs_dir_compact+0x3cc>)
 8006de6:	9302      	str	r3, [sp, #8]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006df4:	2200      	movs	r2, #0
 8006df6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f7fe fadd 	bl	80053b8 <lfs_dir_traverse>
 8006dfe:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 8006e00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d006      	beq.n	8006e14 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8006e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e08:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006e0c:	f000 80dc 	beq.w	8006fc8 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8006e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e12:	e134      	b.n	800707e <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	3318      	adds	r3, #24
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fd fc12 	bl	8004642 <lfs_pair_isnull>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	f083 0301 	eor.w	r3, r3, #1
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d022      	beq.n	8006e70 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	3318      	adds	r3, #24
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fd fc93 	bl	800475a <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	7ddb      	ldrb	r3, [r3, #23]
 8006e38:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8006e3c:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8006e3e:	4a94      	ldr	r2, [pc, #592]	@ (8007090 <lfs_dir_compact+0x3d0>)
 8006e40:	431a      	orrs	r2, r3
                        dir->tail);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8006e46:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7ff fc2a 	bl	80066a4 <lfs_dir_commitattr>
 8006e50:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3318      	adds	r3, #24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fd fc65 	bl	8004726 <lfs_pair_fromle32>
                if (err) {
 8006e5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d006      	beq.n	8006e70 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8006e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e64:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006e68:	f000 80b0 	beq.w	8006fcc <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8006e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e6e:	e106      	b.n	800707e <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8006e70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8006e7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e80:	f083 0301 	eor.w	r3, r3, #1
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d011      	beq.n	8006eae <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8006e90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fd fd15 	bl	80048c6 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ea2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fd fd0c 	bl	80048c6 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8006eb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fd fd03 	bl	80048c6 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8006ecc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff fa39 	bl	800634c <lfs_dir_getgstate>
 8006eda:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8006edc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <lfs_dir_compact+0x226>
                return err;
 8006ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ee4:	e0cb      	b.n	800707e <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8006ee6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fd fd10 	bl	8004910 <lfs_gstate_iszero>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f083 0301 	eor.w	r3, r3, #1
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d016      	beq.n	8006f2a <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8006efc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fd fdab 	bl	8004a5c <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8006f06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f0a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8006f0e:	4a61      	ldr	r2, [pc, #388]	@ (8007094 <lfs_dir_compact+0x3d4>)
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7ff fbc7 	bl	80066a4 <lfs_dir_commitattr>
 8006f16:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8006f18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8006f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f20:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006f24:	d054      	beq.n	8006fd0 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8006f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f28:	e0a9      	b.n	800707e <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8006f2a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7ff fc37 	bl	80067a4 <lfs_dir_commitcrc>
 8006f36:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8006f38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d005      	beq.n	8006f4a <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8006f3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f40:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8006f44:	d046      	beq.n	8006fd4 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8006f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f48:	e099      	b.n	800707e <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8006f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006f50:	6992      	ldr	r2, [r2, #24]
 8006f52:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f56:	fb01 f202 	mul.w	r2, r1, r2
 8006f5a:	1a9b      	subs	r3, r3, r2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d006      	beq.n	8006f6e <lfs_dir_compact+0x2ae>
 8006f60:	4b4d      	ldr	r3, [pc, #308]	@ (8007098 <lfs_dir_compact+0x3d8>)
 8006f62:	4a4e      	ldr	r2, [pc, #312]	@ (800709c <lfs_dir_compact+0x3dc>)
 8006f64:	f240 71e2 	movw	r1, #2018	@ 0x7e2
 8006f68:	484d      	ldr	r0, [pc, #308]	@ (80070a0 <lfs_dir_compact+0x3e0>)
 8006f6a:	f003 ff3f 	bl	800adec <__assert_func>
            lfs_pair_swap(dir->pair);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fd fb51 	bl	8004618 <lfs_pair_swap>
            dir->count = end - begin;
 8006f76:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8006f7a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8006f86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8006f8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3348      	adds	r3, #72	@ 0x48
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	605a      	str	r2, [r3, #4]
 8006f9c:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8006f9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fa2:	f083 0301 	eor.w	r3, r3, #1
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d065      	beq.n	8007078 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	333c      	adds	r3, #60	@ 0x3c
 8006fb2:	3230      	adds	r2, #48	@ 0x30
 8006fb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8006fb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8006fba:	e05d      	b.n	8007078 <lfs_dir_compact+0x3b8>
        goto relocate;
 8006fbc:	bf00      	nop
 8006fbe:	e00a      	b.n	8006fd6 <lfs_dir_compact+0x316>
                    goto relocate;
 8006fc0:	bf00      	nop
 8006fc2:	e008      	b.n	8006fd6 <lfs_dir_compact+0x316>
                    goto relocate;
 8006fc4:	bf00      	nop
 8006fc6:	e006      	b.n	8006fd6 <lfs_dir_compact+0x316>
                    goto relocate;
 8006fc8:	bf00      	nop
 8006fca:	e004      	b.n	8006fd6 <lfs_dir_compact+0x316>
                        goto relocate;
 8006fcc:	bf00      	nop
 8006fce:	e002      	b.n	8006fd6 <lfs_dir_compact+0x316>
                        goto relocate;
 8006fd0:	bf00      	nop
 8006fd2:	e000      	b.n	8006fd6 <lfs_dir_compact+0x316>
                    goto relocate;
 8006fd4:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3310      	adds	r3, #16
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7fc ff86 	bl	8003ef4 <lfs_cache_drop>
        if (!tired) {
 8006fe8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8006fec:	f083 0301 	eor.w	r3, r3, #1
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d009      	beq.n	800700a <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80070a4 <lfs_dir_compact+0x3e4>)
 8006ffc:	9200      	str	r2, [sp, #0]
 8006ffe:	f240 72f4 	movw	r2, #2036	@ 0x7f4
 8007002:	4927      	ldr	r1, [pc, #156]	@ (80070a0 <lfs_dir_compact+0x3e0>)
 8007004:	4828      	ldr	r0, [pc, #160]	@ (80070a8 <lfs_dir_compact+0x3e8>)
 8007006:	f004 f8a1 	bl	800b14c <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2200      	movs	r2, #0
 800700e:	617a      	str	r2, [r7, #20]
 8007010:	2201      	movs	r2, #1
 8007012:	61ba      	str	r2, [r7, #24]
 8007014:	f107 0214 	add.w	r2, r7, #20
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f7fd fb2c 	bl	8004678 <lfs_pair_cmp>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10c      	bne.n	8007040 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4a1e      	ldr	r2, [pc, #120]	@ (80070a4 <lfs_dir_compact+0x3e4>)
 800702c:	9200      	str	r2, [sp, #0]
 800702e:	f240 72f9 	movw	r2, #2041	@ 0x7f9
 8007032:	491b      	ldr	r1, [pc, #108]	@ (80070a0 <lfs_dir_compact+0x3e0>)
 8007034:	481d      	ldr	r0, [pc, #116]	@ (80070ac <lfs_dir_compact+0x3ec>)
 8007036:	f004 f889 	bl	800b14c <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800703a:	f06f 031b 	mvn.w	r3, #27
 800703e:	e01e      	b.n	800707e <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7fd feca 	bl	8004de0 <lfs_alloc>
 800704c:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800704e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00c      	beq.n	800706e <lfs_dir_compact+0x3ae>
 8007054:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007056:	f113 0f1c 	cmn.w	r3, #28
 800705a:	d106      	bne.n	800706a <lfs_dir_compact+0x3aa>
 800705c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8007060:	f083 0301 	eor.w	r3, r3, #1
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <lfs_dir_compact+0x3ae>
            return err;
 800706a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800706c:	e007      	b.n	800707e <lfs_dir_compact+0x3be>
        }

        tired = false;
 800706e:	2300      	movs	r3, #0
 8007070:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8007074:	bf00      	nop
    while (true) {
 8007076:	e64c      	b.n	8006d12 <lfs_dir_compact+0x52>
        break;
 8007078:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 800707a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800707e:	4618      	mov	r0, r3
 8007080:	3768      	adds	r7, #104	@ 0x68
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	08006c4b 	.word	0x08006c4b
 800708c:	400ffc00 	.word	0x400ffc00
 8007090:	000ffc08 	.word	0x000ffc08
 8007094:	7ffffc0c 	.word	0x7ffffc0c
 8007098:	0800c0dc 	.word	0x0800c0dc
 800709c:	0800ca40 	.word	0x0800ca40
 80070a0:	0800bf90 	.word	0x0800bf90
 80070a4:	0800c084 	.word	0x0800c084
 80070a8:	0800c104 	.word	0x0800c104
 80070ac:	0800c128 	.word	0x0800c128

080070b0 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80070b0:	b590      	push	{r4, r7, lr}
 80070b2:	b097      	sub	sp, #92	@ 0x5c
 80070b4:	af0a      	add	r7, sp, #40	@ 0x28
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80070be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80070c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 80070c4:	e058      	b.n	8007178 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80070ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070d0:	b292      	uxth	r2, r2
 80070d2:	4252      	negs	r2, r2
 80070d4:	b292      	uxth	r2, r2
 80070d6:	b212      	sxth	r2, r2
 80070d8:	f107 0118 	add.w	r1, r7, #24
 80070dc:	9108      	str	r1, [sp, #32]
 80070de:	4979      	ldr	r1, [pc, #484]	@ (80072c4 <lfs_dir_splittingcompact+0x214>)
 80070e0:	9107      	str	r1, [sp, #28]
 80070e2:	9206      	str	r2, [sp, #24]
 80070e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80070e8:	9205      	str	r2, [sp, #20]
 80070ea:	9304      	str	r3, [sp, #16]
 80070ec:	2300      	movs	r3, #0
 80070ee:	9303      	str	r3, [sp, #12]
 80070f0:	4b75      	ldr	r3, [pc, #468]	@ (80072c8 <lfs_dir_splittingcompact+0x218>)
 80070f2:	9302      	str	r3, [sp, #8]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007100:	2200      	movs	r2, #0
 8007102:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f7fe f957 	bl	80053b8 <lfs_dir_traverse>
 800710a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 800710c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <lfs_dir_splittingcompact+0x66>
                return err;
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	e0d1      	b.n	80072ba <lfs_dir_splittingcompact+0x20a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8007116:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800711a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007120:	d822      	bhi.n	8007168 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007126:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8007128:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    && size <= lfs_min(
 8007132:	2b00      	cmp	r3, #0
 8007134:	d004      	beq.n	8007140 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800713a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    && size <= lfs_min(
 800713c:	085b      	lsrs	r3, r3, #1
 800713e:	e003      	b.n	8007148 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007144:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8007146:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800714c:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(
 800714e:	4611      	mov	r1, r2
 8007150:	4618      	mov	r0, r3
 8007152:	f7fc fe3e 	bl	8003dd2 <lfs_alignup>
 8007156:	4603      	mov	r3, r0
 8007158:	4619      	mov	r1, r3
 800715a:	4620      	mov	r0, r4
 800715c:	f7fc fe14 	bl	8003d88 <lfs_min>
 8007160:	4602      	mov	r2, r0
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	429a      	cmp	r2, r3
 8007166:	d20e      	bcs.n	8007186 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8007168:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800716c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	085b      	lsrs	r3, r3, #1
 8007172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007174:	4413      	add	r3, r2
 8007176:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8007178:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800717c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b01      	cmp	r3, #1
 8007182:	d8a0      	bhi.n	80070c6 <lfs_dir_splittingcompact+0x16>
 8007184:	e000      	b.n	8007188 <lfs_dir_splittingcompact+0xd8>
                break;
 8007186:	bf00      	nop
        }

        if (split == begin) {
 8007188:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800718c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800718e:	429a      	cmp	r2, r3
 8007190:	d02d      	beq.n	80071ee <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8007192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007194:	b29b      	uxth	r3, r3
 8007196:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800719a:	9202      	str	r2, [sp, #8]
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7ff fce4 	bl	8006b76 <lfs_dir_split>
 80071ae:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <lfs_dir_splittingcompact+0x112>
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	f113 0f1c 	cmn.w	r3, #28
 80071bc:	d001      	beq.n	80071c2 <lfs_dir_splittingcompact+0x112>
            return err;
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	e07b      	b.n	80072ba <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 80071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00e      	beq.n	80071e6 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	493e      	ldr	r1, [pc, #248]	@ (80072cc <lfs_dir_splittingcompact+0x21c>)
 80071d2:	9101      	str	r1, [sp, #4]
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	4613      	mov	r3, r2
 80071d8:	f640 024c 	movw	r2, #2124	@ 0x84c
 80071dc:	493c      	ldr	r1, [pc, #240]	@ (80072d0 <lfs_dir_splittingcompact+0x220>)
 80071de:	483d      	ldr	r0, [pc, #244]	@ (80072d4 <lfs_dir_splittingcompact+0x224>)
 80071e0:	f003 ffb4 	bl	800b14c <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 80071e4:	e004      	b.n	80071f0 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 80071e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 80071ec:	e767      	b.n	80070be <lfs_dir_splittingcompact+0xe>
            break;
 80071ee:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f7ff fd3e 	bl	8006c74 <lfs_dir_needsrelocation>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d04e      	beq.n	800729c <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2200      	movs	r2, #0
 8007202:	613a      	str	r2, [r7, #16]
 8007204:	2201      	movs	r2, #1
 8007206:	617a      	str	r2, [r7, #20]
 8007208:	f107 0210 	add.w	r2, r7, #16
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f7fd fa32 	bl	8004678 <lfs_pair_cmp>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d140      	bne.n	800729c <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f003 fad4 	bl	800a7c8 <lfs_fs_rawsize>
 8007220:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	2b00      	cmp	r3, #0
 8007226:	da01      	bge.n	800722c <lfs_dir_splittingcompact+0x17c>
            return size;
 8007228:	6a3b      	ldr	r3, [r7, #32]
 800722a:	e046      	b.n	80072ba <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	085a      	lsrs	r2, r3, #1
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	429a      	cmp	r2, r3
 8007238:	d930      	bls.n	800729c <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	4a23      	ldr	r2, [pc, #140]	@ (80072cc <lfs_dir_splittingcompact+0x21c>)
 8007240:	9200      	str	r2, [sp, #0]
 8007242:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007246:	4922      	ldr	r1, [pc, #136]	@ (80072d0 <lfs_dir_splittingcompact+0x220>)
 8007248:	4823      	ldr	r0, [pc, #140]	@ (80072d8 <lfs_dir_splittingcompact+0x228>)
 800724a:	f003 ff7f 	bl	800b14c <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800724e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007252:	9302      	str	r3, [sp, #8]
 8007254:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f7ff fc86 	bl	8006b76 <lfs_dir_split>
 800726a:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <lfs_dir_splittingcompact+0x1ce>
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	f113 0f1c 	cmn.w	r3, #28
 8007278:	d001      	beq.n	800727e <lfs_dir_splittingcompact+0x1ce>
                return err;
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	e01d      	b.n	80072ba <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d007      	beq.n	8007294 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8007284:	4b11      	ldr	r3, [pc, #68]	@ (80072cc <lfs_dir_splittingcompact+0x21c>)
 8007286:	f640 026a 	movw	r2, #2154	@ 0x86a
 800728a:	4911      	ldr	r1, [pc, #68]	@ (80072d0 <lfs_dir_splittingcompact+0x220>)
 800728c:	4813      	ldr	r0, [pc, #76]	@ (80072dc <lfs_dir_splittingcompact+0x22c>)
 800728e:	f003 ff5d 	bl	800b14c <iprintf>
 8007292:	e003      	b.n	800729c <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8007294:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007298:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 800729c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80072a0:	9302      	str	r3, [sp, #8]
 80072a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7ff fd04 	bl	8006cc0 <lfs_dir_compact>
 80072b8:	4603      	mov	r3, r0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3734      	adds	r7, #52	@ 0x34
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd90      	pop	{r4, r7, pc}
 80072c2:	bf00      	nop
 80072c4:	08006c1f 	.word	0x08006c1f
 80072c8:	400ffc00 	.word	0x400ffc00
 80072cc:	0800c084 	.word	0x0800c084
 80072d0:	0800bf90 	.word	0x0800bf90
 80072d4:	0800c160 	.word	0x0800c160
 80072d8:	0800c190 	.word	0x0800c190
 80072dc:	0800c1c0 	.word	0x0800c1c0

080072e0 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 80072e0:	b5b0      	push	{r4, r5, r7, lr}
 80072e2:	b0a6      	sub	sp, #152	@ 0x98
 80072e4:	af0a      	add	r7, sp, #40	@ 0x28
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
    int state = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80072f2:	2300      	movs	r3, #0
 80072f4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 80072f8:	2300      	movs	r3, #0
 80072fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80072fc:	e06d      	b.n	80073da <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80072fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007300:	00db      	lsls	r3, r3, #3
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	4413      	add	r3, r2
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4618      	mov	r0, r3
 800730a:	f7fd fa81 	bl	8004810 <lfs_tag_type3>
 800730e:	4603      	mov	r3, r0
 8007310:	461a      	mov	r2, r3
 8007312:	f240 4301 	movw	r3, #1025	@ 0x401
 8007316:	429a      	cmp	r2, r3
 8007318:	d106      	bne.n	8007328 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	8a9b      	ldrh	r3, [r3, #20]
 800731e:	3301      	adds	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	829a      	strh	r2, [r3, #20]
 8007326:	e055      	b.n	80073d4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8007328:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	4413      	add	r3, r2
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f7fd fa6c 	bl	8004810 <lfs_tag_type3>
 8007338:	4603      	mov	r3, r0
 800733a:	461a      	mov	r2, r3
 800733c:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8007340:	429a      	cmp	r2, r3
 8007342:	d114      	bne.n	800736e <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	8a9b      	ldrh	r3, [r3, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <lfs_dir_relocatingcommit+0x7a>
 800734c:	4ba4      	ldr	r3, [pc, #656]	@ (80075e0 <lfs_dir_relocatingcommit+0x300>)
 800734e:	4aa5      	ldr	r2, [pc, #660]	@ (80075e4 <lfs_dir_relocatingcommit+0x304>)
 8007350:	f640 0182 	movw	r1, #2178	@ 0x882
 8007354:	48a4      	ldr	r0, [pc, #656]	@ (80075e8 <lfs_dir_relocatingcommit+0x308>)
 8007356:	f003 fd49 	bl	800adec <__assert_func>
            dir->count -= 1;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	8a9b      	ldrh	r3, [r3, #20]
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 800736c:	e032      	b.n	80073d4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800736e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007370:	00db      	lsls	r3, r3, #3
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	4413      	add	r3, r2
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f7fd fa29 	bl	80047d0 <lfs_tag_type1>
 800737e:	4603      	mov	r3, r0
 8007380:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007384:	d126      	bne.n	80073d4 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8007386:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	4413      	add	r3, r2
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8007396:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	4413      	add	r3, r2
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80073a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	4413      	add	r3, r2
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fd fa3d 	bl	8004830 <lfs_tag_chunk>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	bf14      	ite	ne
 80073c0:	2301      	movne	r3, #1
 80073c2:	2300      	moveq	r3, #0
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	3318      	adds	r3, #24
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fd f9a9 	bl	8004726 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 80073d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073d6:	3301      	adds	r3, #1
 80073d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80073da:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80073dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073e0:	429a      	cmp	r2, r3
 80073e2:	db8c      	blt.n	80072fe <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 80073e4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d02b      	beq.n	8007444 <lfs_dir_relocatingcommit+0x164>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	8a9b      	ldrh	r3, [r3, #20]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d127      	bne.n	8007444 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80073f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d106      	bne.n	800740a <lfs_dir_relocatingcommit+0x12a>
 80073fc:	4b7b      	ldr	r3, [pc, #492]	@ (80075ec <lfs_dir_relocatingcommit+0x30c>)
 80073fe:	4a79      	ldr	r2, [pc, #484]	@ (80075e4 <lfs_dir_relocatingcommit+0x304>)
 8007400:	f640 018f 	movw	r1, #2191	@ 0x88f
 8007404:	4878      	ldr	r0, [pc, #480]	@ (80075e8 <lfs_dir_relocatingcommit+0x308>)
 8007406:	f003 fcf1 	bl	800adec <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007410:	4619      	mov	r1, r3
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f002 fd32 	bl	8009e7c <lfs_fs_pred>
 8007418:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 800741a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <lfs_dir_relocatingcommit+0x14c>
 8007420:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007422:	f113 0f02 	cmn.w	r3, #2
 8007426:	d001      	beq.n	800742c <lfs_dir_relocatingcommit+0x14c>
            return err;
 8007428:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800742a:	e204      	b.n	8007836 <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800742c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800742e:	f113 0f02 	cmn.w	r3, #2
 8007432:	d007      	beq.n	8007444 <lfs_dir_relocatingcommit+0x164>
 8007434:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007438:	7ddb      	ldrb	r3, [r3, #23]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800743e:	2302      	movs	r3, #2
 8007440:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 8007442:	e121      	b.n	8007688 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	7d9b      	ldrb	r3, [r3, #22]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 80fb 	beq.w	8007644 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8007452:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8007458:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800745e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007460:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007464:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800746a:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8007472:	2b00      	cmp	r3, #0
 8007474:	d004      	beq.n	8007480 <lfs_dir_relocatingcommit+0x1a0>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800747a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800747c:	3b08      	subs	r3, #8
 800747e:	e003      	b.n	8007488 <lfs_dir_relocatingcommit+0x1a8>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8007488:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	3318      	adds	r3, #24
 800748e:	4618      	mov	r0, r3
 8007490:	f7fd f963 	bl	800475a <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80074a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 80074a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80074aa:	9308      	str	r3, [sp, #32]
 80074ac:	4b50      	ldr	r3, [pc, #320]	@ (80075f0 <lfs_dir_relocatingcommit+0x310>)
 80074ae:	9307      	str	r3, [sp, #28]
 80074b0:	2300      	movs	r3, #0
 80074b2:	9306      	str	r3, [sp, #24]
 80074b4:	2300      	movs	r3, #0
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	2300      	movs	r3, #0
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	2300      	movs	r3, #0
 80074be:	9303      	str	r3, [sp, #12]
 80074c0:	2300      	movs	r3, #0
 80074c2:	9302      	str	r3, [sp, #8]
 80074c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	460b      	mov	r3, r1
 80074d0:	68b9      	ldr	r1, [r7, #8]
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7fd ff70 	bl	80053b8 <lfs_dir_traverse>
 80074d8:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	3318      	adds	r3, #24
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fd f921 	bl	8004726 <lfs_pair_fromle32>
        if (err) {
 80074e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00b      	beq.n	8007502 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80074ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ec:	f113 0f1c 	cmn.w	r3, #28
 80074f0:	f000 80aa 	beq.w	8007648 <lfs_dir_relocatingcommit+0x368>
 80074f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074f6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80074fa:	f000 80a5 	beq.w	8007648 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 80074fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007500:	e199      	b.n	8007836 <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8007502:	f107 031c 	add.w	r3, r7, #28
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	605a      	str	r2, [r3, #4]
 800750c:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007514:	f107 031c 	add.w	r3, r7, #28
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fd f9d3 	bl	80048c6 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8007526:	f107 031c 	add.w	r3, r7, #28
 800752a:	4611      	mov	r1, r2
 800752c:	4618      	mov	r0, r3
 800752e:	f7fd f9ca 	bl	80048c6 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8007538:	f107 031c 	add.w	r3, r7, #28
 800753c:	4611      	mov	r1, r2
 800753e:	4618      	mov	r0, r3
 8007540:	f7fd f9c1 	bl	80048c6 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800754a:	f023 0303 	bic.w	r3, r3, #3
 800754e:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8007550:	f107 031c 	add.w	r3, r7, #28
 8007554:	4618      	mov	r0, r3
 8007556:	f7fd f9db 	bl	8004910 <lfs_gstate_iszero>
 800755a:	4603      	mov	r3, r0
 800755c:	f083 0301 	eor.w	r3, r3, #1
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d027      	beq.n	80075b6 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8007566:	f107 031c 	add.w	r3, r7, #28
 800756a:	461a      	mov	r2, r3
 800756c:	68b9      	ldr	r1, [r7, #8]
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7fe feec 	bl	800634c <lfs_dir_getgstate>
 8007574:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 8007576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 800757c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800757e:	e15a      	b.n	8007836 <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8007580:	f107 031c 	add.w	r3, r7, #28
 8007584:	4618      	mov	r0, r3
 8007586:	f7fd fa69 	bl	8004a5c <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800758a:	f107 031c 	add.w	r3, r7, #28
 800758e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8007592:	4a18      	ldr	r2, [pc, #96]	@ (80075f4 <lfs_dir_relocatingcommit+0x314>)
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f7ff f885 	bl	80066a4 <lfs_dir_commitattr>
 800759a:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800759c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80075a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075a4:	f113 0f1c 	cmn.w	r3, #28
 80075a8:	d050      	beq.n	800764c <lfs_dir_relocatingcommit+0x36c>
 80075aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ac:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80075b0:	d04c      	beq.n	800764c <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80075b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075b4:	e13f      	b.n	8007836 <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80075b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80075ba:	4619      	mov	r1, r3
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff f8f1 	bl	80067a4 <lfs_dir_commitcrc>
 80075c2:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 80075c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d016      	beq.n	80075f8 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80075ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075cc:	f113 0f1c 	cmn.w	r3, #28
 80075d0:	d03e      	beq.n	8007650 <lfs_dir_relocatingcommit+0x370>
 80075d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075d4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80075d8:	d03a      	beq.n	8007650 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80075da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075dc:	e12b      	b.n	8007836 <lfs_dir_relocatingcommit+0x556>
 80075de:	bf00      	nop
 80075e0:	0800c1ec 	.word	0x0800c1ec
 80075e4:	0800ca50 	.word	0x0800ca50
 80075e8:	0800bf90 	.word	0x0800bf90
 80075ec:	0800c1fc 	.word	0x0800c1fc
 80075f0:	08006c4b 	.word	0x08006c4b
 80075f4:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80075f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80075fe:	6992      	ldr	r2, [r2, #24]
 8007600:	fbb3 f1f2 	udiv	r1, r3, r2
 8007604:	fb01 f202 	mul.w	r2, r1, r2
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d006      	beq.n	800761c <lfs_dir_relocatingcommit+0x33c>
 800760e:	4b8c      	ldr	r3, [pc, #560]	@ (8007840 <lfs_dir_relocatingcommit+0x560>)
 8007610:	4a8c      	ldr	r2, [pc, #560]	@ (8007844 <lfs_dir_relocatingcommit+0x564>)
 8007612:	f640 01d9 	movw	r1, #2265	@ 0x8d9
 8007616:	488c      	ldr	r0, [pc, #560]	@ (8007848 <lfs_dir_relocatingcommit+0x568>)
 8007618:	f003 fbe8 	bl	800adec <__assert_func>
        dir->off = commit.off;
 800761c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8007622:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	333c      	adds	r3, #60	@ 0x3c
 800762e:	3230      	adds	r2, #48	@ 0x30
 8007630:	ca07      	ldmia	r2, {r0, r1, r2}
 8007632:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3348      	adds	r3, #72	@ 0x48
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	605a      	str	r2, [r3, #4]
 8007640:	609a      	str	r2, [r3, #8]
 8007642:	e021      	b.n	8007688 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8007644:	bf00      	nop
 8007646:	e004      	b.n	8007652 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8007648:	bf00      	nop
 800764a:	e002      	b.n	8007652 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 800764c:	bf00      	nop
 800764e:	e000      	b.n	8007652 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8007650:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3310      	adds	r3, #16
 8007656:	4619      	mov	r1, r3
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7fc fc4b 	bl	8003ef4 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	8a9b      	ldrh	r3, [r3, #20]
 8007662:	9302      	str	r3, [sp, #8]
 8007664:	2300      	movs	r3, #0
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fd1b 	bl	80070b0 <lfs_dir_splittingcompact>
 800767a:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 800767c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800767e:	2b00      	cmp	r3, #0
 8007680:	da01      	bge.n	8007686 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8007682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007684:	e0d7      	b.n	8007836 <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 8007686:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3304      	adds	r3, #4
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769a:	663b      	str	r3, [r7, #96]	@ 0x60
 800769c:	e0c6      	b.n	800782c <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 800769e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076a0:	3308      	adds	r3, #8
 80076a2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80076a6:	4611      	mov	r1, r2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fc ffe5 	bl	8004678 <lfs_pair_cmp>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f040 80b8 	bne.w	8007826 <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 80076b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	f103 0408 	add.w	r4, r3, #8
 80076be:	4615      	mov	r5, r2
 80076c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80076c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80076cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076ce:	3308      	adds	r3, #8
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	f000 809d 	beq.w	8007812 <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 80076d8:	2300      	movs	r3, #0
 80076da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076dc:	e07b      	b.n	80077d6 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80076de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	4413      	add	r3, r2
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fd f891 	bl	8004810 <lfs_tag_type3>
 80076ee:	4603      	mov	r3, r0
 80076f0:	461a      	mov	r2, r3
 80076f2:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d115      	bne.n	8007726 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80076fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076fc:	889c      	ldrh	r4, [r3, #4]
 80076fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	4413      	add	r3, r2
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4618      	mov	r0, r3
 800770a:	f7fd f8ab 	bl	8004864 <lfs_tag_id>
 800770e:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8007710:	429c      	cmp	r4, r3
 8007712:	d108      	bne.n	8007726 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8007714:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007716:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800771a:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 800771c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800771e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007722:	60da      	str	r2, [r3, #12]
 8007724:	e054      	b.n	80077d0 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8007726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4413      	add	r3, r2
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4618      	mov	r0, r3
 8007732:	f7fd f86d 	bl	8004810 <lfs_tag_type3>
 8007736:	4603      	mov	r3, r0
 8007738:	461a      	mov	r2, r3
 800773a:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800773e:	429a      	cmp	r2, r3
 8007740:	d11c      	bne.n	800777c <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8007742:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007744:	889c      	ldrh	r4, [r3, #4]
 8007746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4413      	add	r3, r2
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4618      	mov	r0, r3
 8007752:	f7fd f887 	bl	8004864 <lfs_tag_id>
 8007756:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8007758:	429c      	cmp	r4, r3
 800775a:	d90f      	bls.n	800777c <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 800775c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800775e:	889b      	ldrh	r3, [r3, #4]
 8007760:	3b01      	subs	r3, #1
 8007762:	b29a      	uxth	r2, r3
 8007764:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007766:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8007768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800776a:	799b      	ldrb	r3, [r3, #6]
 800776c:	2b02      	cmp	r3, #2
 800776e:	d12f      	bne.n	80077d0 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8007770:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007774:	1e5a      	subs	r2, r3, #1
 8007776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007778:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800777a:	e029      	b.n	80077d0 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800777c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	4413      	add	r3, r2
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f7fd f842 	bl	8004810 <lfs_tag_type3>
 800778c:	4603      	mov	r3, r0
 800778e:	461a      	mov	r2, r3
 8007790:	f240 4301 	movw	r3, #1025	@ 0x401
 8007794:	429a      	cmp	r2, r3
 8007796:	d11b      	bne.n	80077d0 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8007798:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800779a:	889c      	ldrh	r4, [r3, #4]
 800779c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	4413      	add	r3, r2
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fd f85c 	bl	8004864 <lfs_tag_id>
 80077ac:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80077ae:	429c      	cmp	r4, r3
 80077b0:	d30e      	bcc.n	80077d0 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 80077b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077b4:	889b      	ldrh	r3, [r3, #4]
 80077b6:	3301      	adds	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077bc:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80077be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077c0:	799b      	ldrb	r3, [r3, #6]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d104      	bne.n	80077d0 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 80077c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077ce:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 80077d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077d2:	3301      	adds	r3, #1
 80077d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80077d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077dc:	429a      	cmp	r2, r3
 80077de:	f6ff af7e 	blt.w	80076de <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80077e2:	e016      	b.n	8007812 <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 80077e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077e6:	889a      	ldrh	r2, [r3, #4]
 80077e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077ea:	8b9b      	ldrh	r3, [r3, #28]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077f2:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80077f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077f6:	f103 0108 	add.w	r1, r3, #8
 80077fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077fc:	3320      	adds	r3, #32
 80077fe:	461a      	mov	r2, r3
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f7fe fd87 	bl	8006314 <lfs_dir_fetch>
 8007806:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 8007808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <lfs_dir_relocatingcommit+0x532>
                    return err;
 800780e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007810:	e011      	b.n	8007836 <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 8007812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007814:	889a      	ldrh	r2, [r3, #4]
 8007816:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007818:	8b9b      	ldrh	r3, [r3, #28]
 800781a:	429a      	cmp	r2, r3
 800781c:	d303      	bcc.n	8007826 <lfs_dir_relocatingcommit+0x546>
 800781e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007820:	7fdb      	ldrb	r3, [r3, #31]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1de      	bne.n	80077e4 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007826:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	663b      	str	r3, [r7, #96]	@ 0x60
 800782c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800782e:	2b00      	cmp	r3, #0
 8007830:	f47f af35 	bne.w	800769e <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8007834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8007836:	4618      	mov	r0, r3
 8007838:	3770      	adds	r7, #112	@ 0x70
 800783a:	46bd      	mov	sp, r7
 800783c:	bdb0      	pop	{r4, r5, r7, pc}
 800783e:	bf00      	nop
 8007840:	0800c0dc 	.word	0x0800c0dc
 8007844:	0800ca50 	.word	0x0800ca50
 8007848:	0800bf90 	.word	0x0800bf90

0800784c <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800784c:	b5b0      	push	{r4, r5, r7, lr}
 800784e:	b0bc      	sub	sp, #240	@ 0xf0
 8007850:	af04      	add	r7, sp, #16
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007862:	e045      	b.n	80078f0 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8007864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007868:	3308      	adds	r3, #8
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	429a      	cmp	r2, r3
 800786e:	d03a      	beq.n	80078e6 <lfs_dir_orphaningcommit+0x9a>
 8007870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007874:	3308      	adds	r3, #8
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	4611      	mov	r1, r2
 800787a:	4618      	mov	r0, r3
 800787c:	f7fc fefc 	bl	8004678 <lfs_pair_cmp>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d12f      	bne.n	80078e6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800788a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800788c:	2b01      	cmp	r3, #1
 800788e:	d12a      	bne.n	80078e6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8007890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d023      	beq.n	80078e6 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800789e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d91b      	bls.n	80078e6 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80078ae:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fff0 	bl	8008898 <lfs_file_outline>
 80078b8:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80078bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <lfs_dir_orphaningcommit+0x7e>
                return err;
 80078c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078c8:	e2ad      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80078ca:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f001 f804 	bl	80088dc <lfs_file_flush>
 80078d4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80078d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <lfs_dir_orphaningcommit+0x9a>
                return err;
 80078e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078e4:	e29f      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80078e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80078f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1b5      	bne.n	8007864 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800790e:	461d      	mov	r5, r3
 8007910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007914:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8007922:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f7ff fcd6 	bl	80072e0 <lfs_dir_relocatingcommit>
 8007934:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8007938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800793c:	2b00      	cmp	r3, #0
 800793e:	da02      	bge.n	8007946 <lfs_dir_orphaningcommit+0xfa>
        return state;
 8007940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007944:	e26f      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800794c:	4611      	mov	r1, r2
 800794e:	4618      	mov	r0, r3
 8007950:	f7fc fe92 	bl	8004678 <lfs_pair_cmp>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	461d      	mov	r5, r3
 800795e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8007962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007966:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800796a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800796e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007972:	2b02      	cmp	r3, #2
 8007974:	d14a      	bne.n	8007a0c <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3348      	adds	r3, #72	@ 0x48
 800797a:	461a      	mov	r2, r3
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7fe fce4 	bl	800634c <lfs_dir_getgstate>
 8007984:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8007988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <lfs_dir_orphaningcommit+0x14a>
            return err;
 8007990:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007994:	e247      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8007996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 800799c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800799e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	3318      	adds	r3, #24
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fc fed7 	bl	800475a <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	7ddb      	ldrb	r3, [r3, #23]
 80079b0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80079b4:	051a      	lsls	r2, r3, #20
 80079b6:	4bc2      	ldr	r3, [pc, #776]	@ (8007cc0 <lfs_dir_orphaningcommit+0x474>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	3318      	adds	r3, #24
 80079c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80079c6:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80079ca:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80079ce:	2000      	movs	r0, #0
 80079d0:	9001      	str	r0, [sp, #4]
 80079d2:	2001      	movs	r0, #1
 80079d4:	9000      	str	r0, [sp, #0]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7ff fc82 	bl	80072e0 <lfs_dir_relocatingcommit>
 80079dc:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	3318      	adds	r3, #24
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fc fe9e 	bl	8004726 <lfs_pair_fromle32>
        if (state < 0) {
 80079ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	da02      	bge.n	80079f8 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80079f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079f6:	e216      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80079f8:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80079fc:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8007a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007a08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 8007a12:	e1fc      	b.n	8007e0e <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8007a14:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8007a18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007a1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007a20:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a24:	4ca7      	ldr	r4, [pc, #668]	@ (8007cc4 <lfs_dir_orphaningcommit+0x478>)
 8007a26:	9403      	str	r4, [sp, #12]
 8007a28:	9102      	str	r1, [sp, #8]
 8007a2a:	9201      	str	r2, [sp, #4]
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	4603      	mov	r3, r0
 8007a30:	f640 1263 	movw	r2, #2403	@ 0x963
 8007a34:	49a4      	ldr	r1, [pc, #656]	@ (8007cc8 <lfs_dir_orphaningcommit+0x47c>)
 8007a36:	48a5      	ldr	r0, [pc, #660]	@ (8007ccc <lfs_dir_orphaningcommit+0x480>)
 8007a38:	f003 fb88 	bl	800b14c <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f103 0220 	add.w	r2, r3, #32
 8007a48:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fc fe12 	bl	8004678 <lfs_pair_cmp>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d107      	bne.n	8007a6a <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8007a5a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8007a62:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a72:	e037      	b.n	8007ae4 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8007a74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007a78:	f103 0208 	add.w	r2, r3, #8
 8007a7c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fc fdf8 	bl	8004678 <lfs_pair_cmp>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8007a8e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007a92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007a96:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8007a98:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007a9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007aa0:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8007aa2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007aa6:	799b      	ldrb	r3, [r3, #6]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d116      	bne.n	8007ada <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8007aac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007ab0:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8007ab4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fc fddc 	bl	8004678 <lfs_pair_cmp>
 8007ac0:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d109      	bne.n	8007ada <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8007ac6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8007aca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007ace:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8007ad0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007ad4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007ad8:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007ada:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ae4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1c3      	bne.n	8007a74 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8007aec:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007af0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007af4:	4619      	mov	r1, r3
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f002 fa72 	bl	8009fe0 <lfs_fs_parent>
 8007afc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8007b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	da07      	bge.n	8007b18 <lfs_dir_orphaningcommit+0x2cc>
 8007b08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b0c:	f113 0f02 	cmn.w	r3, #2
 8007b10:	d002      	beq.n	8007b18 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8007b12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b16:	e186      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8007b18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b1c:	f113 0f02 	cmn.w	r3, #2
 8007b20:	bf14      	ite	ne
 8007b22:	2301      	movne	r3, #1
 8007b24:	2300      	moveq	r3, #0
 8007b26:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8007b2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b2e:	f113 0f02 	cmn.w	r3, #2
 8007b32:	f000 809e 	beq.w	8007c72 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8007b36:	2101      	movs	r1, #1
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f002 fae9 	bl	800a110 <lfs_fs_preporphans>
 8007b3e:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8007b42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <lfs_dir_orphaningcommit+0x304>
                return err;
 8007b4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007b4e:	e16a      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8007b50:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8007b54:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3330      	adds	r3, #48	@ 0x30
 8007b5c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fc ff3a 	bl	80049dc <lfs_gstate_hasmovehere>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d02d      	beq.n	8007bca <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fc fe76 	bl	8004864 <lfs_tag_id>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8007b7e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007b80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b82:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8007b86:	484f      	ldr	r0, [pc, #316]	@ (8007cc4 <lfs_dir_orphaningcommit+0x478>)
 8007b88:	9002      	str	r0, [sp, #8]
 8007b8a:	9201      	str	r2, [sp, #4]
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	f44f 6219 	mov.w	r2, #2448	@ 0x990
 8007b94:	494c      	ldr	r1, [pc, #304]	@ (8007cc8 <lfs_dir_orphaningcommit+0x47c>)
 8007b96:	484e      	ldr	r0, [pc, #312]	@ (8007cd0 <lfs_dir_orphaningcommit+0x484>)
 8007b98:	f003 fad8 	bl	800b14c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f002 fb04 	bl	800a1b0 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8007ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fc fe59 	bl	8004864 <lfs_tag_id>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d205      	bcs.n	8007bca <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8007bbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bc2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8007bc6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8007bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 8007bd2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fc fdbf 	bl	800475a <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8007bdc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8007be0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d007      	beq.n	8007bf8 <lfs_dir_orphaningcommit+0x3ac>
 8007be8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8007bec:	029b      	lsls	r3, r3, #10
 8007bee:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8007bf2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8007bf6:	e000      	b.n	8007bfa <lfs_dir_orphaningcommit+0x3ae>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c06:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007c0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007c10:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8007c14:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007c18:	2000      	movs	r0, #0
 8007c1a:	9001      	str	r0, [sp, #4]
 8007c1c:	2002      	movs	r0, #2
 8007c1e:	9000      	str	r0, [sp, #0]
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f7ff fb5d 	bl	80072e0 <lfs_dir_relocatingcommit>
 8007c26:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8007c2a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fc fd79 	bl	8004726 <lfs_pair_fromle32>
            if (state < 0) {
 8007c34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	da02      	bge.n	8007c42 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8007c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c40:	e0f1      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8007c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d113      	bne.n	8007c72 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8007c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8007c50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 8007c56:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8007c5a:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8007c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007c66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007c70:	e0cd      	b.n	8007e0e <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8007c72:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007c76:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f002 f8fd 	bl	8009e7c <lfs_fs_pred>
 8007c82:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8007c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <lfs_dir_orphaningcommit+0x452>
 8007c8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c92:	f113 0f02 	cmn.w	r3, #2
 8007c96:	d002      	beq.n	8007c9e <lfs_dir_orphaningcommit+0x452>
            return err;
 8007c98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c9c:	e0c3      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8007c9e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d01a      	beq.n	8007cdc <lfs_dir_orphaningcommit+0x490>
 8007ca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007caa:	f113 0f02 	cmn.w	r3, #2
 8007cae:	d115      	bne.n	8007cdc <lfs_dir_orphaningcommit+0x490>
 8007cb0:	4b08      	ldr	r3, [pc, #32]	@ (8007cd4 <lfs_dir_orphaningcommit+0x488>)
 8007cb2:	4a09      	ldr	r2, [pc, #36]	@ (8007cd8 <lfs_dir_orphaningcommit+0x48c>)
 8007cb4:	f640 11b3 	movw	r1, #2483	@ 0x9b3
 8007cb8:	4803      	ldr	r0, [pc, #12]	@ (8007cc8 <lfs_dir_orphaningcommit+0x47c>)
 8007cba:	f003 f897 	bl	800adec <__assert_func>
 8007cbe:	bf00      	nop
 8007cc0:	000ffc08 	.word	0x000ffc08
 8007cc4:	0800c084 	.word	0x0800c084
 8007cc8:	0800bf90 	.word	0x0800bf90
 8007ccc:	0800c204 	.word	0x0800c204
 8007cd0:	0800c240 	.word	0x0800c240
 8007cd4:	0800c284 	.word	0x0800c284
 8007cd8:	0800ca6c 	.word	0x0800ca6c

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8007cdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ce0:	f113 0f02 	cmn.w	r3, #2
 8007ce4:	f000 8093 	beq.w	8007e0e <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3330      	adds	r3, #48	@ 0x30
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fc fe2c 	bl	800494a <lfs_gstate_hasorphans>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d011      	beq.n	8007d1c <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8007cf8:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8007cfc:	425b      	negs	r3, r3
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	b25b      	sxtb	r3, r3
 8007d02:	4619      	mov	r1, r3
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f002 fa03 	bl	800a110 <lfs_fs_preporphans>
 8007d0a:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 8007d0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8007d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d1a:	e084      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8007d1c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8007d20:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3330      	adds	r3, #48	@ 0x30
 8007d28:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fc fe54 	bl	80049dc <lfs_gstate_hasmovehere>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01c      	beq.n	8007d74 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fc fd90 	bl	8004864 <lfs_tag_id>
 8007d44:	4603      	mov	r3, r0
 8007d46:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8007d4a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007d4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d4e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8007d52:	4837      	ldr	r0, [pc, #220]	@ (8007e30 <lfs_dir_orphaningcommit+0x5e4>)
 8007d54:	9002      	str	r0, [sp, #8]
 8007d56:	9201      	str	r2, [sp, #4]
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8007d60:	4934      	ldr	r1, [pc, #208]	@ (8007e34 <lfs_dir_orphaningcommit+0x5e8>)
 8007d62:	4835      	ldr	r0, [pc, #212]	@ (8007e38 <lfs_dir_orphaningcommit+0x5ec>)
 8007d64:	f003 f9f2 	bl	800b14c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f002 fa1e 	bl	800a1b0 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8007d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 8007d7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8007d80:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fc fce8 	bl	800475a <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8007d8a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8007d8e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d007      	beq.n	8007da6 <lfs_dir_orphaningcommit+0x55a>
 8007d96:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8007d9a:	029b      	lsls	r3, r3, #10
 8007d9c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8007da0:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8007da4:	e000      	b.n	8007da8 <lfs_dir_orphaningcommit+0x55c>
 8007da6:	2300      	movs	r3, #0
 8007da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007daa:	2300      	movs	r3, #0
 8007dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dae:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8007db2:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8007db6:	051a      	lsls	r2, r3, #20
 8007db8:	4b20      	ldr	r3, [pc, #128]	@ (8007e3c <lfs_dir_orphaningcommit+0x5f0>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dbe:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007dc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dc8:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8007dcc:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	9001      	str	r0, [sp, #4]
 8007dd4:	2002      	movs	r0, #2
 8007dd6:	9000      	str	r0, [sp, #0]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f7ff fa81 	bl	80072e0 <lfs_dir_relocatingcommit>
 8007dde:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8007de2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fc fc9d 	bl	8004726 <lfs_pair_fromle32>
            if (state < 0) {
 8007dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	da02      	bge.n	8007dfa <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8007df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007df8:	e015      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8007dfa:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8007dfe:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8007e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8007e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	f43f adfe 	beq.w	8007a14 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8007e18:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <lfs_dir_orphaningcommit+0x5d8>
 8007e20:	2303      	movs	r3, #3
 8007e22:	e000      	b.n	8007e26 <lfs_dir_orphaningcommit+0x5da>
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	37e0      	adds	r7, #224	@ 0xe0
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	0800c084 	.word	0x0800c084
 8007e34:	0800bf90 	.word	0x0800bf90
 8007e38:	0800c240 	.word	0x0800c240
 8007e3c:	000ffc08 	.word	0x000ffc08

08007e40 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7ff fcf9 	bl	800784c <lfs_dir_orphaningcommit>
 8007e5a:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	da01      	bge.n	8007e66 <lfs_dir_commit+0x26>
        return orphans;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	e00d      	b.n	8007e82 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f002 fac2 	bl	800a3f8 <lfs_fs_deorphan>
 8007e74:	6138      	str	r0, [r7, #16]
        if (err) {
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <lfs_dir_commit+0x40>
            return err;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	e000      	b.n	8007e82 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8007e8a:	b590      	push	{r4, r7, lr}
 8007e8c:	b087      	sub	sp, #28
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	3b08      	subs	r3, #8
 8007ea2:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eac:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <lfs_ctz_index+0x2e>
        return 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e01c      	b.n	8007ef2 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fb ffb9 	bl	8003e34 <lfs_popc>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	3302      	adds	r3, #2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	1ad2      	subs	r2, r2, r3
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed2:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	fb02 f303 	mul.w	r3, r2, r3
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	1ad4      	subs	r4, r2, r3
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7fb ffa7 	bl	8003e34 <lfs_popc>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	1ae2      	subs	r2, r4, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	601a      	str	r2, [r3, #0]
    return i;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd90      	pop	{r4, r7, pc}

08007efa <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8007efa:	b590      	push	{r4, r7, lr}
 8007efc:	b08f      	sub	sp, #60	@ 0x3c
 8007efe:	af04      	add	r7, sp, #16
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
 8007f06:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8007f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d108      	bne.n	8007f20 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8007f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f14:	601a      	str	r2, [r3, #0]
        *off = 0;
 8007f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]
        return 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	e053      	b.n	8007fc8 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8007f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f22:	3b01      	subs	r3, #1
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	f107 0314 	add.w	r3, r7, #20
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f7ff ffac 	bl	8007e8a <lfs_ctz_index>
 8007f32:	4603      	mov	r3, r0
 8007f34:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8007f36:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f7ff ffa4 	bl	8007e8a <lfs_ctz_index>
 8007f42:	4603      	mov	r3, r0
 8007f44:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8007f46:	e034      	b.n	8007fb2 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8007f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	3301      	adds	r3, #1
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fb ff50 	bl	8003df6 <lfs_npw2>
 8007f56:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8007f58:	1e5c      	subs	r4, r3, #1
 8007f5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f5c:	f7fb ff5b 	bl	8003e16 <lfs_ctz>
 8007f60:	4603      	mov	r3, r0
 8007f62:	4619      	mov	r1, r3
 8007f64:	4620      	mov	r0, r4
 8007f66:	f7fb ff0f 	bl	8003d88 <lfs_min>
 8007f6a:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	0092      	lsls	r2, r2, #2
 8007f72:	2104      	movs	r1, #4
 8007f74:	9103      	str	r1, [sp, #12]
 8007f76:	4639      	mov	r1, r7
 8007f78:	9102      	str	r1, [sp, #8]
 8007f7a:	9201      	str	r2, [sp, #4]
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	2304      	movs	r3, #4
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7fb ffdb 	bl	8003f40 <lfs_bd_read>
 8007f8a:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fb ff6a 	bl	8003e68 <lfs_fromle32>
 8007f94:	4603      	mov	r3, r0
 8007f96:	603b      	str	r3, [r7, #0]
        if (err) {
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <lfs_ctz_find+0xa8>
            return err;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	e012      	b.n	8007fc8 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007faa:	461a      	mov	r2, r3
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	1a9b      	subs	r3, r3, r2
 8007fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8007fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d8c6      	bhi.n	8007f48 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fbe:	601a      	str	r2, [r3, #0]
    *off = pos;
 8007fc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fc4:	601a      	str	r2, [r3, #0]
    return 0;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	372c      	adds	r7, #44	@ 0x2c
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd90      	pop	{r4, r7, pc}

08007fd0 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b092      	sub	sp, #72	@ 0x48
 8007fd4:	af04      	add	r7, sp, #16
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8007fde:	f107 0320 	add.w	r3, r7, #32
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f7fc fefb 	bl	8004de0 <lfs_alloc>
 8007fea:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8007fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <lfs_ctz_extend+0x26>
            return err;
 8007ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff4:	e0e9      	b.n	80081ca <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7fc fada 	bl	80045b4 <lfs_bd_erase>
 8008000:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8008002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008004:	2b00      	cmp	r3, #0
 8008006:	d006      	beq.n	8008016 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8008008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800800e:	f000 80cb 	beq.w	80081a8 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8008012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008014:	e0d9      	b.n	80081ca <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8008016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d107      	bne.n	800802c <lfs_ctz_extend+0x5c>
                *block = nblock;
 800801c:	6a3a      	ldr	r2, [r7, #32]
 800801e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008020:	601a      	str	r2, [r3, #0]
                *off = 0;
 8008022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]
                return 0;
 8008028:	2300      	movs	r3, #0
 800802a:	e0ce      	b.n	80081ca <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 800802c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800802e:	3b01      	subs	r3, #1
 8008030:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8008032:	f107 031c 	add.w	r3, r7, #28
 8008036:	4619      	mov	r1, r3
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f7ff ff26 	bl	8007e8a <lfs_ctz_index>
 800803e:	4603      	mov	r3, r0
 8008040:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	3301      	adds	r3, #1
 8008046:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800804c:	69da      	ldr	r2, [r3, #28]
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	429a      	cmp	r2, r3
 8008052:	d044      	beq.n	80080de <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8008054:	2300      	movs	r3, #0
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
 8008058:	e035      	b.n	80080c6 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805e:	1ad2      	subs	r2, r2, r3
 8008060:	2301      	movs	r3, #1
 8008062:	9303      	str	r3, [sp, #12]
 8008064:	f107 0317 	add.w	r3, r7, #23
 8008068:	9302      	str	r3, [sp, #8]
 800806a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4613      	mov	r3, r2
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	2100      	movs	r1, #0
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f7fb ff61 	bl	8003f40 <lfs_bd_read>
 800807e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8008080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <lfs_ctz_extend+0xba>
                        return err;
 8008086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008088:	e09f      	b.n	80081ca <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	2201      	movs	r2, #1
 800808e:	9203      	str	r2, [sp, #12]
 8008090:	f107 0217 	add.w	r2, r7, #23
 8008094:	9202      	str	r2, [sp, #8]
 8008096:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008098:	9201      	str	r2, [sp, #4]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	2301      	movs	r3, #1
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	68b9      	ldr	r1, [r7, #8]
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7fc f9d8 	bl	8004458 <lfs_bd_prog>
 80080a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80080aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d007      	beq.n	80080c0 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80080b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80080b6:	d101      	bne.n	80080bc <lfs_ctz_extend+0xec>
                            goto relocate;
 80080b8:	bf00      	nop
                    goto relocate;
 80080ba:	e075      	b.n	80081a8 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 80080bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 80080be:	e084      	b.n	80081ca <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 80080c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c2:	3301      	adds	r3, #1
 80080c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d3c5      	bcc.n	800805a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 80080ce:	6a3a      	ldr	r2, [r7, #32]
 80080d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080d2:	601a      	str	r2, [r3, #0]
                *off = noff;
 80080d4:	69fa      	ldr	r2, [r7, #28]
 80080d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080d8:	601a      	str	r2, [r3, #0]
                return 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	e075      	b.n	80081ca <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 80080de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e0:	3301      	adds	r3, #1
 80080e2:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80080e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080e6:	f7fb fe96 	bl	8003e16 <lfs_ctz>
 80080ea:	4603      	mov	r3, r0
 80080ec:	3301      	adds	r3, #1
 80080ee:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 80080f4:	2300      	movs	r3, #0
 80080f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80080f8:	e049      	b.n	800818e <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fb febe 	bl	8003e7e <lfs_tole32>
 8008102:	4603      	mov	r3, r0
 8008104:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	2104      	movs	r1, #4
 800810e:	9103      	str	r1, [sp, #12]
 8008110:	f107 0118 	add.w	r1, r7, #24
 8008114:	9102      	str	r1, [sp, #8]
 8008116:	9201      	str	r2, [sp, #4]
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	2301      	movs	r3, #1
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	68b9      	ldr	r1, [r7, #8]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f7fc f999 	bl	8004458 <lfs_bd_prog>
 8008126:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	4618      	mov	r0, r3
 800812c:	f7fb fe9c 	bl	8003e68 <lfs_fromle32>
 8008130:	4603      	mov	r3, r0
 8008132:	61bb      	str	r3, [r7, #24]
                if (err) {
 8008134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800813a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800813c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008140:	d034      	beq.n	80081ac <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8008142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008144:	e041      	b.n	80081ca <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8008146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008148:	3b01      	subs	r3, #1
 800814a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800814c:	429a      	cmp	r2, r3
 800814e:	d01b      	beq.n	8008188 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008154:	0092      	lsls	r2, r2, #2
 8008156:	2104      	movs	r1, #4
 8008158:	9103      	str	r1, [sp, #12]
 800815a:	f107 0118 	add.w	r1, r7, #24
 800815e:	9102      	str	r1, [sp, #8]
 8008160:	9201      	str	r2, [sp, #4]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	2304      	movs	r3, #4
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	2100      	movs	r1, #0
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7fb fee8 	bl	8003f40 <lfs_bd_read>
 8008170:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	4618      	mov	r0, r3
 8008176:	f7fb fe77 	bl	8003e68 <lfs_fromle32>
 800817a:	4603      	mov	r3, r0
 800817c:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800817e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <lfs_ctz_extend+0x1b8>
                        return err;
 8008184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008186:	e020      	b.n	80081ca <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8008188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818a:	3301      	adds	r3, #1
 800818c:	633b      	str	r3, [r7, #48]	@ 0x30
 800818e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008192:	429a      	cmp	r2, r3
 8008194:	d3b1      	bcc.n	80080fa <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8008196:	6a3a      	ldr	r2, [r7, #32]
 8008198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800819a:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819e:	009a      	lsls	r2, r3, #2
 80081a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081a2:	601a      	str	r2, [r3, #0]
            return 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	e010      	b.n	80081ca <lfs_ctz_extend+0x1fa>
                    goto relocate;
 80081a8:	bf00      	nop
 80081aa:	e000      	b.n	80081ae <lfs_ctz_extend+0x1de>
                        goto relocate;
 80081ac:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	4a08      	ldr	r2, [pc, #32]	@ (80081d4 <lfs_ctz_extend+0x204>)
 80081b2:	9200      	str	r2, [sp, #0]
 80081b4:	f640 327d 	movw	r2, #2941	@ 0xb7d
 80081b8:	4907      	ldr	r1, [pc, #28]	@ (80081d8 <lfs_ctz_extend+0x208>)
 80081ba:	4808      	ldr	r0, [pc, #32]	@ (80081dc <lfs_ctz_extend+0x20c>)
 80081bc:	f002 ffc6 	bl	800b14c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 80081c0:	68b9      	ldr	r1, [r7, #8]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f7fb fe96 	bl	8003ef4 <lfs_cache_drop>
    while (true) {
 80081c8:	e709      	b.n	8007fde <lfs_ctz_extend+0xe>
    }
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3738      	adds	r7, #56	@ 0x38
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	0800c084 	.word	0x0800c084
 80081d8:	0800bf90 	.word	0x0800bf90
 80081dc:	0800c104 	.word	0x0800c104

080081e0 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b090      	sub	sp, #64	@ 0x40
 80081e4:	af04      	add	r7, sp, #16
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80081ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <lfs_ctz_traverse+0x18>
        return 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	e06b      	b.n	80082d0 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80081f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fa:	3b01      	subs	r3, #1
 80081fc:	61fb      	str	r3, [r7, #28]
 80081fe:	f107 031c 	add.w	r3, r7, #28
 8008202:	4619      	mov	r1, r3
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f7ff fe40 	bl	8007e8a <lfs_ctz_index>
 800820a:	4603      	mov	r3, r0
 800820c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 800820e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8008214:	4798      	blx	r3
 8008216:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8008218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <lfs_ctz_traverse+0x42>
            return err;
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	e056      	b.n	80082d0 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8008222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <lfs_ctz_traverse+0x4c>
            return 0;
 8008228:	2300      	movs	r3, #0
 800822a:	e051      	b.n	80082d0 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800822c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	f1c3 0302 	rsb	r3, r3, #2
 8008236:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8008238:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800823a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800823c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800823e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8008240:	9303      	str	r3, [sp, #12]
 8008242:	f107 0314 	add.w	r3, r7, #20
 8008246:	9302      	str	r3, [sp, #8]
 8008248:	2300      	movs	r3, #0
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4613      	mov	r3, r2
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	68b9      	ldr	r1, [r7, #8]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7fb fe72 	bl	8003f40 <lfs_bd_read>
 800825c:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	4618      	mov	r0, r3
 8008262:	f7fb fe01 	bl	8003e68 <lfs_fromle32>
 8008266:	4603      	mov	r3, r0
 8008268:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	4618      	mov	r0, r3
 800826e:	f7fb fdfb 	bl	8003e68 <lfs_fromle32>
 8008272:	4603      	mov	r3, r0
 8008274:	61bb      	str	r3, [r7, #24]
        if (err) {
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <lfs_ctz_traverse+0xa0>
            return err;
 800827c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827e:	e027      	b.n	80082d0 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8008280:	2300      	movs	r3, #0
 8008282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008284:	e012      	b.n	80082ac <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8008286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	3330      	adds	r3, #48	@ 0x30
 800828c:	443b      	add	r3, r7
 800828e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8008292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008294:	4611      	mov	r1, r2
 8008296:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8008298:	4798      	blx	r3
 800829a:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 800829c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <lfs_ctz_traverse+0xc6>
                return err;
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	e014      	b.n	80082d0 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 80082a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a8:	3301      	adds	r3, #1
 80082aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082b2:	429a      	cmp	r2, r3
 80082b4:	dbe7      	blt.n	8008286 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	3330      	adds	r3, #48	@ 0x30
 80082be:	443b      	add	r3, r7
 80082c0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80082c4:	603b      	str	r3, [r7, #0]
        index -= count;
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 80082ce:	e79e      	b.n	800820e <lfs_ctz_traverse+0x2e>
    }
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3730      	adds	r7, #48	@ 0x30
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 80082d8:	b5b0      	push	{r4, r5, r7, lr}
 80082da:	b09a      	sub	sp, #104	@ 0x68
 80082dc:	af02      	add	r7, sp, #8
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d008      	beq.n	8008302 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f002 fa31 	bl	800a758 <lfs_fs_forceconsistency>
 80082f6:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 80082f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <lfs_file_rawopencfg+0x2a>
            return err;
 80082fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008300:	e1b0      	b.n	8008664 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008306:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2200      	movs	r2, #0
 8008312:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2200      	movs	r2, #0
 8008318:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2200      	movs	r2, #0
 800831e:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f103 0108 	add.w	r1, r3, #8
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	3304      	adds	r3, #4
 800832a:	1d3a      	adds	r2, r7, #4
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f7fe f889 	bl	8006444 <lfs_dir_find>
 8008332:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8008334:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008336:	2b00      	cmp	r3, #0
 8008338:	da0c      	bge.n	8008354 <lfs_file_rawopencfg+0x7c>
 800833a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800833c:	f113 0f02 	cmn.w	r3, #2
 8008340:	d105      	bne.n	800834e <lfs_file_rawopencfg+0x76>
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	889b      	ldrh	r3, [r3, #4]
 8008346:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800834a:	4293      	cmp	r3, r2
 800834c:	d102      	bne.n	8008354 <lfs_file_rawopencfg+0x7c>
        err = tag;
 800834e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008350:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8008352:	e17c      	b.n	800864e <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2201      	movs	r2, #1
 8008358:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7fc fcac 	bl	8004cba <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8008362:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008364:	f113 0f02 	cmn.w	r3, #2
 8008368:	d14e      	bne.n	8008408 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8008374:	f06f 0301 	mvn.w	r3, #1
 8008378:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 800837a:	e168      	b.n	800864e <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4618      	mov	r0, r3
 8008380:	f7f7 ff26 	bl	80001d0 <strlen>
 8008384:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800838a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800838c:	429a      	cmp	r2, r3
 800838e:	d903      	bls.n	8008398 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8008390:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8008394:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8008396:	e15a      	b.n	800864e <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f103 0108 	add.w	r1, r3, #8
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	889b      	ldrh	r3, [r3, #4]
 80083a2:	029b      	lsls	r3, r3, #10
 80083a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083ae:	2300      	movs	r3, #0
 80083b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	889b      	ldrh	r3, [r3, #4]
 80083b6:	029a      	lsls	r2, r3, #10
 80083b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	889b      	ldrh	r3, [r3, #4]
 80083ca:	029b      	lsls	r3, r3, #10
 80083cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083d6:	2300      	movs	r3, #0
 80083d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80083da:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80083de:	2303      	movs	r3, #3
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f7ff fd2d 	bl	8007e40 <lfs_dir_commit>
 80083e6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 80083e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083ea:	f113 0f1c 	cmn.w	r3, #28
 80083ee:	d001      	beq.n	80083f4 <lfs_file_rawopencfg+0x11c>
 80083f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083f2:	e001      	b.n	80083f8 <lfs_file_rawopencfg+0x120>
 80083f4:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80083f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 80083fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f040 8125 	bne.w	800864c <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8008402:	4b9a      	ldr	r3, [pc, #616]	@ (800866c <lfs_file_rawopencfg+0x394>)
 8008404:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008406:	e044      	b.n	8008492 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8008412:	f06f 0310 	mvn.w	r3, #16
 8008416:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8008418:	e119      	b.n	800864e <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800841a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800841c:	4618      	mov	r0, r3
 800841e:	f7fc f9f7 	bl	8004810 <lfs_tag_type3>
 8008422:	4603      	mov	r3, r0
 8008424:	2b01      	cmp	r3, #1
 8008426:	d003      	beq.n	8008430 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8008428:	f06f 0314 	mvn.w	r3, #20
 800842c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 800842e:	e10e      	b.n	800864e <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00e      	beq.n	8008458 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	889b      	ldrh	r3, [r3, #4]
 800843e:	029b      	lsls	r3, r3, #10
 8008440:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008444:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008448:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	631a      	str	r2, [r3, #48]	@ 0x30
 8008456:	e01c      	b.n	8008492 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	889b      	ldrh	r3, [r3, #4]
 8008462:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008464:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008468:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8008470:	9200      	str	r2, [sp, #0]
 8008472:	4a7f      	ldr	r2, [pc, #508]	@ (8008670 <lfs_file_rawopencfg+0x398>)
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7fc fe4d 	bl	8005114 <lfs_dir_get>
 800847a:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 800847c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800847e:	2b00      	cmp	r3, #0
 8008480:	da02      	bge.n	8008488 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8008482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008484:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8008486:	e0e2      	b.n	800864e <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	3328      	adds	r3, #40	@ 0x28
 800848c:	4618      	mov	r0, r3
 800848e:	f7fc fb35 	bl	8004afc <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8008492:	2300      	movs	r3, #0
 8008494:	657b      	str	r3, [r7, #84]	@ 0x54
 8008496:	e063      	b.n	8008560 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d03c      	beq.n	800851e <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ae:	6859      	ldr	r1, [r3, #4]
 80084b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084b2:	4613      	mov	r3, r2
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80084c2:	051a      	lsls	r2, r3, #20
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	889b      	ldrh	r3, [r3, #4]
 80084c8:	029b      	lsls	r3, r3, #10
 80084ca:	ea42 0103 	orr.w	r1, r2, r3
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d2:	6858      	ldr	r0, [r3, #4]
 80084d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084d6:	4613      	mov	r3, r2
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4403      	add	r3, r0
 80084e0:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80084e2:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ea:	6859      	ldr	r1, [r3, #4]
 80084ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084ee:	4613      	mov	r3, r2
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	4603      	mov	r3, r0
 80084fe:	4a5d      	ldr	r2, [pc, #372]	@ (8008674 <lfs_file_rawopencfg+0x39c>)
 8008500:	4621      	mov	r1, r4
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f7fc fe06 	bl	8005114 <lfs_dir_get>
 8008508:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800850a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800850c:	2b00      	cmp	r3, #0
 800850e:	da06      	bge.n	800851e <lfs_file_rawopencfg+0x246>
 8008510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008512:	f113 0f02 	cmn.w	r3, #2
 8008516:	d002      	beq.n	800851e <lfs_file_rawopencfg+0x246>
                err = res;
 8008518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800851a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800851c:	e097      	b.n	800864e <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d017      	beq.n	800855a <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800852e:	6859      	ldr	r1, [r3, #4]
 8008530:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008532:	4613      	mov	r3, r2
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	4413      	add	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	440b      	add	r3, r1
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008542:	429a      	cmp	r2, r3
 8008544:	d903      	bls.n	800854e <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8008546:	f06f 031b 	mvn.w	r3, #27
 800854a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 800854c:	e07f      	b.n	800864e <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008552:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800855a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800855c:	3301      	adds	r3, #1
 800855e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008568:	429a      	cmp	r2, r3
 800856a:	d395      	bcc.n	8008498 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008580:	e010      	b.n	80085a4 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008588:	4618      	mov	r0, r3
 800858a:	f7fb fc9c 	bl	8003ec6 <lfs_malloc>
 800858e:	4602      	mov	r2, r0
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008598:	2b00      	cmp	r3, #0
 800859a:	d103      	bne.n	80085a4 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 800859c:	f06f 030b 	mvn.w	r3, #11
 80085a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80085a2:	e054      	b.n	800864e <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	3340      	adds	r3, #64	@ 0x40
 80085a8:	4619      	mov	r1, r3
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f7fb fcb1 	bl	8003f12 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80085b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fc f92c 	bl	8004810 <lfs_tag_type3>
 80085b8:	4603      	mov	r3, r0
 80085ba:	461a      	mov	r2, r3
 80085bc:	f240 2301 	movw	r3, #513	@ 0x201
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d141      	bne.n	8008648 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f06f 0201 	mvn.w	r2, #1
 80085ca:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 80085cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fc f958 	bl	8004884 <lfs_tag_size>
 80085d4:	4602      	mov	r2, r0
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2200      	movs	r2, #0
 80085f2:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d020      	beq.n	8008648 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	889b      	ldrh	r3, [r3, #4]
 8008610:	029c      	lsls	r4, r3, #10
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008616:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800861a:	4618      	mov	r0, r3
 800861c:	f7fb fbb4 	bl	8003d88 <lfs_min>
 8008620:	4603      	mov	r3, r0
 8008622:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8008624:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	4613      	mov	r3, r2
 8008630:	4a0f      	ldr	r2, [pc, #60]	@ (8008670 <lfs_file_rawopencfg+0x398>)
 8008632:	4629      	mov	r1, r5
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7fc fd6d 	bl	8005114 <lfs_dir_get>
 800863a:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 800863c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800863e:	2b00      	cmp	r3, #0
 8008640:	da02      	bge.n	8008648 <lfs_file_rawopencfg+0x370>
                err = res;
 8008642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008644:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8008646:	e002      	b.n	800864e <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8008648:	2300      	movs	r3, #0
 800864a:	e00b      	b.n	8008664 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 800864c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008652:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_rawclose(lfs, file);
 800865a:	68b9      	ldr	r1, [r7, #8]
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f823 	bl	80086a8 <lfs_file_rawclose>
    return err;
 8008662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8008664:	4618      	mov	r0, r3
 8008666:	3760      	adds	r7, #96	@ 0x60
 8008668:	46bd      	mov	sp, r7
 800866a:	bdb0      	pop	{r4, r5, r7, pc}
 800866c:	20100000 	.word	0x20100000
 8008670:	700ffc00 	.word	0x700ffc00
 8008674:	7ffffc00 	.word	0x7ffffc00

08008678 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af02      	add	r7, sp, #8
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8008686:	4b07      	ldr	r3, [pc, #28]	@ (80086a4 <lfs_file_rawopen+0x2c>)
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	68b9      	ldr	r1, [r7, #8]
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f7ff fe21 	bl	80082d8 <lfs_file_rawopencfg>
 8008696:	6178      	str	r0, [r7, #20]
    return err;
 8008698:	697b      	ldr	r3, [r7, #20]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	0800ca84 	.word	0x0800ca84

080086a8 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f9e5 	bl	8008a84 <lfs_file_rawsync>
 80086ba:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7fc fad9 	bl	8004c76 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d104      	bne.n	80086d8 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fb fc03 	bl	8003ede <lfs_free>
    }

    return err;
 80086d8:	68fb      	ldr	r3, [r7, #12]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 80086e4:	b590      	push	{r4, r7, lr}
 80086e6:	b08d      	sub	sp, #52	@ 0x34
 80086e8:	af06      	add	r7, sp, #24
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80086ee:	f107 030c 	add.w	r3, r7, #12
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7fc fb73 	bl	8004de0 <lfs_alloc>
 80086fa:	6138      	str	r0, [r7, #16]
        if (err) {
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <lfs_file_relocate+0x22>
            return err;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	e0bb      	b.n	800887e <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fb ff52 	bl	80045b4 <lfs_bd_erase>
 8008710:	6138      	str	r0, [r7, #16]
        if (err) {
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d006      	beq.n	8008726 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800871e:	f000 809b 	beq.w	8008858 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	e0ab      	b.n	800887e <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8008726:	2300      	movs	r3, #0
 8008728:	617b      	str	r3, [r7, #20]
 800872a:	e069      	b.n	8008800 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008730:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d027      	beq.n	8008788 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	f103 0008 	add.w	r0, r3, #8
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	889b      	ldrh	r3, [r3, #4]
 8008750:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8008752:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800875a:	2101      	movs	r1, #1
 800875c:	9105      	str	r1, [sp, #20]
 800875e:	f107 010b 	add.w	r1, r7, #11
 8008762:	9104      	str	r1, [sp, #16]
 8008764:	6979      	ldr	r1, [r7, #20]
 8008766:	9103      	str	r1, [sp, #12]
 8008768:	9302      	str	r3, [sp, #8]
 800876a:	4b47      	ldr	r3, [pc, #284]	@ (8008888 <lfs_file_relocate+0x1a4>)
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	9200      	str	r2, [sp, #0]
 8008770:	4623      	mov	r3, r4
 8008772:	2200      	movs	r2, #0
 8008774:	4601      	mov	r1, r0
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7fc fce7 	bl	800514a <lfs_dir_getread>
 800877c:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01e      	beq.n	80087c2 <lfs_file_relocate+0xde>
                    return err;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	e07a      	b.n	800887e <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 800878e:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	1ad4      	subs	r4, r2, r3
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800879c:	2201      	movs	r2, #1
 800879e:	9203      	str	r2, [sp, #12]
 80087a0:	f107 020b 	add.w	r2, r7, #11
 80087a4:	9202      	str	r2, [sp, #8]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	9201      	str	r2, [sp, #4]
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	4623      	mov	r3, r4
 80087ae:	4602      	mov	r2, r0
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7fb fbc5 	bl	8003f40 <lfs_bd_read>
 80087b6:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <lfs_file_relocate+0xde>
                    return err;
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	e05d      	b.n	800887e <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f103 0110 	add.w	r1, r3, #16
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2201      	movs	r2, #1
 80087ce:	9203      	str	r2, [sp, #12]
 80087d0:	f107 020b 	add.w	r2, r7, #11
 80087d4:	9202      	str	r2, [sp, #8]
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	9201      	str	r2, [sp, #4]
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	2301      	movs	r3, #1
 80087de:	4602      	mov	r2, r0
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7fb fe39 	bl	8004458 <lfs_bd_prog>
 80087e6:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d005      	beq.n	80087fa <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80087f4:	d032      	beq.n	800885c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	e041      	b.n	800887e <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	3301      	adds	r3, #1
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	429a      	cmp	r2, r3
 8008808:	d390      	bcc.n	800872c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69d9      	ldr	r1, [r3, #28]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008818:	461a      	mov	r2, r3
 800881a:	f002 fdbe 	bl	800b39a <memcpy>
        file->cache.block = lfs->pcache.block;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	691a      	ldr	r2, [r3, #16]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695a      	ldr	r2, [r3, #20]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3310      	adds	r3, #16
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7fb fb68 	bl	8003f12 <lfs_cache_zero>

        file->block = nblock;
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800884c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8008854:	2300      	movs	r3, #0
 8008856:	e012      	b.n	800887e <lfs_file_relocate+0x19a>
                goto relocate;
 8008858:	bf00      	nop
 800885a:	e000      	b.n	800885e <lfs_file_relocate+0x17a>
                    goto relocate;
 800885c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4a0a      	ldr	r2, [pc, #40]	@ (800888c <lfs_file_relocate+0x1a8>)
 8008862:	9200      	str	r2, [sp, #0]
 8008864:	f640 42b3 	movw	r2, #3251	@ 0xcb3
 8008868:	4909      	ldr	r1, [pc, #36]	@ (8008890 <lfs_file_relocate+0x1ac>)
 800886a:	480a      	ldr	r0, [pc, #40]	@ (8008894 <lfs_file_relocate+0x1b0>)
 800886c:	f002 fc6e 	bl	800b14c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3310      	adds	r3, #16
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7fb fb3c 	bl	8003ef4 <lfs_cache_drop>
    while (true) {
 800887c:	e737      	b.n	80086ee <lfs_file_relocate+0xa>
    }
}
 800887e:	4618      	mov	r0, r3
 8008880:	371c      	adds	r7, #28
 8008882:	46bd      	mov	sp, r7
 8008884:	bd90      	pop	{r4, r7, pc}
 8008886:	bf00      	nop
 8008888:	fff7fc00 	.word	0xfff7fc00
 800888c:	0800c084 	.word	0x0800c084
 8008890:	0800bf90 	.word	0x0800bf90
 8008894:	0800c104 	.word	0x0800c104

08008898 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ack(lfs);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7fc fa78 	bl	8004da0 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff ff16 	bl	80086e4 <lfs_file_relocate>
 80088b8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <lfs_file_outline+0x2c>
        return err;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	e006      	b.n	80088d2 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80088dc:	b590      	push	{r4, r7, lr}
 80088de:	b09f      	sub	sp, #124	@ 0x7c
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d011      	beq.n	8008916 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d105      	bne.n	800890a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	3340      	adds	r3, #64	@ 0x40
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7fb faf5 	bl	8003ef4 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800890e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 80a4 	beq.w	8008a6c <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008928:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800892e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d176      	bne.n	8008a24 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8008936:	f107 030c 	add.w	r3, r7, #12
 800893a:	2254      	movs	r2, #84	@ 0x54
 800893c:	2100      	movs	r1, #0
 800893e:	4618      	mov	r0, r3
 8008940:	f002 fc71 	bl	800b226 <memset>
                .ctz.head = file->ctz.head,
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8008948:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 800894e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008950:	2301      	movs	r3, #1
 8008952:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8008958:	643b      	str	r3, [r7, #64]	@ 0x40
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8008960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008962:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7fb fac2 	bl	8003ef4 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8008970:	e02b      	b.n	80089ca <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8008972:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8008976:	f107 010c 	add.w	r1, r7, #12
 800897a:	2301      	movs	r3, #1
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f90d 	bl	8008b9c <lfs_file_flushedread>
 8008982:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 8008984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008986:	2b00      	cmp	r3, #0
 8008988:	da01      	bge.n	800898e <lfs_file_flush+0xb2>
                    return res;
 800898a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800898c:	e06f      	b.n	8008a6e <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 800898e:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 8008992:	2301      	movs	r3, #1
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fa08 	bl	8008dac <lfs_file_flushedwrite>
 800899c:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 800899e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	da01      	bge.n	80089a8 <lfs_file_flush+0xcc>
                    return res;
 80089a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089a6:	e062      	b.n	8008a6e <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089b0:	d00b      	beq.n	80089ca <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80089b2:	f107 030c 	add.w	r3, r7, #12
 80089b6:	3340      	adds	r3, #64	@ 0x40
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7fb fa9a 	bl	8003ef4 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fb fa95 	bl	8003ef4 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d3cd      	bcc.n	8008972 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	2301      	movs	r3, #1
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7fb fc89 	bl	80042f8 <lfs_bd_flush>
 80089e6:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 80089e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d026      	beq.n	8008a3c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 80089ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089f0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80089f4:	d001      	beq.n	80089fa <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 80089f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089f8:	e039      	b.n	8008a6e <lfs_file_flush+0x192>
                        goto relocate;
 80089fa:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a00:	4a1d      	ldr	r2, [pc, #116]	@ (8008a78 <lfs_file_flush+0x19c>)
 8008a02:	9200      	str	r2, [sp, #0]
 8008a04:	f640 5202 	movw	r2, #3330	@ 0xd02
 8008a08:	491c      	ldr	r1, [pc, #112]	@ (8008a7c <lfs_file_flush+0x1a0>)
 8008a0a:	481d      	ldr	r0, [pc, #116]	@ (8008a80 <lfs_file_flush+0x1a4>)
 8008a0c:	f002 fb9e 	bl	800b14c <iprintf>
                err = lfs_file_relocate(lfs, file);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff fe66 	bl	80086e4 <lfs_file_relocate>
 8008a18:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8008a1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d0da      	beq.n	80089d6 <lfs_file_flush+0xfa>
                    return err;
 8008a20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a22:	e024      	b.n	8008a6e <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f7fb f99a 	bl	8003d68 <lfs_max>
 8008a34:	4602      	mov	r2, r0
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a3a:	e000      	b.n	8008a3e <lfs_file_flush+0x162>
                break;
 8008a3c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a52:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a5e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a6a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3774      	adds	r7, #116	@ 0x74
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd90      	pop	{r4, r7, pc}
 8008a76:	bf00      	nop
 8008a78:	0800c084 	.word	0x0800c084
 8008a7c:	0800bf90 	.word	0x0800bf90
 8008a80:	0800c104 	.word	0x0800c104

08008a84 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b090      	sub	sp, #64	@ 0x40
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e07a      	b.n	8008b94 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff ff1b 	bl	80088dc <lfs_file_flush>
 8008aa6:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d007      	beq.n	8008abe <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 8008aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abc:	e06a      	b.n	8008b94 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d063      	beq.n	8008b92 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	3308      	adds	r3, #8
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fb fdb7 	bl	8004642 <lfs_pair_isnull>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	f083 0301 	eor.w	r3, r3, #1
 8008ada:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d058      	beq.n	8008b92 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ae4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8008aec:	f240 2301 	movw	r3, #513	@ 0x201
 8008af0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008af6:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008afe:	e014      	b.n	8008b2a <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8008b00:	f240 2302 	movw	r3, #514	@ 0x202
 8008b04:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008b0c:	3228      	adds	r2, #40	@ 0x28
 8008b0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b12:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8008b16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fc f806 	bl	8004b2c <lfs_ctz_tole32>
            buffer = &ctz;
 8008b20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008b24:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 8008b26:	2308      	movs	r3, #8
 8008b28:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	f103 0108 	add.w	r1, r3, #8
 8008b30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b32:	051a      	lsls	r2, r3, #20
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	889b      	ldrh	r3, [r3, #4]
 8008b38:	029b      	lsls	r3, r3, #10
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	61fb      	str	r3, [r7, #28]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	889b      	ldrh	r3, [r3, #4]
 8008b4a:	029a      	lsls	r2, r3, #10
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 8008b58:	623b      	str	r3, [r7, #32]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b62:	f107 0218 	add.w	r2, r7, #24
 8008b66:	2302      	movs	r3, #2
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff f969 	bl	8007e40 <lfs_dir_commit>
 8008b6e:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8008b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d007      	beq.n	8008b86 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b7a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8008b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b84:	e006      	b.n	8008b94 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3740      	adds	r7, #64	@ 0x40
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008b9c:	b5b0      	push	{r4, r5, r7, lr}
 8008b9e:	b090      	sub	sp, #64	@ 0x40
 8008ba0:	af06      	add	r7, sp, #24
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d301      	bcc.n	8008bc2 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e0b7      	b.n	8008d32 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6838      	ldr	r0, [r7, #0]
 8008bd0:	f7fb f8da 	bl	8003d88 <lfs_min>
 8008bd4:	6038      	str	r0, [r7, #0]
    nsize = size;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8008bda:	e0a5      	b.n	8008d28 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d006      	beq.n	8008bf6 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008bf0:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d130      	bne.n	8008c58 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d11c      	bne.n	8008c3c <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008c14:	68b9      	ldr	r1, [r7, #8]
 8008c16:	3138      	adds	r1, #56	@ 0x38
 8008c18:	68b8      	ldr	r0, [r7, #8]
 8008c1a:	303c      	adds	r0, #60	@ 0x3c
 8008c1c:	9003      	str	r0, [sp, #12]
 8008c1e:	9102      	str	r1, [sp, #8]
 8008c20:	9201      	str	r2, [sp, #4]
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	462b      	mov	r3, r5
 8008c26:	4622      	mov	r2, r4
 8008c28:	2100      	movs	r1, #0
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f7ff f965 	bl	8007efa <lfs_ctz_find>
 8008c30:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d009      	beq.n	8008c4c <lfs_file_flushedread+0xb0>
                    return err;
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	e07a      	b.n	8008d32 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f06f 0201 	mvn.w	r2, #1
 8008c42:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c50:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c5c:	69da      	ldr	r2, [r3, #28]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	4619      	mov	r1, r3
 8008c66:	6a38      	ldr	r0, [r7, #32]
 8008c68:	f7fb f88e 	bl	8003d88 <lfs_min>
 8008c6c:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d026      	beq.n	8008cc8 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f103 0408 	add.w	r4, r3, #8
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c8a:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	889b      	ldrh	r3, [r3, #4]
 8008c90:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8008c92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8008c9e:	69b8      	ldr	r0, [r7, #24]
 8008ca0:	9005      	str	r0, [sp, #20]
 8008ca2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ca4:	9004      	str	r0, [sp, #16]
 8008ca6:	9103      	str	r1, [sp, #12]
 8008ca8:	9302      	str	r3, [sp, #8]
 8008caa:	4b24      	ldr	r3, [pc, #144]	@ (8008d3c <lfs_file_flushedread+0x1a0>)
 8008cac:	9301      	str	r3, [sp, #4]
 8008cae:	9200      	str	r2, [sp, #0]
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f7fc fa47 	bl	800514a <lfs_dir_getread>
 8008cbc:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d01d      	beq.n	8008d00 <lfs_file_flushedread+0x164>
                return err;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	e034      	b.n	8008d32 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cd2:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008cdc:	69b9      	ldr	r1, [r7, #24]
 8008cde:	9103      	str	r1, [sp, #12]
 8008ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ce2:	9102      	str	r1, [sp, #8]
 8008ce4:	9201      	str	r2, [sp, #4]
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	4623      	mov	r3, r4
 8008cea:	4602      	mov	r2, r0
 8008cec:	2100      	movs	r1, #0
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f7fb f926 	bl	8003f40 <lfs_bd_read>
 8008cf4:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <lfs_file_flushedread+0x164>
                return err;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	e018      	b.n	8008d32 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	441a      	add	r2, r3
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	441a      	add	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8008d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8008d20:	6a3a      	ldr	r2, [r7, #32]
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f47f af56 	bne.w	8008bdc <lfs_file_flushedread+0x40>
    }

    return size;
 8008d30:	683b      	ldr	r3, [r7, #0]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3728      	adds	r7, #40	@ 0x28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bdb0      	pop	{r4, r5, r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	fff7fc00 	.word	0xfff7fc00

08008d40 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <lfs_file_rawread+0x28>
 8008d5a:	4b11      	ldr	r3, [pc, #68]	@ (8008da0 <lfs_file_rawread+0x60>)
 8008d5c:	4a11      	ldr	r2, [pc, #68]	@ (8008da4 <lfs_file_rawread+0x64>)
 8008d5e:	f640 518d 	movw	r1, #3469	@ 0xd8d
 8008d62:	4811      	ldr	r0, [pc, #68]	@ (8008da8 <lfs_file_rawread+0x68>)
 8008d64:	f002 f842 	bl	800adec <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d009      	beq.n	8008d88 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8008d74:	68b9      	ldr	r1, [r7, #8]
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7ff fdb0 	bl	80088dc <lfs_file_flush>
 8008d7c:	6178      	str	r0, [r7, #20]
        if (err) {
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <lfs_file_rawread+0x48>
            return err;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	e006      	b.n	8008d96 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f7ff ff04 	bl	8008b9c <lfs_file_flushedread>
 8008d94:	4603      	mov	r3, r0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	0800c2ac 	.word	0x0800c2ac
 8008da4:	0800ca90 	.word	0x0800ca90
 8008da8:	0800bf90 	.word	0x0800bf90

08008dac <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008dac:	b5b0      	push	{r4, r5, r7, lr}
 8008dae:	b090      	sub	sp, #64	@ 0x40
 8008db0:	af04      	add	r7, sp, #16
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 810e 	beq.w	8008fec <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd6:	441a      	add	r2, r3
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4610      	mov	r0, r2
 8008de0:	f7fa ffc2 	bl	8003d68 <lfs_max>
 8008de4:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                (lfs->cfg->metadata_max ?
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
            lfs_min(0x3fe, lfs_min(
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
            lfs_min(0x3fe, lfs_min(
 8008dfc:	08db      	lsrs	r3, r3, #3
 8008dfe:	e003      	b.n	8008e08 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e04:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8008e06:	08db      	lsrs	r3, r3, #3
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	f7fa ffbc 	bl	8003d88 <lfs_min>
 8008e10:	4603      	mov	r3, r0
 8008e12:	4619      	mov	r1, r3
 8008e14:	f240 30fe 	movw	r0, #1022	@ 0x3fe
 8008e18:	f7fa ffb6 	bl	8003d88 <lfs_min>
 8008e1c:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	f240 80e4 	bls.w	8008fec <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8008e24:	68b9      	ldr	r1, [r7, #8]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f7ff fd36 	bl	8008898 <lfs_file_outline>
 8008e2c:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80db 	beq.w	8008fec <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e3a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8008e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e44:	e0d7      	b.n	8008ff6 <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d006      	beq.n	8008e60 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e5a:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d16d      	bne.n	8008f3c <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d159      	bne.n	8008f20 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d12f      	bne.n	8008ed8 <lfs_file_flushedwrite+0x12c>
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d02b      	beq.n	8008ed8 <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008e92:	3a01      	subs	r2, #1
 8008e94:	68b9      	ldr	r1, [r7, #8]
 8008e96:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8008e98:	2000      	movs	r0, #0
 8008e9a:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008e9c:	f107 0010 	add.w	r0, r7, #16
 8008ea0:	9003      	str	r0, [sp, #12]
 8008ea2:	9102      	str	r1, [sp, #8]
 8008ea4:	9201      	str	r2, [sp, #4]
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	462b      	mov	r3, r5
 8008eaa:	4622      	mov	r2, r4
 8008eac:	2100      	movs	r1, #0
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f7ff f823 	bl	8007efa <lfs_ctz_find>
 8008eb4:	6238      	str	r0, [r7, #32]
                    if (err) {
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d007      	beq.n	8008ecc <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	e094      	b.n	8008ff6 <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	3340      	adds	r3, #64	@ 0x40
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f7fb f81d 	bl	8003f12 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7fb ff61 	bl	8004da0 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8008ee4:	68fc      	ldr	r4, [r7, #12]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	3238      	adds	r2, #56	@ 0x38
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	313c      	adds	r1, #60	@ 0x3c
 8008ef6:	9102      	str	r1, [sp, #8]
 8008ef8:	9201      	str	r2, [sp, #4]
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	462b      	mov	r3, r5
 8008efe:	4622      	mov	r2, r4
 8008f00:	4601      	mov	r1, r0
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f7ff f864 	bl	8007fd0 <lfs_ctz_extend>
 8008f08:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00f      	beq.n	8008f30 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f14:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	e06a      	b.n	8008ff6 <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f06f 0201 	mvn.w	r2, #1
 8008f26:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f34:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f40:	69da      	ldr	r2, [r3, #28]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f4c:	f7fa ff1c 	bl	8003d88 <lfs_min>
 8008f50:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8008f58:	68fc      	ldr	r4, [r7, #12]
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008f62:	69b9      	ldr	r1, [r7, #24]
 8008f64:	9103      	str	r1, [sp, #12]
 8008f66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f68:	9102      	str	r1, [sp, #8]
 8008f6a:	9201      	str	r2, [sp, #4]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	2301      	movs	r3, #1
 8008f70:	4622      	mov	r2, r4
 8008f72:	4601      	mov	r1, r0
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7fb fa6f 	bl	8004458 <lfs_bd_prog>
 8008f7a:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d01c      	beq.n	8008fbc <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8008f88:	d007      	beq.n	8008f9a <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f8e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	e02d      	b.n	8008ff6 <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 8008f9a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f7ff fba0 	bl	80086e4 <lfs_file_relocate>
 8008fa4:	6178      	str	r0, [r7, #20]
            if (err) {
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0d2      	beq.n	8008f52 <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	e01c      	b.n	8008ff6 <lfs_file_flushedwrite+0x24a>
            break;
 8008fbc:	bf00      	nop
            }
        }

        file->pos += diff;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	441a      	add	r2, r3
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	441a      	add	r2, r3
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8008fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	4413      	add	r3, r2
 8008fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8008fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ack(lfs);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7fb feda 	bl	8004da0 <lfs_alloc_ack>
    while (nsize > 0) {
 8008fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f47f af29 	bne.w	8008e46 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8008ff4:	683b      	ldr	r3, [r7, #0]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3730      	adds	r7, #48	@ 0x30
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009000 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8009000:	b580      	push	{r7, lr}
 8009002:	b08a      	sub	sp, #40	@ 0x28
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d106      	bne.n	8009028 <lfs_file_rawwrite+0x28>
 800901a:	4b38      	ldr	r3, [pc, #224]	@ (80090fc <lfs_file_rawwrite+0xfc>)
 800901c:	4a38      	ldr	r2, [pc, #224]	@ (8009100 <lfs_file_rawwrite+0x100>)
 800901e:	f640 51f8 	movw	r1, #3576	@ 0xdf8
 8009022:	4838      	ldr	r0, [pc, #224]	@ (8009104 <lfs_file_rawwrite+0x104>)
 8009024:	f001 fee2 	bl	800adec <__assert_func>

    if (file->flags & LFS_F_READING) {
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800902c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d009      	beq.n	8009048 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8009034:	68b9      	ldr	r1, [r7, #8]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f7ff fc50 	bl	80088dc <lfs_file_flush>
 800903c:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 800903e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <lfs_file_rawwrite+0x48>
            return err;
 8009044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009046:	e055      	b.n	80090f4 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800904c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009050:	2b00      	cmp	r3, #0
 8009052:	d009      	beq.n	8009068 <lfs_file_rawwrite+0x68>
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905c:	429a      	cmp	r2, r3
 800905e:	d203      	bcs.n	8009068 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	441a      	add	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009074:	429a      	cmp	r2, r3
 8009076:	d902      	bls.n	800907e <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8009078:	f06f 031a 	mvn.w	r3, #26
 800907c:	e03a      	b.n	80090f4 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d121      	bne.n	80090ce <lfs_file_rawwrite+0xce>
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009092:	429a      	cmp	r2, r3
 8009094:	d91b      	bls.n	80090ce <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800909a:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 80090a4:	e00e      	b.n	80090c4 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80090a6:	2300      	movs	r3, #0
 80090a8:	75fb      	strb	r3, [r7, #23]
 80090aa:	f107 0217 	add.w	r2, r7, #23
 80090ae:	2301      	movs	r3, #1
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7ff fe7a 	bl	8008dac <lfs_file_flushedwrite>
 80090b8:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	da01      	bge.n	80090c4 <lfs_file_rawwrite+0xc4>
                return res;
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	e017      	b.n	80090f4 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c8:	6a3a      	ldr	r2, [r7, #32]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d8eb      	bhi.n	80090a6 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	68b9      	ldr	r1, [r7, #8]
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f7ff fe69 	bl	8008dac <lfs_file_flushedwrite>
 80090da:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	da01      	bge.n	80090e6 <lfs_file_rawwrite+0xe6>
        return nsize;
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	e006      	b.n	80090f4 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 80090f2:	69bb      	ldr	r3, [r7, #24]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3728      	adds	r7, #40	@ 0x28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	0800c2dc 	.word	0x0800c2dc
 8009100:	0800caa4 	.word	0x0800caa4
 8009104:	0800bf90 	.word	0x0800bf90

08009108 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8009108:	b580      	push	{r7, lr}
 800910a:	b08c      	sub	sp, #48	@ 0x30
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800911a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d102      	bne.n	8009128 <lfs_file_rawseek+0x20>
        npos = off;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009126:	e025      	b.n	8009174 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d10f      	bne.n	800914e <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009132:	461a      	mov	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4413      	add	r3, r2
 8009138:	2b00      	cmp	r3, #0
 800913a:	da02      	bge.n	8009142 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 800913c:	f06f 0315 	mvn.w	r3, #21
 8009140:	e067      	b.n	8009212 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4413      	add	r3, r2
 800914a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800914c:	e012      	b.n	8009174 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d10f      	bne.n	8009174 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 f875 	bl	8009246 <lfs_file_rawsize>
 800915c:	4602      	mov	r2, r0
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4413      	add	r3, r2
 8009162:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 8009164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009166:	2b00      	cmp	r3, #0
 8009168:	da02      	bge.n	8009170 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 800916a:	f06f 0315 	mvn.w	r3, #21
 800916e:	e050      	b.n	8009212 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8009170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009172:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800917a:	429a      	cmp	r2, r3
 800917c:	d902      	bls.n	8009184 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 800917e:	f06f 0315 	mvn.w	r3, #21
 8009182:	e046      	b.n	8009212 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800918a:	429a      	cmp	r2, r3
 800918c:	d101      	bne.n	8009192 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 800918e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009190:	e03f      	b.n	8009212 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 800919a:	2b00      	cmp	r3, #0
 800919c:	d12b      	bne.n	80091f6 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091a2:	61bb      	str	r3, [r7, #24]
 80091a4:	f107 0318 	add.w	r3, r7, #24
 80091a8:	4619      	mov	r1, r3
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f7fe fe6d 	bl	8007e8a <lfs_ctz_index>
 80091b0:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 80091b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b4:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 80091b6:	f107 0314 	add.w	r3, r7, #20
 80091ba:	4619      	mov	r1, r3
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f7fe fe64 	bl	8007e8a <lfs_ctz_index>
 80091c2:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 80091c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d114      	bne.n	80091f6 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d80f      	bhi.n	80091f6 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091de:	441a      	add	r2, r3
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d907      	bls.n	80091f6 <lfs_file_rawseek+0xee>
            file->pos = npos;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091ea:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 80091f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f4:	e00d      	b.n	8009212 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 80091f6:	68b9      	ldr	r1, [r7, #8]
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f7ff fb6f 	bl	80088dc <lfs_file_flush>
 80091fe:	61f8      	str	r0, [r7, #28]
    if (err) {
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <lfs_file_rawseek+0x102>
        return err;
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	e003      	b.n	8009212 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800920e:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8009210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009212:	4618      	mov	r0, r3
 8009214:	3730      	adds	r7, #48	@ 0x30
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <lfs_file_rawrewind>:
static lfs_soff_t lfs_file_rawtell(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 8009224:	2300      	movs	r3, #0
 8009226:	2200      	movs	r2, #0
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff ff6c 	bl	8009108 <lfs_file_rawseek>
 8009230:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	da01      	bge.n	800923c <lfs_file_rawrewind+0x22>
        return (int)res;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	e000      	b.n	800923e <lfs_file_rawrewind+0x24>
    }

    return 0;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d009      	beq.n	8009270 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7fa fd7e 	bl	8003d68 <lfs_max>
 800926c:	4603      	mov	r3, r0
 800926e:	e001      	b.n	8009274 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800927c:	b580      	push	{r7, lr}
 800927e:	b08c      	sub	sp, #48	@ 0x30
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	669a      	str	r2, [r3, #104]	@ 0x68
    int err = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d106      	bne.n	80092a8 <lfs_init+0x2c>
 800929a:	4b98      	ldr	r3, [pc, #608]	@ (80094fc <lfs_init+0x280>)
 800929c:	4a98      	ldr	r2, [pc, #608]	@ (8009500 <lfs_init+0x284>)
 800929e:	f241 0115 	movw	r1, #4117	@ 0x1015
 80092a2:	4898      	ldr	r0, [pc, #608]	@ (8009504 <lfs_init+0x288>)
 80092a4:	f001 fda2 	bl	800adec <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d106      	bne.n	80092c0 <lfs_init+0x44>
 80092b2:	4b95      	ldr	r3, [pc, #596]	@ (8009508 <lfs_init+0x28c>)
 80092b4:	4a92      	ldr	r2, [pc, #584]	@ (8009500 <lfs_init+0x284>)
 80092b6:	f241 0116 	movw	r1, #4118	@ 0x1016
 80092ba:	4892      	ldr	r0, [pc, #584]	@ (8009504 <lfs_init+0x288>)
 80092bc:	f001 fd96 	bl	800adec <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d106      	bne.n	80092d8 <lfs_init+0x5c>
 80092ca:	4b90      	ldr	r3, [pc, #576]	@ (800950c <lfs_init+0x290>)
 80092cc:	4a8c      	ldr	r2, [pc, #560]	@ (8009500 <lfs_init+0x284>)
 80092ce:	f241 0117 	movw	r1, #4119	@ 0x1017
 80092d2:	488c      	ldr	r0, [pc, #560]	@ (8009504 <lfs_init+0x288>)
 80092d4:	f001 fd8a 	bl	800adec <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80092e2:	6952      	ldr	r2, [r2, #20]
 80092e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80092e8:	fb01 f202 	mul.w	r2, r1, r2
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d006      	beq.n	8009300 <lfs_init+0x84>
 80092f2:	4b87      	ldr	r3, [pc, #540]	@ (8009510 <lfs_init+0x294>)
 80092f4:	4a82      	ldr	r2, [pc, #520]	@ (8009500 <lfs_init+0x284>)
 80092f6:	f241 011b 	movw	r1, #4123	@ 0x101b
 80092fa:	4882      	ldr	r0, [pc, #520]	@ (8009504 <lfs_init+0x288>)
 80092fc:	f001 fd76 	bl	800adec <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800930a:	6992      	ldr	r2, [r2, #24]
 800930c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009310:	fb01 f202 	mul.w	r2, r1, r2
 8009314:	1a9b      	subs	r3, r3, r2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d006      	beq.n	8009328 <lfs_init+0xac>
 800931a:	4b7e      	ldr	r3, [pc, #504]	@ (8009514 <lfs_init+0x298>)
 800931c:	4a78      	ldr	r2, [pc, #480]	@ (8009500 <lfs_init+0x284>)
 800931e:	f241 011c 	movw	r1, #4124	@ 0x101c
 8009322:	4878      	ldr	r0, [pc, #480]	@ (8009504 <lfs_init+0x288>)
 8009324:	f001 fd62 	bl	800adec <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800932c:	69db      	ldr	r3, [r3, #28]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009332:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009334:	fbb3 f1f2 	udiv	r1, r3, r2
 8009338:	fb01 f202 	mul.w	r2, r1, r2
 800933c:	1a9b      	subs	r3, r3, r2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d006      	beq.n	8009350 <lfs_init+0xd4>
 8009342:	4b75      	ldr	r3, [pc, #468]	@ (8009518 <lfs_init+0x29c>)
 8009344:	4a6e      	ldr	r2, [pc, #440]	@ (8009500 <lfs_init+0x284>)
 8009346:	f241 011d 	movw	r1, #4125	@ 0x101d
 800934a:	486e      	ldr	r0, [pc, #440]	@ (8009504 <lfs_init+0x288>)
 800934c:	f001 fd4e 	bl	800adec <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	2b7f      	cmp	r3, #127	@ 0x7f
 8009358:	d806      	bhi.n	8009368 <lfs_init+0xec>
 800935a:	4b70      	ldr	r3, [pc, #448]	@ (800951c <lfs_init+0x2a0>)
 800935c:	4a68      	ldr	r2, [pc, #416]	@ (8009500 <lfs_init+0x284>)
 800935e:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8009362:	4868      	ldr	r0, [pc, #416]	@ (8009504 <lfs_init+0x288>)
 8009364:	f001 fd42 	bl	800adec <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	3b08      	subs	r3, #8
 8009370:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009374:	fbb2 f3f3 	udiv	r3, r2, r3
 8009378:	4618      	mov	r0, r3
 800937a:	f7fa fd3c 	bl	8003df6 <lfs_npw2>
 800937e:	4603      	mov	r3, r0
 8009380:	009a      	lsls	r2, r3, #2
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	429a      	cmp	r2, r3
 800938a:	d906      	bls.n	800939a <lfs_init+0x11e>
 800938c:	4b64      	ldr	r3, [pc, #400]	@ (8009520 <lfs_init+0x2a4>)
 800938e:	4a5c      	ldr	r2, [pc, #368]	@ (8009500 <lfs_init+0x284>)
 8009390:	f241 0123 	movw	r1, #4131	@ 0x1023
 8009394:	485b      	ldr	r0, [pc, #364]	@ (8009504 <lfs_init+0x288>)
 8009396:	f001 fd29 	bl	800adec <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800939e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d106      	bne.n	80093b2 <lfs_init+0x136>
 80093a4:	4b5f      	ldr	r3, [pc, #380]	@ (8009524 <lfs_init+0x2a8>)
 80093a6:	4a56      	ldr	r2, [pc, #344]	@ (8009500 <lfs_init+0x284>)
 80093a8:	f241 012c 	movw	r1, #4140	@ 0x102c
 80093ac:	4855      	ldr	r0, [pc, #340]	@ (8009504 <lfs_init+0x288>)
 80093ae:	f001 fd1d 	bl	800adec <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d005      	beq.n	80093c8 <lfs_init+0x14c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	60da      	str	r2, [r3, #12]
 80093c6:	e010      	b.n	80093ea <lfs_init+0x16e>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fa fd79 	bl	8003ec6 <lfs_malloc>
 80093d4:	4602      	mov	r2, r0
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d103      	bne.n	80093ea <lfs_init+0x16e>
            err = LFS_ERR_NOMEM;
 80093e2:	f06f 030b 	mvn.w	r3, #11
 80093e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 80093e8:	e0ff      	b.n	80095ea <lfs_init+0x36e>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d005      	beq.n	8009400 <lfs_init+0x184>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	61da      	str	r2, [r3, #28]
 80093fe:	e010      	b.n	8009422 <lfs_init+0x1a6>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009406:	4618      	mov	r0, r3
 8009408:	f7fa fd5d 	bl	8003ec6 <lfs_malloc>
 800940c:	4602      	mov	r2, r0
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d103      	bne.n	8009422 <lfs_init+0x1a6>
            err = LFS_ERR_NOMEM;
 800941a:	f06f 030b 	mvn.w	r3, #11
 800941e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8009420:	e0e3      	b.n	80095ea <lfs_init+0x36e>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7fa fd73 	bl	8003f12 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3310      	adds	r3, #16
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7fa fd6d 	bl	8003f12 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800943c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943e:	2b00      	cmp	r3, #0
 8009440:	d106      	bne.n	8009450 <lfs_init+0x1d4>
 8009442:	4b39      	ldr	r3, [pc, #228]	@ (8009528 <lfs_init+0x2ac>)
 8009444:	4a2e      	ldr	r2, [pc, #184]	@ (8009500 <lfs_init+0x284>)
 8009446:	f241 014a 	movw	r1, #4170	@ 0x104a
 800944a:	482e      	ldr	r0, [pc, #184]	@ (8009504 <lfs_init+0x288>)
 800944c:	f001 fcce 	bl	800adec <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009456:	f003 0307 	and.w	r3, r3, #7
 800945a:	2b00      	cmp	r3, #0
 800945c:	d106      	bne.n	800946c <lfs_init+0x1f0>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d006      	beq.n	800947a <lfs_init+0x1fe>
 800946c:	4b2f      	ldr	r3, [pc, #188]	@ (800952c <lfs_init+0x2b0>)
 800946e:	4a24      	ldr	r2, [pc, #144]	@ (8009500 <lfs_init+0x284>)
 8009470:	f241 014b 	movw	r1, #4171	@ 0x104b
 8009474:	4823      	ldr	r0, [pc, #140]	@ (8009504 <lfs_init+0x288>)
 8009476:	f001 fcb9 	bl	800adec <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800947e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009480:	2b00      	cmp	r3, #0
 8009482:	d005      	beq.n	8009490 <lfs_init+0x214>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	665a      	str	r2, [r3, #100]	@ 0x64
 800948e:	e010      	b.n	80094b2 <lfs_init+0x236>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009496:	4618      	mov	r0, r3
 8009498:	f7fa fd15 	bl	8003ec6 <lfs_malloc>
 800949c:	4602      	mov	r2, r0
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->free.buffer) {
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d103      	bne.n	80094b2 <lfs_init+0x236>
            err = LFS_ERR_NOMEM;
 80094aa:	f06f 030b 	mvn.w	r3, #11
 80094ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 80094b0:	e09b      	b.n	80095ea <lfs_init+0x36e>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094b8:	2bff      	cmp	r3, #255	@ 0xff
 80094ba:	d906      	bls.n	80094ca <lfs_init+0x24e>
 80094bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009530 <lfs_init+0x2b4>)
 80094be:	4a10      	ldr	r2, [pc, #64]	@ (8009500 <lfs_init+0x284>)
 80094c0:	f241 0158 	movw	r1, #4184	@ 0x1058
 80094c4:	480f      	ldr	r0, [pc, #60]	@ (8009504 <lfs_init+0x288>)
 80094c6:	f001 fc91 	bl	800adec <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (!lfs->name_max) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d102      	bne.n	80094e2 <lfs_init+0x266>
        lfs->name_max = LFS_NAME_MAX;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	22ff      	movs	r2, #255	@ 0xff
 80094e0:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	da25      	bge.n	8009538 <lfs_init+0x2bc>
 80094ec:	4b11      	ldr	r3, [pc, #68]	@ (8009534 <lfs_init+0x2b8>)
 80094ee:	4a04      	ldr	r2, [pc, #16]	@ (8009500 <lfs_init+0x284>)
 80094f0:	f241 015e 	movw	r1, #4190	@ 0x105e
 80094f4:	4803      	ldr	r0, [pc, #12]	@ (8009504 <lfs_init+0x288>)
 80094f6:	f001 fc79 	bl	800adec <__assert_func>
 80094fa:	bf00      	nop
 80094fc:	0800c30c 	.word	0x0800c30c
 8009500:	0800cab8 	.word	0x0800cab8
 8009504:	0800bf90 	.word	0x0800bf90
 8009508:	0800c328 	.word	0x0800c328
 800950c:	0800c344 	.word	0x0800c344
 8009510:	0800c360 	.word	0x0800c360
 8009514:	0800c390 	.word	0x0800c390
 8009518:	0800c3c0 	.word	0x0800c3c0
 800951c:	0800c3f4 	.word	0x0800c3f4
 8009520:	0800c410 	.word	0x0800c410
 8009524:	0800c45c 	.word	0x0800c45c
 8009528:	0800c478 	.word	0x0800c478
 800952c:	0800c498 	.word	0x0800c498
 8009530:	0800c4ec 	.word	0x0800c4ec
 8009534:	0800c508 	.word	0x0800c508
    lfs->file_max = lfs->cfg->file_max;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800953c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->file_max) {
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009546:	2b00      	cmp	r3, #0
 8009548:	d103      	bne.n	8009552 <lfs_init+0x2d6>
        lfs->file_max = LFS_FILE_MAX;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8009550:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009558:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800955c:	4293      	cmp	r3, r2
 800955e:	d906      	bls.n	800956e <lfs_init+0x2f2>
 8009560:	4b26      	ldr	r3, [pc, #152]	@ (80095fc <lfs_init+0x380>)
 8009562:	4a27      	ldr	r2, [pc, #156]	@ (8009600 <lfs_init+0x384>)
 8009564:	f241 0164 	movw	r1, #4196	@ 0x1064
 8009568:	4826      	ldr	r0, [pc, #152]	@ (8009604 <lfs_init+0x388>)
 800956a:	f001 fc3f 	bl	800adec <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009572:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->attr_max) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <lfs_init+0x30c>
        lfs->attr_max = LFS_ATTR_MAX;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8009586:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800958c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	429a      	cmp	r2, r3
 8009596:	d906      	bls.n	80095a6 <lfs_init+0x32a>
 8009598:	4b1b      	ldr	r3, [pc, #108]	@ (8009608 <lfs_init+0x38c>)
 800959a:	4a19      	ldr	r2, [pc, #100]	@ (8009600 <lfs_init+0x384>)
 800959c:	f241 016a 	movw	r1, #4202	@ 0x106a
 80095a0:	4818      	ldr	r0, [pc, #96]	@ (8009604 <lfs_init+0x388>)
 80095a2:	f001 fc23 	bl	800adec <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095ac:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095b4:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	333c      	adds	r3, #60	@ 0x3c
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	605a      	str	r2, [r3, #4]
 80095cc:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3330      	adds	r3, #48	@ 0x30
 80095d2:	2200      	movs	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	605a      	str	r2, [r3, #4]
 80095d8:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	3348      	adds	r3, #72	@ 0x48
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	605a      	str	r2, [r3, #4]
 80095e4:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	e003      	b.n	80095f2 <lfs_init+0x376>

cleanup:
    lfs_deinit(lfs);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f80e 	bl	800960c <lfs_deinit>
    return err;
 80095f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3730      	adds	r7, #48	@ 0x30
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	0800c52c 	.word	0x0800c52c
 8009600:	0800cab8 	.word	0x0800cab8
 8009604:	0800bf90 	.word	0x0800bf90
 8009608:	0800c548 	.word	0x0800c548

0800960c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800961a:	2b00      	cmp	r3, #0
 800961c:	d104      	bne.n	8009628 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	4618      	mov	r0, r3
 8009624:	f7fa fc5b 	bl	8003ede <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800962c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800962e:	2b00      	cmp	r3, #0
 8009630:	d104      	bne.n	800963c <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	4618      	mov	r0, r3
 8009638:	f7fa fc51 	bl	8003ede <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009642:	2b00      	cmp	r3, #0
 8009644:	d104      	bne.n	8009650 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800964a:	4618      	mov	r0, r3
 800964c:	f7fa fc47 	bl	8003ede <lfs_free>
    }

    return 0;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 800965c:	b580      	push	{r7, lr}
 800965e:	b0a0      	sub	sp, #128	@ 0x80
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
    int err = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff fe05 	bl	800927c <lfs_init>
 8009672:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8009674:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <lfs_rawformat+0x22>
            return err;
 800967a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800967c:	e084      	b.n	8009788 <lfs_rawformat+0x12c>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009688:	461a      	mov	r2, r3
 800968a:	2100      	movs	r1, #0
 800968c:	f001 fdcb 	bl	800b226 <memset>
        lfs->free.off = 0;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800969a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969c:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096a2:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80096a4:	4619      	mov	r1, r3
 80096a6:	4610      	mov	r0, r2
 80096a8:	f7fa fb6e 	bl	8003d88 <lfs_min>
 80096ac:	4602      	mov	r2, r0
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	659a      	str	r2, [r3, #88]	@ 0x58
        lfs->free.i = 0;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ack(lfs);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7fb fb71 	bl	8004da0 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80096be:	f107 030c 	add.w	r3, r7, #12
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7fd f9dd 	bl	8006a84 <lfs_dir_alloc>
 80096ca:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80096cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d151      	bne.n	8009776 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7fb fb04 	bl	8004ce0 <lfs_fs_disk_version>
 80096d8:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 80096da:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096e0:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80096e2:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->cfg->block_count,
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096e8:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 80096ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 80096f0:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 80096f6:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 80096fc:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 80096fe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009702:	4618      	mov	r0, r3
 8009704:	f7fb fa62 	bl	8004bcc <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8009708:	4b21      	ldr	r3, [pc, #132]	@ (8009790 <lfs_rawformat+0x134>)
 800970a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800970c:	2300      	movs	r3, #0
 800970e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009710:	4b20      	ldr	r3, [pc, #128]	@ (8009794 <lfs_rawformat+0x138>)
 8009712:	657b      	str	r3, [r7, #84]	@ 0x54
 8009714:	4b20      	ldr	r3, [pc, #128]	@ (8009798 <lfs_rawformat+0x13c>)
 8009716:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009718:	4b20      	ldr	r3, [pc, #128]	@ (800979c <lfs_rawformat+0x140>)
 800971a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800971c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009720:	663b      	str	r3, [r7, #96]	@ 0x60
 8009722:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8009726:	f107 010c 	add.w	r1, r7, #12
 800972a:	2303      	movs	r3, #3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7fe fb87 	bl	8007e40 <lfs_dir_commit>
 8009732:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8009734:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009736:	2b00      	cmp	r3, #0
 8009738:	d11f      	bne.n	800977a <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800973a:	2300      	movs	r3, #0
 800973c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8009740:	f107 010c 	add.w	r1, r7, #12
 8009744:	2300      	movs	r3, #0
 8009746:	2200      	movs	r2, #0
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7fe fb79 	bl	8007e40 <lfs_dir_commit>
 800974e:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8009750:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009752:	2b00      	cmp	r3, #0
 8009754:	d113      	bne.n	800977e <lfs_rawformat+0x122>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8009756:	2300      	movs	r3, #0
 8009758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800975a:	2301      	movs	r3, #1
 800975c:	633b      	str	r3, [r7, #48]	@ 0x30
 800975e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009762:	f107 030c 	add.w	r3, r7, #12
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7fc fdd3 	bl	8006314 <lfs_dir_fetch>
 800976e:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8009770:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009772:	2b00      	cmp	r3, #0
 8009774:	e004      	b.n	8009780 <lfs_rawformat+0x124>
            goto cleanup;
 8009776:	bf00      	nop
 8009778:	e002      	b.n	8009780 <lfs_rawformat+0x124>
            goto cleanup;
 800977a:	bf00      	nop
 800977c:	e000      	b.n	8009780 <lfs_rawformat+0x124>
            goto cleanup;
 800977e:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7ff ff43 	bl	800960c <lfs_deinit>
    return err;
 8009786:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 8009788:	4618      	mov	r0, r3
 800978a:	3780      	adds	r7, #128	@ 0x80
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	40100000 	.word	0x40100000
 8009794:	0ff00008 	.word	0x0ff00008
 8009798:	0800c578 	.word	0x0800c578
 800979c:	20100018 	.word	0x20100018

080097a0 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 80097a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097a2:	b09f      	sub	sp, #124	@ 0x7c
 80097a4:	af04      	add	r7, sp, #16
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7ff fd65 	bl	800927c <lfs_init>
 80097b2:	6678      	str	r0, [r7, #100]	@ 0x64
    if (err) {
 80097b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <lfs_rawmount+0x1e>
        return err;
 80097ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097bc:	e1f5      	b.n	8009baa <lfs_rawmount+0x40a>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80097be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80097c2:	2220      	movs	r2, #32
 80097c4:	2100      	movs	r1, #0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 fd2d 	bl	800b226 <memset>
 80097cc:	2301      	movs	r3, #1
 80097ce:	653b      	str	r3, [r7, #80]	@ 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80097d0:	4aa3      	ldr	r2, [pc, #652]	@ (8009a60 <lfs_rawmount+0x2c0>)
 80097d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80097da:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80097de:	2301      	movs	r3, #1
 80097e0:	663b      	str	r3, [r7, #96]	@ 0x60
    lfs_size_t tortoise_period = 1;
 80097e2:	2301      	movs	r3, #1
 80097e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80097e6:	e17f      	b.n	8009ae8 <lfs_rawmount+0x348>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80097e8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80097ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80097f0:	3318      	adds	r3, #24
 80097f2:	4611      	mov	r1, r2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fa ff69 	bl	80046cc <lfs_pair_issync>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00a      	beq.n	8009816 <lfs_rawmount+0x76>
            LFS_WARN("Cycle detected in tail list");
 8009800:	4b98      	ldr	r3, [pc, #608]	@ (8009a64 <lfs_rawmount+0x2c4>)
 8009802:	f44f 5287 	mov.w	r2, #4320	@ 0x10e0
 8009806:	4998      	ldr	r1, [pc, #608]	@ (8009a68 <lfs_rawmount+0x2c8>)
 8009808:	4898      	ldr	r0, [pc, #608]	@ (8009a6c <lfs_rawmount+0x2cc>)
 800980a:	f001 fc9f 	bl	800b14c <iprintf>
            err = LFS_ERR_CORRUPT;
 800980e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8009812:	667b      	str	r3, [r7, #100]	@ 0x64
            goto cleanup;
 8009814:	e1c5      	b.n	8009ba2 <lfs_rawmount+0x402>
        }
        if (tortoise_i == tortoise_period) {
 8009816:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009818:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800981a:	429a      	cmp	r2, r3
 800981c:	d108      	bne.n	8009830 <lfs_rawmount+0x90>
            tortoise[0] = dir.tail[0];
 800981e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009820:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise[1] = dir.tail[1];
 8009822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009824:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise_i = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	663b      	str	r3, [r7, #96]	@ 0x60
            tortoise_period *= 2;
 800982a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
        tortoise_i += 1;
 8009830:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009832:	3301      	adds	r3, #1
 8009834:	663b      	str	r3, [r7, #96]	@ 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	623b      	str	r3, [r7, #32]
 800983a:	4b8d      	ldr	r3, [pc, #564]	@ (8009a70 <lfs_rawmount+0x2d0>)
 800983c:	627b      	str	r3, [r7, #36]	@ 0x24
 800983e:	2308      	movs	r3, #8
 8009840:	62bb      	str	r3, [r7, #40]	@ 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8009842:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009846:	f103 0218 	add.w	r2, r3, #24
 800984a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800984e:	f107 0320 	add.w	r3, r7, #32
 8009852:	9303      	str	r3, [sp, #12]
 8009854:	4b87      	ldr	r3, [pc, #540]	@ (8009a74 <lfs_rawmount+0x2d4>)
 8009856:	9302      	str	r3, [sp, #8]
 8009858:	2300      	movs	r3, #0
 800985a:	9301      	str	r3, [sp, #4]
 800985c:	4b86      	ldr	r3, [pc, #536]	@ (8009a78 <lfs_rawmount+0x2d8>)
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	4b86      	ldr	r3, [pc, #536]	@ (8009a7c <lfs_rawmount+0x2dc>)
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7fc f988 	bl	8005b78 <lfs_dir_fetchmatch>
 8009868:	65b8      	str	r0, [r7, #88]	@ 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800986a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800986c:	2b00      	cmp	r3, #0
 800986e:	da02      	bge.n	8009876 <lfs_rawmount+0xd6>
            err = tag;
 8009870:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009872:	667b      	str	r3, [r7, #100]	@ 0x64
            goto cleanup;
 8009874:	e195      	b.n	8009ba2 <lfs_rawmount+0x402>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8009876:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 8128 	beq.w	8009ace <lfs_rawmount+0x32e>
 800987e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009880:	4618      	mov	r0, r3
 8009882:	f7fa ff92 	bl	80047aa <lfs_tag_isdelete>
 8009886:	4603      	mov	r3, r0
 8009888:	f083 0301 	eor.w	r3, r3, #1
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 811d 	beq.w	8009ace <lfs_rawmount+0x32e>
            // update root
            lfs->root[0] = dir.pair[0];
 8009894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800989a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80098a0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80098a4:	f107 0308 	add.w	r3, r7, #8
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	4b75      	ldr	r3, [pc, #468]	@ (8009a80 <lfs_rawmount+0x2e0>)
 80098ac:	4a73      	ldr	r2, [pc, #460]	@ (8009a7c <lfs_rawmount+0x2dc>)
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7fb fc30 	bl	8005114 <lfs_dir_get>
 80098b4:	65b8      	str	r0, [r7, #88]	@ 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80098b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	da02      	bge.n	80098c2 <lfs_rawmount+0x122>
                err = tag;
 80098bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098be:	667b      	str	r3, [r7, #100]	@ 0x64
                goto cleanup;
 80098c0:	e16f      	b.n	8009ba2 <lfs_rawmount+0x402>
            }
            lfs_superblock_fromle32(&superblock);
 80098c2:	f107 0308 	add.w	r3, r7, #8
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fb f948 	bl	8004b5c <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	0c1b      	lsrs	r3, r3, #16
 80098d0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7fb fa0e 	bl	8004cfc <lfs_fs_disk_version_major>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d108      	bne.n	80098fe <lfs_rawmount+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7fb fa13 	bl	8004d18 <lfs_fs_disk_version_minor>
 80098f2:	4603      	mov	r3, r0
 80098f4:	461a      	mov	r2, r3
 80098f6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d91d      	bls.n	800993a <lfs_rawmount+0x19a>
                LFS_ERROR("Invalid version "
 80098fe:	f8b7 5056 	ldrh.w	r5, [r7, #86]	@ 0x56
 8009902:	f8b7 4054 	ldrh.w	r4, [r7, #84]	@ 0x54
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7fb f9f8 	bl	8004cfc <lfs_fs_disk_version_major>
 800990c:	4603      	mov	r3, r0
 800990e:	461e      	mov	r6, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7fb fa01 	bl	8004d18 <lfs_fs_disk_version_minor>
 8009916:	4603      	mov	r3, r0
 8009918:	461a      	mov	r2, r3
 800991a:	4b52      	ldr	r3, [pc, #328]	@ (8009a64 <lfs_rawmount+0x2c4>)
 800991c:	9303      	str	r3, [sp, #12]
 800991e:	9202      	str	r2, [sp, #8]
 8009920:	9601      	str	r6, [sp, #4]
 8009922:	9400      	str	r4, [sp, #0]
 8009924:	462b      	mov	r3, r5
 8009926:	f241 120e 	movw	r2, #4366	@ 0x110e
 800992a:	494f      	ldr	r1, [pc, #316]	@ (8009a68 <lfs_rawmount+0x2c8>)
 800992c:	4855      	ldr	r0, [pc, #340]	@ (8009a84 <lfs_rawmount+0x2e4>)
 800992e:	f001 fc0d 	bl	800b14c <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8009932:	f06f 0315 	mvn.w	r3, #21
 8009936:	667b      	str	r3, [r7, #100]	@ 0x64
                goto cleanup;
 8009938:	e0c8      	b.n	8009acc <lfs_rawmount+0x32c>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7fb f9ec 	bl	8004d18 <lfs_fs_disk_version_minor>
 8009940:	4603      	mov	r3, r0
 8009942:	461a      	mov	r2, r3
 8009944:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8009948:	4293      	cmp	r3, r2
 800994a:	d21d      	bcs.n	8009988 <lfs_rawmount+0x1e8>
                LFS_DEBUG("Found older minor version "
 800994c:	f8b7 5056 	ldrh.w	r5, [r7, #86]	@ 0x56
 8009950:	f8b7 4054 	ldrh.w	r4, [r7, #84]	@ 0x54
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7fb f9d1 	bl	8004cfc <lfs_fs_disk_version_major>
 800995a:	4603      	mov	r3, r0
 800995c:	461e      	mov	r6, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7fb f9da 	bl	8004d18 <lfs_fs_disk_version_minor>
 8009964:	4603      	mov	r3, r0
 8009966:	461a      	mov	r2, r3
 8009968:	4b3e      	ldr	r3, [pc, #248]	@ (8009a64 <lfs_rawmount+0x2c4>)
 800996a:	9303      	str	r3, [sp, #12]
 800996c:	9202      	str	r2, [sp, #8]
 800996e:	9601      	str	r6, [sp, #4]
 8009970:	9400      	str	r4, [sp, #0]
 8009972:	462b      	mov	r3, r5
 8009974:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009978:	493b      	ldr	r1, [pc, #236]	@ (8009a68 <lfs_rawmount+0x2c8>)
 800997a:	4843      	ldr	r0, [pc, #268]	@ (8009a88 <lfs_rawmount+0x2e8>)
 800997c:	f001 fbe6 	bl	800b14c <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 8009980:	2101      	movs	r1, #1
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fbae 	bl	800a0e4 <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d018      	beq.n	80099c0 <lfs_rawmount+0x220>
                if (superblock.name_max > lfs->name_max) {
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009994:	429a      	cmp	r2, r3
 8009996:	d910      	bls.n	80099ba <lfs_rawmount+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800999e:	4931      	ldr	r1, [pc, #196]	@ (8009a64 <lfs_rawmount+0x2c4>)
 80099a0:	9101      	str	r1, [sp, #4]
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	4613      	mov	r3, r2
 80099a6:	f241 122a 	movw	r2, #4394	@ 0x112a
 80099aa:	492f      	ldr	r1, [pc, #188]	@ (8009a68 <lfs_rawmount+0x2c8>)
 80099ac:	4837      	ldr	r0, [pc, #220]	@ (8009a8c <lfs_rawmount+0x2ec>)
 80099ae:	f001 fbcd 	bl	800b14c <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 80099b2:	f06f 0315 	mvn.w	r3, #21
 80099b6:	667b      	str	r3, [r7, #100]	@ 0x64
                    goto cleanup;
 80099b8:	e088      	b.n	8009acc <lfs_rawmount+0x32c>
                }

                lfs->name_max = superblock.name_max;
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            if (superblock.file_max) {
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d018      	beq.n	80099f8 <lfs_rawmount+0x258>
                if (superblock.file_max > lfs->file_max) {
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d910      	bls.n	80099f2 <lfs_rawmount+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80099d0:	69ba      	ldr	r2, [r7, #24]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099d6:	4923      	ldr	r1, [pc, #140]	@ (8009a64 <lfs_rawmount+0x2c4>)
 80099d8:	9101      	str	r1, [sp, #4]
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	4613      	mov	r3, r2
 80099de:	f241 1235 	movw	r2, #4405	@ 0x1135
 80099e2:	4921      	ldr	r1, [pc, #132]	@ (8009a68 <lfs_rawmount+0x2c8>)
 80099e4:	482a      	ldr	r0, [pc, #168]	@ (8009a90 <lfs_rawmount+0x2f0>)
 80099e6:	f001 fbb1 	bl	800b14c <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80099ea:	f06f 0315 	mvn.w	r3, #21
 80099ee:	667b      	str	r3, [r7, #100]	@ 0x64
                    goto cleanup;
 80099f0:	e06c      	b.n	8009acc <lfs_rawmount+0x32c>
                }

                lfs->file_max = superblock.file_max;
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.attr_max) {
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d018      	beq.n	8009a30 <lfs_rawmount+0x290>
                if (superblock.attr_max > lfs->attr_max) {
 80099fe:	69fa      	ldr	r2, [r7, #28]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d910      	bls.n	8009a2a <lfs_rawmount+0x28a>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8009a08:	69fa      	ldr	r2, [r7, #28]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a0e:	4915      	ldr	r1, [pc, #84]	@ (8009a64 <lfs_rawmount+0x2c4>)
 8009a10:	9101      	str	r1, [sp, #4]
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	4613      	mov	r3, r2
 8009a16:	f44f 528a 	mov.w	r2, #4416	@ 0x1140
 8009a1a:	4913      	ldr	r1, [pc, #76]	@ (8009a68 <lfs_rawmount+0x2c8>)
 8009a1c:	481d      	ldr	r0, [pc, #116]	@ (8009a94 <lfs_rawmount+0x2f4>)
 8009a1e:	f001 fb95 	bl	800b14c <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8009a22:	f06f 0315 	mvn.w	r3, #21
 8009a26:	667b      	str	r3, [r7, #100]	@ 0x64
                    goto cleanup;
 8009a28:	e050      	b.n	8009acc <lfs_rawmount+0x32c>
                }

                lfs->attr_max = superblock.attr_max;
 8009a2a:	69fa      	ldr	r2, [r7, #28]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d02f      	beq.n	8009a9c <lfs_rawmount+0x2fc>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a42:	6a1b      	ldr	r3, [r3, #32]
 8009a44:	4907      	ldr	r1, [pc, #28]	@ (8009a64 <lfs_rawmount+0x2c4>)
 8009a46:	9101      	str	r1, [sp, #4]
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	f241 124a 	movw	r2, #4426	@ 0x114a
 8009a50:	4905      	ldr	r1, [pc, #20]	@ (8009a68 <lfs_rawmount+0x2c8>)
 8009a52:	4811      	ldr	r0, [pc, #68]	@ (8009a98 <lfs_rawmount+0x2f8>)
 8009a54:	f001 fb7a 	bl	800b14c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8009a58:	f06f 0315 	mvn.w	r3, #21
 8009a5c:	667b      	str	r3, [r7, #100]	@ 0x64
                goto cleanup;
 8009a5e:	e035      	b.n	8009acc <lfs_rawmount+0x32c>
 8009a60:	0800c0c8 	.word	0x0800c0c8
 8009a64:	0800c084 	.word	0x0800c084
 8009a68:	0800bf90 	.word	0x0800bf90
 8009a6c:	0800c584 	.word	0x0800c584
 8009a70:	0800c578 	.word	0x0800c578
 8009a74:	080063b1 	.word	0x080063b1
 8009a78:	0ff00008 	.word	0x0ff00008
 8009a7c:	7ffffc00 	.word	0x7ffffc00
 8009a80:	20100018 	.word	0x20100018
 8009a84:	0800c5b0 	.word	0x0800c5b0
 8009a88:	0800c5e8 	.word	0x0800c5e8
 8009a8c:	0800c628 	.word	0x0800c628
 8009a90:	0800c65c 	.word	0x0800c65c
 8009a94:	0800c690 	.word	0x0800c690
 8009a98:	0800c6c4 	.word	0x0800c6c4
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d012      	beq.n	8009ace <lfs_rawmount+0x32e>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	4940      	ldr	r1, [pc, #256]	@ (8009bb4 <lfs_rawmount+0x414>)
 8009ab2:	9101      	str	r1, [sp, #4]
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	f241 1251 	movw	r2, #4433	@ 0x1151
 8009abc:	493e      	ldr	r1, [pc, #248]	@ (8009bb8 <lfs_rawmount+0x418>)
 8009abe:	483f      	ldr	r0, [pc, #252]	@ (8009bbc <lfs_rawmount+0x41c>)
 8009ac0:	f001 fb44 	bl	800b14c <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8009ac4:	f06f 0315 	mvn.w	r3, #21
 8009ac8:	667b      	str	r3, [r7, #100]	@ 0x64
                goto cleanup;
 8009aca:	bf00      	nop
            goto cleanup;
 8009acc:	e069      	b.n	8009ba2 <lfs_rawmount+0x402>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009ad4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7fc fc36 	bl	800634c <lfs_dir_getgstate>
 8009ae0:	6678      	str	r0, [r7, #100]	@ 0x64
        if (err) {
 8009ae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d15b      	bne.n	8009ba0 <lfs_rawmount+0x400>
    while (!lfs_pair_isnull(dir.tail)) {
 8009ae8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009aec:	3318      	adds	r3, #24
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fa fda7 	bl	8004642 <lfs_pair_isnull>
 8009af4:	4603      	mov	r3, r0
 8009af6:	f083 0301 	eor.w	r3, r3, #1
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f47f ae73 	bne.w	80097e8 <lfs_rawmount+0x48>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3320      	adds	r3, #32
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fa fd9b 	bl	8004642 <lfs_pair_isnull>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d003      	beq.n	8009b1a <lfs_rawmount+0x37a>
        err = LFS_ERR_INVAL;
 8009b12:	f06f 0315 	mvn.w	r3, #21
 8009b16:	667b      	str	r3, [r7, #100]	@ 0x64
        goto cleanup;
 8009b18:	e043      	b.n	8009ba2 <lfs_rawmount+0x402>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3330      	adds	r3, #48	@ 0x30
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fa fef6 	bl	8004910 <lfs_gstate_iszero>
 8009b24:	4603      	mov	r3, r0
 8009b26:	f083 0301 	eor.w	r3, r3, #1
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d010      	beq.n	8009b52 <lfs_rawmount+0x3b2>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009b3c:	481d      	ldr	r0, [pc, #116]	@ (8009bb4 <lfs_rawmount+0x414>)
 8009b3e:	9002      	str	r0, [sp, #8]
 8009b40:	9201      	str	r2, [sp, #4]
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	460b      	mov	r3, r1
 8009b46:	f241 1267 	movw	r2, #4455	@ 0x1167
 8009b4a:	491b      	ldr	r1, [pc, #108]	@ (8009bb8 <lfs_rawmount+0x418>)
 8009b4c:	481c      	ldr	r0, [pc, #112]	@ (8009bc0 <lfs_rawmount+0x420>)
 8009b4e:	f001 fafd 	bl	800b14c <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fa fe19 	bl	800478e <lfs_tag_isvalid>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f083 0301 	eor.w	r3, r3, #1
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	461a      	mov	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6a:	441a      	add	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	333c      	adds	r3, #60	@ 0x3c
 8009b76:	3230      	adds	r2, #48	@ 0x30
 8009b78:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009b86:	6a12      	ldr	r2, [r2, #32]
 8009b88:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b8c:	fb01 f202 	mul.w	r2, r1, r2
 8009b90:	1a9a      	subs	r2, r3, r2
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7fb f911 	bl	8004dbe <lfs_alloc_drop>

    return 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	e004      	b.n	8009baa <lfs_rawmount+0x40a>
            goto cleanup;
 8009ba0:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f80e 	bl	8009bc4 <lfs_rawunmount>
    return err;
 8009ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	376c      	adds	r7, #108	@ 0x6c
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	0800c084 	.word	0x0800c084
 8009bb8:	0800bf90 	.word	0x0800bf90
 8009bbc:	0800c6f8 	.word	0x0800c6f8
 8009bc0:	0800c728 	.word	0x0800c728

08009bc4 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7ff fd1d 	bl	800960c <lfs_deinit>
 8009bd2:	4603      	mov	r3, r0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8009bdc:	b590      	push	{r4, r7, lr}
 8009bde:	b0a1      	sub	sp, #132	@ 0x84
 8009be0:	af04      	add	r7, sp, #16
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bee:	2220      	movs	r2, #32
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 fb17 	bl	800b226 <memset>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009bfc:	4a9a      	ldr	r2, [pc, #616]	@ (8009e68 <lfs_fs_rawtraverse+0x28c>)
 8009bfe:	f107 031c 	add.w	r3, r7, #28
 8009c02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c06:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8009c12:	e0c0      	b.n	8009d96 <lfs_fs_rawtraverse+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8009c14:	f107 021c 	add.w	r2, r7, #28
 8009c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c1c:	3318      	adds	r3, #24
 8009c1e:	4611      	mov	r1, r2
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fa fd53 	bl	80046cc <lfs_pair_issync>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d009      	beq.n	8009c40 <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 8009c2c:	4b8f      	ldr	r3, [pc, #572]	@ (8009e6c <lfs_fs_rawtraverse+0x290>)
 8009c2e:	f241 12be 	movw	r2, #4542	@ 0x11be
 8009c32:	498f      	ldr	r1, [pc, #572]	@ (8009e70 <lfs_fs_rawtraverse+0x294>)
 8009c34:	488f      	ldr	r0, [pc, #572]	@ (8009e74 <lfs_fs_rawtraverse+0x298>)
 8009c36:	f001 fa89 	bl	800b14c <iprintf>
            return LFS_ERR_CORRUPT;
 8009c3a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8009c3e:	e10f      	b.n	8009e60 <lfs_fs_rawtraverse+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8009c40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d108      	bne.n	8009c5a <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 8009c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4a:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8009c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c4e:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 8009c54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c56:	005b      	lsls	r3, r3, #1
 8009c58:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 8009c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 8009c60:	2300      	movs	r3, #0
 8009c62:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c64:	e013      	b.n	8009c8e <lfs_fs_rawtraverse+0xb2>
            int err = cb(data, dir.tail[i]);
 8009c66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c68:	3306      	adds	r3, #6
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	3370      	adds	r3, #112	@ 0x70
 8009c6e:	443b      	add	r3, r7
 8009c70:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	4611      	mov	r1, r2
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	4798      	blx	r3
 8009c7c:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 8009c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <lfs_fs_rawtraverse+0xac>
                return err;
 8009c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c86:	e0eb      	b.n	8009e60 <lfs_fs_rawtraverse+0x284>
        for (int i = 0; i < 2; i++) {
 8009c88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	dde8      	ble.n	8009c66 <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8009c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c98:	f103 0218 	add.w	r2, r3, #24
 8009c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f7fc fb36 	bl	8006314 <lfs_dir_fetch>
 8009ca8:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 8009caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <lfs_fs_rawtraverse+0xd8>
            return err;
 8009cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cb2:	e0d5      	b.n	8009e60 <lfs_fs_rawtraverse+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009cba:	e067      	b.n	8009d8c <lfs_fs_rawtraverse+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8009cbc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009cc0:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8009cc2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009cc6:	f043 0308 	orr.w	r3, r3, #8
 8009cca:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8009cce:	f107 0214 	add.w	r2, r7, #20
 8009cd2:	9200      	str	r2, [sp, #0]
 8009cd4:	4a68      	ldr	r2, [pc, #416]	@ (8009e78 <lfs_fs_rawtraverse+0x29c>)
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f7fb fa1c 	bl	8005114 <lfs_dir_get>
 8009cdc:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 8009cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	da05      	bge.n	8009cf0 <lfs_fs_rawtraverse+0x114>
                if (tag == LFS_ERR_NOENT) {
 8009ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ce6:	f113 0f02 	cmn.w	r3, #2
 8009cea:	d049      	beq.n	8009d80 <lfs_fs_rawtraverse+0x1a4>
                    continue;
                }
                return tag;
 8009cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cee:	e0b7      	b.n	8009e60 <lfs_fs_rawtraverse+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 8009cf0:	f107 0314 	add.w	r3, r7, #20
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fa ff01 	bl	8004afc <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8009cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fa fd87 	bl	8004810 <lfs_tag_type3>
 8009d02:	4603      	mov	r3, r0
 8009d04:	461a      	mov	r2, r3
 8009d06:	f240 2302 	movw	r3, #514	@ 0x202
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d113      	bne.n	8009d36 <lfs_fs_rawtraverse+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	6978      	ldr	r0, [r7, #20]
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	9202      	str	r2, [sp, #8]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	9201      	str	r2, [sp, #4]
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	4603      	mov	r3, r0
 8009d20:	460a      	mov	r2, r1
 8009d22:	2100      	movs	r1, #0
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f7fe fa5b 	bl	80081e0 <lfs_ctz_traverse>
 8009d2a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8009d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d027      	beq.n	8009d82 <lfs_fs_rawtraverse+0x1a6>
                    return err;
 8009d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d34:	e094      	b.n	8009e60 <lfs_fs_rawtraverse+0x284>
                }
            } else if (includeorphans &&
 8009d36:	78fb      	ldrb	r3, [r7, #3]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d022      	beq.n	8009d82 <lfs_fs_rawtraverse+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8009d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fa fd66 	bl	8004810 <lfs_tag_type3>
 8009d44:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8009d46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d4a:	d11a      	bne.n	8009d82 <lfs_fs_rawtraverse+0x1a6>
                for (int i = 0; i < 2; i++) {
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d50:	e012      	b.n	8009d78 <lfs_fs_rawtraverse+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 8009d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	f107 0214 	add.w	r2, r7, #20
 8009d5a:	4413      	add	r3, r2
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	4611      	mov	r1, r2
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	4798      	blx	r3
 8009d66:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 8009d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <lfs_fs_rawtraverse+0x196>
                        return err;
 8009d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d70:	e076      	b.n	8009e60 <lfs_fs_rawtraverse+0x284>
                for (int i = 0; i < 2; i++) {
 8009d72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d74:	3301      	adds	r3, #1
 8009d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	dde9      	ble.n	8009d52 <lfs_fs_rawtraverse+0x176>
 8009d7e:	e000      	b.n	8009d82 <lfs_fs_rawtraverse+0x1a6>
                    continue;
 8009d80:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8009d82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009d86:	3301      	adds	r3, #1
 8009d88:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009d8c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d8e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d392      	bcc.n	8009cbc <lfs_fs_rawtraverse+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 8009d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d9a:	3318      	adds	r3, #24
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fa fc50 	bl	8004642 <lfs_pair_isnull>
 8009da2:	4603      	mov	r3, r0
 8009da4:	f083 0301 	eor.w	r3, r3, #1
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f47f af32 	bne.w	8009c14 <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009db6:	e04f      	b.n	8009e58 <lfs_fs_rawtraverse+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8009db8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009dba:	799b      	ldrb	r3, [r3, #6]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d147      	bne.n	8009e50 <lfs_fs_rawtraverse+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8009dc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01d      	beq.n	8009e08 <lfs_fs_rawtraverse+0x22c>
 8009dcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d117      	bne.n	8009e08 <lfs_fs_rawtraverse+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009dd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009dda:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009de2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8009de4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	9202      	str	r2, [sp, #8]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	9201      	str	r2, [sp, #4]
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	4623      	mov	r3, r4
 8009df4:	4602      	mov	r2, r0
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f7fe f9f2 	bl	80081e0 <lfs_ctz_traverse>
 8009dfc:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8009dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <lfs_fs_rawtraverse+0x22c>
                return err;
 8009e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e06:	e02b      	b.n	8009e60 <lfs_fs_rawtraverse+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8009e08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d01e      	beq.n	8009e52 <lfs_fs_rawtraverse+0x276>
 8009e14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d118      	bne.n	8009e52 <lfs_fs_rawtraverse+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009e20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e22:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e2a:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8009e2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	9202      	str	r2, [sp, #8]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	9201      	str	r2, [sp, #4]
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	4623      	mov	r3, r4
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f7fe f9ce 	bl	80081e0 <lfs_ctz_traverse>
 8009e44:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8009e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <lfs_fs_rawtraverse+0x276>
                return err;
 8009e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e4e:	e007      	b.n	8009e60 <lfs_fs_rawtraverse+0x284>
            continue;
 8009e50:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1ac      	bne.n	8009db8 <lfs_fs_rawtraverse+0x1dc>
            }
        }
    }
#endif

    return 0;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3774      	adds	r7, #116	@ 0x74
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd90      	pop	{r4, r7, pc}
 8009e68:	0800c0c8 	.word	0x0800c0c8
 8009e6c:	0800c084 	.word	0x0800c084
 8009e70:	0800bf90 	.word	0x0800bf90
 8009e74:	0800c584 	.word	0x0800c584
 8009e78:	700ffc00 	.word	0x700ffc00

08009e7c <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08a      	sub	sp, #40	@ 0x28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009e94:	4a2d      	ldr	r2, [pc, #180]	@ (8009f4c <lfs_fs_pred+0xd0>)
 8009e96:	f107 0314 	add.w	r3, r7, #20
 8009e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e9e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8009eaa:	e03e      	b.n	8009f2a <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3318      	adds	r3, #24
 8009eb0:	f107 0214 	add.w	r2, r7, #20
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fa fc08 	bl	80046cc <lfs_pair_issync>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d009      	beq.n	8009ed6 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8009ec2:	4b23      	ldr	r3, [pc, #140]	@ (8009f50 <lfs_fs_pred+0xd4>)
 8009ec4:	f241 221c 	movw	r2, #4636	@ 0x121c
 8009ec8:	4922      	ldr	r1, [pc, #136]	@ (8009f54 <lfs_fs_pred+0xd8>)
 8009eca:	4823      	ldr	r0, [pc, #140]	@ (8009f58 <lfs_fs_pred+0xdc>)
 8009ecc:	f001 f93e 	bl	800b14c <iprintf>
            return LFS_ERR_CORRUPT;
 8009ed0:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8009ed4:	e036      	b.n	8009f44 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8009ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d10a      	bne.n	8009ef4 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 8009eee:	6a3b      	ldr	r3, [r7, #32]
 8009ef0:	005b      	lsls	r3, r3, #1
 8009ef2:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3318      	adds	r3, #24
 8009efe:	68b9      	ldr	r1, [r7, #8]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fa fbb9 	bl	8004678 <lfs_pair_cmp>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <lfs_fs_pred+0x94>
            return 0;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	e019      	b.n	8009f44 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3318      	adds	r3, #24
 8009f14:	461a      	mov	r2, r3
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f7fc f9fb 	bl	8006314 <lfs_dir_fetch>
 8009f1e:	61f8      	str	r0, [r7, #28]
        if (err) {
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <lfs_fs_pred+0xae>
            return err;
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	e00c      	b.n	8009f44 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	3318      	adds	r3, #24
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fa fb87 	bl	8004642 <lfs_pair_isnull>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f083 0301 	eor.w	r3, r3, #1
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1b5      	bne.n	8009eac <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8009f40:	f06f 0301 	mvn.w	r3, #1
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3728      	adds	r7, #40	@ 0x28
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	0800c0c8 	.word	0x0800c0c8
 8009f50:	0800c084 	.word	0x0800c084
 8009f54:	0800bf90 	.word	0x0800bf90
 8009f58:	0800c584 	.word	0x0800c584

08009f5c <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8009f5c:	b5b0      	push	{r4, r5, r7, lr}
 8009f5e:	b08e      	sub	sp, #56	@ 0x38
 8009f60:	af04      	add	r7, sp, #16
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8009f7c:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f82:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	69fa      	ldr	r2, [r7, #28]
 8009f8a:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8009f8c:	2108      	movs	r1, #8
 8009f8e:	9103      	str	r1, [sp, #12]
 8009f90:	f107 0110 	add.w	r1, r7, #16
 8009f94:	9102      	str	r1, [sp, #8]
 8009f96:	9201      	str	r2, [sp, #4]
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	462b      	mov	r3, r5
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4601      	mov	r1, r0
 8009fa0:	6a38      	ldr	r0, [r7, #32]
 8009fa2:	f7f9 ffcd 	bl	8003f40 <lfs_bd_read>
 8009fa6:	61b8      	str	r0, [r7, #24]
    if (err) {
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <lfs_fs_parent_match+0x56>
        return err;
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	e012      	b.n	8009fd8 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8009fb2:	f107 0310 	add.w	r3, r7, #16
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fa fbb5 	bl	8004726 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fbe:	1d1a      	adds	r2, r3, #4
 8009fc0:	f107 0310 	add.w	r3, r7, #16
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7fa fb56 	bl	8004678 <lfs_pair_cmp>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	bf14      	ite	ne
 8009fd2:	2301      	movne	r3, #1
 8009fd4:	2300      	moveq	r3, #0
 8009fd6:	b2db      	uxtb	r3, r3
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3728      	adds	r7, #40	@ 0x28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bdb0      	pop	{r4, r5, r7, pc}

08009fe0 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b090      	sub	sp, #64	@ 0x40
 8009fe4:	af04      	add	r7, sp, #16
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8009ff8:	4a33      	ldr	r2, [pc, #204]	@ (800a0c8 <lfs_fs_parent+0xe8>)
 8009ffa:	f107 031c 	add.w	r3, r7, #28
 8009ffe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a002:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800a006:	2301      	movs	r3, #1
 800a008:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 800a00a:	2301      	movs	r3, #1
 800a00c:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 800a00e:	e04a      	b.n	800a0a6 <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3318      	adds	r3, #24
 800a014:	f107 021c 	add.w	r2, r7, #28
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fa fb56 	bl	80046cc <lfs_pair_issync>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d009      	beq.n	800a03a <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800a026:	4b29      	ldr	r3, [pc, #164]	@ (800a0cc <lfs_fs_parent+0xec>)
 800a028:	f241 225d 	movw	r2, #4701	@ 0x125d
 800a02c:	4928      	ldr	r1, [pc, #160]	@ (800a0d0 <lfs_fs_parent+0xf0>)
 800a02e:	4829      	ldr	r0, [pc, #164]	@ (800a0d4 <lfs_fs_parent+0xf4>)
 800a030:	f001 f88c 	bl	800b14c <iprintf>
            return LFS_ERR_CORRUPT;
 800a034:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800a038:	e042      	b.n	800a0c0 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 800a03a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03e:	429a      	cmp	r2, r3
 800a040:	d10a      	bne.n	800a058 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 800a052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 800a058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a05a:	3301      	adds	r3, #1
 800a05c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a06c:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	3304      	adds	r3, #4
 800a072:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800a074:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800a076:	f107 0310 	add.w	r3, r7, #16
 800a07a:	9303      	str	r3, [sp, #12]
 800a07c:	4b16      	ldr	r3, [pc, #88]	@ (800a0d8 <lfs_fs_parent+0xf8>)
 800a07e:	9302      	str	r3, [sp, #8]
 800a080:	2300      	movs	r3, #0
 800a082:	9301      	str	r3, [sp, #4]
 800a084:	4b15      	ldr	r3, [pc, #84]	@ (800a0dc <lfs_fs_parent+0xfc>)
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	4b15      	ldr	r3, [pc, #84]	@ (800a0e0 <lfs_fs_parent+0x100>)
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f7fb fd73 	bl	8005b78 <lfs_dir_fetchmatch>
 800a092:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 800a094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a096:	2b00      	cmp	r3, #0
 800a098:	d005      	beq.n	800a0a6 <lfs_fs_parent+0xc6>
 800a09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09c:	f113 0f02 	cmn.w	r3, #2
 800a0a0:	d001      	beq.n	800a0a6 <lfs_fs_parent+0xc6>
            return tag;
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a4:	e00c      	b.n	800a0c0 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	3318      	adds	r3, #24
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fa fac9 	bl	8004642 <lfs_pair_isnull>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	f083 0301 	eor.w	r3, r3, #1
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1a9      	bne.n	800a010 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 800a0bc:	f06f 0301 	mvn.w	r3, #1
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3730      	adds	r7, #48	@ 0x30
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	0800c0c8 	.word	0x0800c0c8
 800a0cc:	0800c084 	.word	0x0800c084
 800a0d0:	0800bf90 	.word	0x0800bf90
 800a0d4:	0800c584 	.word	0x0800c584
 800a0d8:	08009f5d 	.word	0x08009f5d
 800a0dc:	20000008 	.word	0x20000008
 800a0e0:	7ff003ff 	.word	0x7ff003ff

0800a0e4 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	025b      	lsls	r3, r3, #9
 800a0fc:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a102:	bf00      	nop
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
	...

0800a110 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800a110:	b590      	push	{r4, r7, lr}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a120:	4618      	mov	r0, r3
 800a122:	f7fa fbaf 	bl	8004884 <lfs_tag_size>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10a      	bne.n	800a142 <lfs_fs_preporphans+0x32>
 800a12c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a130:	2b00      	cmp	r3, #0
 800a132:	da06      	bge.n	800a142 <lfs_fs_preporphans+0x32>
 800a134:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a0 <lfs_fs_preporphans+0x90>)
 800a136:	4a1b      	ldr	r2, [pc, #108]	@ (800a1a4 <lfs_fs_preporphans+0x94>)
 800a138:	f241 217e 	movw	r1, #4734	@ 0x127e
 800a13c:	481a      	ldr	r0, [pc, #104]	@ (800a1a8 <lfs_fs_preporphans+0x98>)
 800a13e:	f000 fe55 	bl	800adec <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a146:	4618      	mov	r0, r3
 800a148:	f7fa fb9c 	bl	8004884 <lfs_tag_size>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 800a152:	d90a      	bls.n	800a16a <lfs_fs_preporphans+0x5a>
 800a154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	dd06      	ble.n	800a16a <lfs_fs_preporphans+0x5a>
 800a15c:	4b13      	ldr	r3, [pc, #76]	@ (800a1ac <lfs_fs_preporphans+0x9c>)
 800a15e:	4a11      	ldr	r2, [pc, #68]	@ (800a1a4 <lfs_fs_preporphans+0x94>)
 800a160:	f241 217f 	movw	r1, #4735	@ 0x127f
 800a164:	4810      	ldr	r0, [pc, #64]	@ (800a1a8 <lfs_fs_preporphans+0x98>)
 800a166:	f000 fe41 	bl	800adec <__assert_func>
    lfs->gstate.tag += orphans;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a16e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a172:	441a      	add	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a17c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	3330      	adds	r3, #48	@ 0x30
 800a184:	4618      	mov	r0, r3
 800a186:	f7fa fbe0 	bl	800494a <lfs_gstate_hasorphans>
 800a18a:	4603      	mov	r3, r0
 800a18c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800a18e:	ea44 0203 	orr.w	r2, r4, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd90      	pop	{r4, r7, pc}
 800a1a0:	0800c760 	.word	0x0800c760
 800a1a4:	0800cac4 	.word	0x0800cac4
 800a1a8:	0800bf90 	.word	0x0800bf90
 800a1ac:	0800c798 	.word	0x0800c798

0800a1b0 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c2:	4a17      	ldr	r2, [pc, #92]	@ (800a220 <lfs_fs_prepmove+0x70>)
 800a1c4:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800a1c6:	897b      	ldrh	r3, [r7, #10]
 800a1c8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a1cc:	428b      	cmp	r3, r1
 800a1ce:	d006      	beq.n	800a1de <lfs_fs_prepmove+0x2e>
 800a1d0:	897b      	ldrh	r3, [r7, #10]
 800a1d2:	029b      	lsls	r3, r3, #10
 800a1d4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800a1d8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800a1dc:	e000      	b.n	800a1e0 <lfs_fs_prepmove+0x30>
 800a1de:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800a1e6:	897b      	ldrh	r3, [r7, #10]
 800a1e8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d002      	beq.n	800a1f6 <lfs_fs_prepmove+0x46>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	e000      	b.n	800a1f8 <lfs_fs_prepmove+0x48>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800a1fc:	897b      	ldrh	r3, [r7, #10]
 800a1fe:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800a202:	4293      	cmp	r3, r2
 800a204:	d003      	beq.n	800a20e <lfs_fs_prepmove+0x5e>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3304      	adds	r3, #4
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	e000      	b.n	800a210 <lfs_fs_prepmove+0x60>
 800a20e:	2300      	movs	r3, #0
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800a214:	bf00      	nop
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	800003ff 	.word	0x800003ff

0800a224 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 800a224:	b580      	push	{r7, lr}
 800a226:	b098      	sub	sp, #96	@ 0x60
 800a228:	af02      	add	r7, sp, #8
 800a22a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	3330      	adds	r3, #48	@ 0x30
 800a230:	4618      	mov	r0, r3
 800a232:	f7fa fbbf 	bl	80049b4 <lfs_gstate_needssuperblock>
 800a236:	4603      	mov	r3, r0
 800a238:	f083 0301 	eor.w	r3, r3, #1
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <lfs_fs_desuperblock+0x22>
        return 0;
 800a242:	2300      	movs	r3, #0
 800a244:	e04f      	b.n	800a2e6 <lfs_fs_desuperblock+0xc2>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a1a      	ldr	r2, [r3, #32]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24e:	4928      	ldr	r1, [pc, #160]	@ (800a2f0 <lfs_fs_desuperblock+0xcc>)
 800a250:	9101      	str	r1, [sp, #4]
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	4613      	mov	r3, r2
 800a256:	f241 2298 	movw	r2, #4760	@ 0x1298
 800a25a:	4926      	ldr	r1, [pc, #152]	@ (800a2f4 <lfs_fs_desuperblock+0xd0>)
 800a25c:	4826      	ldr	r0, [pc, #152]	@ (800a2f8 <lfs_fs_desuperblock+0xd4>)
 800a25e:	f000 ff75 	bl	800b14c <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f103 0220 	add.w	r2, r3, #32
 800a268:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7fc f850 	bl	8006314 <lfs_dir_fetch>
 800a274:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 800a276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d001      	beq.n	800a280 <lfs_fs_desuperblock+0x5c>
        return err;
 800a27c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a27e:	e032      	b.n	800a2e6 <lfs_fs_desuperblock+0xc2>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7fa fd2d 	bl	8004ce0 <lfs_fs_disk_version>
 800a286:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 800a288:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a28e:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 800a290:	623b      	str	r3, [r7, #32]
        .block_count = lfs->cfg->block_count,
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a296:	6a1b      	ldr	r3, [r3, #32]
    lfs_superblock_t superblock = {
 800a298:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 800a29e:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 800a2a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 800a2aa:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 800a2ac:	f107 031c 	add.w	r3, r7, #28
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fa fc8b 	bl	8004bcc <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800a2b6:	4b11      	ldr	r3, [pc, #68]	@ (800a2fc <lfs_fs_desuperblock+0xd8>)
 800a2b8:	617b      	str	r3, [r7, #20]
 800a2ba:	f107 031c 	add.w	r3, r7, #28
 800a2be:	61bb      	str	r3, [r7, #24]
 800a2c0:	f107 0214 	add.w	r2, r7, #20
 800a2c4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7fd fdb8 	bl	8007e40 <lfs_dir_commit>
 800a2d0:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 800a2d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d001      	beq.n	800a2dc <lfs_fs_desuperblock+0xb8>
        return err;
 800a2d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2da:	e004      	b.n	800a2e6 <lfs_fs_desuperblock+0xc2>
    }

    lfs_fs_prepsuperblock(lfs, false);
 800a2dc:	2100      	movs	r1, #0
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7ff ff00 	bl	800a0e4 <lfs_fs_prepsuperblock>
    return 0;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3758      	adds	r7, #88	@ 0x58
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	0800c084 	.word	0x0800c084
 800a2f4:	0800bf90 	.word	0x0800bf90
 800a2f8:	0800c7d0 	.word	0x0800c7d0
 800a2fc:	20100018 	.word	0x20100018

0800a300 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800a300:	b5b0      	push	{r4, r5, r7, lr}
 800a302:	b094      	sub	sp, #80	@ 0x50
 800a304:	af04      	add	r7, sp, #16
 800a306:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	333c      	adds	r3, #60	@ 0x3c
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fa fb3e 	bl	800498e <lfs_gstate_hasmove>
 800a312:	4603      	mov	r3, r0
 800a314:	f083 0301 	eor.w	r3, r3, #1
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <lfs_fs_demove+0x22>
        return 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	e05b      	b.n	800a3da <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fa fa98 	bl	8004864 <lfs_tag_id>
 800a334:	4603      	mov	r3, r0
 800a336:	461a      	mov	r2, r3
 800a338:	4b2a      	ldr	r3, [pc, #168]	@ (800a3e4 <lfs_fs_demove+0xe4>)
 800a33a:	9302      	str	r3, [sp, #8]
 800a33c:	9201      	str	r2, [sp, #4]
 800a33e:	9400      	str	r4, [sp, #0]
 800a340:	462b      	mov	r3, r5
 800a342:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 800a346:	4928      	ldr	r1, [pc, #160]	@ (800a3e8 <lfs_fs_demove+0xe8>)
 800a348:	4828      	ldr	r0, [pc, #160]	@ (800a3ec <lfs_fs_demove+0xec>)
 800a34a:	f000 feff 	bl	800b14c <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a352:	4618      	mov	r0, r3
 800a354:	f7fa fa5c 	bl	8004810 <lfs_tag_type3>
 800a358:	4603      	mov	r3, r0
 800a35a:	461a      	mov	r2, r3
 800a35c:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 800a360:	429a      	cmp	r2, r3
 800a362:	d006      	beq.n	800a372 <lfs_fs_demove+0x72>
 800a364:	4b22      	ldr	r3, [pc, #136]	@ (800a3f0 <lfs_fs_demove+0xf0>)
 800a366:	4a23      	ldr	r2, [pc, #140]	@ (800a3f4 <lfs_fs_demove+0xf4>)
 800a368:	f241 21c7 	movw	r1, #4807	@ 0x12c7
 800a36c:	481e      	ldr	r0, [pc, #120]	@ (800a3e8 <lfs_fs_demove+0xe8>)
 800a36e:	f000 fd3d 	bl	800adec <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800a378:	f107 0318 	add.w	r3, r7, #24
 800a37c:	4619      	mov	r1, r3
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7fb ffc8 	bl	8006314 <lfs_dir_fetch>
 800a384:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 800a386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <lfs_fs_demove+0x90>
        return err;
 800a38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38e:	e024      	b.n	800a3da <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a394:	4618      	mov	r0, r3
 800a396:	f7fa fa65 	bl	8004864 <lfs_tag_id>
 800a39a:	4603      	mov	r3, r0
 800a39c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7ff ff03 	bl	800a1b0 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800a3aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a3ac:	029b      	lsls	r3, r3, #10
 800a3ae:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800a3b2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800a3b6:	613b      	str	r3, [r7, #16]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	f107 0210 	add.w	r2, r7, #16
 800a3c0:	f107 0118 	add.w	r1, r7, #24
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7fd fd3a 	bl	8007e40 <lfs_dir_commit>
 800a3cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800a3ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <lfs_fs_demove+0xd8>
        return err;
 800a3d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d6:	e000      	b.n	800a3da <lfs_fs_demove+0xda>
    }

    return 0;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3740      	adds	r7, #64	@ 0x40
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bdb0      	pop	{r4, r5, r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	0800c084 	.word	0x0800c084
 800a3e8:	0800bf90 	.word	0x0800bf90
 800a3ec:	0800c804 	.word	0x0800c804
 800a3f0:	0800c838 	.word	0x0800c838
 800a3f4:	0800cad8 	.word	0x0800cad8

0800a3f8 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 800a3f8:	b5b0      	push	{r4, r5, r7, lr}
 800a3fa:	b0b2      	sub	sp, #200	@ 0xc8
 800a3fc:	af04      	add	r7, sp, #16
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3330      	adds	r3, #48	@ 0x30
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fa fa9e 	bl	800494a <lfs_gstate_hasorphans>
 800a40e:	4603      	mov	r3, r0
 800a410:	f083 0301 	eor.w	r3, r3, #1
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <lfs_fs_deorphan+0x26>
        return 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	e187      	b.n	800a72e <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 800a424:	e170      	b.n	800a708 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800a426:	f107 0308 	add.w	r3, r7, #8
 800a42a:	2220      	movs	r2, #32
 800a42c:	2100      	movs	r1, #0
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 fef9 	bl	800b226 <memset>
 800a434:	2301      	movs	r3, #1
 800a436:	77fb      	strb	r3, [r7, #31]
 800a438:	2301      	movs	r3, #1
 800a43a:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 800a43c:	2300      	movs	r3, #0
 800a43e:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800a442:	e149      	b.n	800a6d8 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800a444:	f107 0308 	add.w	r3, r7, #8
 800a448:	f103 0218 	add.w	r2, r3, #24
 800a44c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7fb ff5e 	bl	8006314 <lfs_dir_fetch>
 800a458:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 800a45c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <lfs_fs_deorphan+0x72>
                return err;
 800a464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a468:	e161      	b.n	800a72e <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800a46a:	7ffb      	ldrb	r3, [r7, #31]
 800a46c:	f083 0301 	eor.w	r3, r3, #1
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 8124 	beq.w	800a6c0 <lfs_fs_deorphan+0x2c8>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800a478:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a47c:	f107 0308 	add.w	r3, r7, #8
 800a480:	3318      	adds	r3, #24
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff fdab 	bl	8009fe0 <lfs_fs_parent>
 800a48a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800a48e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a492:	2b00      	cmp	r3, #0
 800a494:	da07      	bge.n	800a4a6 <lfs_fs_deorphan+0xae>
 800a496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a49a:	f113 0f02 	cmn.w	r3, #2
 800a49e:	d002      	beq.n	800a4a6 <lfs_fs_deorphan+0xae>
                    return tag;
 800a4a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4a4:	e143      	b.n	800a72e <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 800a4a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f040 80ac 	bne.w	800a608 <lfs_fs_deorphan+0x210>
 800a4b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4b4:	f113 0f02 	cmn.w	r3, #2
 800a4b8:	f000 80a6 	beq.w	800a608 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800a4bc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a4c0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800a4c4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	4a9a      	ldr	r2, [pc, #616]	@ (800a738 <lfs_fs_deorphan+0x340>)
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7fa fe20 	bl	8005114 <lfs_dir_get>
 800a4d4:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800a4d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	da02      	bge.n	800a4e6 <lfs_fs_deorphan+0xee>
                        return state;
 800a4e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a4e4:	e0eb      	b.n	800a6be <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 800a4e6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fa f91b 	bl	8004726 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 800a4f0:	f107 0308 	add.w	r3, r7, #8
 800a4f4:	f103 0218 	add.w	r2, r3, #24
 800a4f8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fa f8e4 	bl	80046cc <lfs_pair_issync>
 800a504:	4603      	mov	r3, r0
 800a506:	f083 0301 	eor.w	r3, r3, #1
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d07b      	beq.n	800a608 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800a510:	6a38      	ldr	r0, [r7, #32]
 800a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a514:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a518:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800a51c:	4c87      	ldr	r4, [pc, #540]	@ (800a73c <lfs_fs_deorphan+0x344>)
 800a51e:	9403      	str	r4, [sp, #12]
 800a520:	9102      	str	r1, [sp, #8]
 800a522:	9201      	str	r2, [sp, #4]
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	4603      	mov	r3, r0
 800a528:	f241 320d 	movw	r2, #4877	@ 0x130d
 800a52c:	4984      	ldr	r1, [pc, #528]	@ (800a740 <lfs_fs_deorphan+0x348>)
 800a52e:	4885      	ldr	r0, [pc, #532]	@ (800a744 <lfs_fs_deorphan+0x34c>)
 800a530:	f000 fe0c 	bl	800b14c <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800a534:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800a538:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3330      	adds	r3, #48	@ 0x30
 800a540:	f107 0208 	add.w	r2, r7, #8
 800a544:	4611      	mov	r1, r2
 800a546:	4618      	mov	r0, r3
 800a548:	f7fa fa48 	bl	80049dc <lfs_gstate_hasmovehere>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d01c      	beq.n	800a58c <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a556:	4618      	mov	r0, r3
 800a558:	f7fa f984 	bl	8004864 <lfs_tag_id>
 800a55c:	4603      	mov	r3, r0
 800a55e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 800a562:	68b9      	ldr	r1, [r7, #8]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 800a56a:	4874      	ldr	r0, [pc, #464]	@ (800a73c <lfs_fs_deorphan+0x344>)
 800a56c:	9002      	str	r0, [sp, #8]
 800a56e:	9201      	str	r2, [sp, #4]
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	460b      	mov	r3, r1
 800a574:	f241 3218 	movw	r2, #4888	@ 0x1318
 800a578:	4971      	ldr	r1, [pc, #452]	@ (800a740 <lfs_fs_deorphan+0x348>)
 800a57a:	4873      	ldr	r0, [pc, #460]	@ (800a748 <lfs_fs_deorphan+0x350>)
 800a57c:	f000 fde6 	bl	800b14c <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800a580:	2200      	movs	r2, #0
 800a582:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff fe12 	bl	800a1b0 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800a58c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a590:	4618      	mov	r0, r3
 800a592:	f7fa f8e2 	bl	800475a <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800a596:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800a59a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d007      	beq.n	800a5b2 <lfs_fs_deorphan+0x1ba>
 800a5a2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800a5a6:	029b      	lsls	r3, r3, #10
 800a5a8:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800a5ac:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800a5b0:	e000      	b.n	800a5b4 <lfs_fs_deorphan+0x1bc>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a5be:	4b63      	ldr	r3, [pc, #396]	@ (800a74c <lfs_fs_deorphan+0x354>)
 800a5c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a5c4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a5c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a5cc:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800a5d0:	f107 0108 	add.w	r1, r7, #8
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7fd f938 	bl	800784c <lfs_dir_orphaningcommit>
 800a5dc:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 800a5e0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fa f89e 	bl	8004726 <lfs_pair_fromle32>
                        if (state < 0) {
 800a5ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	da02      	bge.n	800a5f8 <lfs_fs_deorphan+0x200>
                            return state;
 800a5f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 800a5f6:	e062      	b.n	800a6be <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800a5f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d16b      	bne.n	800a6d8 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 800a600:	2301      	movs	r3, #1
 800a602:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800a606:	e067      	b.n	800a6d8 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 800a608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d157      	bne.n	800a6c0 <lfs_fs_deorphan+0x2c8>
 800a610:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a614:	f113 0f02 	cmn.w	r3, #2
 800a618:	d152      	bne.n	800a6c0 <lfs_fs_deorphan+0x2c8>
 800a61a:	78fb      	ldrb	r3, [r7, #3]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d04f      	beq.n	800a6c0 <lfs_fs_deorphan+0x2c8>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800a620:	6a3a      	ldr	r2, [r7, #32]
 800a622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a624:	4945      	ldr	r1, [pc, #276]	@ (800a73c <lfs_fs_deorphan+0x344>)
 800a626:	9101      	str	r1, [sp, #4]
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	4613      	mov	r3, r2
 800a62c:	f241 3238 	movw	r2, #4920	@ 0x1338
 800a630:	4943      	ldr	r1, [pc, #268]	@ (800a740 <lfs_fs_deorphan+0x348>)
 800a632:	4847      	ldr	r0, [pc, #284]	@ (800a750 <lfs_fs_deorphan+0x358>)
 800a634:	f000 fd8a 	bl	800b14c <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800a63e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7fb fe81 	bl	800634c <lfs_dir_getgstate>
 800a64a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 800a64e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a652:	2b00      	cmp	r3, #0
 800a654:	d002      	beq.n	800a65c <lfs_fs_deorphan+0x264>
                        return err;
 800a656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a65a:	e030      	b.n	800a6be <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800a65c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a660:	3318      	adds	r3, #24
 800a662:	4618      	mov	r0, r3
 800a664:	f7fa f879 	bl	800475a <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800a668:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a66c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800a670:	051a      	lsls	r2, r3, #20
 800a672:	4b38      	ldr	r3, [pc, #224]	@ (800a754 <lfs_fs_deorphan+0x35c>)
 800a674:	4313      	orrs	r3, r2
 800a676:	673b      	str	r3, [r7, #112]	@ 0x70
 800a678:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a67c:	3318      	adds	r3, #24
 800a67e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a680:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800a684:	f107 0108 	add.w	r1, r7, #8
 800a688:	2301      	movs	r3, #1
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7fd f8de 	bl	800784c <lfs_dir_orphaningcommit>
 800a690:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800a694:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a698:	3318      	adds	r3, #24
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fa f843 	bl	8004726 <lfs_pair_fromle32>
                    if (state < 0) {
 800a6a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	da02      	bge.n	800a6ae <lfs_fs_deorphan+0x2b6>
                        return state;
 800a6a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
                    return tag;
 800a6ac:	e03f      	b.n	800a72e <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800a6ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d10f      	bne.n	800a6d6 <lfs_fs_deorphan+0x2de>
                        moreorphans = true;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800a6bc:	e00c      	b.n	800a6d8 <lfs_fs_deorphan+0x2e0>
                return err;
 800a6be:	e036      	b.n	800a72e <lfs_fs_deorphan+0x336>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 800a6c0:	f107 0408 	add.w	r4, r7, #8
 800a6c4:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800a6c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a6d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a6d4:	e000      	b.n	800a6d8 <lfs_fs_deorphan+0x2e0>
                    continue;
 800a6d6:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 800a6d8:	f107 0308 	add.w	r3, r7, #8
 800a6dc:	3318      	adds	r3, #24
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7f9 ffaf 	bl	8004642 <lfs_pair_isnull>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	f083 0301 	eor.w	r3, r3, #1
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f47f aea9 	bne.w	800a444 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 800a6f2:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <lfs_fs_deorphan+0x306>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	e002      	b.n	800a704 <lfs_fs_deorphan+0x30c>
 800a6fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a702:	3301      	adds	r3, #1
 800a704:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 800a708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	f77f ae8a 	ble.w	800a426 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	3330      	adds	r3, #48	@ 0x30
 800a716:	4618      	mov	r0, r3
 800a718:	f7fa f92a 	bl	8004970 <lfs_gstate_getorphans>
 800a71c:	4603      	mov	r3, r0
 800a71e:	425b      	negs	r3, r3
 800a720:	b2db      	uxtb	r3, r3
 800a722:	b25b      	sxtb	r3, r3
 800a724:	4619      	mov	r1, r3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7ff fcf2 	bl	800a110 <lfs_fs_preporphans>
 800a72c:	4603      	mov	r3, r0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	37b8      	adds	r7, #184	@ 0xb8
 800a732:	46bd      	mov	sp, r7
 800a734:	bdb0      	pop	{r4, r5, r7, pc}
 800a736:	bf00      	nop
 800a738:	7ffffc00 	.word	0x7ffffc00
 800a73c:	0800c084 	.word	0x0800c084
 800a740:	0800bf90 	.word	0x0800bf90
 800a744:	0800c86c 	.word	0x0800c86c
 800a748:	0800c8b0 	.word	0x0800c8b0
 800a74c:	600ffc08 	.word	0x600ffc08
 800a750:	0800c8f8 	.word	0x0800c8f8
 800a754:	000ffc08 	.word	0x000ffc08

0800a758 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff fd5f 	bl	800a224 <lfs_fs_desuperblock>
 800a766:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d001      	beq.n	800a772 <lfs_fs_forceconsistency+0x1a>
        return err;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	e013      	b.n	800a79a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fdc4 	bl	800a300 <lfs_fs_demove>
 800a778:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <lfs_fs_forceconsistency+0x2c>
        return err;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	e00a      	b.n	800a79a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 800a784:	2101      	movs	r1, #1
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f7ff fe36 	bl	800a3f8 <lfs_fs_deorphan>
 800a78c:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <lfs_fs_forceconsistency+0x40>
        return err;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	e000      	b.n	800a79a <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800a7a2:	b480      	push	{r7}
 800a7a4:	b085      	sub	sp, #20
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	601a      	str	r2, [r3, #0]
    return 0;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800a7d4:	f107 0208 	add.w	r2, r7, #8
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4907      	ldr	r1, [pc, #28]	@ (800a7f8 <lfs_fs_rawsize+0x30>)
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff f9fd 	bl	8009bdc <lfs_fs_rawtraverse>
 800a7e2:	60f8      	str	r0, [r7, #12]
    if (err) {
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <lfs_fs_rawsize+0x26>
        return err;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	e000      	b.n	800a7f0 <lfs_fs_rawsize+0x28>
    }

    return size;
 800a7ee:	68bb      	ldr	r3, [r7, #8]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	0800a7a3 	.word	0x0800a7a3

0800a7fc <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a806:	2300      	movs	r3, #0
 800a808:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d001      	beq.n	800a814 <lfs_format+0x18>
        return err;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	e005      	b.n	800a820 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7fe ff20 	bl	800965c <lfs_rawformat>
 800a81c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a81e:	68fb      	ldr	r3, [r7, #12]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800a832:	2300      	movs	r3, #0
 800a834:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <lfs_mount+0x18>
        return err;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	e005      	b.n	800a84c <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7fe ffac 	bl	80097a0 <lfs_rawmount>
 800a848:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800a84a:	68fb      	ldr	r3, [r7, #12]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a862:	2300      	movs	r3, #0
 800a864:	617b      	str	r3, [r7, #20]
    if (err) {
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <lfs_file_open+0x1c>
        return err;
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	e01a      	b.n	800a8a6 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a874:	68b9      	ldr	r1, [r7, #8]
 800a876:	4618      	mov	r0, r3
 800a878:	f7fa f9e0 	bl	8004c3c <lfs_mlist_isopen>
 800a87c:	4603      	mov	r3, r0
 800a87e:	f083 0301 	eor.w	r3, r3, #1
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	d106      	bne.n	800a896 <lfs_file_open+0x42>
 800a888:	4b09      	ldr	r3, [pc, #36]	@ (800a8b0 <lfs_file_open+0x5c>)
 800a88a:	4a0a      	ldr	r2, [pc, #40]	@ (800a8b4 <lfs_file_open+0x60>)
 800a88c:	f241 61ec 	movw	r1, #5868	@ 0x16ec
 800a890:	4809      	ldr	r0, [pc, #36]	@ (800a8b8 <lfs_file_open+0x64>)
 800a892:	f000 faab 	bl	800adec <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	68b9      	ldr	r1, [r7, #8]
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f7fd feeb 	bl	8008678 <lfs_file_rawopen>
 800a8a2:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a8a4:	697b      	ldr	r3, [r7, #20]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3718      	adds	r7, #24
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	0800c928 	.word	0x0800c928
 800a8b4:	0800cae8 	.word	0x0800cae8
 800a8b8:	0800bf90 	.word	0x0800bf90

0800a8bc <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <lfs_file_close+0x18>
        return err;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	e015      	b.n	800a900 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fa f9ae 	bl	8004c3c <lfs_mlist_isopen>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d106      	bne.n	800a8f4 <lfs_file_close+0x38>
 800a8e6:	4b08      	ldr	r3, [pc, #32]	@ (800a908 <lfs_file_close+0x4c>)
 800a8e8:	4a08      	ldr	r2, [pc, #32]	@ (800a90c <lfs_file_close+0x50>)
 800a8ea:	f241 7110 	movw	r1, #5904	@ 0x1710
 800a8ee:	4808      	ldr	r0, [pc, #32]	@ (800a910 <lfs_file_close+0x54>)
 800a8f0:	f000 fa7c 	bl	800adec <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7fd fed6 	bl	80086a8 <lfs_file_rawclose>
 800a8fc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	0800c960 	.word	0x0800c960
 800a90c:	0800caf8 	.word	0x0800caf8
 800a910:	0800bf90 	.word	0x0800bf90

0800a914 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
 800a920:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a922:	2300      	movs	r3, #0
 800a924:	617b      	str	r3, [r7, #20]
    if (err) {
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <lfs_file_read+0x1c>
        return err;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	e017      	b.n	800a960 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a934:	68b9      	ldr	r1, [r7, #8]
 800a936:	4618      	mov	r0, r3
 800a938:	f7fa f980 	bl	8004c3c <lfs_mlist_isopen>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d106      	bne.n	800a950 <lfs_file_read+0x3c>
 800a942:	4b09      	ldr	r3, [pc, #36]	@ (800a968 <lfs_file_read+0x54>)
 800a944:	4a09      	ldr	r2, [pc, #36]	@ (800a96c <lfs_file_read+0x58>)
 800a946:	f241 7132 	movw	r1, #5938	@ 0x1732
 800a94a:	4809      	ldr	r0, [pc, #36]	@ (800a970 <lfs_file_read+0x5c>)
 800a94c:	f000 fa4e 	bl	800adec <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	68b9      	ldr	r1, [r7, #8]
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f7fe f9f2 	bl	8008d40 <lfs_file_rawread>
 800a95c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a95e:	693b      	ldr	r3, [r7, #16]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3718      	adds	r7, #24
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	0800c960 	.word	0x0800c960
 800a96c:	0800cb08 	.word	0x0800cb08
 800a970:	0800bf90 	.word	0x0800bf90

0800a974 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a982:	2300      	movs	r3, #0
 800a984:	617b      	str	r3, [r7, #20]
    if (err) {
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <lfs_file_write+0x1c>
        return err;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	e017      	b.n	800a9c0 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a994:	68b9      	ldr	r1, [r7, #8]
 800a996:	4618      	mov	r0, r3
 800a998:	f7fa f950 	bl	8004c3c <lfs_mlist_isopen>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d106      	bne.n	800a9b0 <lfs_file_write+0x3c>
 800a9a2:	4b09      	ldr	r3, [pc, #36]	@ (800a9c8 <lfs_file_write+0x54>)
 800a9a4:	4a09      	ldr	r2, [pc, #36]	@ (800a9cc <lfs_file_write+0x58>)
 800a9a6:	f241 7144 	movw	r1, #5956	@ 0x1744
 800a9aa:	4809      	ldr	r0, [pc, #36]	@ (800a9d0 <lfs_file_write+0x5c>)
 800a9ac:	f000 fa1e 	bl	800adec <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	68b9      	ldr	r1, [r7, #8]
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f7fe fb22 	bl	8009000 <lfs_file_rawwrite>
 800a9bc:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800a9be:	693b      	ldr	r3, [r7, #16]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	0800c960 	.word	0x0800c960
 800a9cc:	0800cb18 	.word	0x0800cb18
 800a9d0:	0800bf90 	.word	0x0800bf90

0800a9d4 <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
    if (err) {
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <lfs_file_rewind+0x18>
        return err;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	e005      	b.n	800a9f8 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7fe fc13 	bl	800921a <lfs_file_rawrewind>
 800a9f4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800aa00:	b480      	push	{r7}
 800aa02:	b087      	sub	sp, #28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800aa10:	2300      	movs	r3, #0
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	e024      	b.n	800aa60 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	091a      	lsrs	r2, r3, #4
 800aa1a:	6939      	ldr	r1, [r7, #16]
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	440b      	add	r3, r1
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	4619      	mov	r1, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	404b      	eors	r3, r1
 800aa28:	f003 030f 	and.w	r3, r3, #15
 800aa2c:	4912      	ldr	r1, [pc, #72]	@ (800aa78 <lfs_crc+0x78>)
 800aa2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aa32:	4053      	eors	r3, r2
 800aa34:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	091a      	lsrs	r2, r3, #4
 800aa3a:	6939      	ldr	r1, [r7, #16]
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	440b      	add	r3, r1
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	091b      	lsrs	r3, r3, #4
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	4619      	mov	r1, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	404b      	eors	r3, r1
 800aa4c:	f003 030f 	and.w	r3, r3, #15
 800aa50:	4909      	ldr	r1, [pc, #36]	@ (800aa78 <lfs_crc+0x78>)
 800aa52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aa56:	4053      	eors	r3, r2
 800aa58:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	617b      	str	r3, [r7, #20]
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d3d6      	bcc.n	800aa16 <lfs_crc+0x16>
    }

    return crc;
 800aa68:	68fb      	ldr	r3, [r7, #12]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	371c      	adds	r7, #28
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	0800cb28 	.word	0x0800cb28

0800aa7c <i2c_wait>:
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C.
 * @param  i2c_address Target device address
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef i2c_wait(I2C_HandleTypeDef *i2c, uint16_t i2c_address) {
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	807b      	strh	r3, [r7, #2]

    uint32_t start_time = HAL_GetTick();
 800aa88:	f7f6 fc50 	bl	800132c <HAL_GetTick>
 800aa8c:	60f8      	str	r0, [r7, #12]
    while (HAL_I2C_IsDeviceReady(i2c, i2c_address << 1, 1, HAL_MAX_DELAY) != HAL_OK) {
 800aa8e:	e008      	b.n	800aaa2 <i2c_wait+0x26>
        if (HAL_GetTick() - start_time >= M24CXX_WRITE_TIMEOUT)
 800aa90:	f7f6 fc4c 	bl	800132c <HAL_GetTick>
 800aa94:	4602      	mov	r2, r0
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	2b63      	cmp	r3, #99	@ 0x63
 800aa9c:	d901      	bls.n	800aaa2 <i2c_wait+0x26>
            return M24CXX_Err;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e00c      	b.n	800aabc <i2c_wait+0x40>
    while (HAL_I2C_IsDeviceReady(i2c, i2c_address << 1, 1, HAL_MAX_DELAY) != HAL_OK) {
 800aaa2:	887b      	ldrh	r3, [r7, #2]
 800aaa4:	005b      	lsls	r3, r3, #1
 800aaa6:	b299      	uxth	r1, r3
 800aaa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aaac:	2201      	movs	r2, #1
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7f7 fbd6 	bl	8002260 <HAL_I2C_IsDeviceReady>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1ea      	bne.n	800aa90 <i2c_wait+0x14>
    }

    return M24CXX_Ok;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <m24cxx_init>:
 *         the configuration information for the specified I2C.
 * @param  a pointer to I2C_HandleTypeDef
 * @param  i2c_address Target device address
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef m24cxx_init(M24CXX_HandleTypeDef *m24cxx, I2C_HandleTypeDef *i2c, uint8_t i2c_address) {
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	4613      	mov	r3, r2
 800aad0:	71fb      	strb	r3, [r7, #7]

    M24CXXDBG("M24CXX Init type = %s size = %d ", M24CXX_TYPE, M24CXX_SIZE);

    m24cxx->i2c = i2c;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	601a      	str	r2, [r3, #0]
    m24cxx->i2c_address = i2c_address;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	79fa      	ldrb	r2, [r7, #7]
 800aadc:	711a      	strb	r2, [r3, #4]

#ifdef EEPROM_WP_Pin
    HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_SET);
#endif

    if (m24cxx_isconnected(m24cxx) != M24CXX_Ok)
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f000 f80a 	bl	800aaf8 <m24cxx_isconnected>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <m24cxx_init+0x2a>
        return M24CXX_Err;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e000      	b.n	800aaf0 <m24cxx_init+0x2c>

    return M24CXX_Ok;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <m24cxx_isconnected>:
 * @brief  Check if m24cxx is connected
 * @param  m24cxx Pointer to a M24CXX_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C.
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef m24cxx_isconnected(M24CXX_HandleTypeDef *m24cxx) {
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]

    if (HAL_I2C_IsDeviceReady(m24cxx->i2c, m24cxx->i2c_address << 1, 2, HAL_MAX_DELAY) != HAL_OK) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6818      	ldr	r0, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	791b      	ldrb	r3, [r3, #4]
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	b299      	uxth	r1, r3
 800ab0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab10:	2202      	movs	r2, #2
 800ab12:	f7f7 fba5 	bl	8002260 <HAL_I2C_IsDeviceReady>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <m24cxx_isconnected+0x28>
        return M24CXX_Err;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e000      	b.n	800ab22 <m24cxx_isconnected+0x2a>
    }

    return M24CXX_Ok;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <m24cxx_read>:
 * @param  address from which to read data
 * @param  data buffer
 * @param  length of data buffer
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef m24cxx_read(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 800ab2a:	b5b0      	push	{r4, r5, r7, lr}
 800ab2c:	b090      	sub	sp, #64	@ 0x40
 800ab2e:	af04      	add	r7, sp, #16
 800ab30:	60f8      	str	r0, [r7, #12]
 800ab32:	60b9      	str	r1, [r7, #8]
 800ab34:	607a      	str	r2, [r7, #4]
 800ab36:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX read - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_READ_PAGE_SIZE;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	0a1b      	lsrs	r3, r3, #8
 800ab3c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t page_end = ((address + len - 1) / M24CXX_READ_PAGE_SIZE);
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	4413      	add	r3, r2
 800ab44:	3b01      	subs	r3, #1
 800ab46:	0a1b      	lsrs	r3, r3, #8
 800ab48:	623b      	str	r3, [r7, #32]
    uint32_t data_offset = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    M24CXXDBG("Reading %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);

    for (uint32_t page = page_start; page <= page_end; ++page) {
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab50:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab52:	e048      	b.n	800abe6 <m24cxx_read+0xbc>

        uint32_t i2c_address, start_address, read_len;

        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 800ab54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d002      	beq.n	800ab62 <m24cxx_read+0x38>
 800ab5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5e:	021b      	lsls	r3, r3, #8
 800ab60:	e000      	b.n	800ab64 <m24cxx_read+0x3a>
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	61fb      	str	r3, [r7, #28]
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 800ab66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d103      	bne.n	800ab76 <m24cxx_read+0x4c>
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	e00b      	b.n	800ab8e <m24cxx_read+0x64>
 800ab76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d105      	bne.n	800ab8a <m24cxx_read+0x60>
 800ab7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab80:	3301      	adds	r3, #1
 800ab82:	021a      	lsls	r2, r3, #8
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	e001      	b.n	800ab8e <m24cxx_read+0x64>
 800ab8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab8e:	61bb      	str	r3, [r7, #24]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	791b      	ldrb	r3, [r3, #4]
 800ab94:	461a      	mov	r2, r3
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	0c1b      	lsrs	r3, r3, #16
 800ab9a:	4413      	add	r3, r2
 800ab9c:	617b      	str	r3, [r7, #20]

        M24CXXDBG("Reading page %lu, i2c address = 0x%02lx start = 0x%04lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address & M24CXX_ADDRESS_MASK, read_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Read(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, read_len,
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6818      	ldr	r0, [r3, #0]
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	005b      	lsls	r3, r3, #1
 800aba8:	b299      	uxth	r1, r3
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	b29c      	uxth	r4, r3
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb2:	4413      	add	r3, r2
 800abb4:	69ba      	ldr	r2, [r7, #24]
 800abb6:	b292      	uxth	r2, r2
 800abb8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800abbc:	9502      	str	r5, [sp, #8]
 800abbe:	9201      	str	r2, [sp, #4]
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	2310      	movs	r3, #16
 800abc4:	4622      	mov	r2, r4
 800abc6:	f7f7 f919 	bl	8001dfc <HAL_I2C_Mem_Read>
 800abca:	4603      	mov	r3, r0
 800abcc:	74fb      	strb	r3, [r7, #19]
        HAL_MAX_DELAY);

        if (result != HAL_OK) {
 800abce:	7cfb      	ldrb	r3, [r7, #19]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d001      	beq.n	800abd8 <m24cxx_read+0xae>
            M24CXXDBG("Failed to read memory");
            return M24CXX_Err;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e00b      	b.n	800abf0 <m24cxx_read+0xc6>
        }

        data_offset += read_len;
 800abd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	4413      	add	r3, r2
 800abde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (uint32_t page = page_start; page <= page_end; ++page) {
 800abe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe2:	3301      	adds	r3, #1
 800abe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	429a      	cmp	r2, r3
 800abec:	d9b2      	bls.n	800ab54 <m24cxx_read+0x2a>

    }

    return M24CXX_Ok;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3730      	adds	r7, #48	@ 0x30
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bdb0      	pop	{r4, r5, r7, pc}

0800abf8 <m24cxx_write>:
 * @param  address to which to write data
 * @param  data buffer
 * @param  length of data buffer
 * @retval M24CXX status
 */
M24CXX_StatusTypeDef m24cxx_write(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 800abf8:	b5b0      	push	{r4, r5, r7, lr}
 800abfa:	b092      	sub	sp, #72	@ 0x48
 800abfc:	af04      	add	r7, sp, #16
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
 800ac04:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX write - address = 0x%04lx len = 0x%04lx", address, len);

    uint32_t page_start = address / M24CXX_WRITE_PAGE_SIZE;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	0a1b      	lsrs	r3, r3, #8
 800ac0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t page_end = ((address + len - 1) / M24CXX_WRITE_PAGE_SIZE);
 800ac0c:	68ba      	ldr	r2, [r7, #8]
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	4413      	add	r3, r2
 800ac12:	3b01      	subs	r3, #1
 800ac14:	0a1b      	lsrs	r3, r3, #8
 800ac16:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t data_offset = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	637b      	str	r3, [r7, #52]	@ 0x34

#ifdef EEPROM_WP_Pin
    HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_RESET);
#endif

    for (uint32_t page = page_start; page <= page_end; ++page) {
 800ac1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac20:	e058      	b.n	800acd4 <m24cxx_write+0xdc>

        uint32_t i2c_address, start_address, start_address_masked, write_len;

        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 800ac22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d002      	beq.n	800ac30 <m24cxx_write+0x38>
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2c:	021b      	lsls	r3, r3, #8
 800ac2e:	e000      	b.n	800ac32 <m24cxx_write+0x3a>
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	627b      	str	r3, [r7, #36]	@ 0x24
        start_address_masked = start_address & M24CXX_ADDRESS_MASK;
 800ac34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	623b      	str	r3, [r7, #32]
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 800ac3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d103      	bne.n	800ac4a <m24cxx_write+0x52>
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	e00b      	b.n	800ac62 <m24cxx_write+0x6a>
 800ac4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d105      	bne.n	800ac5e <m24cxx_write+0x66>
 800ac52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac54:	3301      	adds	r3, #1
 800ac56:	021a      	lsls	r2, r3, #8
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	e001      	b.n	800ac62 <m24cxx_write+0x6a>
 800ac5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac62:	61fb      	str	r3, [r7, #28]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	791b      	ldrb	r3, [r3, #4]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6c:	0c1b      	lsrs	r3, r3, #16
 800ac6e:	4413      	add	r3, r2
 800ac70:	61bb      	str	r3, [r7, #24]

        M24CXXDBG("Writing page %lu, i2c address = 0x%02lx start = 0x%06lx masked = 0x%06lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address, start_address_masked, write_len, data_offset);

        HAL_StatusTypeDef result = HAL_I2C_Mem_Write(m24cxx->i2c, i2c_address << 1, start_address_masked, M24CXX_ADDRESS_SIZE, data + data_offset, write_len, HAL_MAX_DELAY);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6818      	ldr	r0, [r3, #0]
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	b299      	uxth	r1, r3
 800ac7e:	6a3b      	ldr	r3, [r7, #32]
 800ac80:	b29c      	uxth	r4, r3
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac86:	4413      	add	r3, r2
 800ac88:	69fa      	ldr	r2, [r7, #28]
 800ac8a:	b292      	uxth	r2, r2
 800ac8c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ac90:	9502      	str	r5, [sp, #8]
 800ac92:	9201      	str	r2, [sp, #4]
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	2310      	movs	r3, #16
 800ac98:	4622      	mov	r2, r4
 800ac9a:	f7f6 ffb5 	bl	8001c08 <HAL_I2C_Mem_Write>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	75fb      	strb	r3, [r7, #23]

        if (result != HAL_OK) {
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <m24cxx_write+0xb4>
            M24CXXDBG("Failed to write memory");
            return M24CXX_Err;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e018      	b.n	800acde <m24cxx_write+0xe6>
        }

        data_offset += write_len;
 800acac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	4413      	add	r3, r2
 800acb2:	637b      	str	r3, [r7, #52]	@ 0x34

        if (i2c_wait(m24cxx->i2c, i2c_address) != M24CXX_Ok) {
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	69ba      	ldr	r2, [r7, #24]
 800acba:	b292      	uxth	r2, r2
 800acbc:	4611      	mov	r1, r2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff fedc 	bl	800aa7c <i2c_wait>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <m24cxx_write+0xd6>
            M24CXXDBG("M24Cxx Device never got ready");
            return M24CXX_Err;
 800acca:	2301      	movs	r3, #1
 800accc:	e007      	b.n	800acde <m24cxx_write+0xe6>
    for (uint32_t page = page_start; page <= page_end; ++page) {
 800acce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd0:	3301      	adds	r3, #1
 800acd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800acd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	429a      	cmp	r2, r3
 800acda:	d9a2      	bls.n	800ac22 <m24cxx_write+0x2a>

#ifdef EEPROM_WP_Pin
    HAL_GPIO_WritePin(EEPROM_WP_GPIO_Port, EEPROM_WP_Pin, GPIO_PIN_SET);
#endif

    return M24CXX_Ok;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3738      	adds	r7, #56	@ 0x38
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bdb0      	pop	{r4, r5, r7, pc}

0800ace6 <m24cxx_erase>:

M24CXX_StatusTypeDef m24cxx_erase(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint32_t len) {
 800ace6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acea:	b089      	sub	sp, #36	@ 0x24
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	466b      	mov	r3, sp
 800acf6:	461e      	mov	r6, r3

    M24CXXDBG("M24CXX erase - address = 0x%04lx len = 0x%04lx", address, len);

    uint8_t buf[len];
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	460b      	mov	r3, r1
 800acfc:	3b01      	subs	r3, #1
 800acfe:	61fb      	str	r3, [r7, #28]
 800ad00:	2300      	movs	r3, #0
 800ad02:	4688      	mov	r8, r1
 800ad04:	4699      	mov	r9, r3
 800ad06:	f04f 0200 	mov.w	r2, #0
 800ad0a:	f04f 0300 	mov.w	r3, #0
 800ad0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	461d      	mov	r5, r3
 800ad20:	f04f 0200 	mov.w	r2, #0
 800ad24:	f04f 0300 	mov.w	r3, #0
 800ad28:	00eb      	lsls	r3, r5, #3
 800ad2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad2e:	00e2      	lsls	r2, r4, #3
 800ad30:	1dcb      	adds	r3, r1, #7
 800ad32:	08db      	lsrs	r3, r3, #3
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	ebad 0d03 	sub.w	sp, sp, r3
 800ad3a:	466b      	mov	r3, sp
 800ad3c:	3300      	adds	r3, #0
 800ad3e:	61bb      	str	r3, [r7, #24]

    memset(buf, 0xff, len);
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	21ff      	movs	r1, #255	@ 0xff
 800ad44:	69b8      	ldr	r0, [r7, #24]
 800ad46:	f000 fa6e 	bl	800b226 <memset>

    M24CXX_StatusTypeDef result = m24cxx_write(m24cxx, address, (uint8_t*) &buf, len);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	68b9      	ldr	r1, [r7, #8]
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f7ff ff51 	bl	800abf8 <m24cxx_write>
 800ad56:	4603      	mov	r3, r0
 800ad58:	75fb      	strb	r3, [r7, #23]
    if (result != M24CXX_Ok)
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <m24cxx_erase+0x7e>
        return result;
 800ad60:	7dfb      	ldrb	r3, [r7, #23]
 800ad62:	e000      	b.n	800ad66 <m24cxx_erase+0x80>

    return M24CXX_Ok;
 800ad64:	2300      	movs	r3, #0
 800ad66:	46b5      	mov	sp, r6
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3724      	adds	r7, #36	@ 0x24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ad72 <m24cxx_erase_all>:
 * @param  m24cxx Pointer to a M24CXX_HandleTypeDef structure that contains
 *         the configuration information for the specified I2C.
 * @retval M24CXX status
 */

M24CXX_StatusTypeDef m24cxx_erase_all(M24CXX_HandleTypeDef *m24cxx) {
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b0c4      	sub	sp, #272	@ 0x110
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ad80:	6018      	str	r0, [r3, #0]

    M24CXXDBG("M24CXX erase all");

    uint8_t buf[M24CXX_WRITE_PAGE_SIZE];

    memset(buf, 0xff, sizeof(buf));
 800ad82:	f107 0308 	add.w	r3, r7, #8
 800ad86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad8a:	21ff      	movs	r1, #255	@ 0xff
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 fa4a 	bl	800b226 <memset>

    for (uint32_t i = 0; i < M24CXX_SIZE / M24CXX_WRITE_PAGE_SIZE; ++i) {
 800ad92:	2300      	movs	r3, #0
 800ad94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800ad98:	e01c      	b.n	800add4 <m24cxx_erase_all+0x62>
        M24CXX_StatusTypeDef result = m24cxx_write(m24cxx, i * M24CXX_WRITE_PAGE_SIZE, (uint8_t*) &buf, sizeof(buf));
 800ad9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad9e:	0219      	lsls	r1, r3, #8
 800ada0:	f107 0208 	add.w	r2, r7, #8
 800ada4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ada8:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800adac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adb0:	6800      	ldr	r0, [r0, #0]
 800adb2:	f7ff ff21 	bl	800abf8 <m24cxx_write>
 800adb6:	4603      	mov	r3, r0
 800adb8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        if (result != M24CXX_Ok)
 800adbc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <m24cxx_erase_all+0x58>
            return result;
 800adc4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800adc8:	e00a      	b.n	800ade0 <m24cxx_erase_all+0x6e>
    for (uint32_t i = 0; i < M24CXX_SIZE / M24CXX_WRITE_PAGE_SIZE; ++i) {
 800adca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adce:	3301      	adds	r3, #1
 800add0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800add4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800add8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800addc:	d3dd      	bcc.n	800ad9a <m24cxx_erase_all+0x28>
    }

    return M24CXX_Ok;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <__assert_func>:
 800adec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adee:	4614      	mov	r4, r2
 800adf0:	461a      	mov	r2, r3
 800adf2:	4b09      	ldr	r3, [pc, #36]	@ (800ae18 <__assert_func+0x2c>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4605      	mov	r5, r0
 800adf8:	68d8      	ldr	r0, [r3, #12]
 800adfa:	b954      	cbnz	r4, 800ae12 <__assert_func+0x26>
 800adfc:	4b07      	ldr	r3, [pc, #28]	@ (800ae1c <__assert_func+0x30>)
 800adfe:	461c      	mov	r4, r3
 800ae00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae04:	9100      	str	r1, [sp, #0]
 800ae06:	462b      	mov	r3, r5
 800ae08:	4905      	ldr	r1, [pc, #20]	@ (800ae20 <__assert_func+0x34>)
 800ae0a:	f000 f96f 	bl	800b0ec <fiprintf>
 800ae0e:	f000 fad2 	bl	800b3b6 <abort>
 800ae12:	4b04      	ldr	r3, [pc, #16]	@ (800ae24 <__assert_func+0x38>)
 800ae14:	e7f4      	b.n	800ae00 <__assert_func+0x14>
 800ae16:	bf00      	nop
 800ae18:	20000064 	.word	0x20000064
 800ae1c:	0800cba3 	.word	0x0800cba3
 800ae20:	0800cb75 	.word	0x0800cb75
 800ae24:	0800cb68 	.word	0x0800cb68

0800ae28 <malloc>:
 800ae28:	4b02      	ldr	r3, [pc, #8]	@ (800ae34 <malloc+0xc>)
 800ae2a:	4601      	mov	r1, r0
 800ae2c:	6818      	ldr	r0, [r3, #0]
 800ae2e:	f000 b82d 	b.w	800ae8c <_malloc_r>
 800ae32:	bf00      	nop
 800ae34:	20000064 	.word	0x20000064

0800ae38 <free>:
 800ae38:	4b02      	ldr	r3, [pc, #8]	@ (800ae44 <free+0xc>)
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	6818      	ldr	r0, [r3, #0]
 800ae3e:	f000 bac1 	b.w	800b3c4 <_free_r>
 800ae42:	bf00      	nop
 800ae44:	20000064 	.word	0x20000064

0800ae48 <sbrk_aligned>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	4e0f      	ldr	r6, [pc, #60]	@ (800ae88 <sbrk_aligned+0x40>)
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	6831      	ldr	r1, [r6, #0]
 800ae50:	4605      	mov	r5, r0
 800ae52:	b911      	cbnz	r1, 800ae5a <sbrk_aligned+0x12>
 800ae54:	f000 fa52 	bl	800b2fc <_sbrk_r>
 800ae58:	6030      	str	r0, [r6, #0]
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 fa4d 	bl	800b2fc <_sbrk_r>
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	d103      	bne.n	800ae6e <sbrk_aligned+0x26>
 800ae66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	bd70      	pop	{r4, r5, r6, pc}
 800ae6e:	1cc4      	adds	r4, r0, #3
 800ae70:	f024 0403 	bic.w	r4, r4, #3
 800ae74:	42a0      	cmp	r0, r4
 800ae76:	d0f8      	beq.n	800ae6a <sbrk_aligned+0x22>
 800ae78:	1a21      	subs	r1, r4, r0
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	f000 fa3e 	bl	800b2fc <_sbrk_r>
 800ae80:	3001      	adds	r0, #1
 800ae82:	d1f2      	bne.n	800ae6a <sbrk_aligned+0x22>
 800ae84:	e7ef      	b.n	800ae66 <sbrk_aligned+0x1e>
 800ae86:	bf00      	nop
 800ae88:	20000350 	.word	0x20000350

0800ae8c <_malloc_r>:
 800ae8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae90:	1ccd      	adds	r5, r1, #3
 800ae92:	f025 0503 	bic.w	r5, r5, #3
 800ae96:	3508      	adds	r5, #8
 800ae98:	2d0c      	cmp	r5, #12
 800ae9a:	bf38      	it	cc
 800ae9c:	250c      	movcc	r5, #12
 800ae9e:	2d00      	cmp	r5, #0
 800aea0:	4606      	mov	r6, r0
 800aea2:	db01      	blt.n	800aea8 <_malloc_r+0x1c>
 800aea4:	42a9      	cmp	r1, r5
 800aea6:	d904      	bls.n	800aeb2 <_malloc_r+0x26>
 800aea8:	230c      	movs	r3, #12
 800aeaa:	6033      	str	r3, [r6, #0]
 800aeac:	2000      	movs	r0, #0
 800aeae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af88 <_malloc_r+0xfc>
 800aeb6:	f000 f869 	bl	800af8c <__malloc_lock>
 800aeba:	f8d8 3000 	ldr.w	r3, [r8]
 800aebe:	461c      	mov	r4, r3
 800aec0:	bb44      	cbnz	r4, 800af14 <_malloc_r+0x88>
 800aec2:	4629      	mov	r1, r5
 800aec4:	4630      	mov	r0, r6
 800aec6:	f7ff ffbf 	bl	800ae48 <sbrk_aligned>
 800aeca:	1c43      	adds	r3, r0, #1
 800aecc:	4604      	mov	r4, r0
 800aece:	d158      	bne.n	800af82 <_malloc_r+0xf6>
 800aed0:	f8d8 4000 	ldr.w	r4, [r8]
 800aed4:	4627      	mov	r7, r4
 800aed6:	2f00      	cmp	r7, #0
 800aed8:	d143      	bne.n	800af62 <_malloc_r+0xd6>
 800aeda:	2c00      	cmp	r4, #0
 800aedc:	d04b      	beq.n	800af76 <_malloc_r+0xea>
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	4639      	mov	r1, r7
 800aee2:	4630      	mov	r0, r6
 800aee4:	eb04 0903 	add.w	r9, r4, r3
 800aee8:	f000 fa08 	bl	800b2fc <_sbrk_r>
 800aeec:	4581      	cmp	r9, r0
 800aeee:	d142      	bne.n	800af76 <_malloc_r+0xea>
 800aef0:	6821      	ldr	r1, [r4, #0]
 800aef2:	1a6d      	subs	r5, r5, r1
 800aef4:	4629      	mov	r1, r5
 800aef6:	4630      	mov	r0, r6
 800aef8:	f7ff ffa6 	bl	800ae48 <sbrk_aligned>
 800aefc:	3001      	adds	r0, #1
 800aefe:	d03a      	beq.n	800af76 <_malloc_r+0xea>
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	442b      	add	r3, r5
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	f8d8 3000 	ldr.w	r3, [r8]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	bb62      	cbnz	r2, 800af68 <_malloc_r+0xdc>
 800af0e:	f8c8 7000 	str.w	r7, [r8]
 800af12:	e00f      	b.n	800af34 <_malloc_r+0xa8>
 800af14:	6822      	ldr	r2, [r4, #0]
 800af16:	1b52      	subs	r2, r2, r5
 800af18:	d420      	bmi.n	800af5c <_malloc_r+0xd0>
 800af1a:	2a0b      	cmp	r2, #11
 800af1c:	d917      	bls.n	800af4e <_malloc_r+0xc2>
 800af1e:	1961      	adds	r1, r4, r5
 800af20:	42a3      	cmp	r3, r4
 800af22:	6025      	str	r5, [r4, #0]
 800af24:	bf18      	it	ne
 800af26:	6059      	strne	r1, [r3, #4]
 800af28:	6863      	ldr	r3, [r4, #4]
 800af2a:	bf08      	it	eq
 800af2c:	f8c8 1000 	streq.w	r1, [r8]
 800af30:	5162      	str	r2, [r4, r5]
 800af32:	604b      	str	r3, [r1, #4]
 800af34:	4630      	mov	r0, r6
 800af36:	f000 f82f 	bl	800af98 <__malloc_unlock>
 800af3a:	f104 000b 	add.w	r0, r4, #11
 800af3e:	1d23      	adds	r3, r4, #4
 800af40:	f020 0007 	bic.w	r0, r0, #7
 800af44:	1ac2      	subs	r2, r0, r3
 800af46:	bf1c      	itt	ne
 800af48:	1a1b      	subne	r3, r3, r0
 800af4a:	50a3      	strne	r3, [r4, r2]
 800af4c:	e7af      	b.n	800aeae <_malloc_r+0x22>
 800af4e:	6862      	ldr	r2, [r4, #4]
 800af50:	42a3      	cmp	r3, r4
 800af52:	bf0c      	ite	eq
 800af54:	f8c8 2000 	streq.w	r2, [r8]
 800af58:	605a      	strne	r2, [r3, #4]
 800af5a:	e7eb      	b.n	800af34 <_malloc_r+0xa8>
 800af5c:	4623      	mov	r3, r4
 800af5e:	6864      	ldr	r4, [r4, #4]
 800af60:	e7ae      	b.n	800aec0 <_malloc_r+0x34>
 800af62:	463c      	mov	r4, r7
 800af64:	687f      	ldr	r7, [r7, #4]
 800af66:	e7b6      	b.n	800aed6 <_malloc_r+0x4a>
 800af68:	461a      	mov	r2, r3
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	42a3      	cmp	r3, r4
 800af6e:	d1fb      	bne.n	800af68 <_malloc_r+0xdc>
 800af70:	2300      	movs	r3, #0
 800af72:	6053      	str	r3, [r2, #4]
 800af74:	e7de      	b.n	800af34 <_malloc_r+0xa8>
 800af76:	230c      	movs	r3, #12
 800af78:	6033      	str	r3, [r6, #0]
 800af7a:	4630      	mov	r0, r6
 800af7c:	f000 f80c 	bl	800af98 <__malloc_unlock>
 800af80:	e794      	b.n	800aeac <_malloc_r+0x20>
 800af82:	6005      	str	r5, [r0, #0]
 800af84:	e7d6      	b.n	800af34 <_malloc_r+0xa8>
 800af86:	bf00      	nop
 800af88:	20000354 	.word	0x20000354

0800af8c <__malloc_lock>:
 800af8c:	4801      	ldr	r0, [pc, #4]	@ (800af94 <__malloc_lock+0x8>)
 800af8e:	f000 ba02 	b.w	800b396 <__retarget_lock_acquire_recursive>
 800af92:	bf00      	nop
 800af94:	20000498 	.word	0x20000498

0800af98 <__malloc_unlock>:
 800af98:	4801      	ldr	r0, [pc, #4]	@ (800afa0 <__malloc_unlock+0x8>)
 800af9a:	f000 b9fd 	b.w	800b398 <__retarget_lock_release_recursive>
 800af9e:	bf00      	nop
 800afa0:	20000498 	.word	0x20000498

0800afa4 <std>:
 800afa4:	2300      	movs	r3, #0
 800afa6:	b510      	push	{r4, lr}
 800afa8:	4604      	mov	r4, r0
 800afaa:	e9c0 3300 	strd	r3, r3, [r0]
 800afae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afb2:	6083      	str	r3, [r0, #8]
 800afb4:	8181      	strh	r1, [r0, #12]
 800afb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800afb8:	81c2      	strh	r2, [r0, #14]
 800afba:	6183      	str	r3, [r0, #24]
 800afbc:	4619      	mov	r1, r3
 800afbe:	2208      	movs	r2, #8
 800afc0:	305c      	adds	r0, #92	@ 0x5c
 800afc2:	f000 f930 	bl	800b226 <memset>
 800afc6:	4b0d      	ldr	r3, [pc, #52]	@ (800affc <std+0x58>)
 800afc8:	6263      	str	r3, [r4, #36]	@ 0x24
 800afca:	4b0d      	ldr	r3, [pc, #52]	@ (800b000 <std+0x5c>)
 800afcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afce:	4b0d      	ldr	r3, [pc, #52]	@ (800b004 <std+0x60>)
 800afd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afd2:	4b0d      	ldr	r3, [pc, #52]	@ (800b008 <std+0x64>)
 800afd4:	6323      	str	r3, [r4, #48]	@ 0x30
 800afd6:	4b0d      	ldr	r3, [pc, #52]	@ (800b00c <std+0x68>)
 800afd8:	6224      	str	r4, [r4, #32]
 800afda:	429c      	cmp	r4, r3
 800afdc:	d006      	beq.n	800afec <std+0x48>
 800afde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afe2:	4294      	cmp	r4, r2
 800afe4:	d002      	beq.n	800afec <std+0x48>
 800afe6:	33d0      	adds	r3, #208	@ 0xd0
 800afe8:	429c      	cmp	r4, r3
 800afea:	d105      	bne.n	800aff8 <std+0x54>
 800afec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aff4:	f000 b9ce 	b.w	800b394 <__retarget_lock_init_recursive>
 800aff8:	bd10      	pop	{r4, pc}
 800affa:	bf00      	nop
 800affc:	0800b181 	.word	0x0800b181
 800b000:	0800b1a3 	.word	0x0800b1a3
 800b004:	0800b1db 	.word	0x0800b1db
 800b008:	0800b1ff 	.word	0x0800b1ff
 800b00c:	20000358 	.word	0x20000358

0800b010 <stdio_exit_handler>:
 800b010:	4a02      	ldr	r2, [pc, #8]	@ (800b01c <stdio_exit_handler+0xc>)
 800b012:	4903      	ldr	r1, [pc, #12]	@ (800b020 <stdio_exit_handler+0x10>)
 800b014:	4803      	ldr	r0, [pc, #12]	@ (800b024 <stdio_exit_handler+0x14>)
 800b016:	f000 b87b 	b.w	800b110 <_fwalk_sglue>
 800b01a:	bf00      	nop
 800b01c:	20000058 	.word	0x20000058
 800b020:	0800bb01 	.word	0x0800bb01
 800b024:	20000068 	.word	0x20000068

0800b028 <cleanup_stdio>:
 800b028:	6841      	ldr	r1, [r0, #4]
 800b02a:	4b0c      	ldr	r3, [pc, #48]	@ (800b05c <cleanup_stdio+0x34>)
 800b02c:	4299      	cmp	r1, r3
 800b02e:	b510      	push	{r4, lr}
 800b030:	4604      	mov	r4, r0
 800b032:	d001      	beq.n	800b038 <cleanup_stdio+0x10>
 800b034:	f000 fd64 	bl	800bb00 <_fflush_r>
 800b038:	68a1      	ldr	r1, [r4, #8]
 800b03a:	4b09      	ldr	r3, [pc, #36]	@ (800b060 <cleanup_stdio+0x38>)
 800b03c:	4299      	cmp	r1, r3
 800b03e:	d002      	beq.n	800b046 <cleanup_stdio+0x1e>
 800b040:	4620      	mov	r0, r4
 800b042:	f000 fd5d 	bl	800bb00 <_fflush_r>
 800b046:	68e1      	ldr	r1, [r4, #12]
 800b048:	4b06      	ldr	r3, [pc, #24]	@ (800b064 <cleanup_stdio+0x3c>)
 800b04a:	4299      	cmp	r1, r3
 800b04c:	d004      	beq.n	800b058 <cleanup_stdio+0x30>
 800b04e:	4620      	mov	r0, r4
 800b050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b054:	f000 bd54 	b.w	800bb00 <_fflush_r>
 800b058:	bd10      	pop	{r4, pc}
 800b05a:	bf00      	nop
 800b05c:	20000358 	.word	0x20000358
 800b060:	200003c0 	.word	0x200003c0
 800b064:	20000428 	.word	0x20000428

0800b068 <global_stdio_init.part.0>:
 800b068:	b510      	push	{r4, lr}
 800b06a:	4b0b      	ldr	r3, [pc, #44]	@ (800b098 <global_stdio_init.part.0+0x30>)
 800b06c:	4c0b      	ldr	r4, [pc, #44]	@ (800b09c <global_stdio_init.part.0+0x34>)
 800b06e:	4a0c      	ldr	r2, [pc, #48]	@ (800b0a0 <global_stdio_init.part.0+0x38>)
 800b070:	601a      	str	r2, [r3, #0]
 800b072:	4620      	mov	r0, r4
 800b074:	2200      	movs	r2, #0
 800b076:	2104      	movs	r1, #4
 800b078:	f7ff ff94 	bl	800afa4 <std>
 800b07c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b080:	2201      	movs	r2, #1
 800b082:	2109      	movs	r1, #9
 800b084:	f7ff ff8e 	bl	800afa4 <std>
 800b088:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b08c:	2202      	movs	r2, #2
 800b08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b092:	2112      	movs	r1, #18
 800b094:	f7ff bf86 	b.w	800afa4 <std>
 800b098:	20000490 	.word	0x20000490
 800b09c:	20000358 	.word	0x20000358
 800b0a0:	0800b011 	.word	0x0800b011

0800b0a4 <__sfp_lock_acquire>:
 800b0a4:	4801      	ldr	r0, [pc, #4]	@ (800b0ac <__sfp_lock_acquire+0x8>)
 800b0a6:	f000 b976 	b.w	800b396 <__retarget_lock_acquire_recursive>
 800b0aa:	bf00      	nop
 800b0ac:	20000499 	.word	0x20000499

0800b0b0 <__sfp_lock_release>:
 800b0b0:	4801      	ldr	r0, [pc, #4]	@ (800b0b8 <__sfp_lock_release+0x8>)
 800b0b2:	f000 b971 	b.w	800b398 <__retarget_lock_release_recursive>
 800b0b6:	bf00      	nop
 800b0b8:	20000499 	.word	0x20000499

0800b0bc <__sinit>:
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	4604      	mov	r4, r0
 800b0c0:	f7ff fff0 	bl	800b0a4 <__sfp_lock_acquire>
 800b0c4:	6a23      	ldr	r3, [r4, #32]
 800b0c6:	b11b      	cbz	r3, 800b0d0 <__sinit+0x14>
 800b0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0cc:	f7ff bff0 	b.w	800b0b0 <__sfp_lock_release>
 800b0d0:	4b04      	ldr	r3, [pc, #16]	@ (800b0e4 <__sinit+0x28>)
 800b0d2:	6223      	str	r3, [r4, #32]
 800b0d4:	4b04      	ldr	r3, [pc, #16]	@ (800b0e8 <__sinit+0x2c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1f5      	bne.n	800b0c8 <__sinit+0xc>
 800b0dc:	f7ff ffc4 	bl	800b068 <global_stdio_init.part.0>
 800b0e0:	e7f2      	b.n	800b0c8 <__sinit+0xc>
 800b0e2:	bf00      	nop
 800b0e4:	0800b029 	.word	0x0800b029
 800b0e8:	20000490 	.word	0x20000490

0800b0ec <fiprintf>:
 800b0ec:	b40e      	push	{r1, r2, r3}
 800b0ee:	b503      	push	{r0, r1, lr}
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	ab03      	add	r3, sp, #12
 800b0f4:	4805      	ldr	r0, [pc, #20]	@ (800b10c <fiprintf+0x20>)
 800b0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0fa:	6800      	ldr	r0, [r0, #0]
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	f000 f9d5 	bl	800b4ac <_vfiprintf_r>
 800b102:	b002      	add	sp, #8
 800b104:	f85d eb04 	ldr.w	lr, [sp], #4
 800b108:	b003      	add	sp, #12
 800b10a:	4770      	bx	lr
 800b10c:	20000064 	.word	0x20000064

0800b110 <_fwalk_sglue>:
 800b110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b114:	4607      	mov	r7, r0
 800b116:	4688      	mov	r8, r1
 800b118:	4614      	mov	r4, r2
 800b11a:	2600      	movs	r6, #0
 800b11c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b120:	f1b9 0901 	subs.w	r9, r9, #1
 800b124:	d505      	bpl.n	800b132 <_fwalk_sglue+0x22>
 800b126:	6824      	ldr	r4, [r4, #0]
 800b128:	2c00      	cmp	r4, #0
 800b12a:	d1f7      	bne.n	800b11c <_fwalk_sglue+0xc>
 800b12c:	4630      	mov	r0, r6
 800b12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b132:	89ab      	ldrh	r3, [r5, #12]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d907      	bls.n	800b148 <_fwalk_sglue+0x38>
 800b138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b13c:	3301      	adds	r3, #1
 800b13e:	d003      	beq.n	800b148 <_fwalk_sglue+0x38>
 800b140:	4629      	mov	r1, r5
 800b142:	4638      	mov	r0, r7
 800b144:	47c0      	blx	r8
 800b146:	4306      	orrs	r6, r0
 800b148:	3568      	adds	r5, #104	@ 0x68
 800b14a:	e7e9      	b.n	800b120 <_fwalk_sglue+0x10>

0800b14c <iprintf>:
 800b14c:	b40f      	push	{r0, r1, r2, r3}
 800b14e:	b507      	push	{r0, r1, r2, lr}
 800b150:	4906      	ldr	r1, [pc, #24]	@ (800b16c <iprintf+0x20>)
 800b152:	ab04      	add	r3, sp, #16
 800b154:	6808      	ldr	r0, [r1, #0]
 800b156:	f853 2b04 	ldr.w	r2, [r3], #4
 800b15a:	6881      	ldr	r1, [r0, #8]
 800b15c:	9301      	str	r3, [sp, #4]
 800b15e:	f000 f9a5 	bl	800b4ac <_vfiprintf_r>
 800b162:	b003      	add	sp, #12
 800b164:	f85d eb04 	ldr.w	lr, [sp], #4
 800b168:	b004      	add	sp, #16
 800b16a:	4770      	bx	lr
 800b16c:	20000064 	.word	0x20000064

0800b170 <putchar>:
 800b170:	4b02      	ldr	r3, [pc, #8]	@ (800b17c <putchar+0xc>)
 800b172:	4601      	mov	r1, r0
 800b174:	6818      	ldr	r0, [r3, #0]
 800b176:	6882      	ldr	r2, [r0, #8]
 800b178:	f000 bcea 	b.w	800bb50 <_putc_r>
 800b17c:	20000064 	.word	0x20000064

0800b180 <__sread>:
 800b180:	b510      	push	{r4, lr}
 800b182:	460c      	mov	r4, r1
 800b184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b188:	f000 f8a6 	bl	800b2d8 <_read_r>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	bfab      	itete	ge
 800b190:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b192:	89a3      	ldrhlt	r3, [r4, #12]
 800b194:	181b      	addge	r3, r3, r0
 800b196:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b19a:	bfac      	ite	ge
 800b19c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b19e:	81a3      	strhlt	r3, [r4, #12]
 800b1a0:	bd10      	pop	{r4, pc}

0800b1a2 <__swrite>:
 800b1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a6:	461f      	mov	r7, r3
 800b1a8:	898b      	ldrh	r3, [r1, #12]
 800b1aa:	05db      	lsls	r3, r3, #23
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	4616      	mov	r6, r2
 800b1b2:	d505      	bpl.n	800b1c0 <__swrite+0x1e>
 800b1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f000 f87a 	bl	800b2b4 <_lseek_r>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1ca:	81a3      	strh	r3, [r4, #12]
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d6:	f000 b8a1 	b.w	800b31c <_write_r>

0800b1da <__sseek>:
 800b1da:	b510      	push	{r4, lr}
 800b1dc:	460c      	mov	r4, r1
 800b1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e2:	f000 f867 	bl	800b2b4 <_lseek_r>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	bf15      	itete	ne
 800b1ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1f6:	81a3      	strheq	r3, [r4, #12]
 800b1f8:	bf18      	it	ne
 800b1fa:	81a3      	strhne	r3, [r4, #12]
 800b1fc:	bd10      	pop	{r4, pc}

0800b1fe <__sclose>:
 800b1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b202:	f000 b847 	b.w	800b294 <_close_r>

0800b206 <memcmp>:
 800b206:	b510      	push	{r4, lr}
 800b208:	3901      	subs	r1, #1
 800b20a:	4402      	add	r2, r0
 800b20c:	4290      	cmp	r0, r2
 800b20e:	d101      	bne.n	800b214 <memcmp+0xe>
 800b210:	2000      	movs	r0, #0
 800b212:	e005      	b.n	800b220 <memcmp+0x1a>
 800b214:	7803      	ldrb	r3, [r0, #0]
 800b216:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b21a:	42a3      	cmp	r3, r4
 800b21c:	d001      	beq.n	800b222 <memcmp+0x1c>
 800b21e:	1b18      	subs	r0, r3, r4
 800b220:	bd10      	pop	{r4, pc}
 800b222:	3001      	adds	r0, #1
 800b224:	e7f2      	b.n	800b20c <memcmp+0x6>

0800b226 <memset>:
 800b226:	4402      	add	r2, r0
 800b228:	4603      	mov	r3, r0
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d100      	bne.n	800b230 <memset+0xa>
 800b22e:	4770      	bx	lr
 800b230:	f803 1b01 	strb.w	r1, [r3], #1
 800b234:	e7f9      	b.n	800b22a <memset+0x4>

0800b236 <strchr>:
 800b236:	b2c9      	uxtb	r1, r1
 800b238:	4603      	mov	r3, r0
 800b23a:	4618      	mov	r0, r3
 800b23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b240:	b112      	cbz	r2, 800b248 <strchr+0x12>
 800b242:	428a      	cmp	r2, r1
 800b244:	d1f9      	bne.n	800b23a <strchr+0x4>
 800b246:	4770      	bx	lr
 800b248:	2900      	cmp	r1, #0
 800b24a:	bf18      	it	ne
 800b24c:	2000      	movne	r0, #0
 800b24e:	4770      	bx	lr

0800b250 <strcspn>:
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	4603      	mov	r3, r0
 800b254:	461e      	mov	r6, r3
 800b256:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b25a:	b144      	cbz	r4, 800b26e <strcspn+0x1e>
 800b25c:	1e4a      	subs	r2, r1, #1
 800b25e:	e001      	b.n	800b264 <strcspn+0x14>
 800b260:	42a5      	cmp	r5, r4
 800b262:	d004      	beq.n	800b26e <strcspn+0x1e>
 800b264:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b268:	2d00      	cmp	r5, #0
 800b26a:	d1f9      	bne.n	800b260 <strcspn+0x10>
 800b26c:	e7f2      	b.n	800b254 <strcspn+0x4>
 800b26e:	1a30      	subs	r0, r6, r0
 800b270:	bd70      	pop	{r4, r5, r6, pc}

0800b272 <strspn>:
 800b272:	b570      	push	{r4, r5, r6, lr}
 800b274:	4603      	mov	r3, r0
 800b276:	461e      	mov	r6, r3
 800b278:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b27c:	b13c      	cbz	r4, 800b28e <strspn+0x1c>
 800b27e:	1e4a      	subs	r2, r1, #1
 800b280:	e001      	b.n	800b286 <strspn+0x14>
 800b282:	42a5      	cmp	r5, r4
 800b284:	d0f7      	beq.n	800b276 <strspn+0x4>
 800b286:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b28a:	2d00      	cmp	r5, #0
 800b28c:	d1f9      	bne.n	800b282 <strspn+0x10>
 800b28e:	1a30      	subs	r0, r6, r0
 800b290:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b294 <_close_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d06      	ldr	r5, [pc, #24]	@ (800b2b0 <_close_r+0x1c>)
 800b298:	2300      	movs	r3, #0
 800b29a:	4604      	mov	r4, r0
 800b29c:	4608      	mov	r0, r1
 800b29e:	602b      	str	r3, [r5, #0]
 800b2a0:	f7f5 ff37 	bl	8001112 <_close>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d102      	bne.n	800b2ae <_close_r+0x1a>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	b103      	cbz	r3, 800b2ae <_close_r+0x1a>
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	20000494 	.word	0x20000494

0800b2b4 <_lseek_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4d07      	ldr	r5, [pc, #28]	@ (800b2d4 <_lseek_r+0x20>)
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	4608      	mov	r0, r1
 800b2bc:	4611      	mov	r1, r2
 800b2be:	2200      	movs	r2, #0
 800b2c0:	602a      	str	r2, [r5, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	f7f5 ff4c 	bl	8001160 <_lseek>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d102      	bne.n	800b2d2 <_lseek_r+0x1e>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b103      	cbz	r3, 800b2d2 <_lseek_r+0x1e>
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	bd38      	pop	{r3, r4, r5, pc}
 800b2d4:	20000494 	.word	0x20000494

0800b2d8 <_read_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4d07      	ldr	r5, [pc, #28]	@ (800b2f8 <_read_r+0x20>)
 800b2dc:	4604      	mov	r4, r0
 800b2de:	4608      	mov	r0, r1
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	602a      	str	r2, [r5, #0]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	f7f5 fef6 	bl	80010d8 <_read>
 800b2ec:	1c43      	adds	r3, r0, #1
 800b2ee:	d102      	bne.n	800b2f6 <_read_r+0x1e>
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	b103      	cbz	r3, 800b2f6 <_read_r+0x1e>
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
 800b2f8:	20000494 	.word	0x20000494

0800b2fc <_sbrk_r>:
 800b2fc:	b538      	push	{r3, r4, r5, lr}
 800b2fe:	4d06      	ldr	r5, [pc, #24]	@ (800b318 <_sbrk_r+0x1c>)
 800b300:	2300      	movs	r3, #0
 800b302:	4604      	mov	r4, r0
 800b304:	4608      	mov	r0, r1
 800b306:	602b      	str	r3, [r5, #0]
 800b308:	f7f5 ff38 	bl	800117c <_sbrk>
 800b30c:	1c43      	adds	r3, r0, #1
 800b30e:	d102      	bne.n	800b316 <_sbrk_r+0x1a>
 800b310:	682b      	ldr	r3, [r5, #0]
 800b312:	b103      	cbz	r3, 800b316 <_sbrk_r+0x1a>
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	bd38      	pop	{r3, r4, r5, pc}
 800b318:	20000494 	.word	0x20000494

0800b31c <_write_r>:
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	4d07      	ldr	r5, [pc, #28]	@ (800b33c <_write_r+0x20>)
 800b320:	4604      	mov	r4, r0
 800b322:	4608      	mov	r0, r1
 800b324:	4611      	mov	r1, r2
 800b326:	2200      	movs	r2, #0
 800b328:	602a      	str	r2, [r5, #0]
 800b32a:	461a      	mov	r2, r3
 800b32c:	f7f5 f9ca 	bl	80006c4 <_write>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d102      	bne.n	800b33a <_write_r+0x1e>
 800b334:	682b      	ldr	r3, [r5, #0]
 800b336:	b103      	cbz	r3, 800b33a <_write_r+0x1e>
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	20000494 	.word	0x20000494

0800b340 <__errno>:
 800b340:	4b01      	ldr	r3, [pc, #4]	@ (800b348 <__errno+0x8>)
 800b342:	6818      	ldr	r0, [r3, #0]
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	20000064 	.word	0x20000064

0800b34c <__libc_init_array>:
 800b34c:	b570      	push	{r4, r5, r6, lr}
 800b34e:	4d0d      	ldr	r5, [pc, #52]	@ (800b384 <__libc_init_array+0x38>)
 800b350:	4c0d      	ldr	r4, [pc, #52]	@ (800b388 <__libc_init_array+0x3c>)
 800b352:	1b64      	subs	r4, r4, r5
 800b354:	10a4      	asrs	r4, r4, #2
 800b356:	2600      	movs	r6, #0
 800b358:	42a6      	cmp	r6, r4
 800b35a:	d109      	bne.n	800b370 <__libc_init_array+0x24>
 800b35c:	4d0b      	ldr	r5, [pc, #44]	@ (800b38c <__libc_init_array+0x40>)
 800b35e:	4c0c      	ldr	r4, [pc, #48]	@ (800b390 <__libc_init_array+0x44>)
 800b360:	f000 fd86 	bl	800be70 <_init>
 800b364:	1b64      	subs	r4, r4, r5
 800b366:	10a4      	asrs	r4, r4, #2
 800b368:	2600      	movs	r6, #0
 800b36a:	42a6      	cmp	r6, r4
 800b36c:	d105      	bne.n	800b37a <__libc_init_array+0x2e>
 800b36e:	bd70      	pop	{r4, r5, r6, pc}
 800b370:	f855 3b04 	ldr.w	r3, [r5], #4
 800b374:	4798      	blx	r3
 800b376:	3601      	adds	r6, #1
 800b378:	e7ee      	b.n	800b358 <__libc_init_array+0xc>
 800b37a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b37e:	4798      	blx	r3
 800b380:	3601      	adds	r6, #1
 800b382:	e7f2      	b.n	800b36a <__libc_init_array+0x1e>
 800b384:	0800cbe0 	.word	0x0800cbe0
 800b388:	0800cbe0 	.word	0x0800cbe0
 800b38c:	0800cbe0 	.word	0x0800cbe0
 800b390:	0800cbe4 	.word	0x0800cbe4

0800b394 <__retarget_lock_init_recursive>:
 800b394:	4770      	bx	lr

0800b396 <__retarget_lock_acquire_recursive>:
 800b396:	4770      	bx	lr

0800b398 <__retarget_lock_release_recursive>:
 800b398:	4770      	bx	lr

0800b39a <memcpy>:
 800b39a:	440a      	add	r2, r1
 800b39c:	4291      	cmp	r1, r2
 800b39e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b3a2:	d100      	bne.n	800b3a6 <memcpy+0xc>
 800b3a4:	4770      	bx	lr
 800b3a6:	b510      	push	{r4, lr}
 800b3a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3b0:	4291      	cmp	r1, r2
 800b3b2:	d1f9      	bne.n	800b3a8 <memcpy+0xe>
 800b3b4:	bd10      	pop	{r4, pc}

0800b3b6 <abort>:
 800b3b6:	b508      	push	{r3, lr}
 800b3b8:	2006      	movs	r0, #6
 800b3ba:	f000 fcb9 	bl	800bd30 <raise>
 800b3be:	2001      	movs	r0, #1
 800b3c0:	f7f5 fe7f 	bl	80010c2 <_exit>

0800b3c4 <_free_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	2900      	cmp	r1, #0
 800b3ca:	d041      	beq.n	800b450 <_free_r+0x8c>
 800b3cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d0:	1f0c      	subs	r4, r1, #4
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	bfb8      	it	lt
 800b3d6:	18e4      	addlt	r4, r4, r3
 800b3d8:	f7ff fdd8 	bl	800af8c <__malloc_lock>
 800b3dc:	4a1d      	ldr	r2, [pc, #116]	@ (800b454 <_free_r+0x90>)
 800b3de:	6813      	ldr	r3, [r2, #0]
 800b3e0:	b933      	cbnz	r3, 800b3f0 <_free_r+0x2c>
 800b3e2:	6063      	str	r3, [r4, #4]
 800b3e4:	6014      	str	r4, [r2, #0]
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3ec:	f7ff bdd4 	b.w	800af98 <__malloc_unlock>
 800b3f0:	42a3      	cmp	r3, r4
 800b3f2:	d908      	bls.n	800b406 <_free_r+0x42>
 800b3f4:	6820      	ldr	r0, [r4, #0]
 800b3f6:	1821      	adds	r1, r4, r0
 800b3f8:	428b      	cmp	r3, r1
 800b3fa:	bf01      	itttt	eq
 800b3fc:	6819      	ldreq	r1, [r3, #0]
 800b3fe:	685b      	ldreq	r3, [r3, #4]
 800b400:	1809      	addeq	r1, r1, r0
 800b402:	6021      	streq	r1, [r4, #0]
 800b404:	e7ed      	b.n	800b3e2 <_free_r+0x1e>
 800b406:	461a      	mov	r2, r3
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	b10b      	cbz	r3, 800b410 <_free_r+0x4c>
 800b40c:	42a3      	cmp	r3, r4
 800b40e:	d9fa      	bls.n	800b406 <_free_r+0x42>
 800b410:	6811      	ldr	r1, [r2, #0]
 800b412:	1850      	adds	r0, r2, r1
 800b414:	42a0      	cmp	r0, r4
 800b416:	d10b      	bne.n	800b430 <_free_r+0x6c>
 800b418:	6820      	ldr	r0, [r4, #0]
 800b41a:	4401      	add	r1, r0
 800b41c:	1850      	adds	r0, r2, r1
 800b41e:	4283      	cmp	r3, r0
 800b420:	6011      	str	r1, [r2, #0]
 800b422:	d1e0      	bne.n	800b3e6 <_free_r+0x22>
 800b424:	6818      	ldr	r0, [r3, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	6053      	str	r3, [r2, #4]
 800b42a:	4408      	add	r0, r1
 800b42c:	6010      	str	r0, [r2, #0]
 800b42e:	e7da      	b.n	800b3e6 <_free_r+0x22>
 800b430:	d902      	bls.n	800b438 <_free_r+0x74>
 800b432:	230c      	movs	r3, #12
 800b434:	602b      	str	r3, [r5, #0]
 800b436:	e7d6      	b.n	800b3e6 <_free_r+0x22>
 800b438:	6820      	ldr	r0, [r4, #0]
 800b43a:	1821      	adds	r1, r4, r0
 800b43c:	428b      	cmp	r3, r1
 800b43e:	bf04      	itt	eq
 800b440:	6819      	ldreq	r1, [r3, #0]
 800b442:	685b      	ldreq	r3, [r3, #4]
 800b444:	6063      	str	r3, [r4, #4]
 800b446:	bf04      	itt	eq
 800b448:	1809      	addeq	r1, r1, r0
 800b44a:	6021      	streq	r1, [r4, #0]
 800b44c:	6054      	str	r4, [r2, #4]
 800b44e:	e7ca      	b.n	800b3e6 <_free_r+0x22>
 800b450:	bd38      	pop	{r3, r4, r5, pc}
 800b452:	bf00      	nop
 800b454:	20000354 	.word	0x20000354

0800b458 <__sfputc_r>:
 800b458:	6893      	ldr	r3, [r2, #8]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	b410      	push	{r4}
 800b460:	6093      	str	r3, [r2, #8]
 800b462:	da08      	bge.n	800b476 <__sfputc_r+0x1e>
 800b464:	6994      	ldr	r4, [r2, #24]
 800b466:	42a3      	cmp	r3, r4
 800b468:	db01      	blt.n	800b46e <__sfputc_r+0x16>
 800b46a:	290a      	cmp	r1, #10
 800b46c:	d103      	bne.n	800b476 <__sfputc_r+0x1e>
 800b46e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b472:	f000 bba1 	b.w	800bbb8 <__swbuf_r>
 800b476:	6813      	ldr	r3, [r2, #0]
 800b478:	1c58      	adds	r0, r3, #1
 800b47a:	6010      	str	r0, [r2, #0]
 800b47c:	7019      	strb	r1, [r3, #0]
 800b47e:	4608      	mov	r0, r1
 800b480:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <__sfputs_r>:
 800b486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b488:	4606      	mov	r6, r0
 800b48a:	460f      	mov	r7, r1
 800b48c:	4614      	mov	r4, r2
 800b48e:	18d5      	adds	r5, r2, r3
 800b490:	42ac      	cmp	r4, r5
 800b492:	d101      	bne.n	800b498 <__sfputs_r+0x12>
 800b494:	2000      	movs	r0, #0
 800b496:	e007      	b.n	800b4a8 <__sfputs_r+0x22>
 800b498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b49c:	463a      	mov	r2, r7
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f7ff ffda 	bl	800b458 <__sfputc_r>
 800b4a4:	1c43      	adds	r3, r0, #1
 800b4a6:	d1f3      	bne.n	800b490 <__sfputs_r+0xa>
 800b4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4ac <_vfiprintf_r>:
 800b4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b0:	460d      	mov	r5, r1
 800b4b2:	b09d      	sub	sp, #116	@ 0x74
 800b4b4:	4614      	mov	r4, r2
 800b4b6:	4698      	mov	r8, r3
 800b4b8:	4606      	mov	r6, r0
 800b4ba:	b118      	cbz	r0, 800b4c4 <_vfiprintf_r+0x18>
 800b4bc:	6a03      	ldr	r3, [r0, #32]
 800b4be:	b90b      	cbnz	r3, 800b4c4 <_vfiprintf_r+0x18>
 800b4c0:	f7ff fdfc 	bl	800b0bc <__sinit>
 800b4c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4c6:	07d9      	lsls	r1, r3, #31
 800b4c8:	d405      	bmi.n	800b4d6 <_vfiprintf_r+0x2a>
 800b4ca:	89ab      	ldrh	r3, [r5, #12]
 800b4cc:	059a      	lsls	r2, r3, #22
 800b4ce:	d402      	bmi.n	800b4d6 <_vfiprintf_r+0x2a>
 800b4d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4d2:	f7ff ff60 	bl	800b396 <__retarget_lock_acquire_recursive>
 800b4d6:	89ab      	ldrh	r3, [r5, #12]
 800b4d8:	071b      	lsls	r3, r3, #28
 800b4da:	d501      	bpl.n	800b4e0 <_vfiprintf_r+0x34>
 800b4dc:	692b      	ldr	r3, [r5, #16]
 800b4de:	b99b      	cbnz	r3, 800b508 <_vfiprintf_r+0x5c>
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f000 fba6 	bl	800bc34 <__swsetup_r>
 800b4e8:	b170      	cbz	r0, 800b508 <_vfiprintf_r+0x5c>
 800b4ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4ec:	07dc      	lsls	r4, r3, #31
 800b4ee:	d504      	bpl.n	800b4fa <_vfiprintf_r+0x4e>
 800b4f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4f4:	b01d      	add	sp, #116	@ 0x74
 800b4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fa:	89ab      	ldrh	r3, [r5, #12]
 800b4fc:	0598      	lsls	r0, r3, #22
 800b4fe:	d4f7      	bmi.n	800b4f0 <_vfiprintf_r+0x44>
 800b500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b502:	f7ff ff49 	bl	800b398 <__retarget_lock_release_recursive>
 800b506:	e7f3      	b.n	800b4f0 <_vfiprintf_r+0x44>
 800b508:	2300      	movs	r3, #0
 800b50a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b50c:	2320      	movs	r3, #32
 800b50e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b512:	f8cd 800c 	str.w	r8, [sp, #12]
 800b516:	2330      	movs	r3, #48	@ 0x30
 800b518:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b6c8 <_vfiprintf_r+0x21c>
 800b51c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b520:	f04f 0901 	mov.w	r9, #1
 800b524:	4623      	mov	r3, r4
 800b526:	469a      	mov	sl, r3
 800b528:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b52c:	b10a      	cbz	r2, 800b532 <_vfiprintf_r+0x86>
 800b52e:	2a25      	cmp	r2, #37	@ 0x25
 800b530:	d1f9      	bne.n	800b526 <_vfiprintf_r+0x7a>
 800b532:	ebba 0b04 	subs.w	fp, sl, r4
 800b536:	d00b      	beq.n	800b550 <_vfiprintf_r+0xa4>
 800b538:	465b      	mov	r3, fp
 800b53a:	4622      	mov	r2, r4
 800b53c:	4629      	mov	r1, r5
 800b53e:	4630      	mov	r0, r6
 800b540:	f7ff ffa1 	bl	800b486 <__sfputs_r>
 800b544:	3001      	adds	r0, #1
 800b546:	f000 80a7 	beq.w	800b698 <_vfiprintf_r+0x1ec>
 800b54a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b54c:	445a      	add	r2, fp
 800b54e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b550:	f89a 3000 	ldrb.w	r3, [sl]
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 809f 	beq.w	800b698 <_vfiprintf_r+0x1ec>
 800b55a:	2300      	movs	r3, #0
 800b55c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b564:	f10a 0a01 	add.w	sl, sl, #1
 800b568:	9304      	str	r3, [sp, #16]
 800b56a:	9307      	str	r3, [sp, #28]
 800b56c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b570:	931a      	str	r3, [sp, #104]	@ 0x68
 800b572:	4654      	mov	r4, sl
 800b574:	2205      	movs	r2, #5
 800b576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b57a:	4853      	ldr	r0, [pc, #332]	@ (800b6c8 <_vfiprintf_r+0x21c>)
 800b57c:	f7f4 fe30 	bl	80001e0 <memchr>
 800b580:	9a04      	ldr	r2, [sp, #16]
 800b582:	b9d8      	cbnz	r0, 800b5bc <_vfiprintf_r+0x110>
 800b584:	06d1      	lsls	r1, r2, #27
 800b586:	bf44      	itt	mi
 800b588:	2320      	movmi	r3, #32
 800b58a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b58e:	0713      	lsls	r3, r2, #28
 800b590:	bf44      	itt	mi
 800b592:	232b      	movmi	r3, #43	@ 0x2b
 800b594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b598:	f89a 3000 	ldrb.w	r3, [sl]
 800b59c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b59e:	d015      	beq.n	800b5cc <_vfiprintf_r+0x120>
 800b5a0:	9a07      	ldr	r2, [sp, #28]
 800b5a2:	4654      	mov	r4, sl
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	f04f 0c0a 	mov.w	ip, #10
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5b0:	3b30      	subs	r3, #48	@ 0x30
 800b5b2:	2b09      	cmp	r3, #9
 800b5b4:	d94b      	bls.n	800b64e <_vfiprintf_r+0x1a2>
 800b5b6:	b1b0      	cbz	r0, 800b5e6 <_vfiprintf_r+0x13a>
 800b5b8:	9207      	str	r2, [sp, #28]
 800b5ba:	e014      	b.n	800b5e6 <_vfiprintf_r+0x13a>
 800b5bc:	eba0 0308 	sub.w	r3, r0, r8
 800b5c0:	fa09 f303 	lsl.w	r3, r9, r3
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	9304      	str	r3, [sp, #16]
 800b5c8:	46a2      	mov	sl, r4
 800b5ca:	e7d2      	b.n	800b572 <_vfiprintf_r+0xc6>
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	1d19      	adds	r1, r3, #4
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	9103      	str	r1, [sp, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	bfbb      	ittet	lt
 800b5d8:	425b      	neglt	r3, r3
 800b5da:	f042 0202 	orrlt.w	r2, r2, #2
 800b5de:	9307      	strge	r3, [sp, #28]
 800b5e0:	9307      	strlt	r3, [sp, #28]
 800b5e2:	bfb8      	it	lt
 800b5e4:	9204      	strlt	r2, [sp, #16]
 800b5e6:	7823      	ldrb	r3, [r4, #0]
 800b5e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5ea:	d10a      	bne.n	800b602 <_vfiprintf_r+0x156>
 800b5ec:	7863      	ldrb	r3, [r4, #1]
 800b5ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5f0:	d132      	bne.n	800b658 <_vfiprintf_r+0x1ac>
 800b5f2:	9b03      	ldr	r3, [sp, #12]
 800b5f4:	1d1a      	adds	r2, r3, #4
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	9203      	str	r2, [sp, #12]
 800b5fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5fe:	3402      	adds	r4, #2
 800b600:	9305      	str	r3, [sp, #20]
 800b602:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b6d8 <_vfiprintf_r+0x22c>
 800b606:	7821      	ldrb	r1, [r4, #0]
 800b608:	2203      	movs	r2, #3
 800b60a:	4650      	mov	r0, sl
 800b60c:	f7f4 fde8 	bl	80001e0 <memchr>
 800b610:	b138      	cbz	r0, 800b622 <_vfiprintf_r+0x176>
 800b612:	9b04      	ldr	r3, [sp, #16]
 800b614:	eba0 000a 	sub.w	r0, r0, sl
 800b618:	2240      	movs	r2, #64	@ 0x40
 800b61a:	4082      	lsls	r2, r0
 800b61c:	4313      	orrs	r3, r2
 800b61e:	3401      	adds	r4, #1
 800b620:	9304      	str	r3, [sp, #16]
 800b622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b626:	4829      	ldr	r0, [pc, #164]	@ (800b6cc <_vfiprintf_r+0x220>)
 800b628:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b62c:	2206      	movs	r2, #6
 800b62e:	f7f4 fdd7 	bl	80001e0 <memchr>
 800b632:	2800      	cmp	r0, #0
 800b634:	d03f      	beq.n	800b6b6 <_vfiprintf_r+0x20a>
 800b636:	4b26      	ldr	r3, [pc, #152]	@ (800b6d0 <_vfiprintf_r+0x224>)
 800b638:	bb1b      	cbnz	r3, 800b682 <_vfiprintf_r+0x1d6>
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	3307      	adds	r3, #7
 800b63e:	f023 0307 	bic.w	r3, r3, #7
 800b642:	3308      	adds	r3, #8
 800b644:	9303      	str	r3, [sp, #12]
 800b646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b648:	443b      	add	r3, r7
 800b64a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b64c:	e76a      	b.n	800b524 <_vfiprintf_r+0x78>
 800b64e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b652:	460c      	mov	r4, r1
 800b654:	2001      	movs	r0, #1
 800b656:	e7a8      	b.n	800b5aa <_vfiprintf_r+0xfe>
 800b658:	2300      	movs	r3, #0
 800b65a:	3401      	adds	r4, #1
 800b65c:	9305      	str	r3, [sp, #20]
 800b65e:	4619      	mov	r1, r3
 800b660:	f04f 0c0a 	mov.w	ip, #10
 800b664:	4620      	mov	r0, r4
 800b666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b66a:	3a30      	subs	r2, #48	@ 0x30
 800b66c:	2a09      	cmp	r2, #9
 800b66e:	d903      	bls.n	800b678 <_vfiprintf_r+0x1cc>
 800b670:	2b00      	cmp	r3, #0
 800b672:	d0c6      	beq.n	800b602 <_vfiprintf_r+0x156>
 800b674:	9105      	str	r1, [sp, #20]
 800b676:	e7c4      	b.n	800b602 <_vfiprintf_r+0x156>
 800b678:	fb0c 2101 	mla	r1, ip, r1, r2
 800b67c:	4604      	mov	r4, r0
 800b67e:	2301      	movs	r3, #1
 800b680:	e7f0      	b.n	800b664 <_vfiprintf_r+0x1b8>
 800b682:	ab03      	add	r3, sp, #12
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	462a      	mov	r2, r5
 800b688:	4b12      	ldr	r3, [pc, #72]	@ (800b6d4 <_vfiprintf_r+0x228>)
 800b68a:	a904      	add	r1, sp, #16
 800b68c:	4630      	mov	r0, r6
 800b68e:	f3af 8000 	nop.w
 800b692:	4607      	mov	r7, r0
 800b694:	1c78      	adds	r0, r7, #1
 800b696:	d1d6      	bne.n	800b646 <_vfiprintf_r+0x19a>
 800b698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b69a:	07d9      	lsls	r1, r3, #31
 800b69c:	d405      	bmi.n	800b6aa <_vfiprintf_r+0x1fe>
 800b69e:	89ab      	ldrh	r3, [r5, #12]
 800b6a0:	059a      	lsls	r2, r3, #22
 800b6a2:	d402      	bmi.n	800b6aa <_vfiprintf_r+0x1fe>
 800b6a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6a6:	f7ff fe77 	bl	800b398 <__retarget_lock_release_recursive>
 800b6aa:	89ab      	ldrh	r3, [r5, #12]
 800b6ac:	065b      	lsls	r3, r3, #25
 800b6ae:	f53f af1f 	bmi.w	800b4f0 <_vfiprintf_r+0x44>
 800b6b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6b4:	e71e      	b.n	800b4f4 <_vfiprintf_r+0x48>
 800b6b6:	ab03      	add	r3, sp, #12
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	462a      	mov	r2, r5
 800b6bc:	4b05      	ldr	r3, [pc, #20]	@ (800b6d4 <_vfiprintf_r+0x228>)
 800b6be:	a904      	add	r1, sp, #16
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f000 f879 	bl	800b7b8 <_printf_i>
 800b6c6:	e7e4      	b.n	800b692 <_vfiprintf_r+0x1e6>
 800b6c8:	0800cba4 	.word	0x0800cba4
 800b6cc:	0800cbae 	.word	0x0800cbae
 800b6d0:	00000000 	.word	0x00000000
 800b6d4:	0800b487 	.word	0x0800b487
 800b6d8:	0800cbaa 	.word	0x0800cbaa

0800b6dc <_printf_common>:
 800b6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e0:	4616      	mov	r6, r2
 800b6e2:	4698      	mov	r8, r3
 800b6e4:	688a      	ldr	r2, [r1, #8]
 800b6e6:	690b      	ldr	r3, [r1, #16]
 800b6e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	bfb8      	it	lt
 800b6f0:	4613      	movlt	r3, r2
 800b6f2:	6033      	str	r3, [r6, #0]
 800b6f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	460c      	mov	r4, r1
 800b6fc:	b10a      	cbz	r2, 800b702 <_printf_common+0x26>
 800b6fe:	3301      	adds	r3, #1
 800b700:	6033      	str	r3, [r6, #0]
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	0699      	lsls	r1, r3, #26
 800b706:	bf42      	ittt	mi
 800b708:	6833      	ldrmi	r3, [r6, #0]
 800b70a:	3302      	addmi	r3, #2
 800b70c:	6033      	strmi	r3, [r6, #0]
 800b70e:	6825      	ldr	r5, [r4, #0]
 800b710:	f015 0506 	ands.w	r5, r5, #6
 800b714:	d106      	bne.n	800b724 <_printf_common+0x48>
 800b716:	f104 0a19 	add.w	sl, r4, #25
 800b71a:	68e3      	ldr	r3, [r4, #12]
 800b71c:	6832      	ldr	r2, [r6, #0]
 800b71e:	1a9b      	subs	r3, r3, r2
 800b720:	42ab      	cmp	r3, r5
 800b722:	dc26      	bgt.n	800b772 <_printf_common+0x96>
 800b724:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b728:	6822      	ldr	r2, [r4, #0]
 800b72a:	3b00      	subs	r3, #0
 800b72c:	bf18      	it	ne
 800b72e:	2301      	movne	r3, #1
 800b730:	0692      	lsls	r2, r2, #26
 800b732:	d42b      	bmi.n	800b78c <_printf_common+0xb0>
 800b734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b738:	4641      	mov	r1, r8
 800b73a:	4638      	mov	r0, r7
 800b73c:	47c8      	blx	r9
 800b73e:	3001      	adds	r0, #1
 800b740:	d01e      	beq.n	800b780 <_printf_common+0xa4>
 800b742:	6823      	ldr	r3, [r4, #0]
 800b744:	6922      	ldr	r2, [r4, #16]
 800b746:	f003 0306 	and.w	r3, r3, #6
 800b74a:	2b04      	cmp	r3, #4
 800b74c:	bf02      	ittt	eq
 800b74e:	68e5      	ldreq	r5, [r4, #12]
 800b750:	6833      	ldreq	r3, [r6, #0]
 800b752:	1aed      	subeq	r5, r5, r3
 800b754:	68a3      	ldr	r3, [r4, #8]
 800b756:	bf0c      	ite	eq
 800b758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b75c:	2500      	movne	r5, #0
 800b75e:	4293      	cmp	r3, r2
 800b760:	bfc4      	itt	gt
 800b762:	1a9b      	subgt	r3, r3, r2
 800b764:	18ed      	addgt	r5, r5, r3
 800b766:	2600      	movs	r6, #0
 800b768:	341a      	adds	r4, #26
 800b76a:	42b5      	cmp	r5, r6
 800b76c:	d11a      	bne.n	800b7a4 <_printf_common+0xc8>
 800b76e:	2000      	movs	r0, #0
 800b770:	e008      	b.n	800b784 <_printf_common+0xa8>
 800b772:	2301      	movs	r3, #1
 800b774:	4652      	mov	r2, sl
 800b776:	4641      	mov	r1, r8
 800b778:	4638      	mov	r0, r7
 800b77a:	47c8      	blx	r9
 800b77c:	3001      	adds	r0, #1
 800b77e:	d103      	bne.n	800b788 <_printf_common+0xac>
 800b780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b788:	3501      	adds	r5, #1
 800b78a:	e7c6      	b.n	800b71a <_printf_common+0x3e>
 800b78c:	18e1      	adds	r1, r4, r3
 800b78e:	1c5a      	adds	r2, r3, #1
 800b790:	2030      	movs	r0, #48	@ 0x30
 800b792:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b796:	4422      	add	r2, r4
 800b798:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b79c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7a0:	3302      	adds	r3, #2
 800b7a2:	e7c7      	b.n	800b734 <_printf_common+0x58>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	4641      	mov	r1, r8
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	47c8      	blx	r9
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	d0e6      	beq.n	800b780 <_printf_common+0xa4>
 800b7b2:	3601      	adds	r6, #1
 800b7b4:	e7d9      	b.n	800b76a <_printf_common+0x8e>
	...

0800b7b8 <_printf_i>:
 800b7b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7bc:	7e0f      	ldrb	r7, [r1, #24]
 800b7be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7c0:	2f78      	cmp	r7, #120	@ 0x78
 800b7c2:	4691      	mov	r9, r2
 800b7c4:	4680      	mov	r8, r0
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	469a      	mov	sl, r3
 800b7ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7ce:	d807      	bhi.n	800b7e0 <_printf_i+0x28>
 800b7d0:	2f62      	cmp	r7, #98	@ 0x62
 800b7d2:	d80a      	bhi.n	800b7ea <_printf_i+0x32>
 800b7d4:	2f00      	cmp	r7, #0
 800b7d6:	f000 80d2 	beq.w	800b97e <_printf_i+0x1c6>
 800b7da:	2f58      	cmp	r7, #88	@ 0x58
 800b7dc:	f000 80b9 	beq.w	800b952 <_printf_i+0x19a>
 800b7e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7e8:	e03a      	b.n	800b860 <_printf_i+0xa8>
 800b7ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7ee:	2b15      	cmp	r3, #21
 800b7f0:	d8f6      	bhi.n	800b7e0 <_printf_i+0x28>
 800b7f2:	a101      	add	r1, pc, #4	@ (adr r1, 800b7f8 <_printf_i+0x40>)
 800b7f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7f8:	0800b851 	.word	0x0800b851
 800b7fc:	0800b865 	.word	0x0800b865
 800b800:	0800b7e1 	.word	0x0800b7e1
 800b804:	0800b7e1 	.word	0x0800b7e1
 800b808:	0800b7e1 	.word	0x0800b7e1
 800b80c:	0800b7e1 	.word	0x0800b7e1
 800b810:	0800b865 	.word	0x0800b865
 800b814:	0800b7e1 	.word	0x0800b7e1
 800b818:	0800b7e1 	.word	0x0800b7e1
 800b81c:	0800b7e1 	.word	0x0800b7e1
 800b820:	0800b7e1 	.word	0x0800b7e1
 800b824:	0800b965 	.word	0x0800b965
 800b828:	0800b88f 	.word	0x0800b88f
 800b82c:	0800b91f 	.word	0x0800b91f
 800b830:	0800b7e1 	.word	0x0800b7e1
 800b834:	0800b7e1 	.word	0x0800b7e1
 800b838:	0800b987 	.word	0x0800b987
 800b83c:	0800b7e1 	.word	0x0800b7e1
 800b840:	0800b88f 	.word	0x0800b88f
 800b844:	0800b7e1 	.word	0x0800b7e1
 800b848:	0800b7e1 	.word	0x0800b7e1
 800b84c:	0800b927 	.word	0x0800b927
 800b850:	6833      	ldr	r3, [r6, #0]
 800b852:	1d1a      	adds	r2, r3, #4
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6032      	str	r2, [r6, #0]
 800b858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b85c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b860:	2301      	movs	r3, #1
 800b862:	e09d      	b.n	800b9a0 <_printf_i+0x1e8>
 800b864:	6833      	ldr	r3, [r6, #0]
 800b866:	6820      	ldr	r0, [r4, #0]
 800b868:	1d19      	adds	r1, r3, #4
 800b86a:	6031      	str	r1, [r6, #0]
 800b86c:	0606      	lsls	r6, r0, #24
 800b86e:	d501      	bpl.n	800b874 <_printf_i+0xbc>
 800b870:	681d      	ldr	r5, [r3, #0]
 800b872:	e003      	b.n	800b87c <_printf_i+0xc4>
 800b874:	0645      	lsls	r5, r0, #25
 800b876:	d5fb      	bpl.n	800b870 <_printf_i+0xb8>
 800b878:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b87c:	2d00      	cmp	r5, #0
 800b87e:	da03      	bge.n	800b888 <_printf_i+0xd0>
 800b880:	232d      	movs	r3, #45	@ 0x2d
 800b882:	426d      	negs	r5, r5
 800b884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b888:	4859      	ldr	r0, [pc, #356]	@ (800b9f0 <_printf_i+0x238>)
 800b88a:	230a      	movs	r3, #10
 800b88c:	e011      	b.n	800b8b2 <_printf_i+0xfa>
 800b88e:	6821      	ldr	r1, [r4, #0]
 800b890:	6833      	ldr	r3, [r6, #0]
 800b892:	0608      	lsls	r0, r1, #24
 800b894:	f853 5b04 	ldr.w	r5, [r3], #4
 800b898:	d402      	bmi.n	800b8a0 <_printf_i+0xe8>
 800b89a:	0649      	lsls	r1, r1, #25
 800b89c:	bf48      	it	mi
 800b89e:	b2ad      	uxthmi	r5, r5
 800b8a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8a2:	4853      	ldr	r0, [pc, #332]	@ (800b9f0 <_printf_i+0x238>)
 800b8a4:	6033      	str	r3, [r6, #0]
 800b8a6:	bf14      	ite	ne
 800b8a8:	230a      	movne	r3, #10
 800b8aa:	2308      	moveq	r3, #8
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8b2:	6866      	ldr	r6, [r4, #4]
 800b8b4:	60a6      	str	r6, [r4, #8]
 800b8b6:	2e00      	cmp	r6, #0
 800b8b8:	bfa2      	ittt	ge
 800b8ba:	6821      	ldrge	r1, [r4, #0]
 800b8bc:	f021 0104 	bicge.w	r1, r1, #4
 800b8c0:	6021      	strge	r1, [r4, #0]
 800b8c2:	b90d      	cbnz	r5, 800b8c8 <_printf_i+0x110>
 800b8c4:	2e00      	cmp	r6, #0
 800b8c6:	d04b      	beq.n	800b960 <_printf_i+0x1a8>
 800b8c8:	4616      	mov	r6, r2
 800b8ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8ce:	fb03 5711 	mls	r7, r3, r1, r5
 800b8d2:	5dc7      	ldrb	r7, [r0, r7]
 800b8d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8d8:	462f      	mov	r7, r5
 800b8da:	42bb      	cmp	r3, r7
 800b8dc:	460d      	mov	r5, r1
 800b8de:	d9f4      	bls.n	800b8ca <_printf_i+0x112>
 800b8e0:	2b08      	cmp	r3, #8
 800b8e2:	d10b      	bne.n	800b8fc <_printf_i+0x144>
 800b8e4:	6823      	ldr	r3, [r4, #0]
 800b8e6:	07df      	lsls	r7, r3, #31
 800b8e8:	d508      	bpl.n	800b8fc <_printf_i+0x144>
 800b8ea:	6923      	ldr	r3, [r4, #16]
 800b8ec:	6861      	ldr	r1, [r4, #4]
 800b8ee:	4299      	cmp	r1, r3
 800b8f0:	bfde      	ittt	le
 800b8f2:	2330      	movle	r3, #48	@ 0x30
 800b8f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8f8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b8fc:	1b92      	subs	r2, r2, r6
 800b8fe:	6122      	str	r2, [r4, #16]
 800b900:	f8cd a000 	str.w	sl, [sp]
 800b904:	464b      	mov	r3, r9
 800b906:	aa03      	add	r2, sp, #12
 800b908:	4621      	mov	r1, r4
 800b90a:	4640      	mov	r0, r8
 800b90c:	f7ff fee6 	bl	800b6dc <_printf_common>
 800b910:	3001      	adds	r0, #1
 800b912:	d14a      	bne.n	800b9aa <_printf_i+0x1f2>
 800b914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b918:	b004      	add	sp, #16
 800b91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	f043 0320 	orr.w	r3, r3, #32
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	4833      	ldr	r0, [pc, #204]	@ (800b9f4 <_printf_i+0x23c>)
 800b928:	2778      	movs	r7, #120	@ 0x78
 800b92a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	6831      	ldr	r1, [r6, #0]
 800b932:	061f      	lsls	r7, r3, #24
 800b934:	f851 5b04 	ldr.w	r5, [r1], #4
 800b938:	d402      	bmi.n	800b940 <_printf_i+0x188>
 800b93a:	065f      	lsls	r7, r3, #25
 800b93c:	bf48      	it	mi
 800b93e:	b2ad      	uxthmi	r5, r5
 800b940:	6031      	str	r1, [r6, #0]
 800b942:	07d9      	lsls	r1, r3, #31
 800b944:	bf44      	itt	mi
 800b946:	f043 0320 	orrmi.w	r3, r3, #32
 800b94a:	6023      	strmi	r3, [r4, #0]
 800b94c:	b11d      	cbz	r5, 800b956 <_printf_i+0x19e>
 800b94e:	2310      	movs	r3, #16
 800b950:	e7ac      	b.n	800b8ac <_printf_i+0xf4>
 800b952:	4827      	ldr	r0, [pc, #156]	@ (800b9f0 <_printf_i+0x238>)
 800b954:	e7e9      	b.n	800b92a <_printf_i+0x172>
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	f023 0320 	bic.w	r3, r3, #32
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	e7f6      	b.n	800b94e <_printf_i+0x196>
 800b960:	4616      	mov	r6, r2
 800b962:	e7bd      	b.n	800b8e0 <_printf_i+0x128>
 800b964:	6833      	ldr	r3, [r6, #0]
 800b966:	6825      	ldr	r5, [r4, #0]
 800b968:	6961      	ldr	r1, [r4, #20]
 800b96a:	1d18      	adds	r0, r3, #4
 800b96c:	6030      	str	r0, [r6, #0]
 800b96e:	062e      	lsls	r6, r5, #24
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	d501      	bpl.n	800b978 <_printf_i+0x1c0>
 800b974:	6019      	str	r1, [r3, #0]
 800b976:	e002      	b.n	800b97e <_printf_i+0x1c6>
 800b978:	0668      	lsls	r0, r5, #25
 800b97a:	d5fb      	bpl.n	800b974 <_printf_i+0x1bc>
 800b97c:	8019      	strh	r1, [r3, #0]
 800b97e:	2300      	movs	r3, #0
 800b980:	6123      	str	r3, [r4, #16]
 800b982:	4616      	mov	r6, r2
 800b984:	e7bc      	b.n	800b900 <_printf_i+0x148>
 800b986:	6833      	ldr	r3, [r6, #0]
 800b988:	1d1a      	adds	r2, r3, #4
 800b98a:	6032      	str	r2, [r6, #0]
 800b98c:	681e      	ldr	r6, [r3, #0]
 800b98e:	6862      	ldr	r2, [r4, #4]
 800b990:	2100      	movs	r1, #0
 800b992:	4630      	mov	r0, r6
 800b994:	f7f4 fc24 	bl	80001e0 <memchr>
 800b998:	b108      	cbz	r0, 800b99e <_printf_i+0x1e6>
 800b99a:	1b80      	subs	r0, r0, r6
 800b99c:	6060      	str	r0, [r4, #4]
 800b99e:	6863      	ldr	r3, [r4, #4]
 800b9a0:	6123      	str	r3, [r4, #16]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9a8:	e7aa      	b.n	800b900 <_printf_i+0x148>
 800b9aa:	6923      	ldr	r3, [r4, #16]
 800b9ac:	4632      	mov	r2, r6
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	4640      	mov	r0, r8
 800b9b2:	47d0      	blx	sl
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d0ad      	beq.n	800b914 <_printf_i+0x15c>
 800b9b8:	6823      	ldr	r3, [r4, #0]
 800b9ba:	079b      	lsls	r3, r3, #30
 800b9bc:	d413      	bmi.n	800b9e6 <_printf_i+0x22e>
 800b9be:	68e0      	ldr	r0, [r4, #12]
 800b9c0:	9b03      	ldr	r3, [sp, #12]
 800b9c2:	4298      	cmp	r0, r3
 800b9c4:	bfb8      	it	lt
 800b9c6:	4618      	movlt	r0, r3
 800b9c8:	e7a6      	b.n	800b918 <_printf_i+0x160>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	4632      	mov	r2, r6
 800b9ce:	4649      	mov	r1, r9
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	47d0      	blx	sl
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	d09d      	beq.n	800b914 <_printf_i+0x15c>
 800b9d8:	3501      	adds	r5, #1
 800b9da:	68e3      	ldr	r3, [r4, #12]
 800b9dc:	9903      	ldr	r1, [sp, #12]
 800b9de:	1a5b      	subs	r3, r3, r1
 800b9e0:	42ab      	cmp	r3, r5
 800b9e2:	dcf2      	bgt.n	800b9ca <_printf_i+0x212>
 800b9e4:	e7eb      	b.n	800b9be <_printf_i+0x206>
 800b9e6:	2500      	movs	r5, #0
 800b9e8:	f104 0619 	add.w	r6, r4, #25
 800b9ec:	e7f5      	b.n	800b9da <_printf_i+0x222>
 800b9ee:	bf00      	nop
 800b9f0:	0800cbb5 	.word	0x0800cbb5
 800b9f4:	0800cbc6 	.word	0x0800cbc6

0800b9f8 <__sflush_r>:
 800b9f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba00:	0716      	lsls	r6, r2, #28
 800ba02:	4605      	mov	r5, r0
 800ba04:	460c      	mov	r4, r1
 800ba06:	d454      	bmi.n	800bab2 <__sflush_r+0xba>
 800ba08:	684b      	ldr	r3, [r1, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	dc02      	bgt.n	800ba14 <__sflush_r+0x1c>
 800ba0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	dd48      	ble.n	800baa6 <__sflush_r+0xae>
 800ba14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba16:	2e00      	cmp	r6, #0
 800ba18:	d045      	beq.n	800baa6 <__sflush_r+0xae>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba20:	682f      	ldr	r7, [r5, #0]
 800ba22:	6a21      	ldr	r1, [r4, #32]
 800ba24:	602b      	str	r3, [r5, #0]
 800ba26:	d030      	beq.n	800ba8a <__sflush_r+0x92>
 800ba28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba2a:	89a3      	ldrh	r3, [r4, #12]
 800ba2c:	0759      	lsls	r1, r3, #29
 800ba2e:	d505      	bpl.n	800ba3c <__sflush_r+0x44>
 800ba30:	6863      	ldr	r3, [r4, #4]
 800ba32:	1ad2      	subs	r2, r2, r3
 800ba34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba36:	b10b      	cbz	r3, 800ba3c <__sflush_r+0x44>
 800ba38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba3a:	1ad2      	subs	r2, r2, r3
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba40:	6a21      	ldr	r1, [r4, #32]
 800ba42:	4628      	mov	r0, r5
 800ba44:	47b0      	blx	r6
 800ba46:	1c43      	adds	r3, r0, #1
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	d106      	bne.n	800ba5a <__sflush_r+0x62>
 800ba4c:	6829      	ldr	r1, [r5, #0]
 800ba4e:	291d      	cmp	r1, #29
 800ba50:	d82b      	bhi.n	800baaa <__sflush_r+0xb2>
 800ba52:	4a2a      	ldr	r2, [pc, #168]	@ (800bafc <__sflush_r+0x104>)
 800ba54:	410a      	asrs	r2, r1
 800ba56:	07d6      	lsls	r6, r2, #31
 800ba58:	d427      	bmi.n	800baaa <__sflush_r+0xb2>
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	6062      	str	r2, [r4, #4]
 800ba5e:	04d9      	lsls	r1, r3, #19
 800ba60:	6922      	ldr	r2, [r4, #16]
 800ba62:	6022      	str	r2, [r4, #0]
 800ba64:	d504      	bpl.n	800ba70 <__sflush_r+0x78>
 800ba66:	1c42      	adds	r2, r0, #1
 800ba68:	d101      	bne.n	800ba6e <__sflush_r+0x76>
 800ba6a:	682b      	ldr	r3, [r5, #0]
 800ba6c:	b903      	cbnz	r3, 800ba70 <__sflush_r+0x78>
 800ba6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba72:	602f      	str	r7, [r5, #0]
 800ba74:	b1b9      	cbz	r1, 800baa6 <__sflush_r+0xae>
 800ba76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba7a:	4299      	cmp	r1, r3
 800ba7c:	d002      	beq.n	800ba84 <__sflush_r+0x8c>
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f7ff fca0 	bl	800b3c4 <_free_r>
 800ba84:	2300      	movs	r3, #0
 800ba86:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba88:	e00d      	b.n	800baa6 <__sflush_r+0xae>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	47b0      	blx	r6
 800ba90:	4602      	mov	r2, r0
 800ba92:	1c50      	adds	r0, r2, #1
 800ba94:	d1c9      	bne.n	800ba2a <__sflush_r+0x32>
 800ba96:	682b      	ldr	r3, [r5, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d0c6      	beq.n	800ba2a <__sflush_r+0x32>
 800ba9c:	2b1d      	cmp	r3, #29
 800ba9e:	d001      	beq.n	800baa4 <__sflush_r+0xac>
 800baa0:	2b16      	cmp	r3, #22
 800baa2:	d11e      	bne.n	800bae2 <__sflush_r+0xea>
 800baa4:	602f      	str	r7, [r5, #0]
 800baa6:	2000      	movs	r0, #0
 800baa8:	e022      	b.n	800baf0 <__sflush_r+0xf8>
 800baaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baae:	b21b      	sxth	r3, r3
 800bab0:	e01b      	b.n	800baea <__sflush_r+0xf2>
 800bab2:	690f      	ldr	r7, [r1, #16]
 800bab4:	2f00      	cmp	r7, #0
 800bab6:	d0f6      	beq.n	800baa6 <__sflush_r+0xae>
 800bab8:	0793      	lsls	r3, r2, #30
 800baba:	680e      	ldr	r6, [r1, #0]
 800babc:	bf08      	it	eq
 800babe:	694b      	ldreq	r3, [r1, #20]
 800bac0:	600f      	str	r7, [r1, #0]
 800bac2:	bf18      	it	ne
 800bac4:	2300      	movne	r3, #0
 800bac6:	eba6 0807 	sub.w	r8, r6, r7
 800baca:	608b      	str	r3, [r1, #8]
 800bacc:	f1b8 0f00 	cmp.w	r8, #0
 800bad0:	dde9      	ble.n	800baa6 <__sflush_r+0xae>
 800bad2:	6a21      	ldr	r1, [r4, #32]
 800bad4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bad6:	4643      	mov	r3, r8
 800bad8:	463a      	mov	r2, r7
 800bada:	4628      	mov	r0, r5
 800badc:	47b0      	blx	r6
 800bade:	2800      	cmp	r0, #0
 800bae0:	dc08      	bgt.n	800baf4 <__sflush_r+0xfc>
 800bae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baea:	81a3      	strh	r3, [r4, #12]
 800baec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800baf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf4:	4407      	add	r7, r0
 800baf6:	eba8 0800 	sub.w	r8, r8, r0
 800bafa:	e7e7      	b.n	800bacc <__sflush_r+0xd4>
 800bafc:	dfbffffe 	.word	0xdfbffffe

0800bb00 <_fflush_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	690b      	ldr	r3, [r1, #16]
 800bb04:	4605      	mov	r5, r0
 800bb06:	460c      	mov	r4, r1
 800bb08:	b913      	cbnz	r3, 800bb10 <_fflush_r+0x10>
 800bb0a:	2500      	movs	r5, #0
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	b118      	cbz	r0, 800bb1a <_fflush_r+0x1a>
 800bb12:	6a03      	ldr	r3, [r0, #32]
 800bb14:	b90b      	cbnz	r3, 800bb1a <_fflush_r+0x1a>
 800bb16:	f7ff fad1 	bl	800b0bc <__sinit>
 800bb1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d0f3      	beq.n	800bb0a <_fflush_r+0xa>
 800bb22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb24:	07d0      	lsls	r0, r2, #31
 800bb26:	d404      	bmi.n	800bb32 <_fflush_r+0x32>
 800bb28:	0599      	lsls	r1, r3, #22
 800bb2a:	d402      	bmi.n	800bb32 <_fflush_r+0x32>
 800bb2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb2e:	f7ff fc32 	bl	800b396 <__retarget_lock_acquire_recursive>
 800bb32:	4628      	mov	r0, r5
 800bb34:	4621      	mov	r1, r4
 800bb36:	f7ff ff5f 	bl	800b9f8 <__sflush_r>
 800bb3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb3c:	07da      	lsls	r2, r3, #31
 800bb3e:	4605      	mov	r5, r0
 800bb40:	d4e4      	bmi.n	800bb0c <_fflush_r+0xc>
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	059b      	lsls	r3, r3, #22
 800bb46:	d4e1      	bmi.n	800bb0c <_fflush_r+0xc>
 800bb48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb4a:	f7ff fc25 	bl	800b398 <__retarget_lock_release_recursive>
 800bb4e:	e7dd      	b.n	800bb0c <_fflush_r+0xc>

0800bb50 <_putc_r>:
 800bb50:	b570      	push	{r4, r5, r6, lr}
 800bb52:	460d      	mov	r5, r1
 800bb54:	4614      	mov	r4, r2
 800bb56:	4606      	mov	r6, r0
 800bb58:	b118      	cbz	r0, 800bb62 <_putc_r+0x12>
 800bb5a:	6a03      	ldr	r3, [r0, #32]
 800bb5c:	b90b      	cbnz	r3, 800bb62 <_putc_r+0x12>
 800bb5e:	f7ff faad 	bl	800b0bc <__sinit>
 800bb62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb64:	07d8      	lsls	r0, r3, #31
 800bb66:	d405      	bmi.n	800bb74 <_putc_r+0x24>
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	0599      	lsls	r1, r3, #22
 800bb6c:	d402      	bmi.n	800bb74 <_putc_r+0x24>
 800bb6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb70:	f7ff fc11 	bl	800b396 <__retarget_lock_acquire_recursive>
 800bb74:	68a3      	ldr	r3, [r4, #8]
 800bb76:	3b01      	subs	r3, #1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	60a3      	str	r3, [r4, #8]
 800bb7c:	da05      	bge.n	800bb8a <_putc_r+0x3a>
 800bb7e:	69a2      	ldr	r2, [r4, #24]
 800bb80:	4293      	cmp	r3, r2
 800bb82:	db12      	blt.n	800bbaa <_putc_r+0x5a>
 800bb84:	b2eb      	uxtb	r3, r5
 800bb86:	2b0a      	cmp	r3, #10
 800bb88:	d00f      	beq.n	800bbaa <_putc_r+0x5a>
 800bb8a:	6823      	ldr	r3, [r4, #0]
 800bb8c:	1c5a      	adds	r2, r3, #1
 800bb8e:	6022      	str	r2, [r4, #0]
 800bb90:	701d      	strb	r5, [r3, #0]
 800bb92:	b2ed      	uxtb	r5, r5
 800bb94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb96:	07da      	lsls	r2, r3, #31
 800bb98:	d405      	bmi.n	800bba6 <_putc_r+0x56>
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	059b      	lsls	r3, r3, #22
 800bb9e:	d402      	bmi.n	800bba6 <_putc_r+0x56>
 800bba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bba2:	f7ff fbf9 	bl	800b398 <__retarget_lock_release_recursive>
 800bba6:	4628      	mov	r0, r5
 800bba8:	bd70      	pop	{r4, r5, r6, pc}
 800bbaa:	4629      	mov	r1, r5
 800bbac:	4622      	mov	r2, r4
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f000 f802 	bl	800bbb8 <__swbuf_r>
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	e7ed      	b.n	800bb94 <_putc_r+0x44>

0800bbb8 <__swbuf_r>:
 800bbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbba:	460e      	mov	r6, r1
 800bbbc:	4614      	mov	r4, r2
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	b118      	cbz	r0, 800bbca <__swbuf_r+0x12>
 800bbc2:	6a03      	ldr	r3, [r0, #32]
 800bbc4:	b90b      	cbnz	r3, 800bbca <__swbuf_r+0x12>
 800bbc6:	f7ff fa79 	bl	800b0bc <__sinit>
 800bbca:	69a3      	ldr	r3, [r4, #24]
 800bbcc:	60a3      	str	r3, [r4, #8]
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	071a      	lsls	r2, r3, #28
 800bbd2:	d501      	bpl.n	800bbd8 <__swbuf_r+0x20>
 800bbd4:	6923      	ldr	r3, [r4, #16]
 800bbd6:	b943      	cbnz	r3, 800bbea <__swbuf_r+0x32>
 800bbd8:	4621      	mov	r1, r4
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f000 f82a 	bl	800bc34 <__swsetup_r>
 800bbe0:	b118      	cbz	r0, 800bbea <__swbuf_r+0x32>
 800bbe2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	6922      	ldr	r2, [r4, #16]
 800bbee:	1a98      	subs	r0, r3, r2
 800bbf0:	6963      	ldr	r3, [r4, #20]
 800bbf2:	b2f6      	uxtb	r6, r6
 800bbf4:	4283      	cmp	r3, r0
 800bbf6:	4637      	mov	r7, r6
 800bbf8:	dc05      	bgt.n	800bc06 <__swbuf_r+0x4e>
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	f7ff ff7f 	bl	800bb00 <_fflush_r>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d1ed      	bne.n	800bbe2 <__swbuf_r+0x2a>
 800bc06:	68a3      	ldr	r3, [r4, #8]
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	60a3      	str	r3, [r4, #8]
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	1c5a      	adds	r2, r3, #1
 800bc10:	6022      	str	r2, [r4, #0]
 800bc12:	701e      	strb	r6, [r3, #0]
 800bc14:	6962      	ldr	r2, [r4, #20]
 800bc16:	1c43      	adds	r3, r0, #1
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d004      	beq.n	800bc26 <__swbuf_r+0x6e>
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	07db      	lsls	r3, r3, #31
 800bc20:	d5e1      	bpl.n	800bbe6 <__swbuf_r+0x2e>
 800bc22:	2e0a      	cmp	r6, #10
 800bc24:	d1df      	bne.n	800bbe6 <__swbuf_r+0x2e>
 800bc26:	4621      	mov	r1, r4
 800bc28:	4628      	mov	r0, r5
 800bc2a:	f7ff ff69 	bl	800bb00 <_fflush_r>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	d0d9      	beq.n	800bbe6 <__swbuf_r+0x2e>
 800bc32:	e7d6      	b.n	800bbe2 <__swbuf_r+0x2a>

0800bc34 <__swsetup_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	4b29      	ldr	r3, [pc, #164]	@ (800bcdc <__swsetup_r+0xa8>)
 800bc38:	4605      	mov	r5, r0
 800bc3a:	6818      	ldr	r0, [r3, #0]
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	b118      	cbz	r0, 800bc48 <__swsetup_r+0x14>
 800bc40:	6a03      	ldr	r3, [r0, #32]
 800bc42:	b90b      	cbnz	r3, 800bc48 <__swsetup_r+0x14>
 800bc44:	f7ff fa3a 	bl	800b0bc <__sinit>
 800bc48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc4c:	0719      	lsls	r1, r3, #28
 800bc4e:	d422      	bmi.n	800bc96 <__swsetup_r+0x62>
 800bc50:	06da      	lsls	r2, r3, #27
 800bc52:	d407      	bmi.n	800bc64 <__swsetup_r+0x30>
 800bc54:	2209      	movs	r2, #9
 800bc56:	602a      	str	r2, [r5, #0]
 800bc58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc5c:	81a3      	strh	r3, [r4, #12]
 800bc5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc62:	e033      	b.n	800bccc <__swsetup_r+0x98>
 800bc64:	0758      	lsls	r0, r3, #29
 800bc66:	d512      	bpl.n	800bc8e <__swsetup_r+0x5a>
 800bc68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc6a:	b141      	cbz	r1, 800bc7e <__swsetup_r+0x4a>
 800bc6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc70:	4299      	cmp	r1, r3
 800bc72:	d002      	beq.n	800bc7a <__swsetup_r+0x46>
 800bc74:	4628      	mov	r0, r5
 800bc76:	f7ff fba5 	bl	800b3c4 <_free_r>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc84:	81a3      	strh	r3, [r4, #12]
 800bc86:	2300      	movs	r3, #0
 800bc88:	6063      	str	r3, [r4, #4]
 800bc8a:	6923      	ldr	r3, [r4, #16]
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	f043 0308 	orr.w	r3, r3, #8
 800bc94:	81a3      	strh	r3, [r4, #12]
 800bc96:	6923      	ldr	r3, [r4, #16]
 800bc98:	b94b      	cbnz	r3, 800bcae <__swsetup_r+0x7a>
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bca4:	d003      	beq.n	800bcae <__swsetup_r+0x7a>
 800bca6:	4621      	mov	r1, r4
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f000 f883 	bl	800bdb4 <__smakebuf_r>
 800bcae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcb2:	f013 0201 	ands.w	r2, r3, #1
 800bcb6:	d00a      	beq.n	800bcce <__swsetup_r+0x9a>
 800bcb8:	2200      	movs	r2, #0
 800bcba:	60a2      	str	r2, [r4, #8]
 800bcbc:	6962      	ldr	r2, [r4, #20]
 800bcbe:	4252      	negs	r2, r2
 800bcc0:	61a2      	str	r2, [r4, #24]
 800bcc2:	6922      	ldr	r2, [r4, #16]
 800bcc4:	b942      	cbnz	r2, 800bcd8 <__swsetup_r+0xa4>
 800bcc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bcca:	d1c5      	bne.n	800bc58 <__swsetup_r+0x24>
 800bccc:	bd38      	pop	{r3, r4, r5, pc}
 800bcce:	0799      	lsls	r1, r3, #30
 800bcd0:	bf58      	it	pl
 800bcd2:	6962      	ldrpl	r2, [r4, #20]
 800bcd4:	60a2      	str	r2, [r4, #8]
 800bcd6:	e7f4      	b.n	800bcc2 <__swsetup_r+0x8e>
 800bcd8:	2000      	movs	r0, #0
 800bcda:	e7f7      	b.n	800bccc <__swsetup_r+0x98>
 800bcdc:	20000064 	.word	0x20000064

0800bce0 <_raise_r>:
 800bce0:	291f      	cmp	r1, #31
 800bce2:	b538      	push	{r3, r4, r5, lr}
 800bce4:	4605      	mov	r5, r0
 800bce6:	460c      	mov	r4, r1
 800bce8:	d904      	bls.n	800bcf4 <_raise_r+0x14>
 800bcea:	2316      	movs	r3, #22
 800bcec:	6003      	str	r3, [r0, #0]
 800bcee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}
 800bcf4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bcf6:	b112      	cbz	r2, 800bcfe <_raise_r+0x1e>
 800bcf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcfc:	b94b      	cbnz	r3, 800bd12 <_raise_r+0x32>
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f000 f830 	bl	800bd64 <_getpid_r>
 800bd04:	4622      	mov	r2, r4
 800bd06:	4601      	mov	r1, r0
 800bd08:	4628      	mov	r0, r5
 800bd0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd0e:	f000 b817 	b.w	800bd40 <_kill_r>
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d00a      	beq.n	800bd2c <_raise_r+0x4c>
 800bd16:	1c59      	adds	r1, r3, #1
 800bd18:	d103      	bne.n	800bd22 <_raise_r+0x42>
 800bd1a:	2316      	movs	r3, #22
 800bd1c:	6003      	str	r3, [r0, #0]
 800bd1e:	2001      	movs	r0, #1
 800bd20:	e7e7      	b.n	800bcf2 <_raise_r+0x12>
 800bd22:	2100      	movs	r1, #0
 800bd24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bd28:	4620      	mov	r0, r4
 800bd2a:	4798      	blx	r3
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	e7e0      	b.n	800bcf2 <_raise_r+0x12>

0800bd30 <raise>:
 800bd30:	4b02      	ldr	r3, [pc, #8]	@ (800bd3c <raise+0xc>)
 800bd32:	4601      	mov	r1, r0
 800bd34:	6818      	ldr	r0, [r3, #0]
 800bd36:	f7ff bfd3 	b.w	800bce0 <_raise_r>
 800bd3a:	bf00      	nop
 800bd3c:	20000064 	.word	0x20000064

0800bd40 <_kill_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4d07      	ldr	r5, [pc, #28]	@ (800bd60 <_kill_r+0x20>)
 800bd44:	2300      	movs	r3, #0
 800bd46:	4604      	mov	r4, r0
 800bd48:	4608      	mov	r0, r1
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	602b      	str	r3, [r5, #0]
 800bd4e:	f7f5 f9a8 	bl	80010a2 <_kill>
 800bd52:	1c43      	adds	r3, r0, #1
 800bd54:	d102      	bne.n	800bd5c <_kill_r+0x1c>
 800bd56:	682b      	ldr	r3, [r5, #0]
 800bd58:	b103      	cbz	r3, 800bd5c <_kill_r+0x1c>
 800bd5a:	6023      	str	r3, [r4, #0]
 800bd5c:	bd38      	pop	{r3, r4, r5, pc}
 800bd5e:	bf00      	nop
 800bd60:	20000494 	.word	0x20000494

0800bd64 <_getpid_r>:
 800bd64:	f7f5 b995 	b.w	8001092 <_getpid>

0800bd68 <__swhatbuf_r>:
 800bd68:	b570      	push	{r4, r5, r6, lr}
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd70:	2900      	cmp	r1, #0
 800bd72:	b096      	sub	sp, #88	@ 0x58
 800bd74:	4615      	mov	r5, r2
 800bd76:	461e      	mov	r6, r3
 800bd78:	da0d      	bge.n	800bd96 <__swhatbuf_r+0x2e>
 800bd7a:	89a3      	ldrh	r3, [r4, #12]
 800bd7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd80:	f04f 0100 	mov.w	r1, #0
 800bd84:	bf14      	ite	ne
 800bd86:	2340      	movne	r3, #64	@ 0x40
 800bd88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	6031      	str	r1, [r6, #0]
 800bd90:	602b      	str	r3, [r5, #0]
 800bd92:	b016      	add	sp, #88	@ 0x58
 800bd94:	bd70      	pop	{r4, r5, r6, pc}
 800bd96:	466a      	mov	r2, sp
 800bd98:	f000 f848 	bl	800be2c <_fstat_r>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	dbec      	blt.n	800bd7a <__swhatbuf_r+0x12>
 800bda0:	9901      	ldr	r1, [sp, #4]
 800bda2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bda6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bdaa:	4259      	negs	r1, r3
 800bdac:	4159      	adcs	r1, r3
 800bdae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdb2:	e7eb      	b.n	800bd8c <__swhatbuf_r+0x24>

0800bdb4 <__smakebuf_r>:
 800bdb4:	898b      	ldrh	r3, [r1, #12]
 800bdb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdb8:	079d      	lsls	r5, r3, #30
 800bdba:	4606      	mov	r6, r0
 800bdbc:	460c      	mov	r4, r1
 800bdbe:	d507      	bpl.n	800bdd0 <__smakebuf_r+0x1c>
 800bdc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bdc4:	6023      	str	r3, [r4, #0]
 800bdc6:	6123      	str	r3, [r4, #16]
 800bdc8:	2301      	movs	r3, #1
 800bdca:	6163      	str	r3, [r4, #20]
 800bdcc:	b003      	add	sp, #12
 800bdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdd0:	ab01      	add	r3, sp, #4
 800bdd2:	466a      	mov	r2, sp
 800bdd4:	f7ff ffc8 	bl	800bd68 <__swhatbuf_r>
 800bdd8:	9f00      	ldr	r7, [sp, #0]
 800bdda:	4605      	mov	r5, r0
 800bddc:	4639      	mov	r1, r7
 800bdde:	4630      	mov	r0, r6
 800bde0:	f7ff f854 	bl	800ae8c <_malloc_r>
 800bde4:	b948      	cbnz	r0, 800bdfa <__smakebuf_r+0x46>
 800bde6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdea:	059a      	lsls	r2, r3, #22
 800bdec:	d4ee      	bmi.n	800bdcc <__smakebuf_r+0x18>
 800bdee:	f023 0303 	bic.w	r3, r3, #3
 800bdf2:	f043 0302 	orr.w	r3, r3, #2
 800bdf6:	81a3      	strh	r3, [r4, #12]
 800bdf8:	e7e2      	b.n	800bdc0 <__smakebuf_r+0xc>
 800bdfa:	89a3      	ldrh	r3, [r4, #12]
 800bdfc:	6020      	str	r0, [r4, #0]
 800bdfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be02:	81a3      	strh	r3, [r4, #12]
 800be04:	9b01      	ldr	r3, [sp, #4]
 800be06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be0a:	b15b      	cbz	r3, 800be24 <__smakebuf_r+0x70>
 800be0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be10:	4630      	mov	r0, r6
 800be12:	f000 f81d 	bl	800be50 <_isatty_r>
 800be16:	b128      	cbz	r0, 800be24 <__smakebuf_r+0x70>
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	f023 0303 	bic.w	r3, r3, #3
 800be1e:	f043 0301 	orr.w	r3, r3, #1
 800be22:	81a3      	strh	r3, [r4, #12]
 800be24:	89a3      	ldrh	r3, [r4, #12]
 800be26:	431d      	orrs	r5, r3
 800be28:	81a5      	strh	r5, [r4, #12]
 800be2a:	e7cf      	b.n	800bdcc <__smakebuf_r+0x18>

0800be2c <_fstat_r>:
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	4d07      	ldr	r5, [pc, #28]	@ (800be4c <_fstat_r+0x20>)
 800be30:	2300      	movs	r3, #0
 800be32:	4604      	mov	r4, r0
 800be34:	4608      	mov	r0, r1
 800be36:	4611      	mov	r1, r2
 800be38:	602b      	str	r3, [r5, #0]
 800be3a:	f7f5 f976 	bl	800112a <_fstat>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	d102      	bne.n	800be48 <_fstat_r+0x1c>
 800be42:	682b      	ldr	r3, [r5, #0]
 800be44:	b103      	cbz	r3, 800be48 <_fstat_r+0x1c>
 800be46:	6023      	str	r3, [r4, #0]
 800be48:	bd38      	pop	{r3, r4, r5, pc}
 800be4a:	bf00      	nop
 800be4c:	20000494 	.word	0x20000494

0800be50 <_isatty_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4d06      	ldr	r5, [pc, #24]	@ (800be6c <_isatty_r+0x1c>)
 800be54:	2300      	movs	r3, #0
 800be56:	4604      	mov	r4, r0
 800be58:	4608      	mov	r0, r1
 800be5a:	602b      	str	r3, [r5, #0]
 800be5c:	f7f5 f975 	bl	800114a <_isatty>
 800be60:	1c43      	adds	r3, r0, #1
 800be62:	d102      	bne.n	800be6a <_isatty_r+0x1a>
 800be64:	682b      	ldr	r3, [r5, #0]
 800be66:	b103      	cbz	r3, 800be6a <_isatty_r+0x1a>
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	bd38      	pop	{r3, r4, r5, pc}
 800be6c:	20000494 	.word	0x20000494

0800be70 <_init>:
 800be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be72:	bf00      	nop
 800be74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be76:	bc08      	pop	{r3}
 800be78:	469e      	mov	lr, r3
 800be7a:	4770      	bx	lr

0800be7c <_fini>:
 800be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7e:	bf00      	nop
 800be80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be82:	bc08      	pop	{r3}
 800be84:	469e      	mov	lr, r3
 800be86:	4770      	bx	lr
