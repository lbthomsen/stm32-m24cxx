
stm32f405-m24m01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004988  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e00  08004e00  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e08  08004e08  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000614  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000067c  2000067c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b1fe  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a91  00000000  00000000  0002b2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a00  00000000  00000000  0002cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007ca  00000000  00000000  0002d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fc27  00000000  00000000  0002df3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cc89  00000000  00000000  0004db61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc3a8  00000000  00000000  0005a7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003110  00000000  00000000  00116b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00119ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b00 	.word	0x08004b00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004b00 	.word	0x08004b00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char *ptr, int len) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d002      	beq.n	8000584 <_write+0x18>
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b02      	cmp	r3, #2
 8000582:	d111      	bne.n	80005a8 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b29a      	uxth	r2, r3
 8000588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <_write+0x48>)
 8000590:	f002 fe37 	bl	8003202 <HAL_UART_Transmit>
 8000594:	4603      	mov	r3, r0
 8000596:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <_write+0x36>
            return len;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	e004      	b.n	80005ac <_write+0x40>
        else
            return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	e001      	b.n	80005ac <_write+0x40>
    }
    return -1;
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000d8 	.word	0x200000d8

080005b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BTN_Pin) // If the button
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005c8:	d102      	bne.n	80005d0 <HAL_GPIO_EXTI_Callback+0x18>
    {
        do_action = 1;
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_GPIO_EXTI_Callback+0x24>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
    }
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	20000524 	.word	0x20000524

080005e0 <dump_buf>:

void dump_buf(uint8_t *buf, uint32_t size) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < size; ++i) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e01c      	b.n	800062a <dump_buf+0x4a>
        if (i % 16 == 0) {
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f003 030f 	and.w	r3, r3, #15
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d103      	bne.n	8000602 <dump_buf+0x22>
            printf("0x%08lx: ", i);
 80005fa:	68f9      	ldr	r1, [r7, #12]
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <dump_buf+0x5c>)
 80005fe:	f003 fbcf 	bl	8003da0 <iprintf>
        }
        printf("%02x ", buf[i]);
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <dump_buf+0x60>)
 800060e:	f003 fbc7 	bl	8003da0 <iprintf>
        if ((i + 1) % 16 == 0)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3301      	adds	r3, #1
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	2b00      	cmp	r3, #0
 800061c:	d102      	bne.n	8000624 <dump_buf+0x44>
            printf("\n");
 800061e:	200a      	movs	r0, #10
 8000620:	f003 fbd0 	bl	8003dc4 <putchar>
    for (uint32_t i = 0; i < size; ++i) {
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	429a      	cmp	r2, r3
 8000630:	d3de      	bcc.n	80005f0 <dump_buf+0x10>
    }
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	08004b18 	.word	0x08004b18
 8000640:	08004b24 	.word	0x08004b24

08000644 <fill_buffer>:

void fill_buffer(uint8_t *buf, uint32_t size, uint8_t type) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	4613      	mov	r3, r2
 8000650:	71fb      	strb	r3, [r7, #7]
    switch (type) {
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d82e      	bhi.n	80006b6 <fill_buffer+0x72>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <fill_buffer+0x1c>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000671 	.word	0x08000671
 8000664:	0800067d 	.word	0x0800067d
 8000668:	08000689 	.word	0x08000689
 800066c:	08000695 	.word	0x08000695
    case 0:
        memset(buf, 0x00, size);
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	2100      	movs	r1, #0
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f003 fbf0 	bl	8003e5a <memset>
        break;
 800067a:	e01c      	b.n	80006b6 <fill_buffer+0x72>
    case 1:
        memset(buf, 0xff, size);
 800067c:	68ba      	ldr	r2, [r7, #8]
 800067e:	21ff      	movs	r1, #255	; 0xff
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f003 fbea 	bl	8003e5a <memset>
        break;
 8000686:	e016      	b.n	80006b6 <fill_buffer+0x72>
    case 2:
        memset(buf, 0xaa, size);
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	21aa      	movs	r1, #170	; 0xaa
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f003 fbe4 	bl	8003e5a <memset>
        break;
 8000692:	e010      	b.n	80006b6 <fill_buffer+0x72>
    case 3:
        for (uint32_t i = 0; i < size; ++i) {
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	e008      	b.n	80006ac <fill_buffer+0x68>
            buf[i] = (uint8_t)i;
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	4413      	add	r3, r2
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < size; ++i) {
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	3301      	adds	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d3f2      	bcc.n	800069a <fill_buffer+0x56>
        }
        break;
 80006b4:	bf00      	nop
    }
}
 80006b6:	bf00      	nop
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fc3b 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f95f 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 fa1d 	bl	8000b0c <MX_GPIO_Init>
  MX_I2C1_Init();
 80006d2:	f000 f9c3 	bl	8000a5c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006d6:	f000 f9ef 	bl	8000ab8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DBG("\n\n\n--------\nStarting");
 80006da:	48a0      	ldr	r0, [pc, #640]	; (800095c <main+0x29c>)
 80006dc:	f003 fb60 	bl	8003da0 <iprintf>
 80006e0:	200a      	movs	r0, #10
 80006e2:	f003 fb6f 	bl	8003dc4 <putchar>

  // Wait a few ms to get ready
  HAL_Delay(10);
 80006e6:	200a      	movs	r0, #10
 80006e8:	f000 fc9c 	bl	8001024 <HAL_Delay>

  DBG("Scanning I2C bus:");
 80006ec:	489c      	ldr	r0, [pc, #624]	; (8000960 <main+0x2a0>)
 80006ee:	f003 fb57 	bl	8003da0 <iprintf>
 80006f2:	200a      	movs	r0, #10
 80006f4:	f003 fb66 	bl	8003dc4 <putchar>
  // Go through all possible i2c addresses
  for (uint8_t i = 0; i < 128; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e023      	b.n	8000746 <main+0x86>

      if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 3, 100) == HAL_OK) {
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	b29b      	uxth	r3, r3
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	b299      	uxth	r1, r3
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2203      	movs	r2, #3
 800070a:	4896      	ldr	r0, [pc, #600]	; (8000964 <main+0x2a4>)
 800070c:	f001 fc0c 	bl	8001f28 <HAL_I2C_IsDeviceReady>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d105      	bne.n	8000722 <main+0x62>
          // We got an ack
          printf("%2x ", i);
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	4619      	mov	r1, r3
 800071a:	4893      	ldr	r0, [pc, #588]	; (8000968 <main+0x2a8>)
 800071c:	f003 fb40 	bl	8003da0 <iprintf>
 8000720:	e002      	b.n	8000728 <main+0x68>
      } else {
          printf("-- ");
 8000722:	4892      	ldr	r0, [pc, #584]	; (800096c <main+0x2ac>)
 8000724:	f003 fb3c 	bl	8003da0 <iprintf>
      }

      if (i > 0 && (i + 1) % 16 == 0)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d008      	beq.n	8000740 <main+0x80>
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3301      	adds	r3, #1
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	2b00      	cmp	r3, #0
 8000738:	d102      	bne.n	8000740 <main+0x80>
          printf("\n");
 800073a:	200a      	movs	r0, #10
 800073c:	f003 fb42 	bl	8003dc4 <putchar>
  for (uint8_t i = 0; i < 128; i++) {
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	3301      	adds	r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074a:	2b00      	cmp	r3, #0
 800074c:	dad7      	bge.n	80006fe <main+0x3e>

  }

  printf("\n");
 800074e:	200a      	movs	r0, #10
 8000750:	f003 fb38 	bl	8003dc4 <putchar>

  if (m24cxx_init(&m24cxx, &hi2c1, 0x50) != M24CXX_Ok) {
 8000754:	2250      	movs	r2, #80	; 0x50
 8000756:	4983      	ldr	r1, [pc, #524]	; (8000964 <main+0x2a4>)
 8000758:	4885      	ldr	r0, [pc, #532]	; (8000970 <main+0x2b0>)
 800075a:	f003 f8c7 	bl	80038ec <m24cxx_init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d007      	beq.n	8000774 <main+0xb4>
      DBG("M24CXX Failed to initialize");
 8000764:	4883      	ldr	r0, [pc, #524]	; (8000974 <main+0x2b4>)
 8000766:	f003 fb1b 	bl	8003da0 <iprintf>
 800076a:	200a      	movs	r0, #10
 800076c:	f003 fb2a 	bl	8003dc4 <putchar>
      Error_Handler();
 8000770:	f000 fa32 	bl	8000bd8 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_blink = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]

  while (1)
  {
      now = HAL_GetTick();
 800077c:	f000 fc46 	bl	800100c <HAL_GetTick>
 8000780:	6078      	str	r0, [r7, #4]

      if (now - last_blink >= 500) {
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800078c:	d305      	bcc.n	800079a <main+0xda>
          HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800078e:	2110      	movs	r1, #16
 8000790:	4879      	ldr	r0, [pc, #484]	; (8000978 <main+0x2b8>)
 8000792:	f000 ff32 	bl	80015fa <HAL_GPIO_TogglePin>
          last_blink = now;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	60bb      	str	r3, [r7, #8]
      }

      if (do_action) {
 800079a:	4b78      	ldr	r3, [pc, #480]	; (800097c <main+0x2bc>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0ec      	beq.n	800077c <main+0xbc>
          do_action = 0;
 80007a2:	4b76      	ldr	r3, [pc, #472]	; (800097c <main+0x2bc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
          DBG("Do action!");
 80007a8:	4875      	ldr	r0, [pc, #468]	; (8000980 <main+0x2c0>)
 80007aa:	f003 faf9 	bl	8003da0 <iprintf>
 80007ae:	200a      	movs	r0, #10
 80007b0:	f003 fb08 	bl	8003dc4 <putchar>

          if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 80007b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b8:	4a72      	ldr	r2, [pc, #456]	; (8000984 <main+0x2c4>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	486c      	ldr	r0, [pc, #432]	; (8000970 <main+0x2b0>)
 80007be:	f003 f8f3 	bl	80039a8 <m24cxx_read>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d007      	beq.n	80007d8 <main+0x118>
              DBG("Returned err");
 80007c8:	486f      	ldr	r0, [pc, #444]	; (8000988 <main+0x2c8>)
 80007ca:	f003 fae9 	bl	8003da0 <iprintf>
 80007ce:	200a      	movs	r0, #10
 80007d0:	f003 faf8 	bl	8003dc4 <putchar>
              Error_Handler();
 80007d4:	f000 fa00 	bl	8000bd8 <Error_Handler>
          }

          dump_buf(buf, sizeof(buf));
 80007d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007dc:	4869      	ldr	r0, [pc, #420]	; (8000984 <main+0x2c4>)
 80007de:	f7ff feff 	bl	80005e0 <dump_buf>

          fill_buffer(buf, sizeof(buf), 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e8:	4866      	ldr	r0, [pc, #408]	; (8000984 <main+0x2c4>)
 80007ea:	f7ff ff2b 	bl	8000644 <fill_buffer>

          if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 80007ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f2:	4a64      	ldr	r2, [pc, #400]	; (8000984 <main+0x2c4>)
 80007f4:	2100      	movs	r1, #0
 80007f6:	485e      	ldr	r0, [pc, #376]	; (8000970 <main+0x2b0>)
 80007f8:	f003 f96e 	bl	8003ad8 <m24cxx_write>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d007      	beq.n	8000812 <main+0x152>
              DBG("Returned err");
 8000802:	4861      	ldr	r0, [pc, #388]	; (8000988 <main+0x2c8>)
 8000804:	f003 facc 	bl	8003da0 <iprintf>
 8000808:	200a      	movs	r0, #10
 800080a:	f003 fadb 	bl	8003dc4 <putchar>
              Error_Handler();
 800080e:	f000 f9e3 	bl	8000bd8 <Error_Handler>
          }

          if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000816:	4a5b      	ldr	r2, [pc, #364]	; (8000984 <main+0x2c4>)
 8000818:	2100      	movs	r1, #0
 800081a:	4855      	ldr	r0, [pc, #340]	; (8000970 <main+0x2b0>)
 800081c:	f003 f8c4 	bl	80039a8 <m24cxx_read>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d007      	beq.n	8000836 <main+0x176>
              DBG("Returned err");
 8000826:	4858      	ldr	r0, [pc, #352]	; (8000988 <main+0x2c8>)
 8000828:	f003 faba 	bl	8003da0 <iprintf>
 800082c:	200a      	movs	r0, #10
 800082e:	f003 fac9 	bl	8003dc4 <putchar>
              Error_Handler();
 8000832:	f000 f9d1 	bl	8000bd8 <Error_Handler>
          }

          dump_buf(buf, sizeof(buf));
 8000836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083a:	4852      	ldr	r0, [pc, #328]	; (8000984 <main+0x2c4>)
 800083c:	f7ff fed0 	bl	80005e0 <dump_buf>

          fill_buffer(buf, sizeof(buf), 1);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000846:	484f      	ldr	r0, [pc, #316]	; (8000984 <main+0x2c4>)
 8000848:	f7ff fefc 	bl	8000644 <fill_buffer>

          if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 800084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000850:	4a4c      	ldr	r2, [pc, #304]	; (8000984 <main+0x2c4>)
 8000852:	2100      	movs	r1, #0
 8000854:	4846      	ldr	r0, [pc, #280]	; (8000970 <main+0x2b0>)
 8000856:	f003 f93f 	bl	8003ad8 <m24cxx_write>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d007      	beq.n	8000870 <main+0x1b0>
              DBG("Returned err");
 8000860:	4849      	ldr	r0, [pc, #292]	; (8000988 <main+0x2c8>)
 8000862:	f003 fa9d 	bl	8003da0 <iprintf>
 8000866:	200a      	movs	r0, #10
 8000868:	f003 faac 	bl	8003dc4 <putchar>
              Error_Handler();
 800086c:	f000 f9b4 	bl	8000bd8 <Error_Handler>
          }

          if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000874:	4a43      	ldr	r2, [pc, #268]	; (8000984 <main+0x2c4>)
 8000876:	2100      	movs	r1, #0
 8000878:	483d      	ldr	r0, [pc, #244]	; (8000970 <main+0x2b0>)
 800087a:	f003 f895 	bl	80039a8 <m24cxx_read>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d007      	beq.n	8000894 <main+0x1d4>
              DBG("Returned err");
 8000884:	4840      	ldr	r0, [pc, #256]	; (8000988 <main+0x2c8>)
 8000886:	f003 fa8b 	bl	8003da0 <iprintf>
 800088a:	200a      	movs	r0, #10
 800088c:	f003 fa9a 	bl	8003dc4 <putchar>
              Error_Handler();
 8000890:	f000 f9a2 	bl	8000bd8 <Error_Handler>
          }

          dump_buf(buf, sizeof(buf));
 8000894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000898:	483a      	ldr	r0, [pc, #232]	; (8000984 <main+0x2c4>)
 800089a:	f7ff fea1 	bl	80005e0 <dump_buf>

          fill_buffer(buf, sizeof(buf), 2);
 800089e:	2202      	movs	r2, #2
 80008a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a4:	4837      	ldr	r0, [pc, #220]	; (8000984 <main+0x2c4>)
 80008a6:	f7ff fecd 	bl	8000644 <fill_buffer>

          if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 80008aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ae:	4a35      	ldr	r2, [pc, #212]	; (8000984 <main+0x2c4>)
 80008b0:	2100      	movs	r1, #0
 80008b2:	482f      	ldr	r0, [pc, #188]	; (8000970 <main+0x2b0>)
 80008b4:	f003 f910 	bl	8003ad8 <m24cxx_write>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d007      	beq.n	80008ce <main+0x20e>
              DBG("Returned err");
 80008be:	4832      	ldr	r0, [pc, #200]	; (8000988 <main+0x2c8>)
 80008c0:	f003 fa6e 	bl	8003da0 <iprintf>
 80008c4:	200a      	movs	r0, #10
 80008c6:	f003 fa7d 	bl	8003dc4 <putchar>
              Error_Handler();
 80008ca:	f000 f985 	bl	8000bd8 <Error_Handler>
          }

          if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 80008ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d2:	4a2c      	ldr	r2, [pc, #176]	; (8000984 <main+0x2c4>)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4826      	ldr	r0, [pc, #152]	; (8000970 <main+0x2b0>)
 80008d8:	f003 f866 	bl	80039a8 <m24cxx_read>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d007      	beq.n	80008f2 <main+0x232>
              DBG("Returned err");
 80008e2:	4829      	ldr	r0, [pc, #164]	; (8000988 <main+0x2c8>)
 80008e4:	f003 fa5c 	bl	8003da0 <iprintf>
 80008e8:	200a      	movs	r0, #10
 80008ea:	f003 fa6b 	bl	8003dc4 <putchar>
              Error_Handler();
 80008ee:	f000 f973 	bl	8000bd8 <Error_Handler>
          }

          dump_buf(buf, sizeof(buf));
 80008f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f6:	4823      	ldr	r0, [pc, #140]	; (8000984 <main+0x2c4>)
 80008f8:	f7ff fe72 	bl	80005e0 <dump_buf>

          fill_buffer(buf, sizeof(buf), 3);
 80008fc:	2203      	movs	r2, #3
 80008fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000902:	4820      	ldr	r0, [pc, #128]	; (8000984 <main+0x2c4>)
 8000904:	f7ff fe9e 	bl	8000644 <fill_buffer>

          if (m24cxx_write(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 8000908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090c:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <main+0x2c4>)
 800090e:	2100      	movs	r1, #0
 8000910:	4817      	ldr	r0, [pc, #92]	; (8000970 <main+0x2b0>)
 8000912:	f003 f8e1 	bl	8003ad8 <m24cxx_write>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d007      	beq.n	800092c <main+0x26c>
              DBG("Returned err");
 800091c:	481a      	ldr	r0, [pc, #104]	; (8000988 <main+0x2c8>)
 800091e:	f003 fa3f 	bl	8003da0 <iprintf>
 8000922:	200a      	movs	r0, #10
 8000924:	f003 fa4e 	bl	8003dc4 <putchar>
              Error_Handler();
 8000928:	f000 f956 	bl	8000bd8 <Error_Handler>
          }

          if (m24cxx_read(&m24cxx, 0x0, (uint8_t*) &buf, sizeof(buf)) != M24CXX_Ok) {
 800092c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <main+0x2c4>)
 8000932:	2100      	movs	r1, #0
 8000934:	480e      	ldr	r0, [pc, #56]	; (8000970 <main+0x2b0>)
 8000936:	f003 f837 	bl	80039a8 <m24cxx_read>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d007      	beq.n	8000950 <main+0x290>
              DBG("Returned err");
 8000940:	4811      	ldr	r0, [pc, #68]	; (8000988 <main+0x2c8>)
 8000942:	f003 fa2d 	bl	8003da0 <iprintf>
 8000946:	200a      	movs	r0, #10
 8000948:	f003 fa3c 	bl	8003dc4 <putchar>
              Error_Handler();
 800094c:	f000 f944 	bl	8000bd8 <Error_Handler>
          }

          dump_buf(buf, sizeof(buf));
 8000950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <main+0x2c4>)
 8000956:	f7ff fe43 	bl	80005e0 <dump_buf>
      now = HAL_GetTick();
 800095a:	e70f      	b.n	800077c <main+0xbc>
 800095c:	08004b2c 	.word	0x08004b2c
 8000960:	08004b44 	.word	0x08004b44
 8000964:	20000084 	.word	0x20000084
 8000968:	08004b58 	.word	0x08004b58
 800096c:	08004b60 	.word	0x08004b60
 8000970:	2000011c 	.word	0x2000011c
 8000974:	08004b64 	.word	0x08004b64
 8000978:	40020400 	.word	0x40020400
 800097c:	20000524 	.word	0x20000524
 8000980:	08004b80 	.word	0x08004b80
 8000984:	20000124 	.word	0x20000124
 8000988:	08004b8c 	.word	0x08004b8c

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f003 fa5d 	bl	8003e5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <SystemClock_Config+0xc8>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a26      	ldr	r2, [pc, #152]	; (8000a54 <SystemClock_Config+0xc8>)
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <SystemClock_Config+0xc8>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <SystemClock_Config+0xcc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <SystemClock_Config+0xcc>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <SystemClock_Config+0xcc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009fc:	2308      	movs	r3, #8
 80009fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a00:	2332      	movs	r3, #50	; 0x32
 8000a02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0320 	add.w	r3, r7, #32
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 ff13 	bl	800283c <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a1c:	f000 f8dc 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	230f      	movs	r3, #15
 8000a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2302      	movs	r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 f975 	bl	8002d2c <HAL_RCC_ClockConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a48:	f000 f8c6 	bl	8000bd8 <Error_Handler>
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	3750      	adds	r7, #80	; 0x50
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40007000 	.word	0x40007000

08000a5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <MX_I2C1_Init+0x54>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_I2C1_Init+0x58>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a9a:	f000 fde1 	bl	8001660 <HAL_I2C_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa4:	f000 f898 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000084 	.word	0x20000084
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	00061a80 	.word	0x00061a80

08000ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART1_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART1_UART_Init+0x4c>)
 8000af0:	f002 fb3a 	bl	8003168 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 f86d 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000d8 	.word	0x200000d8
 8000b08:	40011000 	.word	0x40011000

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <MX_GPIO_Init+0xc4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a29      	ldr	r2, [pc, #164]	; (8000bd0 <MX_GPIO_Init+0xc4>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <MX_GPIO_Init+0xc4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <MX_GPIO_Init+0xc4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a22      	ldr	r2, [pc, #136]	; (8000bd0 <MX_GPIO_Init+0xc4>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <MX_GPIO_Init+0xc4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_GPIO_Init+0xc4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <MX_GPIO_Init+0xc4>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_GPIO_Init+0xc4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2110      	movs	r1, #16
 8000b7a:	4816      	ldr	r0, [pc, #88]	; (8000bd4 <MX_GPIO_Init+0xc8>)
 8000b7c:	f000 fd24 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b80:	2310      	movs	r3, #16
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b84:	2311      	movs	r3, #17
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4619      	mov	r1, r3
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <MX_GPIO_Init+0xc8>)
 8000b98:	f000 fb7a 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ba2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <MX_GPIO_Init+0xc8>)
 8000bb4:	f000 fb6c 	bl	8001290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2017      	movs	r0, #23
 8000bbe:	f000 fb30 	bl	8001222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bc2:	2017      	movs	r0, #23
 8000bc4:	f000 fb49 	bl	800125a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	; 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <HAL_I2C_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c72:	23c0      	movs	r3, #192	; 0xc0
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c76:	2312      	movs	r3, #18
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c82:	2304      	movs	r3, #4
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <HAL_I2C_MspInit+0x8c>)
 8000c8e:	f000 faff 	bl	8001290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000c9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_I2C_MspInit+0x88>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <HAL_UART_MspInit+0x84>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d12c      	bne.n	8000d40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000cf0:	f043 0310 	orr.w	r3, r3, #16
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f003 0310 	and.w	r3, r3, #16
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_UART_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d30:	2307      	movs	r3, #7
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_UART_MspInit+0x8c>)
 8000d3c:	f000 faa8 	bl	8001290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40011000 	.word	0x40011000
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da0:	f000 f920 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000dac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000db0:	f000 fc3e 	bl	8001630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e00a      	b.n	8000de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dca:	f3af 8000 	nop.w
 8000dce:	4601      	mov	r1, r0
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	60ba      	str	r2, [r7, #8]
 8000dd6:	b2ca      	uxtb	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf0      	blt.n	8000dca <_read+0x12>
  }

  return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_isatty>:

int _isatty(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f003 f834 	bl	8003ef8 <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20020000 	.word	0x20020000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	20000528 	.word	0x20000528
 8000ec4:	20000680 	.word	0x20000680

08000ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef2:	490e      	ldr	r1, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f08:	4c0b      	ldr	r4, [pc, #44]	; (8000f38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f16:	f7ff ffd7 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f002 fff3 	bl	8003f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fbcf 	bl	80006c0 <main>
  bx  lr    
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f30:	08004e10 	.word	0x08004e10
  ldr r2, =_sbss
 8000f34:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f38:	2000067c 	.word	0x2000067c

08000f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_Init+0x40>)
 8000f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_Init+0x40>)
 8000f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_Init+0x40>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f94f 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f000 f808 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff fe36 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023c00 	.word	0x40023c00

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f967 	bl	8001276 <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc0:	f000 f92f 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	2000052c 	.word	0x2000052c

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2000052c 	.word	0x2000052c

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ec:	f7ff ff8e 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff29 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff3e 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff8e 	bl	8001160 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5d 	bl	800110c <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff31 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	e16b      	b.n	8001584 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f040 815a 	bne.w	800157e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d005      	beq.n	80012e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d130      	bne.n	8001344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001318:	2201      	movs	r2, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0201 	and.w	r2, r3, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b03      	cmp	r3, #3
 800134e:	d017      	beq.n	8001380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d123      	bne.n	80013d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	69b9      	ldr	r1, [r7, #24]
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0203 	and.w	r2, r3, #3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80b4 	beq.w	800157e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b60      	ldr	r3, [pc, #384]	; (800159c <HAL_GPIO_Init+0x30c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a5f      	ldr	r2, [pc, #380]	; (800159c <HAL_GPIO_Init+0x30c>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b5d      	ldr	r3, [pc, #372]	; (800159c <HAL_GPIO_Init+0x30c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001432:	4a5b      	ldr	r2, [pc, #364]	; (80015a0 <HAL_GPIO_Init+0x310>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	220f      	movs	r2, #15
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_GPIO_Init+0x314>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d02b      	beq.n	80014b6 <HAL_GPIO_Init+0x226>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <HAL_GPIO_Init+0x318>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d025      	beq.n	80014b2 <HAL_GPIO_Init+0x222>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a50      	ldr	r2, [pc, #320]	; (80015ac <HAL_GPIO_Init+0x31c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01f      	beq.n	80014ae <HAL_GPIO_Init+0x21e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4f      	ldr	r2, [pc, #316]	; (80015b0 <HAL_GPIO_Init+0x320>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d019      	beq.n	80014aa <HAL_GPIO_Init+0x21a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4e      	ldr	r2, [pc, #312]	; (80015b4 <HAL_GPIO_Init+0x324>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d013      	beq.n	80014a6 <HAL_GPIO_Init+0x216>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4d      	ldr	r2, [pc, #308]	; (80015b8 <HAL_GPIO_Init+0x328>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00d      	beq.n	80014a2 <HAL_GPIO_Init+0x212>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4c      	ldr	r2, [pc, #304]	; (80015bc <HAL_GPIO_Init+0x32c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d007      	beq.n	800149e <HAL_GPIO_Init+0x20e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4b      	ldr	r2, [pc, #300]	; (80015c0 <HAL_GPIO_Init+0x330>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d101      	bne.n	800149a <HAL_GPIO_Init+0x20a>
 8001496:	2307      	movs	r3, #7
 8001498:	e00e      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 800149a:	2308      	movs	r3, #8
 800149c:	e00c      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 800149e:	2306      	movs	r3, #6
 80014a0:	e00a      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014a2:	2305      	movs	r3, #5
 80014a4:	e008      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e004      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <HAL_GPIO_Init+0x228>
 80014b6:	2300      	movs	r3, #0
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	f002 0203 	and.w	r2, r2, #3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4093      	lsls	r3, r2
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c8:	4935      	ldr	r1, [pc, #212]	; (80015a0 <HAL_GPIO_Init+0x310>)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_GPIO_Init+0x334>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fa:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <HAL_GPIO_Init+0x334>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <HAL_GPIO_Init+0x334>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001524:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <HAL_GPIO_Init+0x334>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_GPIO_Init+0x334>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800154e:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_GPIO_Init+0x334>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001554:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_GPIO_Init+0x334>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <HAL_GPIO_Init+0x334>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3301      	adds	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b0f      	cmp	r3, #15
 8001588:	f67f ae90 	bls.w	80012ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020400 	.word	0x40020400
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40020c00 	.word	0x40020c00
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40021400 	.word	0x40021400
 80015bc:	40021800 	.word	0x40021800
 80015c0:	40021c00 	.word	0x40021c00
 80015c4:	40013c00 	.word	0x40013c00

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015e4:	e003      	b.n	80015ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	041a      	lsls	r2, r3, #16
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	619a      	str	r2, [r3, #24]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800160c:	887a      	ldrh	r2, [r7, #2]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	041a      	lsls	r2, r3, #16
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43d9      	mvns	r1, r3
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	400b      	ands	r3, r1
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d006      	beq.n	8001654 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ffb2 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40013c00 	.word	0x40013c00

08001660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e12b      	b.n	80018ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fad4 	bl	8000c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2224      	movs	r2, #36	; 0x24
 8001690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016c4:	f001 fd28 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 80016c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4a81      	ldr	r2, [pc, #516]	; (80018d4 <HAL_I2C_Init+0x274>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d807      	bhi.n	80016e4 <HAL_I2C_Init+0x84>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a80      	ldr	r2, [pc, #512]	; (80018d8 <HAL_I2C_Init+0x278>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	bf94      	ite	ls
 80016dc:	2301      	movls	r3, #1
 80016de:	2300      	movhi	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	e006      	b.n	80016f2 <HAL_I2C_Init+0x92>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4a7d      	ldr	r2, [pc, #500]	; (80018dc <HAL_I2C_Init+0x27c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	bf94      	ite	ls
 80016ec:	2301      	movls	r3, #1
 80016ee:	2300      	movhi	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0e7      	b.n	80018ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4a78      	ldr	r2, [pc, #480]	; (80018e0 <HAL_I2C_Init+0x280>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	0c9b      	lsrs	r3, r3, #18
 8001704:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	430a      	orrs	r2, r1
 8001718:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4a6a      	ldr	r2, [pc, #424]	; (80018d4 <HAL_I2C_Init+0x274>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d802      	bhi.n	8001734 <HAL_I2C_Init+0xd4>
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3301      	adds	r3, #1
 8001732:	e009      	b.n	8001748 <HAL_I2C_Init+0xe8>
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	4a69      	ldr	r2, [pc, #420]	; (80018e4 <HAL_I2C_Init+0x284>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	099b      	lsrs	r3, r3, #6
 8001746:	3301      	adds	r3, #1
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	430b      	orrs	r3, r1
 800174e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800175a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	495c      	ldr	r1, [pc, #368]	; (80018d4 <HAL_I2C_Init+0x274>)
 8001764:	428b      	cmp	r3, r1
 8001766:	d819      	bhi.n	800179c <HAL_I2C_Init+0x13c>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1e59      	subs	r1, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fbb1 f3f3 	udiv	r3, r1, r3
 8001776:	1c59      	adds	r1, r3, #1
 8001778:	f640 73fc 	movw	r3, #4092	; 0xffc
 800177c:	400b      	ands	r3, r1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00a      	beq.n	8001798 <HAL_I2C_Init+0x138>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1e59      	subs	r1, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001790:	3301      	adds	r3, #1
 8001792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001796:	e051      	b.n	800183c <HAL_I2C_Init+0x1dc>
 8001798:	2304      	movs	r3, #4
 800179a:	e04f      	b.n	800183c <HAL_I2C_Init+0x1dc>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d111      	bne.n	80017c8 <HAL_I2C_Init+0x168>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1e58      	subs	r0, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6859      	ldr	r1, [r3, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	440b      	add	r3, r1
 80017b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	e012      	b.n	80017ee <HAL_I2C_Init+0x18e>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1e58      	subs	r0, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6859      	ldr	r1, [r3, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	0099      	lsls	r1, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	fbb0 f3f3 	udiv	r3, r0, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf0c      	ite	eq
 80017e8:	2301      	moveq	r3, #1
 80017ea:	2300      	movne	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_I2C_Init+0x196>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e022      	b.n	800183c <HAL_I2C_Init+0x1dc>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10e      	bne.n	800181c <HAL_I2C_Init+0x1bc>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1e58      	subs	r0, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6859      	ldr	r1, [r3, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	440b      	add	r3, r1
 800180c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001810:	3301      	adds	r3, #1
 8001812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181a:	e00f      	b.n	800183c <HAL_I2C_Init+0x1dc>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1e58      	subs	r0, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	0099      	lsls	r1, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	6809      	ldr	r1, [r1, #0]
 8001840:	4313      	orrs	r3, r2
 8001842:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800186a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6911      	ldr	r1, [r2, #16]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68d2      	ldr	r2, [r2, #12]
 8001876:	4311      	orrs	r1, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	430b      	orrs	r3, r1
 800187e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2220      	movs	r2, #32
 80018b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	000186a0 	.word	0x000186a0
 80018d8:	001e847f 	.word	0x001e847f
 80018dc:	003d08ff 	.word	0x003d08ff
 80018e0:	431bde83 	.word	0x431bde83
 80018e4:	10624dd3 	.word	0x10624dd3

080018e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	4608      	mov	r0, r1
 80018f2:	4611      	mov	r1, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	4603      	mov	r3, r0
 80018f8:	817b      	strh	r3, [r7, #10]
 80018fa:	460b      	mov	r3, r1
 80018fc:	813b      	strh	r3, [r7, #8]
 80018fe:	4613      	mov	r3, r2
 8001900:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001902:	f7ff fb83 	bl	800100c <HAL_GetTick>
 8001906:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b20      	cmp	r3, #32
 8001912:	f040 80d9 	bne.w	8001ac8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2319      	movs	r3, #25
 800191c:	2201      	movs	r2, #1
 800191e:	496d      	ldr	r1, [pc, #436]	; (8001ad4 <HAL_I2C_Mem_Write+0x1ec>)
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fdad 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800192c:	2302      	movs	r3, #2
 800192e:	e0cc      	b.n	8001aca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_I2C_Mem_Write+0x56>
 800193a:	2302      	movs	r3, #2
 800193c:	e0c5      	b.n	8001aca <HAL_I2C_Mem_Write+0x1e2>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b01      	cmp	r3, #1
 8001952:	d007      	beq.n	8001964 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001972:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2221      	movs	r2, #33	; 0x21
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2240      	movs	r2, #64	; 0x40
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a3a      	ldr	r2, [r7, #32]
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001994:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <HAL_I2C_Mem_Write+0x1f0>)
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019a6:	88f8      	ldrh	r0, [r7, #6]
 80019a8:	893a      	ldrh	r2, [r7, #8]
 80019aa:	8979      	ldrh	r1, [r7, #10]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	4603      	mov	r3, r0
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 fbe4 	bl	8002184 <I2C_RequestMemoryWrite>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d052      	beq.n	8001a68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e081      	b.n	8001aca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fe2e 	bl	800262c <I2C_WaitOnTXEFlagUntilTimeout>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00d      	beq.n	80019f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d107      	bne.n	80019ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e06b      	b.n	8001aca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d11b      	bne.n	8001a68 <HAL_I2C_Mem_Write+0x180>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d017      	beq.n	8001a68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1aa      	bne.n	80019c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 fe1a 	bl	80026ae <I2C_WaitOnBTFFlagUntilTimeout>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00d      	beq.n	8001a9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d107      	bne.n	8001a98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e016      	b.n	8001aca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e000      	b.n	8001aca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ac8:	2302      	movs	r3, #2
  }
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	00100002 	.word	0x00100002
 8001ad8:	ffff0000 	.word	0xffff0000

08001adc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	817b      	strh	r3, [r7, #10]
 8001aee:	460b      	mov	r3, r1
 8001af0:	813b      	strh	r3, [r7, #8]
 8001af2:	4613      	mov	r3, r2
 8001af4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001af6:	f7ff fa89 	bl	800100c <HAL_GetTick>
 8001afa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	f040 8208 	bne.w	8001f1a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2319      	movs	r3, #25
 8001b10:	2201      	movs	r2, #1
 8001b12:	497b      	ldr	r1, [pc, #492]	; (8001d00 <HAL_I2C_Mem_Read+0x224>)
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fcb3 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001b20:	2302      	movs	r3, #2
 8001b22:	e1fb      	b.n	8001f1c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2C_Mem_Read+0x56>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e1f4      	b.n	8001f1c <HAL_I2C_Mem_Read+0x440>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d007      	beq.n	8001b58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2222      	movs	r2, #34	; 0x22
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2240      	movs	r2, #64	; 0x40
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4a5b      	ldr	r2, [pc, #364]	; (8001d04 <HAL_I2C_Mem_Read+0x228>)
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b9a:	88f8      	ldrh	r0, [r7, #6]
 8001b9c:	893a      	ldrh	r2, [r7, #8]
 8001b9e:	8979      	ldrh	r1, [r7, #10]
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	4603      	mov	r3, r0
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 fb80 	bl	80022b0 <I2C_RequestMemoryRead>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1b0      	b.n	8001f1c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d113      	bne.n	8001bea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	623b      	str	r3, [r7, #32]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	623b      	str	r3, [r7, #32]
 8001bd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	e184      	b.n	8001ef4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d11b      	bne.n	8001c2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e164      	b.n	8001ef4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d11b      	bne.n	8001c6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	e144      	b.n	8001ef4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c80:	e138      	b.n	8001ef4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	f200 80f1 	bhi.w	8001e6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d123      	bne.n	8001cdc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 fd49 	bl	8002730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e139      	b.n	8001f1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cda:	e10b      	b.n	8001ef4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d14e      	bne.n	8001d82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cea:	2200      	movs	r2, #0
 8001cec:	4906      	ldr	r1, [pc, #24]	; (8001d08 <HAL_I2C_Mem_Read+0x22c>)
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fbc6 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e10e      	b.n	8001f1c <HAL_I2C_Mem_Read+0x440>
 8001cfe:	bf00      	nop
 8001d00:	00100002 	.word	0x00100002
 8001d04:	ffff0000 	.word	0xffff0000
 8001d08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d80:	e0b8      	b.n	8001ef4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4966      	ldr	r1, [pc, #408]	; (8001f24 <HAL_I2C_Mem_Read+0x448>)
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fb77 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0bf      	b.n	8001f1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de4:	2200      	movs	r2, #0
 8001de6:	494f      	ldr	r1, [pc, #316]	; (8001f24 <HAL_I2C_Mem_Read+0x448>)
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 fb49 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e091      	b.n	8001f1c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e6c:	e042      	b.n	8001ef4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fc5c 	bl	8002730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e04c      	b.n	8001f1c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d118      	bne.n	8001ef4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f47f aec2 	bne.w	8001c82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001f1a:	2302      	movs	r3, #2
  }
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	00010004 	.word	0x00010004

08001f28 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	460b      	mov	r3, r1
 8001f36:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff f868 	bl	800100c <HAL_GetTick>
 8001f3c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	f040 8111 	bne.w	8002172 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2319      	movs	r3, #25
 8001f56:	2201      	movs	r2, #1
 8001f58:	4988      	ldr	r1, [pc, #544]	; (800217c <HAL_I2C_IsDeviceReady+0x254>)
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fa90 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
 8001f68:	e104      	b.n	8002174 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_I2C_IsDeviceReady+0x50>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e0fd      	b.n	8002174 <HAL_I2C_IsDeviceReady+0x24c>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d007      	beq.n	8001f9e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0201 	orr.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2224      	movs	r2, #36	; 0x24
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4a70      	ldr	r2, [pc, #448]	; (8002180 <HAL_I2C_IsDeviceReady+0x258>)
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 fa4e 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00d      	beq.n	8002006 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff8:	d103      	bne.n	8002002 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e0b6      	b.n	8002174 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002006:	897b      	ldrh	r3, [r7, #10]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002014:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe fff9 	bl	800100c <HAL_GetTick>
 800201a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b02      	cmp	r3, #2
 8002028:	bf0c      	ite	eq
 800202a:	2301      	moveq	r3, #1
 800202c:	2300      	movne	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800204a:	e025      	b.n	8002098 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800204c:	f7fe ffde 	bl	800100c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d302      	bcc.n	8002062 <HAL_I2C_IsDeviceReady+0x13a>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	22a0      	movs	r2, #160	; 0xa0
 8002066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b02      	cmp	r3, #2
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2ba0      	cmp	r3, #160	; 0xa0
 80020a2:	d005      	beq.n	80020b0 <HAL_I2C_IsDeviceReady+0x188>
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <HAL_I2C_IsDeviceReady+0x188>
 80020aa:	7dbb      	ldrb	r3, [r7, #22]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0cd      	beq.n	800204c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d129      	bne.n	800211a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2319      	movs	r3, #25
 80020f2:	2201      	movs	r2, #1
 80020f4:	4921      	ldr	r1, [pc, #132]	; (800217c <HAL_I2C_IsDeviceReady+0x254>)
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f9c2 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e036      	b.n	8002174 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e02c      	b.n	8002174 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002128:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002132:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2319      	movs	r3, #25
 800213a:	2201      	movs	r2, #1
 800213c:	490f      	ldr	r1, [pc, #60]	; (800217c <HAL_I2C_IsDeviceReady+0x254>)
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f99e 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e012      	b.n	8002174 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	3301      	adds	r3, #1
 8002152:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	f4ff af32 	bcc.w	8001fc2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
  }
}
 8002174:	4618      	mov	r0, r3
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	00100002 	.word	0x00100002
 8002180:	ffff0000 	.word	0xffff0000

08002184 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	461a      	mov	r2, r3
 8002192:	4603      	mov	r3, r0
 8002194:	817b      	strh	r3, [r7, #10]
 8002196:	460b      	mov	r3, r1
 8002198:	813b      	strh	r3, [r7, #8]
 800219a:	4613      	mov	r3, r2
 800219c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f960 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00d      	beq.n	80021e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d4:	d103      	bne.n	80021de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e05f      	b.n	80022a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021e2:	897b      	ldrh	r3, [r7, #10]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	6a3a      	ldr	r2, [r7, #32]
 80021f6:	492d      	ldr	r1, [pc, #180]	; (80022ac <I2C_RequestMemoryWrite+0x128>)
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f998 	bl	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e04c      	b.n	80022a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	6a39      	ldr	r1, [r7, #32]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 fa02 	bl	800262c <I2C_WaitOnTXEFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b04      	cmp	r3, #4
 8002234:	d107      	bne.n	8002246 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002244:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e02b      	b.n	80022a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002250:	893b      	ldrh	r3, [r7, #8]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	611a      	str	r2, [r3, #16]
 800225a:	e021      	b.n	80022a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800225c:	893b      	ldrh	r3, [r7, #8]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b29b      	uxth	r3, r3
 8002262:	b2da      	uxtb	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800226a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226c:	6a39      	ldr	r1, [r7, #32]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f9dc 	bl	800262c <I2C_WaitOnTXEFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b04      	cmp	r3, #4
 8002280:	d107      	bne.n	8002292 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002290:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e005      	b.n	80022a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002296:	893b      	ldrh	r3, [r7, #8]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	00010002 	.word	0x00010002

080022b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4603      	mov	r3, r0
 80022c0:	817b      	strh	r3, [r7, #10]
 80022c2:	460b      	mov	r3, r1
 80022c4:	813b      	strh	r3, [r7, #8]
 80022c6:	4613      	mov	r3, r2
 80022c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f8c2 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00d      	beq.n	800231e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002310:	d103      	bne.n	800231a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e0aa      	b.n	8002474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800231e:	897b      	ldrh	r3, [r7, #10]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800232c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	6a3a      	ldr	r2, [r7, #32]
 8002332:	4952      	ldr	r1, [pc, #328]	; (800247c <I2C_RequestMemoryRead+0x1cc>)
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f8fa 	bl	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e097      	b.n	8002474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	6a39      	ldr	r1, [r7, #32]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f964 	bl	800262c <I2C_WaitOnTXEFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00d      	beq.n	8002386 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	2b04      	cmp	r3, #4
 8002370:	d107      	bne.n	8002382 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002380:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e076      	b.n	8002474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d105      	bne.n	8002398 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800238c:	893b      	ldrh	r3, [r7, #8]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	611a      	str	r2, [r3, #16]
 8002396:	e021      	b.n	80023dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002398:	893b      	ldrh	r3, [r7, #8]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b29b      	uxth	r3, r3
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a8:	6a39      	ldr	r1, [r7, #32]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f93e 	bl	800262c <I2C_WaitOnTXEFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00d      	beq.n	80023d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d107      	bne.n	80023ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e050      	b.n	8002474 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023d2:	893b      	ldrh	r3, [r7, #8]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023de:	6a39      	ldr	r1, [r7, #32]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f923 	bl	800262c <I2C_WaitOnTXEFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d107      	bne.n	8002404 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002402:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e035      	b.n	8002474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002416:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	2200      	movs	r2, #0
 8002420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f82b 	bl	8002480 <I2C_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00d      	beq.n	800244c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243e:	d103      	bne.n	8002448 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e013      	b.n	8002474 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800244c:	897b      	ldrh	r3, [r7, #10]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	6a3a      	ldr	r2, [r7, #32]
 8002460:	4906      	ldr	r1, [pc, #24]	; (800247c <I2C_RequestMemoryRead+0x1cc>)
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f863 	bl	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	00010002 	.word	0x00010002

08002480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002490:	e025      	b.n	80024de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002498:	d021      	beq.n	80024de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249a:	f7fe fdb7 	bl	800100c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d302      	bcc.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d116      	bne.n	80024de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f043 0220 	orr.w	r2, r3, #32
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e023      	b.n	8002526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10d      	bne.n	8002504 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	e00c      	b.n	800251e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4013      	ands	r3, r2
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	429a      	cmp	r2, r3
 8002522:	d0b6      	beq.n	8002492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800253c:	e051      	b.n	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254c:	d123      	bne.n	8002596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f043 0204 	orr.w	r2, r3, #4
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e046      	b.n	8002624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800259c:	d021      	beq.n	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259e:	f7fe fd35 	bl	800100c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d116      	bne.n	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f043 0220 	orr.w	r2, r3, #32
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e020      	b.n	8002624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d10c      	bne.n	8002606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4013      	ands	r3, r2
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf14      	ite	ne
 80025fe:	2301      	movne	r3, #1
 8002600:	2300      	moveq	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	e00b      	b.n	800261e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	43da      	mvns	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4013      	ands	r3, r2
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d18d      	bne.n	800253e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002638:	e02d      	b.n	8002696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f8ce 	bl	80027dc <I2C_IsAcknowledgeFailed>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e02d      	b.n	80026a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002650:	d021      	beq.n	8002696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002652:	f7fe fcdb 	bl	800100c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	429a      	cmp	r2, r3
 8002660:	d302      	bcc.n	8002668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d116      	bne.n	8002696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e007      	b.n	80026a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d1ca      	bne.n	800263a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026ba:	e02d      	b.n	8002718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f88d 	bl	80027dc <I2C_IsAcknowledgeFailed>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e02d      	b.n	8002728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d2:	d021      	beq.n	8002718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d4:	f7fe fc9a 	bl	800100c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d302      	bcc.n	80026ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f043 0220 	orr.w	r2, r3, #32
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e007      	b.n	8002728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b04      	cmp	r3, #4
 8002724:	d1ca      	bne.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800273c:	e042      	b.n	80027c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b10      	cmp	r3, #16
 800274a:	d119      	bne.n	8002780 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0210 	mvn.w	r2, #16
 8002754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e029      	b.n	80027d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002780:	f7fe fc44 	bl	800100c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d302      	bcc.n	8002796 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e007      	b.n	80027d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d1b5      	bne.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f2:	d11b      	bne.n	800282c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e267      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d075      	beq.n	8002946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285a:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b04      	cmp	r3, #4
 8002864:	d00c      	beq.n	8002880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002866:	4b85      	ldr	r3, [pc, #532]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286e:	2b08      	cmp	r3, #8
 8002870:	d112      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287e:	d10b      	bne.n	8002898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002880:	4b7e      	ldr	r3, [pc, #504]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d05b      	beq.n	8002944 <HAL_RCC_OscConfig+0x108>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d157      	bne.n	8002944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e242      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x74>
 80028a2:	4b76      	ldr	r3, [pc, #472]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a75      	ldr	r2, [pc, #468]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x98>
 80028ba:	4b70      	ldr	r3, [pc, #448]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6f      	ldr	r2, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6d      	ldr	r3, [pc, #436]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6c      	ldr	r2, [pc, #432]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xb0>
 80028d4:	4b69      	ldr	r3, [pc, #420]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a68      	ldr	r2, [pc, #416]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b66      	ldr	r3, [pc, #408]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a65      	ldr	r2, [pc, #404]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fb8a 	bl	800100c <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe fb86 	bl	800100c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e207      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xc0>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fb76 	bl	800100c <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7fe fb72 	bl	800100c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1f3      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0xe8>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1c7      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4937      	ldr	r1, [pc, #220]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_RCC_OscConfig+0x244>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fb2b 	bl	800100c <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ba:	f7fe fb27 	bl	800100c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1a8      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4925      	ldr	r1, [pc, #148]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCC_OscConfig+0x244>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fb0a 	bl	800100c <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fc:	f7fe fb06 	bl	800100c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e187      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d036      	beq.n	8002a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d016      	beq.n	8002a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_RCC_OscConfig+0x248>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7fe faea 	bl	800100c <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fae6 	bl	800100c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e167      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_OscConfig+0x240>)
 8002a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x200>
 8002a5a:	e01b      	b.n	8002a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_RCC_OscConfig+0x248>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fad3 	bl	800100c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a68:	e00e      	b.n	8002a88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7fe facf 	bl	800100c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d907      	bls.n	8002a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e150      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	42470000 	.word	0x42470000
 8002a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	4b88      	ldr	r3, [pc, #544]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ea      	bne.n	8002a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8097 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa6:	4b81      	ldr	r3, [pc, #516]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	4b7d      	ldr	r3, [pc, #500]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a7c      	ldr	r2, [pc, #496]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b7a      	ldr	r3, [pc, #488]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b77      	ldr	r3, [pc, #476]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d118      	bne.n	8002b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ade:	4b74      	ldr	r3, [pc, #464]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a73      	ldr	r2, [pc, #460]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fa8f 	bl	800100c <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af2:	f7fe fa8b 	bl	800100c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e10c      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCC_OscConfig+0x474>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x2ea>
 8002b18:	4b64      	ldr	r3, [pc, #400]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a63      	ldr	r2, [pc, #396]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	e01c      	b.n	8002b60 <HAL_RCC_OscConfig+0x324>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x30c>
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a5e      	ldr	r2, [pc, #376]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	4b5c      	ldr	r3, [pc, #368]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a5b      	ldr	r2, [pc, #364]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0x324>
 8002b48:	4b58      	ldr	r3, [pc, #352]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	4a57      	ldr	r2, [pc, #348]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70
 8002b54:	4b55      	ldr	r3, [pc, #340]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a54      	ldr	r2, [pc, #336]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f023 0304 	bic.w	r3, r3, #4
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d015      	beq.n	8002b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fe fa50 	bl	800100c <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7fe fa4c 	bl	800100c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0cb      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b86:	4b49      	ldr	r3, [pc, #292]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ee      	beq.n	8002b70 <HAL_RCC_OscConfig+0x334>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b94:	f7fe fa3a 	bl	800100c <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fa36 	bl	800100c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e0b5      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb2:	4b3e      	ldr	r3, [pc, #248]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ee      	bne.n	8002b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	4a38      	ldr	r2, [pc, #224]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80a1 	beq.w	8002d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bda:	4b34      	ldr	r3, [pc, #208]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d05c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d141      	bne.n	8002c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fa0a 	bl	800100c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fa06 	bl	800100c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e087      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	019b      	lsls	r3, r3, #6
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	3b01      	subs	r3, #1
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	061b      	lsls	r3, r3, #24
 8002c3e:	491b      	ldr	r1, [pc, #108]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe f9df 	bl	800100c <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe f9db 	bl	800100c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e05c      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x416>
 8002c70:	e054      	b.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCC_OscConfig+0x478>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe f9c8 	bl	800100c <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe f9c4 	bl	800100c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e045      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_RCC_OscConfig+0x470>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x444>
 8002c9e:	e03d      	b.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e038      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x4ec>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d028      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d121      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d11a      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d111      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	3b01      	subs	r3, #1
 8002d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800

08002d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0cc      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d90c      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d044      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d003      	beq.n	8002dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e06f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e067      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4934      	ldr	r1, [pc, #208]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7fe f8f6 	bl	800100c <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fe f8f2 	bl	800100c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e04f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d20c      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f821 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	490a      	ldr	r1, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe f856 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08004db4 	.word	0x08004db4
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	20000004 	.word	0x20000004

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002efc:	b094      	sub	sp, #80	; 0x50
 8002efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	647b      	str	r3, [r7, #68]	; 0x44
 8002f04:	2300      	movs	r3, #0
 8002f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f08:	2300      	movs	r3, #0
 8002f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f10:	4b79      	ldr	r3, [pc, #484]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d00d      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x40>
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	f200 80e1 	bhi.w	80030e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x34>
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f2a:	e0db      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b73      	ldr	r3, [pc, #460]	; (80030fc <HAL_RCC_GetSysClockFreq+0x204>)
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f30:	e0db      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f32:	4b72      	ldr	r3, [pc, #456]	; (80030fc <HAL_RCC_GetSysClockFreq+0x204>)
 8002f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f36:	e0d8      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f38:	4b6f      	ldr	r3, [pc, #444]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f42:	4b6d      	ldr	r3, [pc, #436]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d063      	beq.n	8003016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b6a      	ldr	r3, [pc, #424]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	2200      	movs	r2, #0
 8002f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f60:	633b      	str	r3, [r7, #48]	; 0x30
 8002f62:	2300      	movs	r3, #0
 8002f64:	637b      	str	r3, [r7, #52]	; 0x34
 8002f66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	462b      	mov	r3, r5
 8002f6e:	f04f 0000 	mov.w	r0, #0
 8002f72:	f04f 0100 	mov.w	r1, #0
 8002f76:	0159      	lsls	r1, r3, #5
 8002f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7c:	0150      	lsls	r0, r2, #5
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4621      	mov	r1, r4
 8002f84:	1a51      	subs	r1, r2, r1
 8002f86:	6139      	str	r1, [r7, #16]
 8002f88:	4629      	mov	r1, r5
 8002f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	018b      	lsls	r3, r1, #6
 8002fa0:	4651      	mov	r1, sl
 8002fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fa6:	4651      	mov	r1, sl
 8002fa8:	018a      	lsls	r2, r1, #6
 8002faa:	4651      	mov	r1, sl
 8002fac:	ebb2 0801 	subs.w	r8, r2, r1
 8002fb0:	4659      	mov	r1, fp
 8002fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fca:	4690      	mov	r8, r2
 8002fcc:	4699      	mov	r9, r3
 8002fce:	4623      	mov	r3, r4
 8002fd0:	eb18 0303 	adds.w	r3, r8, r3
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	eb49 0303 	adc.w	r3, r9, r3
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fea:	4629      	mov	r1, r5
 8002fec:	028b      	lsls	r3, r1, #10
 8002fee:	4621      	mov	r1, r4
 8002ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	028a      	lsls	r2, r1, #10
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffe:	2200      	movs	r2, #0
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
 8003002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003008:	f7fd f932 	bl	8000270 <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4613      	mov	r3, r2
 8003012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003014:	e058      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003016:	4b38      	ldr	r3, [pc, #224]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	099b      	lsrs	r3, r3, #6
 800301c:	2200      	movs	r2, #0
 800301e:	4618      	mov	r0, r3
 8003020:	4611      	mov	r1, r2
 8003022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003026:	623b      	str	r3, [r7, #32]
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
 800302c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003030:	4642      	mov	r2, r8
 8003032:	464b      	mov	r3, r9
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f04f 0100 	mov.w	r1, #0
 800303c:	0159      	lsls	r1, r3, #5
 800303e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003042:	0150      	lsls	r0, r2, #5
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4641      	mov	r1, r8
 800304a:	ebb2 0a01 	subs.w	sl, r2, r1
 800304e:	4649      	mov	r1, r9
 8003050:	eb63 0b01 	sbc.w	fp, r3, r1
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003068:	ebb2 040a 	subs.w	r4, r2, sl
 800306c:	eb63 050b 	sbc.w	r5, r3, fp
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	00eb      	lsls	r3, r5, #3
 800307a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800307e:	00e2      	lsls	r2, r4, #3
 8003080:	4614      	mov	r4, r2
 8003082:	461d      	mov	r5, r3
 8003084:	4643      	mov	r3, r8
 8003086:	18e3      	adds	r3, r4, r3
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	464b      	mov	r3, r9
 800308c:	eb45 0303 	adc.w	r3, r5, r3
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800309e:	4629      	mov	r1, r5
 80030a0:	028b      	lsls	r3, r1, #10
 80030a2:	4621      	mov	r1, r4
 80030a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030a8:	4621      	mov	r1, r4
 80030aa:	028a      	lsls	r2, r1, #10
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b2:	2200      	movs	r2, #0
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	61fa      	str	r2, [r7, #28]
 80030b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030bc:	f7fd f8d8 	bl	8000270 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4613      	mov	r3, r2
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	3301      	adds	r3, #1
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030e2:	e002      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetSysClockFreq+0x204>)
 80030e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3750      	adds	r7, #80	; 0x50
 80030f0:	46bd      	mov	sp, r7
 80030f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	00f42400 	.word	0x00f42400

08003100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <HAL_RCC_GetHCLKFreq+0x14>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000000 	.word	0x20000000

08003118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800311c:	f7ff fff0 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	0a9b      	lsrs	r3, r3, #10
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	4903      	ldr	r1, [pc, #12]	; (800313c <HAL_RCC_GetPCLK1Freq+0x24>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	08004dc4 	.word	0x08004dc4

08003140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003144:	f7ff ffdc 	bl	8003100 <HAL_RCC_GetHCLKFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	0b5b      	lsrs	r3, r3, #13
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4903      	ldr	r1, [pc, #12]	; (8003164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40023800 	.word	0x40023800
 8003164:	08004dc4 	.word	0x08004dc4

08003168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e03f      	b.n	80031fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fd fd98 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	; 0x24
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f929 	bl	8003404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b08a      	sub	sp, #40	; 0x28
 8003206:	af02      	add	r7, sp, #8
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	4613      	mov	r3, r2
 8003210:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b20      	cmp	r3, #32
 8003220:	d17c      	bne.n	800331c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_UART_Transmit+0x2c>
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e075      	b.n	800331e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_UART_Transmit+0x3e>
 800323c:	2302      	movs	r3, #2
 800323e:	e06e      	b.n	800331e <HAL_UART_Transmit+0x11c>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2221      	movs	r2, #33	; 0x21
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003256:	f7fd fed9 	bl	800100c <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	88fa      	ldrh	r2, [r7, #6]
 8003260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	88fa      	ldrh	r2, [r7, #6]
 8003266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003270:	d108      	bne.n	8003284 <HAL_UART_Transmit+0x82>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d104      	bne.n	8003284 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	e003      	b.n	800328c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003294:	e02a      	b.n	80032ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2200      	movs	r2, #0
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f840 	bl	8003326 <UART_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e036      	b.n	800331e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10b      	bne.n	80032ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	3302      	adds	r3, #2
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	e007      	b.n	80032de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	3301      	adds	r3, #1
 80032dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1cf      	bne.n	8003296 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f810 	bl	8003326 <UART_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e006      	b.n	800331e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	e000      	b.n	800331e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800331c:	2302      	movs	r3, #2
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b090      	sub	sp, #64	; 0x40
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	4613      	mov	r3, r2
 8003334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003336:	e050      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800333e:	d04c      	beq.n	80033da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x30>
 8003346:	f7fd fe61 	bl	800100c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003352:	429a      	cmp	r2, r3
 8003354:	d241      	bcs.n	80033da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	330c      	adds	r3, #12
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800336c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	330c      	adds	r3, #12
 8003374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003376:	637a      	str	r2, [r7, #52]	; 0x34
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800337c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e5      	bne.n	8003356 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3314      	adds	r3, #20
 8003390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	613b      	str	r3, [r7, #16]
   return(result);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3314      	adds	r3, #20
 80033a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033aa:	623a      	str	r2, [r7, #32]
 80033ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	69f9      	ldr	r1, [r7, #28]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e5      	bne.n	800338a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e00f      	b.n	80033fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4013      	ands	r3, r2
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d09f      	beq.n	8003338 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3740      	adds	r7, #64	; 0x40
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003408:	b0c0      	sub	sp, #256	; 0x100
 800340a:	af00      	add	r7, sp, #0
 800340c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	68d9      	ldr	r1, [r3, #12]
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	ea40 0301 	orr.w	r3, r0, r1
 800342c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	431a      	orrs	r2, r3
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	431a      	orrs	r2, r3
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800345c:	f021 010c 	bic.w	r1, r1, #12
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800346a:	430b      	orrs	r3, r1
 800346c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	6999      	ldr	r1, [r3, #24]
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	ea40 0301 	orr.w	r3, r0, r1
 800348a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b8f      	ldr	r3, [pc, #572]	; (80036d0 <UART_SetConfig+0x2cc>)
 8003494:	429a      	cmp	r2, r3
 8003496:	d005      	beq.n	80034a4 <UART_SetConfig+0xa0>
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b8d      	ldr	r3, [pc, #564]	; (80036d4 <UART_SetConfig+0x2d0>)
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d104      	bne.n	80034ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034a4:	f7ff fe4c 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 80034a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034ac:	e003      	b.n	80034b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ae:	f7ff fe33 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 80034b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c0:	f040 810c 	bne.w	80036dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034d6:	4622      	mov	r2, r4
 80034d8:	462b      	mov	r3, r5
 80034da:	1891      	adds	r1, r2, r2
 80034dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80034de:	415b      	adcs	r3, r3
 80034e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034e6:	4621      	mov	r1, r4
 80034e8:	eb12 0801 	adds.w	r8, r2, r1
 80034ec:	4629      	mov	r1, r5
 80034ee:	eb43 0901 	adc.w	r9, r3, r1
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003506:	4690      	mov	r8, r2
 8003508:	4699      	mov	r9, r3
 800350a:	4623      	mov	r3, r4
 800350c:	eb18 0303 	adds.w	r3, r8, r3
 8003510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003514:	462b      	mov	r3, r5
 8003516:	eb49 0303 	adc.w	r3, r9, r3
 800351a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800352a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800352e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003532:	460b      	mov	r3, r1
 8003534:	18db      	adds	r3, r3, r3
 8003536:	653b      	str	r3, [r7, #80]	; 0x50
 8003538:	4613      	mov	r3, r2
 800353a:	eb42 0303 	adc.w	r3, r2, r3
 800353e:	657b      	str	r3, [r7, #84]	; 0x54
 8003540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003548:	f7fc fe92 	bl	8000270 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <UART_SetConfig+0x2d4>)
 8003552:	fba3 2302 	umull	r2, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	011c      	lsls	r4, r3, #4
 800355a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800355e:	2200      	movs	r2, #0
 8003560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003564:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800356c:	4642      	mov	r2, r8
 800356e:	464b      	mov	r3, r9
 8003570:	1891      	adds	r1, r2, r2
 8003572:	64b9      	str	r1, [r7, #72]	; 0x48
 8003574:	415b      	adcs	r3, r3
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800357c:	4641      	mov	r1, r8
 800357e:	eb12 0a01 	adds.w	sl, r2, r1
 8003582:	4649      	mov	r1, r9
 8003584:	eb43 0b01 	adc.w	fp, r3, r1
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800359c:	4692      	mov	sl, r2
 800359e:	469b      	mov	fp, r3
 80035a0:	4643      	mov	r3, r8
 80035a2:	eb1a 0303 	adds.w	r3, sl, r3
 80035a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035aa:	464b      	mov	r3, r9
 80035ac:	eb4b 0303 	adc.w	r3, fp, r3
 80035b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035c8:	460b      	mov	r3, r1
 80035ca:	18db      	adds	r3, r3, r3
 80035cc:	643b      	str	r3, [r7, #64]	; 0x40
 80035ce:	4613      	mov	r3, r2
 80035d0:	eb42 0303 	adc.w	r3, r2, r3
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44
 80035d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035de:	f7fc fe47 	bl	8000270 <__aeabi_uldivmod>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <UART_SetConfig+0x2d4>)
 80035ea:	fba3 2301 	umull	r2, r3, r3, r1
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2264      	movs	r2, #100	; 0x64
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	1acb      	subs	r3, r1, r3
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035fe:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <UART_SetConfig+0x2d4>)
 8003600:	fba3 2302 	umull	r2, r3, r3, r2
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800360c:	441c      	add	r4, r3
 800360e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003612:	2200      	movs	r2, #0
 8003614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003618:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800361c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003620:	4642      	mov	r2, r8
 8003622:	464b      	mov	r3, r9
 8003624:	1891      	adds	r1, r2, r2
 8003626:	63b9      	str	r1, [r7, #56]	; 0x38
 8003628:	415b      	adcs	r3, r3
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800362c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003630:	4641      	mov	r1, r8
 8003632:	1851      	adds	r1, r2, r1
 8003634:	6339      	str	r1, [r7, #48]	; 0x30
 8003636:	4649      	mov	r1, r9
 8003638:	414b      	adcs	r3, r1
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003648:	4659      	mov	r1, fp
 800364a:	00cb      	lsls	r3, r1, #3
 800364c:	4651      	mov	r1, sl
 800364e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003652:	4651      	mov	r1, sl
 8003654:	00ca      	lsls	r2, r1, #3
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	4603      	mov	r3, r0
 800365c:	4642      	mov	r2, r8
 800365e:	189b      	adds	r3, r3, r2
 8003660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003664:	464b      	mov	r3, r9
 8003666:	460a      	mov	r2, r1
 8003668:	eb42 0303 	adc.w	r3, r2, r3
 800366c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800367c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003684:	460b      	mov	r3, r1
 8003686:	18db      	adds	r3, r3, r3
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
 800368a:	4613      	mov	r3, r2
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800369a:	f7fc fde9 	bl	8000270 <__aeabi_uldivmod>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <UART_SetConfig+0x2d4>)
 80036a4:	fba3 1302 	umull	r1, r3, r3, r2
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	2164      	movs	r1, #100	; 0x64
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	3332      	adds	r3, #50	; 0x32
 80036b6:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <UART_SetConfig+0x2d4>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	f003 0207 	and.w	r2, r3, #7
 80036c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4422      	add	r2, r4
 80036ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036cc:	e106      	b.n	80038dc <UART_SetConfig+0x4d8>
 80036ce:	bf00      	nop
 80036d0:	40011000 	.word	0x40011000
 80036d4:	40011400 	.word	0x40011400
 80036d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036ee:	4642      	mov	r2, r8
 80036f0:	464b      	mov	r3, r9
 80036f2:	1891      	adds	r1, r2, r2
 80036f4:	6239      	str	r1, [r7, #32]
 80036f6:	415b      	adcs	r3, r3
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
 80036fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036fe:	4641      	mov	r1, r8
 8003700:	1854      	adds	r4, r2, r1
 8003702:	4649      	mov	r1, r9
 8003704:	eb43 0501 	adc.w	r5, r3, r1
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	00eb      	lsls	r3, r5, #3
 8003712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003716:	00e2      	lsls	r2, r4, #3
 8003718:	4614      	mov	r4, r2
 800371a:	461d      	mov	r5, r3
 800371c:	4643      	mov	r3, r8
 800371e:	18e3      	adds	r3, r4, r3
 8003720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003724:	464b      	mov	r3, r9
 8003726:	eb45 0303 	adc.w	r3, r5, r3
 800372a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800373a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800374a:	4629      	mov	r1, r5
 800374c:	008b      	lsls	r3, r1, #2
 800374e:	4621      	mov	r1, r4
 8003750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003754:	4621      	mov	r1, r4
 8003756:	008a      	lsls	r2, r1, #2
 8003758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800375c:	f7fc fd88 	bl	8000270 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4b60      	ldr	r3, [pc, #384]	; (80038e8 <UART_SetConfig+0x4e4>)
 8003766:	fba3 2302 	umull	r2, r3, r3, r2
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	011c      	lsls	r4, r3, #4
 800376e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003772:	2200      	movs	r2, #0
 8003774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003778:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800377c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003780:	4642      	mov	r2, r8
 8003782:	464b      	mov	r3, r9
 8003784:	1891      	adds	r1, r2, r2
 8003786:	61b9      	str	r1, [r7, #24]
 8003788:	415b      	adcs	r3, r3
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003790:	4641      	mov	r1, r8
 8003792:	1851      	adds	r1, r2, r1
 8003794:	6139      	str	r1, [r7, #16]
 8003796:	4649      	mov	r1, r9
 8003798:	414b      	adcs	r3, r1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037a8:	4659      	mov	r1, fp
 80037aa:	00cb      	lsls	r3, r1, #3
 80037ac:	4651      	mov	r1, sl
 80037ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b2:	4651      	mov	r1, sl
 80037b4:	00ca      	lsls	r2, r1, #3
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	4603      	mov	r3, r0
 80037bc:	4642      	mov	r2, r8
 80037be:	189b      	adds	r3, r3, r2
 80037c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037c4:	464b      	mov	r3, r9
 80037c6:	460a      	mov	r2, r1
 80037c8:	eb42 0303 	adc.w	r3, r2, r3
 80037cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037e8:	4649      	mov	r1, r9
 80037ea:	008b      	lsls	r3, r1, #2
 80037ec:	4641      	mov	r1, r8
 80037ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f2:	4641      	mov	r1, r8
 80037f4:	008a      	lsls	r2, r1, #2
 80037f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037fa:	f7fc fd39 	bl	8000270 <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4611      	mov	r1, r2
 8003804:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <UART_SetConfig+0x4e4>)
 8003806:	fba3 2301 	umull	r2, r3, r3, r1
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2264      	movs	r2, #100	; 0x64
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	1acb      	subs	r3, r1, r3
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	3332      	adds	r3, #50	; 0x32
 8003818:	4a33      	ldr	r2, [pc, #204]	; (80038e8 <UART_SetConfig+0x4e4>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003824:	441c      	add	r4, r3
 8003826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382a:	2200      	movs	r2, #0
 800382c:	673b      	str	r3, [r7, #112]	; 0x70
 800382e:	677a      	str	r2, [r7, #116]	; 0x74
 8003830:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003834:	4642      	mov	r2, r8
 8003836:	464b      	mov	r3, r9
 8003838:	1891      	adds	r1, r2, r2
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	415b      	adcs	r3, r3
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003844:	4641      	mov	r1, r8
 8003846:	1851      	adds	r1, r2, r1
 8003848:	6039      	str	r1, [r7, #0]
 800384a:	4649      	mov	r1, r9
 800384c:	414b      	adcs	r3, r1
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800385c:	4659      	mov	r1, fp
 800385e:	00cb      	lsls	r3, r1, #3
 8003860:	4651      	mov	r1, sl
 8003862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003866:	4651      	mov	r1, sl
 8003868:	00ca      	lsls	r2, r1, #3
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	4603      	mov	r3, r0
 8003870:	4642      	mov	r2, r8
 8003872:	189b      	adds	r3, r3, r2
 8003874:	66bb      	str	r3, [r7, #104]	; 0x68
 8003876:	464b      	mov	r3, r9
 8003878:	460a      	mov	r2, r1
 800387a:	eb42 0303 	adc.w	r3, r2, r3
 800387e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	663b      	str	r3, [r7, #96]	; 0x60
 800388a:	667a      	str	r2, [r7, #100]	; 0x64
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003898:	4649      	mov	r1, r9
 800389a:	008b      	lsls	r3, r1, #2
 800389c:	4641      	mov	r1, r8
 800389e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a2:	4641      	mov	r1, r8
 80038a4:	008a      	lsls	r2, r1, #2
 80038a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038aa:	f7fc fce1 	bl	8000270 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <UART_SetConfig+0x4e4>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2164      	movs	r1, #100	; 0x64
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	3332      	adds	r3, #50	; 0x32
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <UART_SetConfig+0x4e4>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 020f 	and.w	r2, r3, #15
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4422      	add	r2, r4
 80038da:	609a      	str	r2, [r3, #8]
}
 80038dc:	bf00      	nop
 80038de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038e2:	46bd      	mov	sp, r7
 80038e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e8:	51eb851f 	.word	0x51eb851f

080038ec <m24cxx_init>:

#include "m24cxx.h"

/* Public functions */

M24CXX_StatusTypeDef m24cxx_init(M24CXX_HandleTypeDef *m24cxx, I2C_HandleTypeDef *i2c, uint8_t i2c_address) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	71fb      	strb	r3, [r7, #7]

    M24CXXDBG("M24CXX Init type = %s size = %d ", M24CXX_TYPE, M24CXX_SIZE);
 80038fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038fe:	490d      	ldr	r1, [pc, #52]	; (8003934 <m24cxx_init+0x48>)
 8003900:	480d      	ldr	r0, [pc, #52]	; (8003938 <m24cxx_init+0x4c>)
 8003902:	f000 fa4d 	bl	8003da0 <iprintf>
 8003906:	200a      	movs	r0, #10
 8003908:	f000 fa5c 	bl	8003dc4 <putchar>

    m24cxx->i2c = i2c;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	601a      	str	r2, [r3, #0]
    m24cxx->i2c_address = i2c_address;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	79fa      	ldrb	r2, [r7, #7]
 8003916:	711a      	strb	r2, [r3, #4]

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
#endif

    if (m24cxx_isconnected(m24cxx) != M24CXX_Ok)
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f80f 	bl	800393c <m24cxx_isconnected>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <m24cxx_init+0x3c>
        return M24CXX_Err;
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <m24cxx_init+0x3e>

    return M24CXX_Ok;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	08004b9c 	.word	0x08004b9c
 8003938:	08004ba4 	.word	0x08004ba4

0800393c <m24cxx_isconnected>:

M24CXX_StatusTypeDef m24cxx_isconnected(M24CXX_HandleTypeDef *m24cxx) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

    if (HAL_I2C_IsDeviceReady(m24cxx->i2c, m24cxx->i2c_address << 1, 2, HAL_MAX_DELAY) != HAL_OK) {
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	791b      	ldrb	r3, [r3, #4]
 800394c:	b29b      	uxth	r3, r3
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	b299      	uxth	r1, r3
 8003952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003956:	2202      	movs	r2, #2
 8003958:	f7fe fae6 	bl	8001f28 <HAL_I2C_IsDeviceReady>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <m24cxx_isconnected+0x2a>
        return M24CXX_Err;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <m24cxx_isconnected+0x2c>
    }

    return M24CXX_Ok;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <m24cxx_wait>:

M24CXX_StatusTypeDef m24cxx_wait(M24CXX_HandleTypeDef *m24cxx) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();
 8003978:	f7fd fb48 	bl	800100c <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]
    while (m24cxx_isconnected(m24cxx) != M24CXX_Ok) {
 800397e:	e008      	b.n	8003992 <m24cxx_wait+0x22>
        if (HAL_GetTick() - start_time >= M24CXX_WRITE_TIMEOUT)
 8003980:	f7fd fb44 	bl	800100c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b63      	cmp	r3, #99	; 0x63
 800398c:	d901      	bls.n	8003992 <m24cxx_wait+0x22>
            return M24CXX_Err;
 800398e:	2301      	movs	r3, #1
 8003990:	e006      	b.n	80039a0 <m24cxx_wait+0x30>
    while (m24cxx_isconnected(m24cxx) != M24CXX_Ok) {
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ffd2 	bl	800393c <m24cxx_isconnected>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <m24cxx_wait+0x10>
    }
    return M24CXX_Ok;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <m24cxx_read>:

M24CXX_StatusTypeDef m24cxx_read(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 80039a8:	b5b0      	push	{r4, r5, r7, lr}
 80039aa:	b090      	sub	sp, #64	; 0x40
 80039ac:	af04      	add	r7, sp, #16
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX read - address = 0x%04lx len = 0x%04lx", address, len);
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	4843      	ldr	r0, [pc, #268]	; (8003ac8 <m24cxx_read+0x120>)
 80039bc:	f000 f9f0 	bl	8003da0 <iprintf>
 80039c0:	200a      	movs	r0, #10
 80039c2:	f000 f9ff 	bl	8003dc4 <putchar>

    uint32_t page_start = address / M24CXX_READ_PAGE_SIZE;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t page_end = ((address + len - 1) / M24CXX_READ_PAGE_SIZE);
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	4413      	add	r3, r2
 80039d2:	3b01      	subs	r3, #1
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	623b      	str	r3, [r7, #32]
    uint32_t data_offset = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c

    M24CXXDBG("Reading %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);
 80039dc:	6a3a      	ldr	r2, [r7, #32]
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	1c59      	adds	r1, r3, #1
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	4838      	ldr	r0, [pc, #224]	; (8003acc <m24cxx_read+0x124>)
 80039ea:	f000 f9d9 	bl	8003da0 <iprintf>
 80039ee:	200a      	movs	r0, #10
 80039f0:	f000 f9e8 	bl	8003dc4 <putchar>

    for (uint32_t page = page_start; page <= page_end; ++page) {
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f8:	e05d      	b.n	8003ab6 <m24cxx_read+0x10e>

        uint32_t i2c_address, start_address, read_len;

        start_address = page == page_start ? address : page * M24CXX_READ_PAGE_SIZE;
 80039fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d002      	beq.n	8003a08 <m24cxx_read+0x60>
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	e000      	b.n	8003a0a <m24cxx_read+0x62>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	61fb      	str	r3, [r7, #28]
        read_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_READ_PAGE_SIZE) - start_address : M24CXX_READ_PAGE_SIZE);
 8003a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d103      	bne.n	8003a1c <m24cxx_read+0x74>
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	e00b      	b.n	8003a34 <m24cxx_read+0x8c>
 8003a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d105      	bne.n	8003a30 <m24cxx_read+0x88>
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	3301      	adds	r3, #1
 8003a28:	021a      	lsls	r2, r3, #8
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	e001      	b.n	8003a34 <m24cxx_read+0x8c>
 8003a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a34:	61bb      	str	r3, [r7, #24]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	791b      	ldrb	r3, [r3, #4]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	0c1b      	lsrs	r3, r3, #16
 8003a40:	4413      	add	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

        M24CXXDBG("Reading page %lu, i2c address = 0x%02lx start = 0x%04lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address & M24CXX_ADDRESS_MASK, read_len, data_offset);
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a56:	481e      	ldr	r0, [pc, #120]	; (8003ad0 <m24cxx_read+0x128>)
 8003a58:	f000 f9a2 	bl	8003da0 <iprintf>
 8003a5c:	200a      	movs	r0, #10
 8003a5e:	f000 f9b1 	bl	8003dc4 <putchar>

        HAL_StatusTypeDef result = HAL_I2C_Mem_Read(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, read_len, HAL_MAX_DELAY);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	b299      	uxth	r1, r3
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	b29c      	uxth	r4, r3
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	4413      	add	r3, r2
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003a80:	9502      	str	r5, [sp, #8]
 8003a82:	9201      	str	r2, [sp, #4]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	2310      	movs	r3, #16
 8003a88:	4622      	mov	r2, r4
 8003a8a:	f7fe f827 	bl	8001adc <HAL_I2C_Mem_Read>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	74fb      	strb	r3, [r7, #19]

        if (result != HAL_OK) {
 8003a92:	7cfb      	ldrb	r3, [r7, #19]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <m24cxx_read+0x100>
            M24CXXDBG("Failed to read memory");
 8003a98:	480e      	ldr	r0, [pc, #56]	; (8003ad4 <m24cxx_read+0x12c>)
 8003a9a:	f000 f981 	bl	8003da0 <iprintf>
 8003a9e:	200a      	movs	r0, #10
 8003aa0:	f000 f990 	bl	8003dc4 <putchar>
            return M24CXX_Err;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e00b      	b.n	8003ac0 <m24cxx_read+0x118>
        }

        data_offset += read_len;
 8003aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4413      	add	r3, r2
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t page = page_start; page <= page_end; ++page) {
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d99d      	bls.n	80039fa <m24cxx_read+0x52>

    }

    return M24CXX_Ok;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3730      	adds	r7, #48	; 0x30
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ac8:	08004bc8 	.word	0x08004bc8
 8003acc:	08004bf8 	.word	0x08004bf8
 8003ad0:	08004c1c 	.word	0x08004c1c
 8003ad4:	08004c74 	.word	0x08004c74

08003ad8 <m24cxx_write>:

M24CXX_StatusTypeDef m24cxx_write(M24CXX_HandleTypeDef *m24cxx, uint32_t address, uint8_t *data, uint32_t len) {
 8003ad8:	b5b0      	push	{r4, r5, r7, lr}
 8003ada:	b090      	sub	sp, #64	; 0x40
 8003adc:	af04      	add	r7, sp, #16
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]

    M24CXXDBG("M24CXX write - address = 0x%04lx len = 0x%04lx", address, len);
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	4850      	ldr	r0, [pc, #320]	; (8003c2c <m24cxx_write+0x154>)
 8003aec:	f000 f958 	bl	8003da0 <iprintf>
 8003af0:	200a      	movs	r0, #10
 8003af2:	f000 f967 	bl	8003dc4 <putchar>

    uint32_t page_start = address / M24CXX_WRITE_PAGE_SIZE;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t page_end = ((address + len - 1) / M24CXX_WRITE_PAGE_SIZE);
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	4413      	add	r3, r2
 8003b02:	3b01      	subs	r3, #1
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	623b      	str	r3, [r7, #32]
    uint32_t data_offset = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

    M24CXXDBG("Writing %lu pages from %lu to %lu", 1 + page_end - page_start, page_start, page_end);
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	1c59      	adds	r1, r3, #1
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	4845      	ldr	r0, [pc, #276]	; (8003c30 <m24cxx_write+0x158>)
 8003b1a:	f000 f941 	bl	8003da0 <iprintf>
 8003b1e:	200a      	movs	r0, #10
 8003b20:	f000 f950 	bl	8003dc4 <putchar>

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_RESET);
#endif

    for (uint8_t page = page_start; page <= page_end; ++page) {
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b2a:	e074      	b.n	8003c16 <m24cxx_write+0x13e>

        uint32_t i2c_address, start_address, write_len;

        start_address = page == page_start ? address : page * M24CXX_WRITE_PAGE_SIZE;
 8003b2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d003      	beq.n	8003b3e <m24cxx_write+0x66>
 8003b36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	e000      	b.n	8003b40 <m24cxx_write+0x68>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	61fb      	str	r3, [r7, #28]
        write_len = page == page_end ? len - data_offset : (page == page_start ? ((page + 1) * M24CXX_WRITE_PAGE_SIZE) - start_address : M24CXX_WRITE_PAGE_SIZE);
 8003b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b46:	6a3a      	ldr	r2, [r7, #32]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d103      	bne.n	8003b54 <m24cxx_write+0x7c>
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	e00e      	b.n	8003b72 <m24cxx_write+0x9a>
 8003b54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d107      	bne.n	8003b6e <m24cxx_write+0x96>
 8003b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b62:	3301      	adds	r3, #1
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	461a      	mov	r2, r3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	e001      	b.n	8003b72 <m24cxx_write+0x9a>
 8003b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b72:	61bb      	str	r3, [r7, #24]
        i2c_address = m24cxx->i2c_address + (start_address >> M24CXX_ADDRESS_BITS);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	791b      	ldrb	r3, [r3, #4]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	4413      	add	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

        M24CXXDBG("Writing page %d, i2c address = 0x%02lx start = 0x%04lx len = 0x%04lx offset = 0x%04lx", page, i2c_address, start_address & M24CXX_ADDRESS_MASK, write_len, data_offset);
 8003b82:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4827      	ldr	r0, [pc, #156]	; (8003c34 <m24cxx_write+0x15c>)
 8003b98:	f000 f902 	bl	8003da0 <iprintf>
 8003b9c:	200a      	movs	r0, #10
 8003b9e:	f000 f911 	bl	8003dc4 <putchar>

        HAL_StatusTypeDef result = HAL_I2C_Mem_Write(m24cxx->i2c, i2c_address << 1, start_address & M24CXX_ADDRESS_MASK, M24CXX_ADDRESS_SIZE, data + data_offset, write_len, HAL_MAX_DELAY);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	b299      	uxth	r1, r3
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	b29c      	uxth	r4, r3
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	4413      	add	r3, r2
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003bc0:	9502      	str	r5, [sp, #8]
 8003bc2:	9201      	str	r2, [sp, #4]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	4622      	mov	r2, r4
 8003bca:	f7fd fe8d 	bl	80018e8 <HAL_I2C_Mem_Write>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	74fb      	strb	r3, [r7, #19]

        if (result != HAL_OK) {
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <m24cxx_write+0x110>
            M24CXXDBG("Failed to write memory");
 8003bd8:	4817      	ldr	r0, [pc, #92]	; (8003c38 <m24cxx_write+0x160>)
 8003bda:	f000 f8e1 	bl	8003da0 <iprintf>
 8003bde:	200a      	movs	r0, #10
 8003be0:	f000 f8f0 	bl	8003dc4 <putchar>
            return M24CXX_Err;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e01c      	b.n	8003c22 <m24cxx_write+0x14a>
        }

        data_offset += write_len;
 8003be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4413      	add	r3, r2
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (m24cxx_wait(m24cxx) != M24CXX_Ok) {
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff febd 	bl	8003970 <m24cxx_wait>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <m24cxx_write+0x134>
            M24CXXDBG("M24Cxx Device never got ready");
 8003bfc:	480f      	ldr	r0, [pc, #60]	; (8003c3c <m24cxx_write+0x164>)
 8003bfe:	f000 f8cf 	bl	8003da0 <iprintf>
 8003c02:	200a      	movs	r0, #10
 8003c04:	f000 f8de 	bl	8003dc4 <putchar>
            return M24CXX_Err;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e00a      	b.n	8003c22 <m24cxx_write+0x14a>
    for (uint8_t page = page_start; page <= page_end; ++page) {
 8003c0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c10:	3301      	adds	r3, #1
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c1a:	6a3a      	ldr	r2, [r7, #32]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d285      	bcs.n	8003b2c <m24cxx_write+0x54>

#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
#endif

    return M24CXX_Ok;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3730      	adds	r7, #48	; 0x30
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bdb0      	pop	{r4, r5, r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	08004c8c 	.word	0x08004c8c
 8003c30:	08004cbc 	.word	0x08004cbc
 8003c34:	08004ce0 	.word	0x08004ce0
 8003c38:	08004d38 	.word	0x08004d38
 8003c3c:	08004d50 	.word	0x08004d50

08003c40 <std>:
 8003c40:	2300      	movs	r3, #0
 8003c42:	b510      	push	{r4, lr}
 8003c44:	4604      	mov	r4, r0
 8003c46:	e9c0 3300 	strd	r3, r3, [r0]
 8003c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c4e:	6083      	str	r3, [r0, #8]
 8003c50:	8181      	strh	r1, [r0, #12]
 8003c52:	6643      	str	r3, [r0, #100]	; 0x64
 8003c54:	81c2      	strh	r2, [r0, #14]
 8003c56:	6183      	str	r3, [r0, #24]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	2208      	movs	r2, #8
 8003c5c:	305c      	adds	r0, #92	; 0x5c
 8003c5e:	f000 f8fc 	bl	8003e5a <memset>
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <std+0x38>)
 8003c64:	6263      	str	r3, [r4, #36]	; 0x24
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <std+0x3c>)
 8003c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <std+0x40>)
 8003c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <std+0x44>)
 8003c70:	6224      	str	r4, [r4, #32]
 8003c72:	6323      	str	r3, [r4, #48]	; 0x30
 8003c74:	bd10      	pop	{r4, pc}
 8003c76:	bf00      	nop
 8003c78:	08003dd5 	.word	0x08003dd5
 8003c7c:	08003df7 	.word	0x08003df7
 8003c80:	08003e2f 	.word	0x08003e2f
 8003c84:	08003e53 	.word	0x08003e53

08003c88 <stdio_exit_handler>:
 8003c88:	4a02      	ldr	r2, [pc, #8]	; (8003c94 <stdio_exit_handler+0xc>)
 8003c8a:	4903      	ldr	r1, [pc, #12]	; (8003c98 <stdio_exit_handler+0x10>)
 8003c8c:	4803      	ldr	r0, [pc, #12]	; (8003c9c <stdio_exit_handler+0x14>)
 8003c8e:	f000 b869 	b.w	8003d64 <_fwalk_sglue>
 8003c92:	bf00      	nop
 8003c94:	2000000c 	.word	0x2000000c
 8003c98:	080047f5 	.word	0x080047f5
 8003c9c:	20000018 	.word	0x20000018

08003ca0 <cleanup_stdio>:
 8003ca0:	6841      	ldr	r1, [r0, #4]
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <cleanup_stdio+0x34>)
 8003ca4:	4299      	cmp	r1, r3
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	4604      	mov	r4, r0
 8003caa:	d001      	beq.n	8003cb0 <cleanup_stdio+0x10>
 8003cac:	f000 fda2 	bl	80047f4 <_fflush_r>
 8003cb0:	68a1      	ldr	r1, [r4, #8]
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <cleanup_stdio+0x38>)
 8003cb4:	4299      	cmp	r1, r3
 8003cb6:	d002      	beq.n	8003cbe <cleanup_stdio+0x1e>
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f000 fd9b 	bl	80047f4 <_fflush_r>
 8003cbe:	68e1      	ldr	r1, [r4, #12]
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <cleanup_stdio+0x3c>)
 8003cc2:	4299      	cmp	r1, r3
 8003cc4:	d004      	beq.n	8003cd0 <cleanup_stdio+0x30>
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ccc:	f000 bd92 	b.w	80047f4 <_fflush_r>
 8003cd0:	bd10      	pop	{r4, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000530 	.word	0x20000530
 8003cd8:	20000598 	.word	0x20000598
 8003cdc:	20000600 	.word	0x20000600

08003ce0 <global_stdio_init.part.0>:
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <global_stdio_init.part.0+0x30>)
 8003ce4:	4c0b      	ldr	r4, [pc, #44]	; (8003d14 <global_stdio_init.part.0+0x34>)
 8003ce6:	4a0c      	ldr	r2, [pc, #48]	; (8003d18 <global_stdio_init.part.0+0x38>)
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	4620      	mov	r0, r4
 8003cec:	2200      	movs	r2, #0
 8003cee:	2104      	movs	r1, #4
 8003cf0:	f7ff ffa6 	bl	8003c40 <std>
 8003cf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	2109      	movs	r1, #9
 8003cfc:	f7ff ffa0 	bl	8003c40 <std>
 8003d00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d04:	2202      	movs	r2, #2
 8003d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d0a:	2112      	movs	r1, #18
 8003d0c:	f7ff bf98 	b.w	8003c40 <std>
 8003d10:	20000668 	.word	0x20000668
 8003d14:	20000530 	.word	0x20000530
 8003d18:	08003c89 	.word	0x08003c89

08003d1c <__sfp_lock_acquire>:
 8003d1c:	4801      	ldr	r0, [pc, #4]	; (8003d24 <__sfp_lock_acquire+0x8>)
 8003d1e:	f000 b915 	b.w	8003f4c <__retarget_lock_acquire_recursive>
 8003d22:	bf00      	nop
 8003d24:	20000671 	.word	0x20000671

08003d28 <__sfp_lock_release>:
 8003d28:	4801      	ldr	r0, [pc, #4]	; (8003d30 <__sfp_lock_release+0x8>)
 8003d2a:	f000 b910 	b.w	8003f4e <__retarget_lock_release_recursive>
 8003d2e:	bf00      	nop
 8003d30:	20000671 	.word	0x20000671

08003d34 <__sinit>:
 8003d34:	b510      	push	{r4, lr}
 8003d36:	4604      	mov	r4, r0
 8003d38:	f7ff fff0 	bl	8003d1c <__sfp_lock_acquire>
 8003d3c:	6a23      	ldr	r3, [r4, #32]
 8003d3e:	b11b      	cbz	r3, 8003d48 <__sinit+0x14>
 8003d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d44:	f7ff bff0 	b.w	8003d28 <__sfp_lock_release>
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <__sinit+0x28>)
 8003d4a:	6223      	str	r3, [r4, #32]
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <__sinit+0x2c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f5      	bne.n	8003d40 <__sinit+0xc>
 8003d54:	f7ff ffc4 	bl	8003ce0 <global_stdio_init.part.0>
 8003d58:	e7f2      	b.n	8003d40 <__sinit+0xc>
 8003d5a:	bf00      	nop
 8003d5c:	08003ca1 	.word	0x08003ca1
 8003d60:	20000668 	.word	0x20000668

08003d64 <_fwalk_sglue>:
 8003d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d68:	4607      	mov	r7, r0
 8003d6a:	4688      	mov	r8, r1
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	2600      	movs	r6, #0
 8003d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d74:	f1b9 0901 	subs.w	r9, r9, #1
 8003d78:	d505      	bpl.n	8003d86 <_fwalk_sglue+0x22>
 8003d7a:	6824      	ldr	r4, [r4, #0]
 8003d7c:	2c00      	cmp	r4, #0
 8003d7e:	d1f7      	bne.n	8003d70 <_fwalk_sglue+0xc>
 8003d80:	4630      	mov	r0, r6
 8003d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d86:	89ab      	ldrh	r3, [r5, #12]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d907      	bls.n	8003d9c <_fwalk_sglue+0x38>
 8003d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d90:	3301      	adds	r3, #1
 8003d92:	d003      	beq.n	8003d9c <_fwalk_sglue+0x38>
 8003d94:	4629      	mov	r1, r5
 8003d96:	4638      	mov	r0, r7
 8003d98:	47c0      	blx	r8
 8003d9a:	4306      	orrs	r6, r0
 8003d9c:	3568      	adds	r5, #104	; 0x68
 8003d9e:	e7e9      	b.n	8003d74 <_fwalk_sglue+0x10>

08003da0 <iprintf>:
 8003da0:	b40f      	push	{r0, r1, r2, r3}
 8003da2:	b507      	push	{r0, r1, r2, lr}
 8003da4:	4906      	ldr	r1, [pc, #24]	; (8003dc0 <iprintf+0x20>)
 8003da6:	ab04      	add	r3, sp, #16
 8003da8:	6808      	ldr	r0, [r1, #0]
 8003daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dae:	6881      	ldr	r1, [r0, #8]
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	f000 f9ef 	bl	8004194 <_vfiprintf_r>
 8003db6:	b003      	add	sp, #12
 8003db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dbc:	b004      	add	sp, #16
 8003dbe:	4770      	bx	lr
 8003dc0:	20000064 	.word	0x20000064

08003dc4 <putchar>:
 8003dc4:	4b02      	ldr	r3, [pc, #8]	; (8003dd0 <putchar+0xc>)
 8003dc6:	4601      	mov	r1, r0
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	6882      	ldr	r2, [r0, #8]
 8003dcc:	f000 bd3a 	b.w	8004844 <_putc_r>
 8003dd0:	20000064 	.word	0x20000064

08003dd4 <__sread>:
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ddc:	f000 f868 	bl	8003eb0 <_read_r>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	bfab      	itete	ge
 8003de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003de6:	89a3      	ldrhlt	r3, [r4, #12]
 8003de8:	181b      	addge	r3, r3, r0
 8003dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003dee:	bfac      	ite	ge
 8003df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003df2:	81a3      	strhlt	r3, [r4, #12]
 8003df4:	bd10      	pop	{r4, pc}

08003df6 <__swrite>:
 8003df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dfa:	461f      	mov	r7, r3
 8003dfc:	898b      	ldrh	r3, [r1, #12]
 8003dfe:	05db      	lsls	r3, r3, #23
 8003e00:	4605      	mov	r5, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	4616      	mov	r6, r2
 8003e06:	d505      	bpl.n	8003e14 <__swrite+0x1e>
 8003e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f000 f83c 	bl	8003e8c <_lseek_r>
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e1e:	81a3      	strh	r3, [r4, #12]
 8003e20:	4632      	mov	r2, r6
 8003e22:	463b      	mov	r3, r7
 8003e24:	4628      	mov	r0, r5
 8003e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e2a:	f000 b853 	b.w	8003ed4 <_write_r>

08003e2e <__sseek>:
 8003e2e:	b510      	push	{r4, lr}
 8003e30:	460c      	mov	r4, r1
 8003e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e36:	f000 f829 	bl	8003e8c <_lseek_r>
 8003e3a:	1c43      	adds	r3, r0, #1
 8003e3c:	89a3      	ldrh	r3, [r4, #12]
 8003e3e:	bf15      	itete	ne
 8003e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e4a:	81a3      	strheq	r3, [r4, #12]
 8003e4c:	bf18      	it	ne
 8003e4e:	81a3      	strhne	r3, [r4, #12]
 8003e50:	bd10      	pop	{r4, pc}

08003e52 <__sclose>:
 8003e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e56:	f000 b809 	b.w	8003e6c <_close_r>

08003e5a <memset>:
 8003e5a:	4402      	add	r2, r0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d100      	bne.n	8003e64 <memset+0xa>
 8003e62:	4770      	bx	lr
 8003e64:	f803 1b01 	strb.w	r1, [r3], #1
 8003e68:	e7f9      	b.n	8003e5e <memset+0x4>
	...

08003e6c <_close_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4d06      	ldr	r5, [pc, #24]	; (8003e88 <_close_r+0x1c>)
 8003e70:	2300      	movs	r3, #0
 8003e72:	4604      	mov	r4, r0
 8003e74:	4608      	mov	r0, r1
 8003e76:	602b      	str	r3, [r5, #0]
 8003e78:	f7fc ffbb 	bl	8000df2 <_close>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d102      	bne.n	8003e86 <_close_r+0x1a>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	b103      	cbz	r3, 8003e86 <_close_r+0x1a>
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	2000066c 	.word	0x2000066c

08003e8c <_lseek_r>:
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	4d07      	ldr	r5, [pc, #28]	; (8003eac <_lseek_r+0x20>)
 8003e90:	4604      	mov	r4, r0
 8003e92:	4608      	mov	r0, r1
 8003e94:	4611      	mov	r1, r2
 8003e96:	2200      	movs	r2, #0
 8003e98:	602a      	str	r2, [r5, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f7fc ffd0 	bl	8000e40 <_lseek>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d102      	bne.n	8003eaa <_lseek_r+0x1e>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	b103      	cbz	r3, 8003eaa <_lseek_r+0x1e>
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
 8003eac:	2000066c 	.word	0x2000066c

08003eb0 <_read_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4d07      	ldr	r5, [pc, #28]	; (8003ed0 <_read_r+0x20>)
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	4608      	mov	r0, r1
 8003eb8:	4611      	mov	r1, r2
 8003eba:	2200      	movs	r2, #0
 8003ebc:	602a      	str	r2, [r5, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f7fc ff7a 	bl	8000db8 <_read>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_read_r+0x1e>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_read_r+0x1e>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	2000066c 	.word	0x2000066c

08003ed4 <_write_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4d07      	ldr	r5, [pc, #28]	; (8003ef4 <_write_r+0x20>)
 8003ed8:	4604      	mov	r4, r0
 8003eda:	4608      	mov	r0, r1
 8003edc:	4611      	mov	r1, r2
 8003ede:	2200      	movs	r2, #0
 8003ee0:	602a      	str	r2, [r5, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f7fc fb42 	bl	800056c <_write>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d102      	bne.n	8003ef2 <_write_r+0x1e>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	b103      	cbz	r3, 8003ef2 <_write_r+0x1e>
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	2000066c 	.word	0x2000066c

08003ef8 <__errno>:
 8003ef8:	4b01      	ldr	r3, [pc, #4]	; (8003f00 <__errno+0x8>)
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000064 	.word	0x20000064

08003f04 <__libc_init_array>:
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	4d0d      	ldr	r5, [pc, #52]	; (8003f3c <__libc_init_array+0x38>)
 8003f08:	4c0d      	ldr	r4, [pc, #52]	; (8003f40 <__libc_init_array+0x3c>)
 8003f0a:	1b64      	subs	r4, r4, r5
 8003f0c:	10a4      	asrs	r4, r4, #2
 8003f0e:	2600      	movs	r6, #0
 8003f10:	42a6      	cmp	r6, r4
 8003f12:	d109      	bne.n	8003f28 <__libc_init_array+0x24>
 8003f14:	4d0b      	ldr	r5, [pc, #44]	; (8003f44 <__libc_init_array+0x40>)
 8003f16:	4c0c      	ldr	r4, [pc, #48]	; (8003f48 <__libc_init_array+0x44>)
 8003f18:	f000 fdf2 	bl	8004b00 <_init>
 8003f1c:	1b64      	subs	r4, r4, r5
 8003f1e:	10a4      	asrs	r4, r4, #2
 8003f20:	2600      	movs	r6, #0
 8003f22:	42a6      	cmp	r6, r4
 8003f24:	d105      	bne.n	8003f32 <__libc_init_array+0x2e>
 8003f26:	bd70      	pop	{r4, r5, r6, pc}
 8003f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2c:	4798      	blx	r3
 8003f2e:	3601      	adds	r6, #1
 8003f30:	e7ee      	b.n	8003f10 <__libc_init_array+0xc>
 8003f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f36:	4798      	blx	r3
 8003f38:	3601      	adds	r6, #1
 8003f3a:	e7f2      	b.n	8003f22 <__libc_init_array+0x1e>
 8003f3c:	08004e08 	.word	0x08004e08
 8003f40:	08004e08 	.word	0x08004e08
 8003f44:	08004e08 	.word	0x08004e08
 8003f48:	08004e0c 	.word	0x08004e0c

08003f4c <__retarget_lock_acquire_recursive>:
 8003f4c:	4770      	bx	lr

08003f4e <__retarget_lock_release_recursive>:
 8003f4e:	4770      	bx	lr

08003f50 <_free_r>:
 8003f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f52:	2900      	cmp	r1, #0
 8003f54:	d044      	beq.n	8003fe0 <_free_r+0x90>
 8003f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f5a:	9001      	str	r0, [sp, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8003f62:	bfb8      	it	lt
 8003f64:	18e4      	addlt	r4, r4, r3
 8003f66:	f000 f8df 	bl	8004128 <__malloc_lock>
 8003f6a:	4a1e      	ldr	r2, [pc, #120]	; (8003fe4 <_free_r+0x94>)
 8003f6c:	9801      	ldr	r0, [sp, #4]
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	b933      	cbnz	r3, 8003f80 <_free_r+0x30>
 8003f72:	6063      	str	r3, [r4, #4]
 8003f74:	6014      	str	r4, [r2, #0]
 8003f76:	b003      	add	sp, #12
 8003f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f7c:	f000 b8da 	b.w	8004134 <__malloc_unlock>
 8003f80:	42a3      	cmp	r3, r4
 8003f82:	d908      	bls.n	8003f96 <_free_r+0x46>
 8003f84:	6825      	ldr	r5, [r4, #0]
 8003f86:	1961      	adds	r1, r4, r5
 8003f88:	428b      	cmp	r3, r1
 8003f8a:	bf01      	itttt	eq
 8003f8c:	6819      	ldreq	r1, [r3, #0]
 8003f8e:	685b      	ldreq	r3, [r3, #4]
 8003f90:	1949      	addeq	r1, r1, r5
 8003f92:	6021      	streq	r1, [r4, #0]
 8003f94:	e7ed      	b.n	8003f72 <_free_r+0x22>
 8003f96:	461a      	mov	r2, r3
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	b10b      	cbz	r3, 8003fa0 <_free_r+0x50>
 8003f9c:	42a3      	cmp	r3, r4
 8003f9e:	d9fa      	bls.n	8003f96 <_free_r+0x46>
 8003fa0:	6811      	ldr	r1, [r2, #0]
 8003fa2:	1855      	adds	r5, r2, r1
 8003fa4:	42a5      	cmp	r5, r4
 8003fa6:	d10b      	bne.n	8003fc0 <_free_r+0x70>
 8003fa8:	6824      	ldr	r4, [r4, #0]
 8003faa:	4421      	add	r1, r4
 8003fac:	1854      	adds	r4, r2, r1
 8003fae:	42a3      	cmp	r3, r4
 8003fb0:	6011      	str	r1, [r2, #0]
 8003fb2:	d1e0      	bne.n	8003f76 <_free_r+0x26>
 8003fb4:	681c      	ldr	r4, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	6053      	str	r3, [r2, #4]
 8003fba:	440c      	add	r4, r1
 8003fbc:	6014      	str	r4, [r2, #0]
 8003fbe:	e7da      	b.n	8003f76 <_free_r+0x26>
 8003fc0:	d902      	bls.n	8003fc8 <_free_r+0x78>
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	6003      	str	r3, [r0, #0]
 8003fc6:	e7d6      	b.n	8003f76 <_free_r+0x26>
 8003fc8:	6825      	ldr	r5, [r4, #0]
 8003fca:	1961      	adds	r1, r4, r5
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	bf04      	itt	eq
 8003fd0:	6819      	ldreq	r1, [r3, #0]
 8003fd2:	685b      	ldreq	r3, [r3, #4]
 8003fd4:	6063      	str	r3, [r4, #4]
 8003fd6:	bf04      	itt	eq
 8003fd8:	1949      	addeq	r1, r1, r5
 8003fda:	6021      	streq	r1, [r4, #0]
 8003fdc:	6054      	str	r4, [r2, #4]
 8003fde:	e7ca      	b.n	8003f76 <_free_r+0x26>
 8003fe0:	b003      	add	sp, #12
 8003fe2:	bd30      	pop	{r4, r5, pc}
 8003fe4:	20000674 	.word	0x20000674

08003fe8 <sbrk_aligned>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	4e0e      	ldr	r6, [pc, #56]	; (8004024 <sbrk_aligned+0x3c>)
 8003fec:	460c      	mov	r4, r1
 8003fee:	6831      	ldr	r1, [r6, #0]
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	b911      	cbnz	r1, 8003ffa <sbrk_aligned+0x12>
 8003ff4:	f000 fcf0 	bl	80049d8 <_sbrk_r>
 8003ff8:	6030      	str	r0, [r6, #0]
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	f000 fceb 	bl	80049d8 <_sbrk_r>
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	d00a      	beq.n	800401c <sbrk_aligned+0x34>
 8004006:	1cc4      	adds	r4, r0, #3
 8004008:	f024 0403 	bic.w	r4, r4, #3
 800400c:	42a0      	cmp	r0, r4
 800400e:	d007      	beq.n	8004020 <sbrk_aligned+0x38>
 8004010:	1a21      	subs	r1, r4, r0
 8004012:	4628      	mov	r0, r5
 8004014:	f000 fce0 	bl	80049d8 <_sbrk_r>
 8004018:	3001      	adds	r0, #1
 800401a:	d101      	bne.n	8004020 <sbrk_aligned+0x38>
 800401c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004020:	4620      	mov	r0, r4
 8004022:	bd70      	pop	{r4, r5, r6, pc}
 8004024:	20000678 	.word	0x20000678

08004028 <_malloc_r>:
 8004028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800402c:	1ccd      	adds	r5, r1, #3
 800402e:	f025 0503 	bic.w	r5, r5, #3
 8004032:	3508      	adds	r5, #8
 8004034:	2d0c      	cmp	r5, #12
 8004036:	bf38      	it	cc
 8004038:	250c      	movcc	r5, #12
 800403a:	2d00      	cmp	r5, #0
 800403c:	4607      	mov	r7, r0
 800403e:	db01      	blt.n	8004044 <_malloc_r+0x1c>
 8004040:	42a9      	cmp	r1, r5
 8004042:	d905      	bls.n	8004050 <_malloc_r+0x28>
 8004044:	230c      	movs	r3, #12
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	2600      	movs	r6, #0
 800404a:	4630      	mov	r0, r6
 800404c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004050:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004124 <_malloc_r+0xfc>
 8004054:	f000 f868 	bl	8004128 <__malloc_lock>
 8004058:	f8d8 3000 	ldr.w	r3, [r8]
 800405c:	461c      	mov	r4, r3
 800405e:	bb5c      	cbnz	r4, 80040b8 <_malloc_r+0x90>
 8004060:	4629      	mov	r1, r5
 8004062:	4638      	mov	r0, r7
 8004064:	f7ff ffc0 	bl	8003fe8 <sbrk_aligned>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	4604      	mov	r4, r0
 800406c:	d155      	bne.n	800411a <_malloc_r+0xf2>
 800406e:	f8d8 4000 	ldr.w	r4, [r8]
 8004072:	4626      	mov	r6, r4
 8004074:	2e00      	cmp	r6, #0
 8004076:	d145      	bne.n	8004104 <_malloc_r+0xdc>
 8004078:	2c00      	cmp	r4, #0
 800407a:	d048      	beq.n	800410e <_malloc_r+0xe6>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	4631      	mov	r1, r6
 8004080:	4638      	mov	r0, r7
 8004082:	eb04 0903 	add.w	r9, r4, r3
 8004086:	f000 fca7 	bl	80049d8 <_sbrk_r>
 800408a:	4581      	cmp	r9, r0
 800408c:	d13f      	bne.n	800410e <_malloc_r+0xe6>
 800408e:	6821      	ldr	r1, [r4, #0]
 8004090:	1a6d      	subs	r5, r5, r1
 8004092:	4629      	mov	r1, r5
 8004094:	4638      	mov	r0, r7
 8004096:	f7ff ffa7 	bl	8003fe8 <sbrk_aligned>
 800409a:	3001      	adds	r0, #1
 800409c:	d037      	beq.n	800410e <_malloc_r+0xe6>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	442b      	add	r3, r5
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	f8d8 3000 	ldr.w	r3, [r8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d038      	beq.n	800411e <_malloc_r+0xf6>
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	42a2      	cmp	r2, r4
 80040b0:	d12b      	bne.n	800410a <_malloc_r+0xe2>
 80040b2:	2200      	movs	r2, #0
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	e00f      	b.n	80040d8 <_malloc_r+0xb0>
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	1b52      	subs	r2, r2, r5
 80040bc:	d41f      	bmi.n	80040fe <_malloc_r+0xd6>
 80040be:	2a0b      	cmp	r2, #11
 80040c0:	d917      	bls.n	80040f2 <_malloc_r+0xca>
 80040c2:	1961      	adds	r1, r4, r5
 80040c4:	42a3      	cmp	r3, r4
 80040c6:	6025      	str	r5, [r4, #0]
 80040c8:	bf18      	it	ne
 80040ca:	6059      	strne	r1, [r3, #4]
 80040cc:	6863      	ldr	r3, [r4, #4]
 80040ce:	bf08      	it	eq
 80040d0:	f8c8 1000 	streq.w	r1, [r8]
 80040d4:	5162      	str	r2, [r4, r5]
 80040d6:	604b      	str	r3, [r1, #4]
 80040d8:	4638      	mov	r0, r7
 80040da:	f104 060b 	add.w	r6, r4, #11
 80040de:	f000 f829 	bl	8004134 <__malloc_unlock>
 80040e2:	f026 0607 	bic.w	r6, r6, #7
 80040e6:	1d23      	adds	r3, r4, #4
 80040e8:	1af2      	subs	r2, r6, r3
 80040ea:	d0ae      	beq.n	800404a <_malloc_r+0x22>
 80040ec:	1b9b      	subs	r3, r3, r6
 80040ee:	50a3      	str	r3, [r4, r2]
 80040f0:	e7ab      	b.n	800404a <_malloc_r+0x22>
 80040f2:	42a3      	cmp	r3, r4
 80040f4:	6862      	ldr	r2, [r4, #4]
 80040f6:	d1dd      	bne.n	80040b4 <_malloc_r+0x8c>
 80040f8:	f8c8 2000 	str.w	r2, [r8]
 80040fc:	e7ec      	b.n	80040d8 <_malloc_r+0xb0>
 80040fe:	4623      	mov	r3, r4
 8004100:	6864      	ldr	r4, [r4, #4]
 8004102:	e7ac      	b.n	800405e <_malloc_r+0x36>
 8004104:	4634      	mov	r4, r6
 8004106:	6876      	ldr	r6, [r6, #4]
 8004108:	e7b4      	b.n	8004074 <_malloc_r+0x4c>
 800410a:	4613      	mov	r3, r2
 800410c:	e7cc      	b.n	80040a8 <_malloc_r+0x80>
 800410e:	230c      	movs	r3, #12
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	4638      	mov	r0, r7
 8004114:	f000 f80e 	bl	8004134 <__malloc_unlock>
 8004118:	e797      	b.n	800404a <_malloc_r+0x22>
 800411a:	6025      	str	r5, [r4, #0]
 800411c:	e7dc      	b.n	80040d8 <_malloc_r+0xb0>
 800411e:	605b      	str	r3, [r3, #4]
 8004120:	deff      	udf	#255	; 0xff
 8004122:	bf00      	nop
 8004124:	20000674 	.word	0x20000674

08004128 <__malloc_lock>:
 8004128:	4801      	ldr	r0, [pc, #4]	; (8004130 <__malloc_lock+0x8>)
 800412a:	f7ff bf0f 	b.w	8003f4c <__retarget_lock_acquire_recursive>
 800412e:	bf00      	nop
 8004130:	20000670 	.word	0x20000670

08004134 <__malloc_unlock>:
 8004134:	4801      	ldr	r0, [pc, #4]	; (800413c <__malloc_unlock+0x8>)
 8004136:	f7ff bf0a 	b.w	8003f4e <__retarget_lock_release_recursive>
 800413a:	bf00      	nop
 800413c:	20000670 	.word	0x20000670

08004140 <__sfputc_r>:
 8004140:	6893      	ldr	r3, [r2, #8]
 8004142:	3b01      	subs	r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	b410      	push	{r4}
 8004148:	6093      	str	r3, [r2, #8]
 800414a:	da08      	bge.n	800415e <__sfputc_r+0x1e>
 800414c:	6994      	ldr	r4, [r2, #24]
 800414e:	42a3      	cmp	r3, r4
 8004150:	db01      	blt.n	8004156 <__sfputc_r+0x16>
 8004152:	290a      	cmp	r1, #10
 8004154:	d103      	bne.n	800415e <__sfputc_r+0x1e>
 8004156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800415a:	f000 bba7 	b.w	80048ac <__swbuf_r>
 800415e:	6813      	ldr	r3, [r2, #0]
 8004160:	1c58      	adds	r0, r3, #1
 8004162:	6010      	str	r0, [r2, #0]
 8004164:	7019      	strb	r1, [r3, #0]
 8004166:	4608      	mov	r0, r1
 8004168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800416c:	4770      	bx	lr

0800416e <__sfputs_r>:
 800416e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004170:	4606      	mov	r6, r0
 8004172:	460f      	mov	r7, r1
 8004174:	4614      	mov	r4, r2
 8004176:	18d5      	adds	r5, r2, r3
 8004178:	42ac      	cmp	r4, r5
 800417a:	d101      	bne.n	8004180 <__sfputs_r+0x12>
 800417c:	2000      	movs	r0, #0
 800417e:	e007      	b.n	8004190 <__sfputs_r+0x22>
 8004180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004184:	463a      	mov	r2, r7
 8004186:	4630      	mov	r0, r6
 8004188:	f7ff ffda 	bl	8004140 <__sfputc_r>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d1f3      	bne.n	8004178 <__sfputs_r+0xa>
 8004190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004194 <_vfiprintf_r>:
 8004194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004198:	460d      	mov	r5, r1
 800419a:	b09d      	sub	sp, #116	; 0x74
 800419c:	4614      	mov	r4, r2
 800419e:	4698      	mov	r8, r3
 80041a0:	4606      	mov	r6, r0
 80041a2:	b118      	cbz	r0, 80041ac <_vfiprintf_r+0x18>
 80041a4:	6a03      	ldr	r3, [r0, #32]
 80041a6:	b90b      	cbnz	r3, 80041ac <_vfiprintf_r+0x18>
 80041a8:	f7ff fdc4 	bl	8003d34 <__sinit>
 80041ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041ae:	07d9      	lsls	r1, r3, #31
 80041b0:	d405      	bmi.n	80041be <_vfiprintf_r+0x2a>
 80041b2:	89ab      	ldrh	r3, [r5, #12]
 80041b4:	059a      	lsls	r2, r3, #22
 80041b6:	d402      	bmi.n	80041be <_vfiprintf_r+0x2a>
 80041b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ba:	f7ff fec7 	bl	8003f4c <__retarget_lock_acquire_recursive>
 80041be:	89ab      	ldrh	r3, [r5, #12]
 80041c0:	071b      	lsls	r3, r3, #28
 80041c2:	d501      	bpl.n	80041c8 <_vfiprintf_r+0x34>
 80041c4:	692b      	ldr	r3, [r5, #16]
 80041c6:	b99b      	cbnz	r3, 80041f0 <_vfiprintf_r+0x5c>
 80041c8:	4629      	mov	r1, r5
 80041ca:	4630      	mov	r0, r6
 80041cc:	f000 fbac 	bl	8004928 <__swsetup_r>
 80041d0:	b170      	cbz	r0, 80041f0 <_vfiprintf_r+0x5c>
 80041d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041d4:	07dc      	lsls	r4, r3, #31
 80041d6:	d504      	bpl.n	80041e2 <_vfiprintf_r+0x4e>
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041dc:	b01d      	add	sp, #116	; 0x74
 80041de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e2:	89ab      	ldrh	r3, [r5, #12]
 80041e4:	0598      	lsls	r0, r3, #22
 80041e6:	d4f7      	bmi.n	80041d8 <_vfiprintf_r+0x44>
 80041e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ea:	f7ff feb0 	bl	8003f4e <__retarget_lock_release_recursive>
 80041ee:	e7f3      	b.n	80041d8 <_vfiprintf_r+0x44>
 80041f0:	2300      	movs	r3, #0
 80041f2:	9309      	str	r3, [sp, #36]	; 0x24
 80041f4:	2320      	movs	r3, #32
 80041f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80041fe:	2330      	movs	r3, #48	; 0x30
 8004200:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80043b4 <_vfiprintf_r+0x220>
 8004204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004208:	f04f 0901 	mov.w	r9, #1
 800420c:	4623      	mov	r3, r4
 800420e:	469a      	mov	sl, r3
 8004210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004214:	b10a      	cbz	r2, 800421a <_vfiprintf_r+0x86>
 8004216:	2a25      	cmp	r2, #37	; 0x25
 8004218:	d1f9      	bne.n	800420e <_vfiprintf_r+0x7a>
 800421a:	ebba 0b04 	subs.w	fp, sl, r4
 800421e:	d00b      	beq.n	8004238 <_vfiprintf_r+0xa4>
 8004220:	465b      	mov	r3, fp
 8004222:	4622      	mov	r2, r4
 8004224:	4629      	mov	r1, r5
 8004226:	4630      	mov	r0, r6
 8004228:	f7ff ffa1 	bl	800416e <__sfputs_r>
 800422c:	3001      	adds	r0, #1
 800422e:	f000 80a9 	beq.w	8004384 <_vfiprintf_r+0x1f0>
 8004232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004234:	445a      	add	r2, fp
 8004236:	9209      	str	r2, [sp, #36]	; 0x24
 8004238:	f89a 3000 	ldrb.w	r3, [sl]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80a1 	beq.w	8004384 <_vfiprintf_r+0x1f0>
 8004242:	2300      	movs	r3, #0
 8004244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800424c:	f10a 0a01 	add.w	sl, sl, #1
 8004250:	9304      	str	r3, [sp, #16]
 8004252:	9307      	str	r3, [sp, #28]
 8004254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004258:	931a      	str	r3, [sp, #104]	; 0x68
 800425a:	4654      	mov	r4, sl
 800425c:	2205      	movs	r2, #5
 800425e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004262:	4854      	ldr	r0, [pc, #336]	; (80043b4 <_vfiprintf_r+0x220>)
 8004264:	f7fb ffb4 	bl	80001d0 <memchr>
 8004268:	9a04      	ldr	r2, [sp, #16]
 800426a:	b9d8      	cbnz	r0, 80042a4 <_vfiprintf_r+0x110>
 800426c:	06d1      	lsls	r1, r2, #27
 800426e:	bf44      	itt	mi
 8004270:	2320      	movmi	r3, #32
 8004272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004276:	0713      	lsls	r3, r2, #28
 8004278:	bf44      	itt	mi
 800427a:	232b      	movmi	r3, #43	; 0x2b
 800427c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004280:	f89a 3000 	ldrb.w	r3, [sl]
 8004284:	2b2a      	cmp	r3, #42	; 0x2a
 8004286:	d015      	beq.n	80042b4 <_vfiprintf_r+0x120>
 8004288:	9a07      	ldr	r2, [sp, #28]
 800428a:	4654      	mov	r4, sl
 800428c:	2000      	movs	r0, #0
 800428e:	f04f 0c0a 	mov.w	ip, #10
 8004292:	4621      	mov	r1, r4
 8004294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004298:	3b30      	subs	r3, #48	; 0x30
 800429a:	2b09      	cmp	r3, #9
 800429c:	d94d      	bls.n	800433a <_vfiprintf_r+0x1a6>
 800429e:	b1b0      	cbz	r0, 80042ce <_vfiprintf_r+0x13a>
 80042a0:	9207      	str	r2, [sp, #28]
 80042a2:	e014      	b.n	80042ce <_vfiprintf_r+0x13a>
 80042a4:	eba0 0308 	sub.w	r3, r0, r8
 80042a8:	fa09 f303 	lsl.w	r3, r9, r3
 80042ac:	4313      	orrs	r3, r2
 80042ae:	9304      	str	r3, [sp, #16]
 80042b0:	46a2      	mov	sl, r4
 80042b2:	e7d2      	b.n	800425a <_vfiprintf_r+0xc6>
 80042b4:	9b03      	ldr	r3, [sp, #12]
 80042b6:	1d19      	adds	r1, r3, #4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	9103      	str	r1, [sp, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bfbb      	ittet	lt
 80042c0:	425b      	neglt	r3, r3
 80042c2:	f042 0202 	orrlt.w	r2, r2, #2
 80042c6:	9307      	strge	r3, [sp, #28]
 80042c8:	9307      	strlt	r3, [sp, #28]
 80042ca:	bfb8      	it	lt
 80042cc:	9204      	strlt	r2, [sp, #16]
 80042ce:	7823      	ldrb	r3, [r4, #0]
 80042d0:	2b2e      	cmp	r3, #46	; 0x2e
 80042d2:	d10c      	bne.n	80042ee <_vfiprintf_r+0x15a>
 80042d4:	7863      	ldrb	r3, [r4, #1]
 80042d6:	2b2a      	cmp	r3, #42	; 0x2a
 80042d8:	d134      	bne.n	8004344 <_vfiprintf_r+0x1b0>
 80042da:	9b03      	ldr	r3, [sp, #12]
 80042dc:	1d1a      	adds	r2, r3, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	9203      	str	r2, [sp, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bfb8      	it	lt
 80042e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80042ea:	3402      	adds	r4, #2
 80042ec:	9305      	str	r3, [sp, #20]
 80042ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80043c4 <_vfiprintf_r+0x230>
 80042f2:	7821      	ldrb	r1, [r4, #0]
 80042f4:	2203      	movs	r2, #3
 80042f6:	4650      	mov	r0, sl
 80042f8:	f7fb ff6a 	bl	80001d0 <memchr>
 80042fc:	b138      	cbz	r0, 800430e <_vfiprintf_r+0x17a>
 80042fe:	9b04      	ldr	r3, [sp, #16]
 8004300:	eba0 000a 	sub.w	r0, r0, sl
 8004304:	2240      	movs	r2, #64	; 0x40
 8004306:	4082      	lsls	r2, r0
 8004308:	4313      	orrs	r3, r2
 800430a:	3401      	adds	r4, #1
 800430c:	9304      	str	r3, [sp, #16]
 800430e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004312:	4829      	ldr	r0, [pc, #164]	; (80043b8 <_vfiprintf_r+0x224>)
 8004314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004318:	2206      	movs	r2, #6
 800431a:	f7fb ff59 	bl	80001d0 <memchr>
 800431e:	2800      	cmp	r0, #0
 8004320:	d03f      	beq.n	80043a2 <_vfiprintf_r+0x20e>
 8004322:	4b26      	ldr	r3, [pc, #152]	; (80043bc <_vfiprintf_r+0x228>)
 8004324:	bb1b      	cbnz	r3, 800436e <_vfiprintf_r+0x1da>
 8004326:	9b03      	ldr	r3, [sp, #12]
 8004328:	3307      	adds	r3, #7
 800432a:	f023 0307 	bic.w	r3, r3, #7
 800432e:	3308      	adds	r3, #8
 8004330:	9303      	str	r3, [sp, #12]
 8004332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004334:	443b      	add	r3, r7
 8004336:	9309      	str	r3, [sp, #36]	; 0x24
 8004338:	e768      	b.n	800420c <_vfiprintf_r+0x78>
 800433a:	fb0c 3202 	mla	r2, ip, r2, r3
 800433e:	460c      	mov	r4, r1
 8004340:	2001      	movs	r0, #1
 8004342:	e7a6      	b.n	8004292 <_vfiprintf_r+0xfe>
 8004344:	2300      	movs	r3, #0
 8004346:	3401      	adds	r4, #1
 8004348:	9305      	str	r3, [sp, #20]
 800434a:	4619      	mov	r1, r3
 800434c:	f04f 0c0a 	mov.w	ip, #10
 8004350:	4620      	mov	r0, r4
 8004352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004356:	3a30      	subs	r2, #48	; 0x30
 8004358:	2a09      	cmp	r2, #9
 800435a:	d903      	bls.n	8004364 <_vfiprintf_r+0x1d0>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0c6      	beq.n	80042ee <_vfiprintf_r+0x15a>
 8004360:	9105      	str	r1, [sp, #20]
 8004362:	e7c4      	b.n	80042ee <_vfiprintf_r+0x15a>
 8004364:	fb0c 2101 	mla	r1, ip, r1, r2
 8004368:	4604      	mov	r4, r0
 800436a:	2301      	movs	r3, #1
 800436c:	e7f0      	b.n	8004350 <_vfiprintf_r+0x1bc>
 800436e:	ab03      	add	r3, sp, #12
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	462a      	mov	r2, r5
 8004374:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <_vfiprintf_r+0x22c>)
 8004376:	a904      	add	r1, sp, #16
 8004378:	4630      	mov	r0, r6
 800437a:	f3af 8000 	nop.w
 800437e:	4607      	mov	r7, r0
 8004380:	1c78      	adds	r0, r7, #1
 8004382:	d1d6      	bne.n	8004332 <_vfiprintf_r+0x19e>
 8004384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004386:	07d9      	lsls	r1, r3, #31
 8004388:	d405      	bmi.n	8004396 <_vfiprintf_r+0x202>
 800438a:	89ab      	ldrh	r3, [r5, #12]
 800438c:	059a      	lsls	r2, r3, #22
 800438e:	d402      	bmi.n	8004396 <_vfiprintf_r+0x202>
 8004390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004392:	f7ff fddc 	bl	8003f4e <__retarget_lock_release_recursive>
 8004396:	89ab      	ldrh	r3, [r5, #12]
 8004398:	065b      	lsls	r3, r3, #25
 800439a:	f53f af1d 	bmi.w	80041d8 <_vfiprintf_r+0x44>
 800439e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043a0:	e71c      	b.n	80041dc <_vfiprintf_r+0x48>
 80043a2:	ab03      	add	r3, sp, #12
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	462a      	mov	r2, r5
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <_vfiprintf_r+0x22c>)
 80043aa:	a904      	add	r1, sp, #16
 80043ac:	4630      	mov	r0, r6
 80043ae:	f000 f879 	bl	80044a4 <_printf_i>
 80043b2:	e7e4      	b.n	800437e <_vfiprintf_r+0x1ea>
 80043b4:	08004dcc 	.word	0x08004dcc
 80043b8:	08004dd6 	.word	0x08004dd6
 80043bc:	00000000 	.word	0x00000000
 80043c0:	0800416f 	.word	0x0800416f
 80043c4:	08004dd2 	.word	0x08004dd2

080043c8 <_printf_common>:
 80043c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043cc:	4616      	mov	r6, r2
 80043ce:	4699      	mov	r9, r3
 80043d0:	688a      	ldr	r2, [r1, #8]
 80043d2:	690b      	ldr	r3, [r1, #16]
 80043d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043d8:	4293      	cmp	r3, r2
 80043da:	bfb8      	it	lt
 80043dc:	4613      	movlt	r3, r2
 80043de:	6033      	str	r3, [r6, #0]
 80043e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043e4:	4607      	mov	r7, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	b10a      	cbz	r2, 80043ee <_printf_common+0x26>
 80043ea:	3301      	adds	r3, #1
 80043ec:	6033      	str	r3, [r6, #0]
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	0699      	lsls	r1, r3, #26
 80043f2:	bf42      	ittt	mi
 80043f4:	6833      	ldrmi	r3, [r6, #0]
 80043f6:	3302      	addmi	r3, #2
 80043f8:	6033      	strmi	r3, [r6, #0]
 80043fa:	6825      	ldr	r5, [r4, #0]
 80043fc:	f015 0506 	ands.w	r5, r5, #6
 8004400:	d106      	bne.n	8004410 <_printf_common+0x48>
 8004402:	f104 0a19 	add.w	sl, r4, #25
 8004406:	68e3      	ldr	r3, [r4, #12]
 8004408:	6832      	ldr	r2, [r6, #0]
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	42ab      	cmp	r3, r5
 800440e:	dc26      	bgt.n	800445e <_printf_common+0x96>
 8004410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004414:	1e13      	subs	r3, r2, #0
 8004416:	6822      	ldr	r2, [r4, #0]
 8004418:	bf18      	it	ne
 800441a:	2301      	movne	r3, #1
 800441c:	0692      	lsls	r2, r2, #26
 800441e:	d42b      	bmi.n	8004478 <_printf_common+0xb0>
 8004420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004424:	4649      	mov	r1, r9
 8004426:	4638      	mov	r0, r7
 8004428:	47c0      	blx	r8
 800442a:	3001      	adds	r0, #1
 800442c:	d01e      	beq.n	800446c <_printf_common+0xa4>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	6922      	ldr	r2, [r4, #16]
 8004432:	f003 0306 	and.w	r3, r3, #6
 8004436:	2b04      	cmp	r3, #4
 8004438:	bf02      	ittt	eq
 800443a:	68e5      	ldreq	r5, [r4, #12]
 800443c:	6833      	ldreq	r3, [r6, #0]
 800443e:	1aed      	subeq	r5, r5, r3
 8004440:	68a3      	ldr	r3, [r4, #8]
 8004442:	bf0c      	ite	eq
 8004444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004448:	2500      	movne	r5, #0
 800444a:	4293      	cmp	r3, r2
 800444c:	bfc4      	itt	gt
 800444e:	1a9b      	subgt	r3, r3, r2
 8004450:	18ed      	addgt	r5, r5, r3
 8004452:	2600      	movs	r6, #0
 8004454:	341a      	adds	r4, #26
 8004456:	42b5      	cmp	r5, r6
 8004458:	d11a      	bne.n	8004490 <_printf_common+0xc8>
 800445a:	2000      	movs	r0, #0
 800445c:	e008      	b.n	8004470 <_printf_common+0xa8>
 800445e:	2301      	movs	r3, #1
 8004460:	4652      	mov	r2, sl
 8004462:	4649      	mov	r1, r9
 8004464:	4638      	mov	r0, r7
 8004466:	47c0      	blx	r8
 8004468:	3001      	adds	r0, #1
 800446a:	d103      	bne.n	8004474 <_printf_common+0xac>
 800446c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004474:	3501      	adds	r5, #1
 8004476:	e7c6      	b.n	8004406 <_printf_common+0x3e>
 8004478:	18e1      	adds	r1, r4, r3
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	2030      	movs	r0, #48	; 0x30
 800447e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004482:	4422      	add	r2, r4
 8004484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800448c:	3302      	adds	r3, #2
 800448e:	e7c7      	b.n	8004420 <_printf_common+0x58>
 8004490:	2301      	movs	r3, #1
 8004492:	4622      	mov	r2, r4
 8004494:	4649      	mov	r1, r9
 8004496:	4638      	mov	r0, r7
 8004498:	47c0      	blx	r8
 800449a:	3001      	adds	r0, #1
 800449c:	d0e6      	beq.n	800446c <_printf_common+0xa4>
 800449e:	3601      	adds	r6, #1
 80044a0:	e7d9      	b.n	8004456 <_printf_common+0x8e>
	...

080044a4 <_printf_i>:
 80044a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	7e0f      	ldrb	r7, [r1, #24]
 80044aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044ac:	2f78      	cmp	r7, #120	; 0x78
 80044ae:	4691      	mov	r9, r2
 80044b0:	4680      	mov	r8, r0
 80044b2:	460c      	mov	r4, r1
 80044b4:	469a      	mov	sl, r3
 80044b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ba:	d807      	bhi.n	80044cc <_printf_i+0x28>
 80044bc:	2f62      	cmp	r7, #98	; 0x62
 80044be:	d80a      	bhi.n	80044d6 <_printf_i+0x32>
 80044c0:	2f00      	cmp	r7, #0
 80044c2:	f000 80d4 	beq.w	800466e <_printf_i+0x1ca>
 80044c6:	2f58      	cmp	r7, #88	; 0x58
 80044c8:	f000 80c0 	beq.w	800464c <_printf_i+0x1a8>
 80044cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044d4:	e03a      	b.n	800454c <_printf_i+0xa8>
 80044d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044da:	2b15      	cmp	r3, #21
 80044dc:	d8f6      	bhi.n	80044cc <_printf_i+0x28>
 80044de:	a101      	add	r1, pc, #4	; (adr r1, 80044e4 <_printf_i+0x40>)
 80044e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044e4:	0800453d 	.word	0x0800453d
 80044e8:	08004551 	.word	0x08004551
 80044ec:	080044cd 	.word	0x080044cd
 80044f0:	080044cd 	.word	0x080044cd
 80044f4:	080044cd 	.word	0x080044cd
 80044f8:	080044cd 	.word	0x080044cd
 80044fc:	08004551 	.word	0x08004551
 8004500:	080044cd 	.word	0x080044cd
 8004504:	080044cd 	.word	0x080044cd
 8004508:	080044cd 	.word	0x080044cd
 800450c:	080044cd 	.word	0x080044cd
 8004510:	08004655 	.word	0x08004655
 8004514:	0800457d 	.word	0x0800457d
 8004518:	0800460f 	.word	0x0800460f
 800451c:	080044cd 	.word	0x080044cd
 8004520:	080044cd 	.word	0x080044cd
 8004524:	08004677 	.word	0x08004677
 8004528:	080044cd 	.word	0x080044cd
 800452c:	0800457d 	.word	0x0800457d
 8004530:	080044cd 	.word	0x080044cd
 8004534:	080044cd 	.word	0x080044cd
 8004538:	08004617 	.word	0x08004617
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	1d1a      	adds	r2, r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	602a      	str	r2, [r5, #0]
 8004544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800454c:	2301      	movs	r3, #1
 800454e:	e09f      	b.n	8004690 <_printf_i+0x1ec>
 8004550:	6820      	ldr	r0, [r4, #0]
 8004552:	682b      	ldr	r3, [r5, #0]
 8004554:	0607      	lsls	r7, r0, #24
 8004556:	f103 0104 	add.w	r1, r3, #4
 800455a:	6029      	str	r1, [r5, #0]
 800455c:	d501      	bpl.n	8004562 <_printf_i+0xbe>
 800455e:	681e      	ldr	r6, [r3, #0]
 8004560:	e003      	b.n	800456a <_printf_i+0xc6>
 8004562:	0646      	lsls	r6, r0, #25
 8004564:	d5fb      	bpl.n	800455e <_printf_i+0xba>
 8004566:	f9b3 6000 	ldrsh.w	r6, [r3]
 800456a:	2e00      	cmp	r6, #0
 800456c:	da03      	bge.n	8004576 <_printf_i+0xd2>
 800456e:	232d      	movs	r3, #45	; 0x2d
 8004570:	4276      	negs	r6, r6
 8004572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004576:	485a      	ldr	r0, [pc, #360]	; (80046e0 <_printf_i+0x23c>)
 8004578:	230a      	movs	r3, #10
 800457a:	e012      	b.n	80045a2 <_printf_i+0xfe>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	1d19      	adds	r1, r3, #4
 8004582:	6029      	str	r1, [r5, #0]
 8004584:	0605      	lsls	r5, r0, #24
 8004586:	d501      	bpl.n	800458c <_printf_i+0xe8>
 8004588:	681e      	ldr	r6, [r3, #0]
 800458a:	e002      	b.n	8004592 <_printf_i+0xee>
 800458c:	0641      	lsls	r1, r0, #25
 800458e:	d5fb      	bpl.n	8004588 <_printf_i+0xe4>
 8004590:	881e      	ldrh	r6, [r3, #0]
 8004592:	4853      	ldr	r0, [pc, #332]	; (80046e0 <_printf_i+0x23c>)
 8004594:	2f6f      	cmp	r7, #111	; 0x6f
 8004596:	bf0c      	ite	eq
 8004598:	2308      	moveq	r3, #8
 800459a:	230a      	movne	r3, #10
 800459c:	2100      	movs	r1, #0
 800459e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045a2:	6865      	ldr	r5, [r4, #4]
 80045a4:	60a5      	str	r5, [r4, #8]
 80045a6:	2d00      	cmp	r5, #0
 80045a8:	bfa2      	ittt	ge
 80045aa:	6821      	ldrge	r1, [r4, #0]
 80045ac:	f021 0104 	bicge.w	r1, r1, #4
 80045b0:	6021      	strge	r1, [r4, #0]
 80045b2:	b90e      	cbnz	r6, 80045b8 <_printf_i+0x114>
 80045b4:	2d00      	cmp	r5, #0
 80045b6:	d04b      	beq.n	8004650 <_printf_i+0x1ac>
 80045b8:	4615      	mov	r5, r2
 80045ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80045be:	fb03 6711 	mls	r7, r3, r1, r6
 80045c2:	5dc7      	ldrb	r7, [r0, r7]
 80045c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045c8:	4637      	mov	r7, r6
 80045ca:	42bb      	cmp	r3, r7
 80045cc:	460e      	mov	r6, r1
 80045ce:	d9f4      	bls.n	80045ba <_printf_i+0x116>
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d10b      	bne.n	80045ec <_printf_i+0x148>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	07de      	lsls	r6, r3, #31
 80045d8:	d508      	bpl.n	80045ec <_printf_i+0x148>
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	6861      	ldr	r1, [r4, #4]
 80045de:	4299      	cmp	r1, r3
 80045e0:	bfde      	ittt	le
 80045e2:	2330      	movle	r3, #48	; 0x30
 80045e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80045ec:	1b52      	subs	r2, r2, r5
 80045ee:	6122      	str	r2, [r4, #16]
 80045f0:	f8cd a000 	str.w	sl, [sp]
 80045f4:	464b      	mov	r3, r9
 80045f6:	aa03      	add	r2, sp, #12
 80045f8:	4621      	mov	r1, r4
 80045fa:	4640      	mov	r0, r8
 80045fc:	f7ff fee4 	bl	80043c8 <_printf_common>
 8004600:	3001      	adds	r0, #1
 8004602:	d14a      	bne.n	800469a <_printf_i+0x1f6>
 8004604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004608:	b004      	add	sp, #16
 800460a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	f043 0320 	orr.w	r3, r3, #32
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	4833      	ldr	r0, [pc, #204]	; (80046e4 <_printf_i+0x240>)
 8004618:	2778      	movs	r7, #120	; 0x78
 800461a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	6829      	ldr	r1, [r5, #0]
 8004622:	061f      	lsls	r7, r3, #24
 8004624:	f851 6b04 	ldr.w	r6, [r1], #4
 8004628:	d402      	bmi.n	8004630 <_printf_i+0x18c>
 800462a:	065f      	lsls	r7, r3, #25
 800462c:	bf48      	it	mi
 800462e:	b2b6      	uxthmi	r6, r6
 8004630:	07df      	lsls	r7, r3, #31
 8004632:	bf48      	it	mi
 8004634:	f043 0320 	orrmi.w	r3, r3, #32
 8004638:	6029      	str	r1, [r5, #0]
 800463a:	bf48      	it	mi
 800463c:	6023      	strmi	r3, [r4, #0]
 800463e:	b91e      	cbnz	r6, 8004648 <_printf_i+0x1a4>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	f023 0320 	bic.w	r3, r3, #32
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	2310      	movs	r3, #16
 800464a:	e7a7      	b.n	800459c <_printf_i+0xf8>
 800464c:	4824      	ldr	r0, [pc, #144]	; (80046e0 <_printf_i+0x23c>)
 800464e:	e7e4      	b.n	800461a <_printf_i+0x176>
 8004650:	4615      	mov	r5, r2
 8004652:	e7bd      	b.n	80045d0 <_printf_i+0x12c>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	6826      	ldr	r6, [r4, #0]
 8004658:	6961      	ldr	r1, [r4, #20]
 800465a:	1d18      	adds	r0, r3, #4
 800465c:	6028      	str	r0, [r5, #0]
 800465e:	0635      	lsls	r5, r6, #24
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	d501      	bpl.n	8004668 <_printf_i+0x1c4>
 8004664:	6019      	str	r1, [r3, #0]
 8004666:	e002      	b.n	800466e <_printf_i+0x1ca>
 8004668:	0670      	lsls	r0, r6, #25
 800466a:	d5fb      	bpl.n	8004664 <_printf_i+0x1c0>
 800466c:	8019      	strh	r1, [r3, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	4615      	mov	r5, r2
 8004674:	e7bc      	b.n	80045f0 <_printf_i+0x14c>
 8004676:	682b      	ldr	r3, [r5, #0]
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	602a      	str	r2, [r5, #0]
 800467c:	681d      	ldr	r5, [r3, #0]
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	2100      	movs	r1, #0
 8004682:	4628      	mov	r0, r5
 8004684:	f7fb fda4 	bl	80001d0 <memchr>
 8004688:	b108      	cbz	r0, 800468e <_printf_i+0x1ea>
 800468a:	1b40      	subs	r0, r0, r5
 800468c:	6060      	str	r0, [r4, #4]
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	2300      	movs	r3, #0
 8004694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004698:	e7aa      	b.n	80045f0 <_printf_i+0x14c>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	462a      	mov	r2, r5
 800469e:	4649      	mov	r1, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	47d0      	blx	sl
 80046a4:	3001      	adds	r0, #1
 80046a6:	d0ad      	beq.n	8004604 <_printf_i+0x160>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	079b      	lsls	r3, r3, #30
 80046ac:	d413      	bmi.n	80046d6 <_printf_i+0x232>
 80046ae:	68e0      	ldr	r0, [r4, #12]
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	4298      	cmp	r0, r3
 80046b4:	bfb8      	it	lt
 80046b6:	4618      	movlt	r0, r3
 80046b8:	e7a6      	b.n	8004608 <_printf_i+0x164>
 80046ba:	2301      	movs	r3, #1
 80046bc:	4632      	mov	r2, r6
 80046be:	4649      	mov	r1, r9
 80046c0:	4640      	mov	r0, r8
 80046c2:	47d0      	blx	sl
 80046c4:	3001      	adds	r0, #1
 80046c6:	d09d      	beq.n	8004604 <_printf_i+0x160>
 80046c8:	3501      	adds	r5, #1
 80046ca:	68e3      	ldr	r3, [r4, #12]
 80046cc:	9903      	ldr	r1, [sp, #12]
 80046ce:	1a5b      	subs	r3, r3, r1
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	dcf2      	bgt.n	80046ba <_printf_i+0x216>
 80046d4:	e7eb      	b.n	80046ae <_printf_i+0x20a>
 80046d6:	2500      	movs	r5, #0
 80046d8:	f104 0619 	add.w	r6, r4, #25
 80046dc:	e7f5      	b.n	80046ca <_printf_i+0x226>
 80046de:	bf00      	nop
 80046e0:	08004ddd 	.word	0x08004ddd
 80046e4:	08004dee 	.word	0x08004dee

080046e8 <__sflush_r>:
 80046e8:	898a      	ldrh	r2, [r1, #12]
 80046ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ee:	4605      	mov	r5, r0
 80046f0:	0710      	lsls	r0, r2, #28
 80046f2:	460c      	mov	r4, r1
 80046f4:	d458      	bmi.n	80047a8 <__sflush_r+0xc0>
 80046f6:	684b      	ldr	r3, [r1, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	dc05      	bgt.n	8004708 <__sflush_r+0x20>
 80046fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	dc02      	bgt.n	8004708 <__sflush_r+0x20>
 8004702:	2000      	movs	r0, #0
 8004704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800470a:	2e00      	cmp	r6, #0
 800470c:	d0f9      	beq.n	8004702 <__sflush_r+0x1a>
 800470e:	2300      	movs	r3, #0
 8004710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004714:	682f      	ldr	r7, [r5, #0]
 8004716:	6a21      	ldr	r1, [r4, #32]
 8004718:	602b      	str	r3, [r5, #0]
 800471a:	d032      	beq.n	8004782 <__sflush_r+0x9a>
 800471c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	075a      	lsls	r2, r3, #29
 8004722:	d505      	bpl.n	8004730 <__sflush_r+0x48>
 8004724:	6863      	ldr	r3, [r4, #4]
 8004726:	1ac0      	subs	r0, r0, r3
 8004728:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800472a:	b10b      	cbz	r3, 8004730 <__sflush_r+0x48>
 800472c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800472e:	1ac0      	subs	r0, r0, r3
 8004730:	2300      	movs	r3, #0
 8004732:	4602      	mov	r2, r0
 8004734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004736:	6a21      	ldr	r1, [r4, #32]
 8004738:	4628      	mov	r0, r5
 800473a:	47b0      	blx	r6
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	d106      	bne.n	8004750 <__sflush_r+0x68>
 8004742:	6829      	ldr	r1, [r5, #0]
 8004744:	291d      	cmp	r1, #29
 8004746:	d82b      	bhi.n	80047a0 <__sflush_r+0xb8>
 8004748:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <__sflush_r+0x108>)
 800474a:	410a      	asrs	r2, r1
 800474c:	07d6      	lsls	r6, r2, #31
 800474e:	d427      	bmi.n	80047a0 <__sflush_r+0xb8>
 8004750:	2200      	movs	r2, #0
 8004752:	6062      	str	r2, [r4, #4]
 8004754:	04d9      	lsls	r1, r3, #19
 8004756:	6922      	ldr	r2, [r4, #16]
 8004758:	6022      	str	r2, [r4, #0]
 800475a:	d504      	bpl.n	8004766 <__sflush_r+0x7e>
 800475c:	1c42      	adds	r2, r0, #1
 800475e:	d101      	bne.n	8004764 <__sflush_r+0x7c>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b903      	cbnz	r3, 8004766 <__sflush_r+0x7e>
 8004764:	6560      	str	r0, [r4, #84]	; 0x54
 8004766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004768:	602f      	str	r7, [r5, #0]
 800476a:	2900      	cmp	r1, #0
 800476c:	d0c9      	beq.n	8004702 <__sflush_r+0x1a>
 800476e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004772:	4299      	cmp	r1, r3
 8004774:	d002      	beq.n	800477c <__sflush_r+0x94>
 8004776:	4628      	mov	r0, r5
 8004778:	f7ff fbea 	bl	8003f50 <_free_r>
 800477c:	2000      	movs	r0, #0
 800477e:	6360      	str	r0, [r4, #52]	; 0x34
 8004780:	e7c0      	b.n	8004704 <__sflush_r+0x1c>
 8004782:	2301      	movs	r3, #1
 8004784:	4628      	mov	r0, r5
 8004786:	47b0      	blx	r6
 8004788:	1c41      	adds	r1, r0, #1
 800478a:	d1c8      	bne.n	800471e <__sflush_r+0x36>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0c5      	beq.n	800471e <__sflush_r+0x36>
 8004792:	2b1d      	cmp	r3, #29
 8004794:	d001      	beq.n	800479a <__sflush_r+0xb2>
 8004796:	2b16      	cmp	r3, #22
 8004798:	d101      	bne.n	800479e <__sflush_r+0xb6>
 800479a:	602f      	str	r7, [r5, #0]
 800479c:	e7b1      	b.n	8004702 <__sflush_r+0x1a>
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a4:	81a3      	strh	r3, [r4, #12]
 80047a6:	e7ad      	b.n	8004704 <__sflush_r+0x1c>
 80047a8:	690f      	ldr	r7, [r1, #16]
 80047aa:	2f00      	cmp	r7, #0
 80047ac:	d0a9      	beq.n	8004702 <__sflush_r+0x1a>
 80047ae:	0793      	lsls	r3, r2, #30
 80047b0:	680e      	ldr	r6, [r1, #0]
 80047b2:	bf08      	it	eq
 80047b4:	694b      	ldreq	r3, [r1, #20]
 80047b6:	600f      	str	r7, [r1, #0]
 80047b8:	bf18      	it	ne
 80047ba:	2300      	movne	r3, #0
 80047bc:	eba6 0807 	sub.w	r8, r6, r7
 80047c0:	608b      	str	r3, [r1, #8]
 80047c2:	f1b8 0f00 	cmp.w	r8, #0
 80047c6:	dd9c      	ble.n	8004702 <__sflush_r+0x1a>
 80047c8:	6a21      	ldr	r1, [r4, #32]
 80047ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047cc:	4643      	mov	r3, r8
 80047ce:	463a      	mov	r2, r7
 80047d0:	4628      	mov	r0, r5
 80047d2:	47b0      	blx	r6
 80047d4:	2800      	cmp	r0, #0
 80047d6:	dc06      	bgt.n	80047e6 <__sflush_r+0xfe>
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047de:	81a3      	strh	r3, [r4, #12]
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047e4:	e78e      	b.n	8004704 <__sflush_r+0x1c>
 80047e6:	4407      	add	r7, r0
 80047e8:	eba8 0800 	sub.w	r8, r8, r0
 80047ec:	e7e9      	b.n	80047c2 <__sflush_r+0xda>
 80047ee:	bf00      	nop
 80047f0:	dfbffffe 	.word	0xdfbffffe

080047f4 <_fflush_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	690b      	ldr	r3, [r1, #16]
 80047f8:	4605      	mov	r5, r0
 80047fa:	460c      	mov	r4, r1
 80047fc:	b913      	cbnz	r3, 8004804 <_fflush_r+0x10>
 80047fe:	2500      	movs	r5, #0
 8004800:	4628      	mov	r0, r5
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	b118      	cbz	r0, 800480e <_fflush_r+0x1a>
 8004806:	6a03      	ldr	r3, [r0, #32]
 8004808:	b90b      	cbnz	r3, 800480e <_fflush_r+0x1a>
 800480a:	f7ff fa93 	bl	8003d34 <__sinit>
 800480e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f3      	beq.n	80047fe <_fflush_r+0xa>
 8004816:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004818:	07d0      	lsls	r0, r2, #31
 800481a:	d404      	bmi.n	8004826 <_fflush_r+0x32>
 800481c:	0599      	lsls	r1, r3, #22
 800481e:	d402      	bmi.n	8004826 <_fflush_r+0x32>
 8004820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004822:	f7ff fb93 	bl	8003f4c <__retarget_lock_acquire_recursive>
 8004826:	4628      	mov	r0, r5
 8004828:	4621      	mov	r1, r4
 800482a:	f7ff ff5d 	bl	80046e8 <__sflush_r>
 800482e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004830:	07da      	lsls	r2, r3, #31
 8004832:	4605      	mov	r5, r0
 8004834:	d4e4      	bmi.n	8004800 <_fflush_r+0xc>
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	059b      	lsls	r3, r3, #22
 800483a:	d4e1      	bmi.n	8004800 <_fflush_r+0xc>
 800483c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800483e:	f7ff fb86 	bl	8003f4e <__retarget_lock_release_recursive>
 8004842:	e7dd      	b.n	8004800 <_fflush_r+0xc>

08004844 <_putc_r>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	460d      	mov	r5, r1
 8004848:	4614      	mov	r4, r2
 800484a:	4606      	mov	r6, r0
 800484c:	b118      	cbz	r0, 8004856 <_putc_r+0x12>
 800484e:	6a03      	ldr	r3, [r0, #32]
 8004850:	b90b      	cbnz	r3, 8004856 <_putc_r+0x12>
 8004852:	f7ff fa6f 	bl	8003d34 <__sinit>
 8004856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004858:	07d8      	lsls	r0, r3, #31
 800485a:	d405      	bmi.n	8004868 <_putc_r+0x24>
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	0599      	lsls	r1, r3, #22
 8004860:	d402      	bmi.n	8004868 <_putc_r+0x24>
 8004862:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004864:	f7ff fb72 	bl	8003f4c <__retarget_lock_acquire_recursive>
 8004868:	68a3      	ldr	r3, [r4, #8]
 800486a:	3b01      	subs	r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	60a3      	str	r3, [r4, #8]
 8004870:	da05      	bge.n	800487e <_putc_r+0x3a>
 8004872:	69a2      	ldr	r2, [r4, #24]
 8004874:	4293      	cmp	r3, r2
 8004876:	db12      	blt.n	800489e <_putc_r+0x5a>
 8004878:	b2eb      	uxtb	r3, r5
 800487a:	2b0a      	cmp	r3, #10
 800487c:	d00f      	beq.n	800489e <_putc_r+0x5a>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	6022      	str	r2, [r4, #0]
 8004884:	701d      	strb	r5, [r3, #0]
 8004886:	b2ed      	uxtb	r5, r5
 8004888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800488a:	07da      	lsls	r2, r3, #31
 800488c:	d405      	bmi.n	800489a <_putc_r+0x56>
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	059b      	lsls	r3, r3, #22
 8004892:	d402      	bmi.n	800489a <_putc_r+0x56>
 8004894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004896:	f7ff fb5a 	bl	8003f4e <__retarget_lock_release_recursive>
 800489a:	4628      	mov	r0, r5
 800489c:	bd70      	pop	{r4, r5, r6, pc}
 800489e:	4629      	mov	r1, r5
 80048a0:	4622      	mov	r2, r4
 80048a2:	4630      	mov	r0, r6
 80048a4:	f000 f802 	bl	80048ac <__swbuf_r>
 80048a8:	4605      	mov	r5, r0
 80048aa:	e7ed      	b.n	8004888 <_putc_r+0x44>

080048ac <__swbuf_r>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	460e      	mov	r6, r1
 80048b0:	4614      	mov	r4, r2
 80048b2:	4605      	mov	r5, r0
 80048b4:	b118      	cbz	r0, 80048be <__swbuf_r+0x12>
 80048b6:	6a03      	ldr	r3, [r0, #32]
 80048b8:	b90b      	cbnz	r3, 80048be <__swbuf_r+0x12>
 80048ba:	f7ff fa3b 	bl	8003d34 <__sinit>
 80048be:	69a3      	ldr	r3, [r4, #24]
 80048c0:	60a3      	str	r3, [r4, #8]
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	071a      	lsls	r2, r3, #28
 80048c6:	d525      	bpl.n	8004914 <__swbuf_r+0x68>
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	b31b      	cbz	r3, 8004914 <__swbuf_r+0x68>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	6922      	ldr	r2, [r4, #16]
 80048d0:	1a98      	subs	r0, r3, r2
 80048d2:	6963      	ldr	r3, [r4, #20]
 80048d4:	b2f6      	uxtb	r6, r6
 80048d6:	4283      	cmp	r3, r0
 80048d8:	4637      	mov	r7, r6
 80048da:	dc04      	bgt.n	80048e6 <__swbuf_r+0x3a>
 80048dc:	4621      	mov	r1, r4
 80048de:	4628      	mov	r0, r5
 80048e0:	f7ff ff88 	bl	80047f4 <_fflush_r>
 80048e4:	b9e0      	cbnz	r0, 8004920 <__swbuf_r+0x74>
 80048e6:	68a3      	ldr	r3, [r4, #8]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	60a3      	str	r3, [r4, #8]
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	6022      	str	r2, [r4, #0]
 80048f2:	701e      	strb	r6, [r3, #0]
 80048f4:	6962      	ldr	r2, [r4, #20]
 80048f6:	1c43      	adds	r3, r0, #1
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d004      	beq.n	8004906 <__swbuf_r+0x5a>
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	07db      	lsls	r3, r3, #31
 8004900:	d506      	bpl.n	8004910 <__swbuf_r+0x64>
 8004902:	2e0a      	cmp	r6, #10
 8004904:	d104      	bne.n	8004910 <__swbuf_r+0x64>
 8004906:	4621      	mov	r1, r4
 8004908:	4628      	mov	r0, r5
 800490a:	f7ff ff73 	bl	80047f4 <_fflush_r>
 800490e:	b938      	cbnz	r0, 8004920 <__swbuf_r+0x74>
 8004910:	4638      	mov	r0, r7
 8004912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004914:	4621      	mov	r1, r4
 8004916:	4628      	mov	r0, r5
 8004918:	f000 f806 	bl	8004928 <__swsetup_r>
 800491c:	2800      	cmp	r0, #0
 800491e:	d0d5      	beq.n	80048cc <__swbuf_r+0x20>
 8004920:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004924:	e7f4      	b.n	8004910 <__swbuf_r+0x64>
	...

08004928 <__swsetup_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4b2a      	ldr	r3, [pc, #168]	; (80049d4 <__swsetup_r+0xac>)
 800492c:	4605      	mov	r5, r0
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	460c      	mov	r4, r1
 8004932:	b118      	cbz	r0, 800493c <__swsetup_r+0x14>
 8004934:	6a03      	ldr	r3, [r0, #32]
 8004936:	b90b      	cbnz	r3, 800493c <__swsetup_r+0x14>
 8004938:	f7ff f9fc 	bl	8003d34 <__sinit>
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004942:	0718      	lsls	r0, r3, #28
 8004944:	d422      	bmi.n	800498c <__swsetup_r+0x64>
 8004946:	06d9      	lsls	r1, r3, #27
 8004948:	d407      	bmi.n	800495a <__swsetup_r+0x32>
 800494a:	2309      	movs	r3, #9
 800494c:	602b      	str	r3, [r5, #0]
 800494e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004952:	81a3      	strh	r3, [r4, #12]
 8004954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004958:	e034      	b.n	80049c4 <__swsetup_r+0x9c>
 800495a:	0758      	lsls	r0, r3, #29
 800495c:	d512      	bpl.n	8004984 <__swsetup_r+0x5c>
 800495e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004960:	b141      	cbz	r1, 8004974 <__swsetup_r+0x4c>
 8004962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004966:	4299      	cmp	r1, r3
 8004968:	d002      	beq.n	8004970 <__swsetup_r+0x48>
 800496a:	4628      	mov	r0, r5
 800496c:	f7ff faf0 	bl	8003f50 <_free_r>
 8004970:	2300      	movs	r3, #0
 8004972:	6363      	str	r3, [r4, #52]	; 0x34
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800497a:	81a3      	strh	r3, [r4, #12]
 800497c:	2300      	movs	r3, #0
 800497e:	6063      	str	r3, [r4, #4]
 8004980:	6923      	ldr	r3, [r4, #16]
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	f043 0308 	orr.w	r3, r3, #8
 800498a:	81a3      	strh	r3, [r4, #12]
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	b94b      	cbnz	r3, 80049a4 <__swsetup_r+0x7c>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499a:	d003      	beq.n	80049a4 <__swsetup_r+0x7c>
 800499c:	4621      	mov	r1, r4
 800499e:	4628      	mov	r0, r5
 80049a0:	f000 f850 	bl	8004a44 <__smakebuf_r>
 80049a4:	89a0      	ldrh	r0, [r4, #12]
 80049a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049aa:	f010 0301 	ands.w	r3, r0, #1
 80049ae:	d00a      	beq.n	80049c6 <__swsetup_r+0x9e>
 80049b0:	2300      	movs	r3, #0
 80049b2:	60a3      	str	r3, [r4, #8]
 80049b4:	6963      	ldr	r3, [r4, #20]
 80049b6:	425b      	negs	r3, r3
 80049b8:	61a3      	str	r3, [r4, #24]
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	b943      	cbnz	r3, 80049d0 <__swsetup_r+0xa8>
 80049be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049c2:	d1c4      	bne.n	800494e <__swsetup_r+0x26>
 80049c4:	bd38      	pop	{r3, r4, r5, pc}
 80049c6:	0781      	lsls	r1, r0, #30
 80049c8:	bf58      	it	pl
 80049ca:	6963      	ldrpl	r3, [r4, #20]
 80049cc:	60a3      	str	r3, [r4, #8]
 80049ce:	e7f4      	b.n	80049ba <__swsetup_r+0x92>
 80049d0:	2000      	movs	r0, #0
 80049d2:	e7f7      	b.n	80049c4 <__swsetup_r+0x9c>
 80049d4:	20000064 	.word	0x20000064

080049d8 <_sbrk_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4d06      	ldr	r5, [pc, #24]	; (80049f4 <_sbrk_r+0x1c>)
 80049dc:	2300      	movs	r3, #0
 80049de:	4604      	mov	r4, r0
 80049e0:	4608      	mov	r0, r1
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	f7fc fa3a 	bl	8000e5c <_sbrk>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_sbrk_r+0x1a>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_sbrk_r+0x1a>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	2000066c 	.word	0x2000066c

080049f8 <__swhatbuf_r>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	460c      	mov	r4, r1
 80049fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a00:	2900      	cmp	r1, #0
 8004a02:	b096      	sub	sp, #88	; 0x58
 8004a04:	4615      	mov	r5, r2
 8004a06:	461e      	mov	r6, r3
 8004a08:	da0d      	bge.n	8004a26 <__swhatbuf_r+0x2e>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	bf0c      	ite	eq
 8004a16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004a1a:	2340      	movne	r3, #64	; 0x40
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	6031      	str	r1, [r6, #0]
 8004a20:	602b      	str	r3, [r5, #0]
 8004a22:	b016      	add	sp, #88	; 0x58
 8004a24:	bd70      	pop	{r4, r5, r6, pc}
 8004a26:	466a      	mov	r2, sp
 8004a28:	f000 f848 	bl	8004abc <_fstat_r>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	dbec      	blt.n	8004a0a <__swhatbuf_r+0x12>
 8004a30:	9901      	ldr	r1, [sp, #4]
 8004a32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004a36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004a3a:	4259      	negs	r1, r3
 8004a3c:	4159      	adcs	r1, r3
 8004a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a42:	e7eb      	b.n	8004a1c <__swhatbuf_r+0x24>

08004a44 <__smakebuf_r>:
 8004a44:	898b      	ldrh	r3, [r1, #12]
 8004a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a48:	079d      	lsls	r5, r3, #30
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	d507      	bpl.n	8004a60 <__smakebuf_r+0x1c>
 8004a50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	6123      	str	r3, [r4, #16]
 8004a58:	2301      	movs	r3, #1
 8004a5a:	6163      	str	r3, [r4, #20]
 8004a5c:	b002      	add	sp, #8
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
 8004a60:	ab01      	add	r3, sp, #4
 8004a62:	466a      	mov	r2, sp
 8004a64:	f7ff ffc8 	bl	80049f8 <__swhatbuf_r>
 8004a68:	9900      	ldr	r1, [sp, #0]
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f7ff fadb 	bl	8004028 <_malloc_r>
 8004a72:	b948      	cbnz	r0, 8004a88 <__smakebuf_r+0x44>
 8004a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a78:	059a      	lsls	r2, r3, #22
 8004a7a:	d4ef      	bmi.n	8004a5c <__smakebuf_r+0x18>
 8004a7c:	f023 0303 	bic.w	r3, r3, #3
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	81a3      	strh	r3, [r4, #12]
 8004a86:	e7e3      	b.n	8004a50 <__smakebuf_r+0xc>
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	6020      	str	r0, [r4, #0]
 8004a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a90:	81a3      	strh	r3, [r4, #12]
 8004a92:	9b00      	ldr	r3, [sp, #0]
 8004a94:	6163      	str	r3, [r4, #20]
 8004a96:	9b01      	ldr	r3, [sp, #4]
 8004a98:	6120      	str	r0, [r4, #16]
 8004a9a:	b15b      	cbz	r3, 8004ab4 <__smakebuf_r+0x70>
 8004a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f000 f81d 	bl	8004ae0 <_isatty_r>
 8004aa6:	b128      	cbz	r0, 8004ab4 <__smakebuf_r+0x70>
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	431d      	orrs	r5, r3
 8004ab8:	81a5      	strh	r5, [r4, #12]
 8004aba:	e7cf      	b.n	8004a5c <__smakebuf_r+0x18>

08004abc <_fstat_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	4d07      	ldr	r5, [pc, #28]	; (8004adc <_fstat_r+0x20>)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	4608      	mov	r0, r1
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	602b      	str	r3, [r5, #0]
 8004aca:	f7fc f99e 	bl	8000e0a <_fstat>
 8004ace:	1c43      	adds	r3, r0, #1
 8004ad0:	d102      	bne.n	8004ad8 <_fstat_r+0x1c>
 8004ad2:	682b      	ldr	r3, [r5, #0]
 8004ad4:	b103      	cbz	r3, 8004ad8 <_fstat_r+0x1c>
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	bd38      	pop	{r3, r4, r5, pc}
 8004ada:	bf00      	nop
 8004adc:	2000066c 	.word	0x2000066c

08004ae0 <_isatty_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	4d06      	ldr	r5, [pc, #24]	; (8004afc <_isatty_r+0x1c>)
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	4608      	mov	r0, r1
 8004aea:	602b      	str	r3, [r5, #0]
 8004aec:	f7fc f99d 	bl	8000e2a <_isatty>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d102      	bne.n	8004afa <_isatty_r+0x1a>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	b103      	cbz	r3, 8004afa <_isatty_r+0x1a>
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	2000066c 	.word	0x2000066c

08004b00 <_init>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr

08004b0c <_fini>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	bf00      	nop
 8004b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b12:	bc08      	pop	{r3}
 8004b14:	469e      	mov	lr, r3
 8004b16:	4770      	bx	lr
